// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"gIM38":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"cZAbo"}],"cZAbo":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"lzEIu"}],"lzEIu":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function inject(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function onScheduleFiberRoot(id, root, children) {
                },
                onCommitFiberRoot: function onCommitFiberRoot(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function onCommitFiberUnmount() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type === "undefined" ? "undefined" : _helpers.typeOf(type)){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{"@swc/helpers":"cawJ1"}],"cawJ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyDecoratedDescriptor", ()=>_applyDecoratedDescriptorDefault.default
);
parcelHelpers.export(exports, "arrayWithHoles", ()=>_arrayWithHolesDefault.default
);
parcelHelpers.export(exports, "arrayWithoutHoles", ()=>_arrayWithoutHolesDefault.default
);
parcelHelpers.export(exports, "assertThisInitialized", ()=>_assertThisInitializedDefault.default
);
parcelHelpers.export(exports, "asyncGenerator", ()=>_asyncGeneratorDefault.default
);
parcelHelpers.export(exports, "asyncGeneratorDelegate", ()=>_asyncGeneratorDelegateDefault.default
);
parcelHelpers.export(exports, "asyncIterator", ()=>_asyncIteratorDefault.default
);
parcelHelpers.export(exports, "asyncToGenerator", ()=>_asyncToGeneratorDefault.default
);
parcelHelpers.export(exports, "awaitAsyncGenerator", ()=>_awaitAsyncGeneratorDefault.default
);
parcelHelpers.export(exports, "awaitValue", ()=>_awaitValueDefault.default
);
parcelHelpers.export(exports, "classCallCheck", ()=>_classCallCheckDefault.default
);
parcelHelpers.export(exports, "classNameTDZError", ()=>_classNameTdzErrorDefault.default
);
parcelHelpers.export(exports, "classPrivateFieldGet", ()=>_classPrivateFieldGetDefault.default
);
parcelHelpers.export(exports, "classPrivateFieldLooseBase", ()=>_classPrivateFieldLooseBaseDefault.default
);
parcelHelpers.export(exports, "classPrivateFieldSet", ()=>_classPrivateFieldSetDefault.default
);
parcelHelpers.export(exports, "classPrivateMethodGet", ()=>_classPrivateMethodGetDefault.default
);
parcelHelpers.export(exports, "classPrivateMethodSet", ()=>_classPrivateMethodSetDefault.default
);
parcelHelpers.export(exports, "classStaticPrivateFieldSpecGet", ()=>_classStaticPrivateFieldSpecGetDefault.default
);
parcelHelpers.export(exports, "classStaticPrivateFieldSpecSet", ()=>_classStaticPrivateFieldSpecSetDefault.default
);
parcelHelpers.export(exports, "construct", ()=>_constructDefault.default
);
parcelHelpers.export(exports, "createClass", ()=>_createClassDefault.default
);
parcelHelpers.export(exports, "decorate", ()=>_decorateDefault.default
);
parcelHelpers.export(exports, "defaults", ()=>_defaultsDefault.default
);
parcelHelpers.export(exports, "defineEnumerableProperties", ()=>_defineEnumerablePropertiesDefault.default
);
parcelHelpers.export(exports, "defineProperty", ()=>_definePropertyDefault.default
);
parcelHelpers.export(exports, "extends", ()=>_extendsDefault.default
);
parcelHelpers.export(exports, "get", ()=>_getDefault.default
);
parcelHelpers.export(exports, "getPrototypeOf", ()=>_getPrototypeOfDefault.default
);
parcelHelpers.export(exports, "inherits", ()=>_inheritsDefault.default
);
parcelHelpers.export(exports, "inheritsLoose", ()=>_inheritsLooseDefault.default
);
parcelHelpers.export(exports, "initializerDefineProperty", ()=>_initializerDefinePropertyDefault.default
);
parcelHelpers.export(exports, "initializerWarningHelper", ()=>_initializerWarningHelperDefault.default
);
parcelHelpers.export(exports, "_instanceof", ()=>_instanceofDefault.default
);
parcelHelpers.export(exports, "interopRequireDefault", ()=>_interopRequireDefaultDefault.default
);
parcelHelpers.export(exports, "interopRequireWildcard", ()=>_interopRequireWildcardDefault.default
);
parcelHelpers.export(exports, "isNativeFunction", ()=>_isNativeFunctionDefault.default
);
parcelHelpers.export(exports, "iterableToArray", ()=>_iterableToArrayDefault.default
);
parcelHelpers.export(exports, "iterableToArrayLimit", ()=>_iterableToArrayLimitDefault.default
);
parcelHelpers.export(exports, "iterableToArrayLimitLoose", ()=>_iterableToArrayLimitLooseDefault.default
);
parcelHelpers.export(exports, "jsx", ()=>_jsxDefault.default
);
parcelHelpers.export(exports, "newArrowCheck", ()=>_newArrowCheckDefault.default
);
parcelHelpers.export(exports, "nonIterableRest", ()=>_nonIterableRestDefault.default
);
parcelHelpers.export(exports, "nonIterableSpread", ()=>_nonIterableSpreadDefault.default
);
parcelHelpers.export(exports, "objectSpread", ()=>_objectSpreadDefault.default
);
parcelHelpers.export(exports, "objectWithoutProperties", ()=>_objectWithoutPropertiesDefault.default
);
parcelHelpers.export(exports, "objectWithoutPropertiesLoose", ()=>_objectWithoutPropertiesLooseDefault.default
);
parcelHelpers.export(exports, "possibleConstructorReturn", ()=>_possibleConstructorReturnDefault.default
);
parcelHelpers.export(exports, "readOnlyError", ()=>_readOnlyErrorDefault.default
);
parcelHelpers.export(exports, "set", ()=>_setDefault.default
);
parcelHelpers.export(exports, "setPrototypeOf", ()=>_setPrototypeOfDefault.default
);
parcelHelpers.export(exports, "skipFirstGeneratorNext", ()=>_skipFirstGeneratorNextDefault.default
);
parcelHelpers.export(exports, "slicedToArray", ()=>_slicedToArrayDefault.default
);
parcelHelpers.export(exports, "slicedToArrayLoose", ()=>_slicedToArrayLooseDefault.default
);
parcelHelpers.export(exports, "superPropBase", ()=>_superPropBaseDefault.default
);
parcelHelpers.export(exports, "taggedTemplateLiteral", ()=>_taggedTemplateLiteralDefault.default
);
parcelHelpers.export(exports, "taggedTemplateLiteralLoose", ()=>_taggedTemplateLiteralLooseDefault.default
);
parcelHelpers.export(exports, "_throw", ()=>_throwDefault.default
);
parcelHelpers.export(exports, "toArray", ()=>_toArrayDefault.default
);
parcelHelpers.export(exports, "toConsumableArray", ()=>_toConsumableArrayDefault.default
);
parcelHelpers.export(exports, "toPrimitive", ()=>_toPrimitiveDefault.default
);
parcelHelpers.export(exports, "toPropertyKey", ()=>_toPropertyKeyDefault.default
);
parcelHelpers.export(exports, "typeOf", ()=>_typeOfDefault.default
);
parcelHelpers.export(exports, "wrapAsyncGenerator", ()=>_wrapAsyncGeneratorDefault.default
);
parcelHelpers.export(exports, "wrapNativeSuper", ()=>_wrapNativeSuperDefault.default
);
parcelHelpers.export(exports, "createSuper", ()=>_createSuperDefault.default
);
parcelHelpers.export(exports, "isNativeReflectConstruct", ()=>_isNativeReflectConstructDefault.default
);
var _applyDecoratedDescriptor = require("./_apply_decorated_descriptor");
var _applyDecoratedDescriptorDefault = parcelHelpers.interopDefault(_applyDecoratedDescriptor);
var _arrayWithHoles = require("./_array_with_holes");
var _arrayWithHolesDefault = parcelHelpers.interopDefault(_arrayWithHoles);
var _arrayWithoutHoles = require("./_array_without_holes");
var _arrayWithoutHolesDefault = parcelHelpers.interopDefault(_arrayWithoutHoles);
var _assertThisInitialized = require("./_assert_this_initialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _asyncGenerator = require("./_async_generator");
var _asyncGeneratorDefault = parcelHelpers.interopDefault(_asyncGenerator);
var _asyncGeneratorDelegate = require("./_async_generator_delegate");
var _asyncGeneratorDelegateDefault = parcelHelpers.interopDefault(_asyncGeneratorDelegate);
var _asyncIterator = require("./_async_iterator");
var _asyncIteratorDefault = parcelHelpers.interopDefault(_asyncIterator);
var _asyncToGenerator = require("./_async_to_generator");
var _asyncToGeneratorDefault = parcelHelpers.interopDefault(_asyncToGenerator);
var _awaitAsyncGenerator = require("./_await_async_generator");
var _awaitAsyncGeneratorDefault = parcelHelpers.interopDefault(_awaitAsyncGenerator);
var _awaitValue = require("./_await_value");
var _awaitValueDefault = parcelHelpers.interopDefault(_awaitValue);
var _classCallCheck = require("./_class_call_check");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _classNameTdzError = require("./_class_name_tdz_error");
var _classNameTdzErrorDefault = parcelHelpers.interopDefault(_classNameTdzError);
var _classPrivateFieldGet = require("./_class_private_field_get");
var _classPrivateFieldGetDefault = parcelHelpers.interopDefault(_classPrivateFieldGet);
var _classPrivateFieldLooseBase = require("./_class_private_field_loose_base");
var _classPrivateFieldLooseBaseDefault = parcelHelpers.interopDefault(_classPrivateFieldLooseBase);
var _classPrivateFieldSet = require("./_class_private_field_set");
var _classPrivateFieldSetDefault = parcelHelpers.interopDefault(_classPrivateFieldSet);
var _classPrivateMethodGet = require("./_class_private_method_get");
var _classPrivateMethodGetDefault = parcelHelpers.interopDefault(_classPrivateMethodGet);
var _classPrivateMethodSet = require("./_class_private_method_set");
var _classPrivateMethodSetDefault = parcelHelpers.interopDefault(_classPrivateMethodSet);
var _classStaticPrivateFieldSpecGet = require("./_class_static_private_field_spec_get");
var _classStaticPrivateFieldSpecGetDefault = parcelHelpers.interopDefault(_classStaticPrivateFieldSpecGet);
var _classStaticPrivateFieldSpecSet = require("./_class_static_private_field_spec_set");
var _classStaticPrivateFieldSpecSetDefault = parcelHelpers.interopDefault(_classStaticPrivateFieldSpecSet);
var _construct = require("./_construct");
var _constructDefault = parcelHelpers.interopDefault(_construct);
var _createClass = require("./_create_class");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _decorate = require("./_decorate");
var _decorateDefault = parcelHelpers.interopDefault(_decorate);
var _defaults = require("./_defaults");
var _defaultsDefault = parcelHelpers.interopDefault(_defaults);
var _defineEnumerableProperties = require("./_define_enumerable_properties");
var _defineEnumerablePropertiesDefault = parcelHelpers.interopDefault(_defineEnumerableProperties);
var _defineProperty = require("./_define_property");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("./_extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _get = require("./_get");
var _getDefault = parcelHelpers.interopDefault(_get);
var _getPrototypeOf = require("./_get_prototype_of");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _inherits = require("./_inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _inheritsLoose = require("./_inherits_loose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _initializerDefineProperty = require("./_initializer_define_property");
var _initializerDefinePropertyDefault = parcelHelpers.interopDefault(_initializerDefineProperty);
var _initializerWarningHelper = require("./_initializer_warning_helper");
var _initializerWarningHelperDefault = parcelHelpers.interopDefault(_initializerWarningHelper);
var _instanceof = require("./_instanceof");
var _instanceofDefault = parcelHelpers.interopDefault(_instanceof);
var _interopRequireDefault = require("./_interop_require_default");
var _interopRequireDefaultDefault = parcelHelpers.interopDefault(_interopRequireDefault);
var _interopRequireWildcard = require("./_interop_require_wildcard");
var _interopRequireWildcardDefault = parcelHelpers.interopDefault(_interopRequireWildcard);
var _isNativeFunction = require("./_is_native_function");
var _isNativeFunctionDefault = parcelHelpers.interopDefault(_isNativeFunction);
var _iterableToArray = require("./_iterable_to_array");
var _iterableToArrayDefault = parcelHelpers.interopDefault(_iterableToArray);
var _iterableToArrayLimit = require("./_iterable_to_array_limit");
var _iterableToArrayLimitDefault = parcelHelpers.interopDefault(_iterableToArrayLimit);
var _iterableToArrayLimitLoose = require("./_iterable_to_array_limit_loose");
var _iterableToArrayLimitLooseDefault = parcelHelpers.interopDefault(_iterableToArrayLimitLoose);
var _jsx = require("./_jsx");
var _jsxDefault = parcelHelpers.interopDefault(_jsx);
var _newArrowCheck = require("./_new_arrow_check");
var _newArrowCheckDefault = parcelHelpers.interopDefault(_newArrowCheck);
var _nonIterableRest = require("./_non_iterable_rest");
var _nonIterableRestDefault = parcelHelpers.interopDefault(_nonIterableRest);
var _nonIterableSpread = require("./_non_iterable_spread");
var _nonIterableSpreadDefault = parcelHelpers.interopDefault(_nonIterableSpread);
var _objectSpread = require("./_object_spread");
var _objectSpreadDefault = parcelHelpers.interopDefault(_objectSpread);
var _objectWithoutProperties = require("./_object_without_properties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _objectWithoutPropertiesLoose = require("./_object_without_properties_loose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _possibleConstructorReturn = require("./_possible_constructor_return");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _readOnlyError = require("./_read_only_error");
var _readOnlyErrorDefault = parcelHelpers.interopDefault(_readOnlyError);
var _set = require("./_set");
var _setDefault = parcelHelpers.interopDefault(_set);
var _setPrototypeOf = require("./_set_prototype_of");
var _setPrototypeOfDefault = parcelHelpers.interopDefault(_setPrototypeOf);
var _skipFirstGeneratorNext = require("./_skip_first_generator_next");
var _skipFirstGeneratorNextDefault = parcelHelpers.interopDefault(_skipFirstGeneratorNext);
var _slicedToArray = require("./_sliced_to_array");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _slicedToArrayLoose = require("./_sliced_to_array_loose");
var _slicedToArrayLooseDefault = parcelHelpers.interopDefault(_slicedToArrayLoose);
var _superPropBase = require("./_super_prop_base");
var _superPropBaseDefault = parcelHelpers.interopDefault(_superPropBase);
var _taggedTemplateLiteral = require("./_tagged_template_literal");
var _taggedTemplateLiteralDefault = parcelHelpers.interopDefault(_taggedTemplateLiteral);
var _taggedTemplateLiteralLoose = require("./_tagged_template_literal_loose");
var _taggedTemplateLiteralLooseDefault = parcelHelpers.interopDefault(_taggedTemplateLiteralLoose);
var _throw = require("./_throw");
var _throwDefault = parcelHelpers.interopDefault(_throw);
var _toArray = require("./_to_array");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _toConsumableArray = require("./_to_consumable_array");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _toPrimitive = require("./_to_primitive");
var _toPrimitiveDefault = parcelHelpers.interopDefault(_toPrimitive);
var _toPropertyKey = require("./_to_property_key");
var _toPropertyKeyDefault = parcelHelpers.interopDefault(_toPropertyKey);
var _typeOf = require("./_type_of");
var _typeOfDefault = parcelHelpers.interopDefault(_typeOf);
var _wrapAsyncGenerator = require("./_wrap_async_generator");
var _wrapAsyncGeneratorDefault = parcelHelpers.interopDefault(_wrapAsyncGenerator);
var _wrapNativeSuper = require("./_wrap_native_super");
var _wrapNativeSuperDefault = parcelHelpers.interopDefault(_wrapNativeSuper);
var _createSuper = require("./_create_super");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _isNativeReflectConstruct = require("./_is_native_reflect_construct");
var _isNativeReflectConstructDefault = parcelHelpers.interopDefault(_isNativeReflectConstruct);

},{"./_apply_decorated_descriptor":"f5BbJ","./_array_with_holes":"2MTcZ","./_array_without_holes":"1QzJn","./_assert_this_initialized":"ksAaa","./_async_generator":"lEqUv","./_async_generator_delegate":"ceeO1","./_async_iterator":"OE9RY","./_async_to_generator":"fpJLx","./_await_async_generator":"dncE5","./_await_value":"dbRXh","./_class_call_check":"7cFWj","./_class_name_tdz_error":"7XNs8","./_class_private_field_get":"6CK80","./_class_private_field_loose_base":"hQQCG","./_class_private_field_set":"hgYLW","./_class_private_method_get":"10bpc","./_class_private_method_set":"hoeuE","./_class_static_private_field_spec_get":"kXoyc","./_class_static_private_field_spec_set":"iJ8SS","./_construct":"kfYF0","./_create_class":"2qFyh","./_decorate":"d58U9","./_defaults":"iPPLs","./_define_enumerable_properties":"4NlVr","./_define_property":"8olmo","./_extends":"5PGhC","./_get":"3PaKX","./_get_prototype_of":"2Zsfp","./_inherits":"9qeli","./_inherits_loose":"kztAT","./_initializer_define_property":"lnq75","./_initializer_warning_helper":"3NUsN","./_instanceof":"2JhSw","./_interop_require_default":"eiJ1c","./_interop_require_wildcard":"iOVzs","./_is_native_function":"idR0T","./_iterable_to_array":"dhIzq","./_iterable_to_array_limit":"RGO9K","./_iterable_to_array_limit_loose":"3nvhH","./_jsx":"3uNfn","./_new_arrow_check":"4Qtp8","./_non_iterable_rest":"g2hQd","./_non_iterable_spread":"96MFq","./_object_spread":"lHkyr","./_object_without_properties":"5JnNA","./_object_without_properties_loose":"2Gal1","./_possible_constructor_return":"Y8Wti","./_read_only_error":"d4VBy","./_set":"cXwLF","./_set_prototype_of":"htg5d","./_skip_first_generator_next":"dbdcV","./_sliced_to_array":"jF6vr","./_sliced_to_array_loose":"hMbt7","./_super_prop_base":"knWLD","./_tagged_template_literal":"5JjXP","./_tagged_template_literal_loose":"fyqOu","./_throw":"96osi","./_to_array":"bryXe","./_to_consumable_array":"aQIls","./_to_primitive":"a2TEU","./_to_property_key":"g8UAa","./_type_of":"6Rob7","./_wrap_async_generator":"6wD59","./_wrap_native_super":"c0gJL","./_create_super":"4tUnB","./_is_native_reflect_construct":"e73cJ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"f5BbJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc1 = {
    };
    Object["keys"](descriptor).forEach(function(key) {
        desc1[key] = descriptor[key];
    });
    desc1.enumerable = !!desc1.enumerable;
    desc1.configurable = !!desc1.configurable;
    if ('value' in desc1 || desc1.initializer) desc1.writable = true;
    desc1 = decorators.slice().reverse().reduce(function(desc, decorator) {
        return decorator ? decorator(target, property, desc) || desc : desc;
    }, desc1);
    if (context && desc1.initializer !== void 0) {
        desc1.value = desc1.initializer ? desc1.initializer.call(context) : void 0;
        desc1.initializer = undefined;
    }
    if (desc1.initializer === void 0) {
        Object["defineProperty"](target, property, desc1);
        desc1 = null;
    }
    return desc1;
}
exports.default = _applyDecoratedDescriptor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"B6NKQ":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function get() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"2MTcZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
exports.default = _arrayWithHoles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1QzJn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    }
}
exports.default = _arrayWithoutHoles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ksAaa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lEqUv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _awaitValue = require("./_await_value");
var _awaitValueDefault = parcelHelpers.interopDefault(_awaitValue);
function AsyncGenerator(gen) {
    var front, back;
    function send(key, arg) {
        return new Promise(function(resolve, reject) {
            var request = {
                key: key,
                arg: arg,
                resolve: resolve,
                reject: reject,
                next: null
            };
            if (back) back = back.next = request;
            else {
                front = back = request;
                resume(key, arg);
            }
        });
    }
    function resume(key, arg1) {
        try {
            var result = gen[key](arg1);
            var value = result.value;
            var wrappedAwait = value instanceof _awaitValueDefault.default;
            Promise.resolve(wrappedAwait ? value.wrapped : value).then(function(arg) {
                if (wrappedAwait) {
                    resume("next", arg);
                    return;
                }
                settle(result.done ? "return" : "normal", arg);
            }, function(err) {
                resume("throw", err);
            });
        } catch (err) {
            settle("throw", err);
        }
    }
    function settle(type, value) {
        switch(type){
            case "return":
                front.resolve({
                    value: value,
                    done: true
                });
                break;
            case "throw":
                front.reject(value);
                break;
            default:
                front.resolve({
                    value: value,
                    done: false
                });
                break;
        }
        front = front.next;
        if (front) resume(front.key, front.arg);
        else back = null;
    }
    this._invoke = send;
    if (typeof gen.return !== "function") this.return = undefined;
}
exports.default = AsyncGenerator;
if (typeof Symbol === "function" && Symbol.asyncIterator) AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
    return this;
};
AsyncGenerator.prototype.next = function(arg) {
    return this._invoke("next", arg);
};
AsyncGenerator.prototype.throw = function(arg) {
    return this._invoke("throw", arg);
};
AsyncGenerator.prototype.return = function(arg) {
    return this._invoke("return", arg);
};

},{"./_await_value":"dbRXh","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dbRXh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _AwaitValue(value) {
    this.wrapped = value;
}
exports.default = _AwaitValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ceeO1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {
    }, waiting = false;
    function pump(key, value) {
        waiting = true;
        value = new Promise(function(resolve) {
            resolve(inner[key](value));
        });
        return {
            done: false,
            value: awaitWrap(value)
        };
    }
    if (typeof Symbol === "function" && Symbol.iterator) iter[Symbol.iterator] = function() {
        return this;
    };
    iter.next = function(value) {
        if (waiting) {
            waiting = false;
            return value;
        }
        return pump("next", value);
    };
    if (typeof inner.throw === "function") iter.throw = function(value) {
        if (waiting) {
            waiting = false;
            throw value;
        }
        return pump("throw", value);
    };
    if (typeof inner.return === "function") iter.return = function(value) {
        return pump("return", value);
    };
    return iter;
}
exports.default = _asyncGeneratorDelegate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"OE9RY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _asyncIterator(iterable) {
    var method;
    if (typeof Symbol === "function") {
        if (Symbol.asyncIterator) {
            method = iterable[Symbol.asyncIterator];
            if (method != null) return method.call(iterable);
        }
        if (Symbol.iterator) {
            method = iterable[Symbol.iterator];
            if (method != null) return method.call(iterable);
        }
    }
    throw new TypeError("Object is not async iterable");
}
exports.default = _asyncIterator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fpJLx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
exports.default = _asyncToGenerator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dncE5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _awaitValue = require("./_await_value");
var _awaitValueDefault = parcelHelpers.interopDefault(_awaitValue);
function _awaitAsyncGenerator(value) {
    return new _awaitValueDefault.default(value);
}
exports.default = _awaitAsyncGenerator;

},{"./_await_value":"dbRXh","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7cFWj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports.default = _classCallCheck;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7XNs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classNameTDZError(name) {
    throw new Error("Class \"" + name + "\" cannot be referenced in computed property keys.");
}
exports.default = _classNameTDZError;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6CK80":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver).value;
}
exports.default = _classPrivateFieldGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hQQCG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) throw new TypeError("attempted to use private field on non-instance");
    return receiver;
}
exports.default = _classPrivateFieldBase;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hgYLW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    var descriptor = privateMap.get(receiver);
    if (!descriptor.writable) throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
    return value;
}
exports.default = _classPrivateFieldSet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"10bpc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return fn;
}
exports.default = _classPrivateMethodGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hoeuE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classPrivateMethodSet() {
    throw new TypeError("attempted to reassign private method");
}
exports.default = _classPrivateMethodSet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kXoyc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    if (receiver !== classConstructor) throw new TypeError("Private static access of wrong provenance");
    return descriptor.value;
}
exports.default = _classStaticPrivateFieldSpecGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iJ8SS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    if (receiver !== classConstructor) throw new TypeError("Private static access of wrong provenance");
    if (!descriptor.writable) throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
    return value;
}
exports.default = _classStaticPrivateFieldSpecSet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kfYF0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function construct(Parent1, args1, Class1) {
    if (isNativeReflectConstruct()) construct = Reflect.construct;
    else construct = function construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return construct.apply(null, arguments);
}
function _construct(Parent, args, Class) {
    return construct.apply(null, arguments);
}
exports.default = _construct;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2qFyh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
exports.default = _createClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"d58U9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toArray = require("./_to_array");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _toPropertyKey = require("./_to_property_key");
var _toPropertyKeyDefault = parcelHelpers.interopDefault(_toPropertyKey);
function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}
exports.default = _decorate;
function _createElementDescriptor(def) {
    var key = _toPropertyKeyDefault.default(def.key);
    var descriptor;
    if (def.kind === "method") {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, "name", {
            value: _typeof(key) === "symbol" ? "" : key,
            configurable: true
        });
    } else if (def.kind === "get") descriptor = {
        get: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "set") descriptor = {
        set: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "field") descriptor = {
        configurable: true,
        writable: true,
        enumerable: true
    };
    var element = {
        kind: def.kind === "field" ? "field" : "method",
        key: key,
        placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;
    return element;
}
function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) other.descriptor.get = element.descriptor.get;
    else other.descriptor.set = element.descriptor.set;
}
function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement(other) {
        return other.kind === "method" && other.key === element.key && other.placement === element.placement;
    };
    for(var i = 0; i < elements.length; i++){
        var element = elements[i];
        var other1;
        if (element.kind === "method" && (other1 = newElements.find(isSameElement))) {
            if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other1.descriptor)) {
                if (_hasDecorators(element) || _hasDecorators(other1)) throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
                other1.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other1)) throw new ReferenceError("Decorators can't be placed on different accessors with for the same property (" + element.key + ").");
                    other1.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other1);
            }
        } else newElements.push(element);
    }
    return newElements;
}
function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}
function _isDataDescriptor(desc) {
    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
}
function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (element.kind === kind && (placement === "static" || placement === "prototype")) {
                var receiver = placement === "static" ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}
function _initializeInstanceElements(O, elements) {
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === "own") _defineClassElement(O, element);
        });
    });
}
function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === "field") {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}
function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = {
        static: [],
        prototype: [],
        own: []
    };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) return {
        elements: newElements,
        finishers: finishers
    };
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}
function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) throw new TypeError("Duplicated element (" + element.key + ")");
    keys.push(element.key);
}
function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for(var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--){
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) finishers.push(elementFinisherExtras.finisher);
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for(var j = 0; j < newExtras.length; j++)_addElementPlacement(newExtras[j], placements);
            extras.push.apply(extras, newExtras);
        }
    }
    return {
        element: element,
        finishers: finishers,
        extras: extras
    };
}
function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for(var i = decorators.length - 1; i >= 0; i--){
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor((0, decorators[i])(obj) || obj);
        if (elementsAndFinisher.finisher !== undefined) finishers.push(elementsAndFinisher.finisher);
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for(var j = 0; j < elements.length - 1; j++)for(var k = j + 1; k < elements.length; k++){
                if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) throw new TypeError("Duplicated element (" + elements[j].key + ")");
            }
        }
    }
    return {
        elements: elements,
        finishers: finishers
    };
}
function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === "field") obj.initializer = element.initializer;
    return obj;
}
function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArrayDefault.default(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, "finisher", "An element descriptor");
        _disallowProperty(elementObject, "extras", "An element descriptor");
        return element;
    });
}
function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== "method" && kind !== "field") throw new TypeError("An element descriptor's .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"" + kind + '"');
    var key = _toPropertyKeyDefault.default(elementObject.key);
    var placement = String(elementObject.placement);
    if (placement !== "static" && placement !== "prototype" && placement !== "own") throw new TypeError("An element descriptor's .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"" + placement + '"');
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, "elements", "An element descriptor");
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({
        }, descriptor)
    };
    if (kind !== "field") _disallowProperty(elementObject, "initializer", "A method descriptor");
    else {
        _disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
        element.initializer = elementObject.initializer;
    }
    return element;
}
function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, "finisher");
    var extras = _toElementDescriptors(elementObject.extras);
    return {
        element: element,
        finisher: finisher,
        extras: extras
    };
}
function _fromClassDescriptor(elements) {
    var obj = {
        kind: "class",
        elements: elements.map(_fromElementDescriptor)
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}
function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== "class") throw new TypeError("A class descriptor's .kind property must be \"class\", but a decorator created a class descriptor with .kind \"" + kind + '"');
    _disallowProperty(obj, "key", "A class descriptor");
    _disallowProperty(obj, "placement", "A class descriptor");
    _disallowProperty(obj, "descriptor", "A class descriptor");
    _disallowProperty(obj, "initializer", "A class descriptor");
    _disallowProperty(obj, "extras", "A class descriptor");
    var finisher = _optionalCallableProperty(obj, "finisher");
    var elements = _toElementDescriptors(obj.elements);
    return {
        elements: elements,
        finisher: finisher
    };
}
function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) throw new TypeError(objectType + " can't have a ." + name + " property.");
}
function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") throw new TypeError("Expected '" + name + "' to be a function");
    return value;
}
function _runClassFinishers(constructor, finishers) {
    for(var i = 0; i < finishers.length; i++){
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== "function") throw new TypeError("Finishers must return a constructor.");
            constructor = newConstructor;
        }
    }
    return constructor;
}

},{"./_to_array":"bryXe","./_to_property_key":"g8UAa","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bryXe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithHoles = require("./_array_with_holes");
var _arrayWithHolesDefault = parcelHelpers.interopDefault(_arrayWithHoles);
var _iterableToArray = require("./_iterable_to_array");
var _iterableToArrayDefault = parcelHelpers.interopDefault(_iterableToArray);
var _nonIterableRest = require("./_non_iterable_rest");
var _nonIterableRestDefault = parcelHelpers.interopDefault(_nonIterableRest);
function _toArray(arr) {
    return _arrayWithHolesDefault.default(arr) || _iterableToArrayDefault.default(arr) || _nonIterableRestDefault.default();
}
exports.default = _toArray;

},{"./_array_with_holes":"2MTcZ","./_iterable_to_array":"dhIzq","./_non_iterable_rest":"g2hQd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dhIzq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
exports.default = _iterableToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g2hQd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
exports.default = _nonIterableRest;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g8UAa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeOf = require("./_type_of");
var _typeOfDefault = parcelHelpers.interopDefault(_typeOf);
var _toPrimitive = require("./_to_primitive");
var _toPrimitiveDefault = parcelHelpers.interopDefault(_toPrimitive);
function _toPropertyKey(arg) {
    var key = _toPrimitiveDefault.default(arg, "string");
    return _typeOfDefault.default(key) === "symbol" ? key : String(key);
}
exports.default = _toPropertyKey;

},{"./_type_of":"6Rob7","./_to_primitive":"a2TEU","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6Rob7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _typeof(obj) {
    return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
}
exports.default = _typeof;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a2TEU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeOf = require("./_type_of");
var _typeOfDefault = parcelHelpers.interopDefault(_typeOf);
function _toPrimitive(input, hint) {
    if (_typeOfDefault.default(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeOfDefault.default(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
exports.default = _toPrimitive;

},{"./_type_of":"6Rob7","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iPPLs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === undefined) Object.defineProperty(obj, key, value);
    }
    return obj;
}
exports.default = _defaults;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4NlVr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineEnumerableProperties(obj, descs) {
    for(var key in descs){
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
    }
    if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for(var i = 0; i < objectSymbols.length; i++){
            var sym = objectSymbols[i];
            var desc = descs[sym];
            desc.configurable = desc.enumerable = true;
            if ("value" in desc) desc.writable = true;
            Object.defineProperty(obj, sym, desc);
        }
    }
    return obj;
}
exports.default = _defineEnumerableProperties;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8olmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
exports.default = _defineProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5PGhC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function extends_() {
    extends_ = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return extends_.apply(this, arguments);
}
function _extends() {
    return extends_.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3PaKX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _superPropBase = require("./_super_prop_base");
var _superPropBaseDefault = parcelHelpers.interopDefault(_superPropBase);
function get(target1, property1, receiver1) {
    if (typeof Reflect !== "undefined" && Reflect.get) get = Reflect.get;
    else get = function get(target, property, receiver) {
        var base = _superPropBaseDefault.default(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) return desc.get.call(receiver || target);
        return desc.value;
    };
    return get(target1, property1, receiver1);
}
function _get(target, property, reciever) {
    return get(target, property, reciever);
}
exports.default = _get;

},{"./_super_prop_base":"knWLD","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"knWLD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getPrototypeOf = require("./_get_prototype_of");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
function _superPropBase(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _getPrototypeOfDefault.default(object);
        if (object === null) break;
    }
    return object;
}
exports.default = _superPropBase;

},{"./_get_prototype_of":"2Zsfp","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2Zsfp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getPrototypeOf(o1) {
    getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return getPrototypeOf(o1);
}
function _getPrototypeOf(o) {
    return getPrototypeOf(o);
}
exports.default = _getPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9qeli":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOf = require("./_set_prototype_of");
var _setPrototypeOfDefault = parcelHelpers.interopDefault(_setPrototypeOf);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOfDefault.default(subClass, superClass);
}
exports.default = _inherits;

},{"./_set_prototype_of":"htg5d","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"htg5d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function setPrototypeOf(o1, p1) {
    setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return setPrototypeOf(o1, p1);
}
function _setPrototypeOf(o, p) {
    return setPrototypeOf(o, p);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kztAT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
exports.default = _inheritsLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lnq75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _initializerDefineProperty(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}
exports.default = _initializerDefineProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3NUsN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _initializerWarningHelper(descriptor, context) {
    throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and set to use loose mode. To use proposal-class-properties in spec mode with decorators, wait for the next major version of decorators in stage 2.");
}
exports.default = _initializerWarningHelper;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2JhSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) return right[Symbol.hasInstance](left);
    else return left instanceof right;
}
exports.default = _instanceof;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eiJ1c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = _interopRequireDefault;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iOVzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                };
                if (desc.get || desc.set) Object.defineProperty(newObj, key, desc);
                else newObj[key] = obj[key];
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
exports.default = _interopRequireWildcard;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"idR0T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
exports.default = _isNativeFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"RGO9K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
exports.default = _iterableToArrayLimit;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3nvhH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArrayLimitLoose(arr, i) {
    var _arr = [];
    for(var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;){
        _arr.push(_step.value);
        if (i && _arr.length === i) break;
    }
    return _arr;
}
exports.default = _iterableToArrayLimitLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3uNfn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var REACT_ELEMENT_TYPE;
function _createRawReactElement(type, props, key, children) {
    if (!REACT_ELEMENT_TYPE) REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;
    if (!props && childrenLength !== 0) props = {
        children: void 0
    };
    if (props && defaultProps) {
        for(var propName in defaultProps)if (props[propName] === void 0) props[propName] = defaultProps[propName];
    } else if (!props) props = defaultProps || {
    };
    if (childrenLength === 1) props.children = children;
    else if (childrenLength > 1) {
        var childArray = new Array(childrenLength);
        for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 3];
        props.children = childArray;
    }
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key === undefined ? null : '' + key,
        ref: null,
        props: props,
        _owner: null
    };
}
exports.default = _createRawReactElement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4Qtp8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) throw new TypeError("Cannot instantiate an arrow function");
}
exports.default = _newArrowCheck;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"96MFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}
exports.default = _nonIterableSpread;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lHkyr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("./_define_property");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        });
    }
    return target;
}
exports.default = _objectSpread;

},{"./_define_property":"8olmo","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5JnNA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("./_object_without_properties_loose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLooseDefault.default(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
exports.default = _objectWithoutProperties;

},{"./_object_without_properties_loose":"2Gal1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2Gal1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"Y8Wti":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assertThisInitialized = require("./_assert_this_initialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _typeOf = require("./_type_of");
var _typeOfDefault = parcelHelpers.interopDefault(_typeOf);
function _possibleConstructorReturn(self, call) {
    if (call && (_typeOfDefault.default(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitializedDefault.default(self);
}
exports.default = _possibleConstructorReturn;

},{"./_assert_this_initialized":"ksAaa","./_type_of":"6Rob7","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"d4VBy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _readOnlyError(name) {
    throw new Error("\"" + name + "\" is read-only");
}
exports.default = _readOnlyError;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cXwLF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("./_define_property");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _superPropBase = require("./_super_prop_base");
var _superPropBaseDefault = parcelHelpers.interopDefault(_superPropBase);
function set(target1, property1, value1, receiver1) {
    if (typeof Reflect !== "undefined" && Reflect.set) set = Reflect.set;
    else set = function set(target, property, value, receiver) {
        var base = _superPropBaseDefault.default(target, property);
        var desc;
        if (base) {
            desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.set) {
                desc.set.call(receiver, value);
                return true;
            } else if (!desc.writable) return false;
        }
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
            if (!desc.writable) return false;
            desc.value = value;
            Object.defineProperty(receiver, property, desc);
        } else _definePropertyDefault.default(receiver, property, value);
        return true;
    };
    return set(target1, property1, value1, receiver1);
}
function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) throw new Error('failed to set property');
    return value;
}
exports.default = _set;

},{"./_define_property":"8olmo","./_super_prop_base":"knWLD","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dbdcV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _skipFirstGeneratorNext(fn) {
    return function() {
        var it = fn.apply(this, arguments);
        it.next();
        return it;
    };
}
exports.default = _skipFirstGeneratorNext;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jF6vr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithHoles = require("./_array_with_holes");
var _arrayWithHolesDefault = parcelHelpers.interopDefault(_arrayWithHoles);
var _iterableToArray = require("./_iterable_to_array");
var _iterableToArrayDefault = parcelHelpers.interopDefault(_iterableToArray);
var _nonIterableRest = require("./_non_iterable_rest");
var _nonIterableRestDefault = parcelHelpers.interopDefault(_nonIterableRest);
function _slicedToArray(arr, i) {
    return _arrayWithHolesDefault.default(arr) || _iterableToArrayDefault.default(arr, i) || _nonIterableRestDefault.default();
}
exports.default = _slicedToArray;

},{"./_array_with_holes":"2MTcZ","./_iterable_to_array":"dhIzq","./_non_iterable_rest":"g2hQd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hMbt7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithHoles = require("./_array_with_holes");
var _arrayWithHolesDefault = parcelHelpers.interopDefault(_arrayWithHoles);
var _iterableToArrayLimitLoose = require("./_iterable_to_array_limit_loose");
var _iterableToArrayLimitLooseDefault = parcelHelpers.interopDefault(_iterableToArrayLimitLoose);
var _nonIterableRest = require("./_non_iterable_rest");
var _nonIterableRestDefault = parcelHelpers.interopDefault(_nonIterableRest);
function _slicedToArrayLoose(arr, i) {
    return _arrayWithHolesDefault.default(arr) || _iterableToArrayLimitLooseDefault.default(arr, i) || _nonIterableRestDefault.default();
}
exports.default = _slicedToArrayLoose;

},{"./_array_with_holes":"2MTcZ","./_iterable_to_array_limit_loose":"3nvhH","./_non_iterable_rest":"g2hQd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5JjXP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) raw = strings.slice(0);
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
exports.default = _taggedTemplateLiteral;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fyqOu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}
exports.default = _taggedTemplateLiteralLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"96osi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _throw(e) {
    throw e;
}
exports.default = _throw;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aQIls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithoutHoles = require("./_array_without_holes");
var _arrayWithoutHolesDefault = parcelHelpers.interopDefault(_arrayWithoutHoles);
var _iterableToArray = require("./_iterable_to_array");
var _iterableToArrayDefault = parcelHelpers.interopDefault(_iterableToArray);
var _nonIterableSpread = require("./_non_iterable_spread");
var _nonIterableSpreadDefault = parcelHelpers.interopDefault(_nonIterableSpread);
function _toConsumableArray(arr) {
    return _arrayWithoutHolesDefault.default(arr) || _iterableToArrayDefault.default(arr) || _nonIterableSpreadDefault.default();
}
exports.default = _toConsumableArray;

},{"./_array_without_holes":"1QzJn","./_iterable_to_array":"dhIzq","./_non_iterable_spread":"96MFq","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6wD59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _asyncGenerator = require("./_async_generator");
var _asyncGeneratorDefault = parcelHelpers.interopDefault(_asyncGenerator);
function _wrapAsyncGenerator(fn) {
    return function() {
        return new _asyncGeneratorDefault.default(fn.apply(this, arguments));
    };
}
exports.default = _wrapAsyncGenerator;

},{"./_async_generator":"lEqUv","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"c0gJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _construct = require("./_construct");
var _constructDefault = parcelHelpers.interopDefault(_construct);
var _isNativeFunction = require("./_is_native_function");
var _isNativeFunctionDefault = parcelHelpers.interopDefault(_isNativeFunction);
var _getPrototypeOf = require("./_get_prototype_of");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _setPrototypeOf = require("./_set_prototype_of");
var _setPrototypeOfDefault = parcelHelpers.interopDefault(_setPrototypeOf);
function wrapNativeSuper(Class1) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    wrapNativeSuper = function wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunctionDefault.default(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _constructDefault.default(Class, arguments, _getPrototypeOfDefault.default(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOfDefault.default(Wrapper, Class);
    };
    return wrapNativeSuper(Class1);
}
function _wrapNativeSuper(Class) {
    return wrapNativeSuper(Class);
}
exports.default = _wrapNativeSuper;

},{"./_construct":"kfYF0","./_is_native_function":"idR0T","./_get_prototype_of":"2Zsfp","./_set_prototype_of":"htg5d","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4tUnB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isNativeReflectConstruct = require("./_is_native_reflect_construct");
var _isNativeReflectConstructDefault = parcelHelpers.interopDefault(_isNativeReflectConstruct);
var _getPrototypeOf = require("./_get_prototype_of");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _possibleConstructorReturn = require("./_possible_constructor_return");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstructDefault.default();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
exports.default = _createSuper;

},{"./_is_native_reflect_construct":"e73cJ","./_get_prototype_of":"2Zsfp","./_possible_constructor_return":"Y8Wti","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e73cJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
exports.default = _isNativeReflectConstruct;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"O0fvF":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69972a5eef2d9f38";
module.bundle.HMR_BUNDLE_ID = "b7b6029e60a0d0f5";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"bHdI8":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f95e = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f95e.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _styleBundleCss = require("./assets/style.bundle.css");
var _adminPage = require("./views/AdminPage");
var _adminPageDefault = parcelHelpers.interopDefault(_adminPage);
var _explorerSharePage = require("./views/ExplorerSharePage");
var _explorerSharePageDefault = parcelHelpers.interopDefault(_explorerSharePage);
var _uploadPage = require("./views/UploadPage");
var _uploadPageDefault = parcelHelpers.interopDefault(_uploadPage);
if (document.querySelector("#mfsp_admin") !== null) _reactDom.render(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_adminPageDefault.default, {
}, void 0, false, {
    fileName: "src_react/mfsp-bundle.js",
    lineNumber: 9,
    columnNumber: 10
}, undefined), document.querySelector("#mfsp_admin"));
if (document.querySelector("#mfsp_upload_hook") !== null) _reactDom.render(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_uploadPageDefault.default, {
}, void 0, false, {
    fileName: "src_react/mfsp-bundle.js",
    lineNumber: 13,
    columnNumber: 10
}, undefined), document.querySelector("#mfsp_upload_hook"));
if (document.querySelector("#mfsp_clientgui") !== null) _reactDom.render(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_explorerSharePageDefault.default, {
}, void 0, false, {
    fileName: "src_react/mfsp-bundle.js",
    lineNumber: 17,
    columnNumber: 10
}, undefined), document.querySelector("#mfsp_clientgui"));

  $parcel$ReactRefreshHelpers$f95e.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","react-dom":"6cUDX","./views/UploadPage":"fUxaK","./views/AdminPage":"ewncR","./assets/style.bundle.css":"dgRgN","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q","./views/ExplorerSharePage":"hMKYf"}],"kt9Pr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-dev-runtime.development.js');

},{"./cjs/react-jsx-dev-runtime.development.js":"bBiu2"}],"bBiu2":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function Fake() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function set() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _helpers.typeOf(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1 === "undefined" ? "undefined" : _helpers.typeOf(error$1));
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type === "undefined" ? "undefined" : _helpers.typeOf(type);
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    var jsxDEV$1 = jsxWithValidation;
    exports.jsxDEV = jsxDEV$1;
})();

},{"@swc/helpers":"cawJ1","react":"kEcQC","object-assign":"geatC"}],"kEcQC":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"l07yO"}],"l07yO":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame1 = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame1.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame1.getCurrentStack = null;
    ReactDebugCurrentFrame1.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame1.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame1;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error1("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function isMounted(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component1(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component1.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component1.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component1.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component1.prototype, methodName, {
            get: function get() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component1.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component1.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error1("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error1("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error1("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children === "undefined" ? "undefined" : _helpers.typeOf(children);
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error1("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function get() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error1("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function set(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function get() {
                    return context._currentValue;
                },
                set: function set(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function get() {
                    return context._currentValue2;
                },
                set: function set(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function get() {
                    return context._threadCount;
                },
                set: function set(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function get() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error1("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function get() {
                    return context.displayName;
                },
                set: function set(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function get() {
                    return defaultProps;
                },
                set: function set(newDefaultProps) {
                    error1("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function get() {
                    return propTypes;
                },
                set: function set(newPropTypes) {
                    error1("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error1("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error1('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === "undefined" ? "undefined" : _helpers.typeOf(render));
        else if (render.length !== 0 && render.length !== 2) error1('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error1("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
                return ownName;
            },
            set: function set(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error1("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type === "undefined" ? "undefined" : _helpers.typeOf(type));
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
                return ownName;
            },
            set: function set(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error1("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error1("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error1("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function Fake() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function set() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _helpers.typeOf(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1 === "undefined" ? "undefined" : _helpers.typeOf(error$1));
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error1("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error1('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error1("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error1("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error1('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type === "undefined" ? "undefined" : _helpers.typeOf(type);
            error1("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component1;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"@swc/helpers":"cawJ1","object-assign":"geatC"}],"geatC":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"6cUDX":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"cYe1K"}],"cYe1K":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies1 = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames1 = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies1[registrationName]) error1("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies1[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames1[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames1.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error1('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value === "undefined" ? "undefined" : _helpers.typeOf(value)){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function capitalize(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL1(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error1("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL1('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL1(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix1;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix1 === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix1 = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix1 + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function Fake() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function set2() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var current1 = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current1 === null) return null;
        var owner = current1._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current1 === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current1);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame1.getCurrentStack = null;
        current1 = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame1.getCurrentStack = getCurrentFiberStackInDev;
        current1 = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value === "undefined" ? "undefined" : _helpers.typeOf(value)){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error1("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error1("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function get2() {
                return get.call(this);
            },
            set: function set2(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function getValue() {
                return currentValue;
            },
            setValue: function setValue(value) {
                currentValue = '' + value;
            },
            stopTracking: function stopTracking() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error1("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error1("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error1("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error1("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error1('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error1("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error1("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error1("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error1("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error1("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error1("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function setTextContent(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes1 = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes1.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function warnValidStyle() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function camelize(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error1("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error1('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error1('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function warnValidStyle(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error1("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error1("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error1('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error1('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error1('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error1("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error1("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error1("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error1("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function validateProperty$1() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function validateProperty$1(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error1("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error1('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error1('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error1("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error1("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error1("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error1("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value === "undefined" ? "undefined" : _helpers.typeOf(value));
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error1("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error1('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error1("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error1("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error1("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error1("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function warnUnknownProperties(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error1("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error1("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function discreteUpdatesImpl(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + (typeof listener === "undefined" ? "undefined" : _helpers.typeOf(listener)) + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options1 = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options1, 'passive', {
            get: function get2() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options1, options1);
        window.removeEventListener('test', options1, options1);
    } catch (e1) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function onError(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get1(key) {
        return key._reactInternals;
    }
    function has1(key) {
        return key._reactInternals !== undefined;
    }
    function set1(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error1("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get1(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {
        };
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style1 = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style1 = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style1) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error1('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root1 = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root1 = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root1 = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root1) return root1.value;
        return root1.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function preventDefault() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (_helpers.typeOf(event.returnValue) !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function stopPropagation() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (_helpers.typeOf(event.cancelBubble) !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function persist() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function timeStamp(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function relatedTarget(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function movementX(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function movementY(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function clipboardData(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function charCode(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function keyCode(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function which(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function deltaX(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function deltaY(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies1,
            possibleRegistrationNames: possibleRegistrationNames1
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function normalizeMarkupForTextOrAttribute(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function warnForTextDifference(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error1('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function warnForPropDifference(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error1('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function warnForExtraAttributes(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error1('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function warnForInvalidEventListener(registrationName, listener) {
        if (listener === false) error1("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error1('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener === "undefined" ? "undefined" : _helpers.typeOf(listener));
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function normalizeHTML(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error1("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error1("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function validateDOMNesting() {
    };
    var updatedAncestorInfo = function updatedAncestorInfo() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function validateDOMNesting(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error1('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error1('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error1("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (_helpers.typeOf(newProps.children) !== _helpers.typeOf(oldProps.children) && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function toString() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function valueOf() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _helpers.typeOf(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1 === "undefined" ? "undefined" : _helpers.typeOf(error$1));
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index1 = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index1 < 0) {
            error1('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index1]) error1('Unexpected Fiber popped.');
        cursor.current = valueStack[index1];
        valueStack[index1] = null;
        fiberStack[index1] = null;
        index1--;
    }
    function push(cursor, value, fiber) {
        index1++;
        valueStack[index1] = cursor.current;
        fiberStack[index1] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error1("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error1("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error1('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function requestPaint() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function now() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {
        },
        recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {
        },
        flushLegacyContextWarning: function flushLegacyContextWarning() {
        },
        discardPendingWarnings: function discardPendingWarnings() {
        }
    };
    var findStrictRoot = function findStrictRoot(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function setToSortedString(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error1("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error1("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error1("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error1("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error1("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error1("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error1("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error1("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback1(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback1(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray1 = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error1("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function value() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error1("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error1("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error1("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error1("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error1("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error1("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error1("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error1("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error1("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error1("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error1("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error1("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error1("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error1("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error1("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error1("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error1("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error1("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error1("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error1("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error1("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray1(_state))) error1('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error1("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set1(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + (typeof contextType === "undefined" ? "undefined" : _helpers.typeOf(contextType)) + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error1("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error1("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error1("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error1("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error1("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error1("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function warnForMissingKey(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function warnForMissingKey(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error1("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error1("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function ref(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error1("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            if (current !== null) {
                if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error1("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error1("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error1("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers1 = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating1 = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating1) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating1 = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating1 = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating1) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating1 = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating1 = false;
    }
    function getIsHydrating() {
        return isHydrating1;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error1("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes1 = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook1 = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error1("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps === "undefined" ? "undefined" : _helpers.typeOf(deps));
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error1("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error1("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error1("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes1 = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook1 = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook1 !== null && currentHook1.next !== null;
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook1 === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook1.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook1 = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook1 = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook1.memoizedState,
                baseState: currentHook1.baseState,
                baseQueue: currentHook1.baseQueue,
                queue: currentHook1.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current = currentHook1; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error1("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes1, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes1, root.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error1("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root = getWorkInProgressRoot();
        if (!(root !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error1("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root, root.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function handleChange() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                } catch (error) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error1('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook1 !== null) {
            var prevEffect = currentHook1.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error1("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create === "undefined" ? "undefined" : _helpers.typeOf(create) : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create === "undefined" ? "undefined" : _helpers.typeOf(create) : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error1("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function readValue() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function warnInvalidContextAccess() {
        error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function warnInvalidHookAccess() {
        error1("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function readContext1(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function readContext1(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function readContext1(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function readContext1(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function readContext1(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function readContext1(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function readContext1(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function useRef(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function useState(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function useTransition() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime1 = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime1;
    }
    function recordCommitTime() {
        commitTime1 = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment1(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error1("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var root = workInProgress.stateNode;
        if (root.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error1("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error1('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error1("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error1('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error1('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current === null || current.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleWorkOnParentPath(fiber.return, renderLanes);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error1("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error1("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error1("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error1("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error1("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error1("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isArray = Array.isArray(childSlot);
        var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
        if (isArray || isIterable) {
            var type = isArray ? 'array' : 'iterable';
            error1("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error1("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error1('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error1("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error1("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current;
        current.nextEffect = null;
        current.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current, workInProgress, renderLanes) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current, workInProgress, renderLanes);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current, workInProgress, renderLanes);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current, workInProgress, renderLanes);
                }
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment1(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function updateHostContainer(workInProgress) {
    };
    updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error1("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
        }
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
        }
    }
    function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error1("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error1("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                        var prevState = current.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error1("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current, effect);
                                else safelyCallDestroy(current, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current);
                var instance = current.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current, instance);
                return;
            case HostComponent:
                safelyDetachRef(current);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current);
        var alternate = current.alternate;
        detachFiberMutation(current);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current !== null ? current.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current, finishedWork) {
        if (current !== null) {
            var oldState = current.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress1 = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes1 = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root, lane, eventTime);
        if (root === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root);
            } else {
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root
                ]);
                else rootsWithPendingDiscreteUpdates.add(root);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root.callbackNode = null;
                root.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root.hydrate) {
                    root.hydrate = false;
                    clearContainer(root.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            finishConcurrentRender(root, exitStatus, lanes);
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root, lanes);
                exitStatus = renderRootSync(root, lanes);
            }
        } else {
            lanes = getNextLanes(root, NoLanes);
            exitStatus = renderRootSync(root, lanes);
        }
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root.hydrate) {
                root.hydrate = false;
                clearContainer(root.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error1("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root) {
                markDiscreteUpdatesExpired(root);
                ensureRootIsScheduled(root, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error1("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes1, fiber);
        subtreeRenderLanes1 = mergeLanes(subtreeRenderLanes1, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes1 = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress1 !== null) {
            var interruptedWork = workInProgress1.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        workInProgress1 = createWorkInProgress(root.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes1 = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress1;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress1 = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress1 === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress1 = erroredWork;
                } else erroredWork = workInProgress1;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
        }
        var prevInteractions = pushInteractions(root);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress1 !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress1 !== null)performUnitOfWork(workInProgress1);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
        }
        var prevInteractions = pushInteractions(root);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress1 !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress1 !== null && !shouldYield())performUnitOfWork(workInProgress1);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress1 = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes1);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes1); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress1 = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress1 = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress1 = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress1 = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes1, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        if (finishedWork === null) return null;
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (!(finishedWork !== root.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) rootsWithPendingDiscreteUpdates.delete(root);
        }
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress1 = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
            }
            schedulePendingInteractions(root, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current = nextEffect.alternate;
                if (current !== null) commitDetachRef(current);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current = nextEffect.alternate;
                commitLifeCycles(root, current, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error = clearCaughtError();
                    captureCommitPhaseError(fiber, error);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                        schedulePendingInteractions(root, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error1("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current1;
        try {
            setCurrentFiber(fiber);
            error1("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function beginWork$1(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress1 && getComponentName(workInProgress1.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error1("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error1("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error1("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error1("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root, lane) {
        scheduleInteractions(root, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root, committedLanes) {
        var remainingLanesAfterCommit = root.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root, committedLanes);
                subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
        } catch (error2) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function setRefreshHandler(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function scheduleRefresh(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function scheduleRoot(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function createFiber(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effect list is no longer valid.
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        }
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= Placement; // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type === "undefined" ? "undefined" : _helpers.typeOf(type)) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error1('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get1(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get1(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current1;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error1("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error1("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current1 !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error1("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current1.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error1("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function copyWithDelete(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function copyWithRename(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function copyWithSet(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function findHook(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function overrideHookState(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function overrideHookStateDeletePath(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function overrideHookStateRenamePath(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function overrideProps(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function overridePropsDeletePath(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function overridePropsRenamePath(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function scheduleUpdate(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current1;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
    }
    function ReactDOMBlockingRoot(container, tag, options) {
        this._internalRoot = createRootImpl(container, tag, options);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (typeof arguments[1] === 'function') error1("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error1("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        var container = root.containerInfo;
        updateContainer(null, root, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options != null && options.hydrate === true;
        var hydrationCallbacks = options != null && options.hydrationOptions || null;
        var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
        var root = createContainer(container, tag, hydrate);
        markContainerAsRoot(root.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return root;
    }
    function createLegacyRoot(container, options) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function topLevelUpdateWarnings(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error1("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error1("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root = container._reactRootContainer;
        var fiberRoot;
        if (!root) {
            // Initial mount
            root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function callback() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function callback() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error1("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate1(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render1(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has1(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error1("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate1;
    exports.render = render1;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"@swc/helpers":"cawJ1","react":"kEcQC","object-assign":"geatC","scheduler":"2oVbv","scheduler/tracing":"dvWBd"}],"2oVbv":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"8I9v5"}],"8I9v5":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function requestHostTimeout(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function cancelHostTimeout() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function requestPaint() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function requestPaint() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function performWorkUntilDeadline() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function requestHostTimeout(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function cancelHostTimeout() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"dvWBd":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"z7bcK"}],"z7bcK":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"fUxaK":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$1922 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$1922.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return SharePage;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _customFileDropzone = require("../../shared/CustomFileDropzone");
var _customFileDropzoneDefault = parcelHelpers.interopDefault(_customFileDropzone);
var SharePage = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(SharePage, _Component);
    var _super = _helpers.createSuper(SharePage);
    function SharePage(props) {
        _helpers.classCallCheck(this, SharePage);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(SharePage, [
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "container",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "row",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "col-12",
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
                                    className: "text-center my-3",
                                    children: "Upload files"
                                }, void 0, false, {
                                    fileName: "src_react/views/UploadPage/index.jsx",
                                    lineNumber: 16,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_customFileDropzoneDefault.default, {
                                }, void 0, false, {
                                    fileName: "src_react/views/UploadPage/index.jsx",
                                    lineNumber: 17,
                                    columnNumber: 13
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/views/UploadPage/index.jsx",
                            lineNumber: 15,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/views/UploadPage/index.jsx",
                        lineNumber: 14,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/views/UploadPage/index.jsx",
                    lineNumber: 13,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return SharePage;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$1922.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../shared/CustomFileDropzone":"dEEaI","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"dEEaI":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$4ebd = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$4ebd.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return CustomFileDropzone;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _api = require("../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _reactDropzone = require("react-dropzone");
var _reactDropzoneDefault = parcelHelpers.interopDefault(_reactDropzone);
var CustomFileDropzone = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(CustomFileDropzone, _Component);
    var _super = _helpers.createSuper(CustomFileDropzone);
    function CustomFileDropzone(props) {
        _helpers.classCallCheck(this, CustomFileDropzone);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
            files_loaded: false,
            files: [],
            files_statuses: [],
            hovering: false,
            uploading: false,
            handled_so_far: 0
        };
        _this.upload = _this.upload.bind(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(CustomFileDropzone, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "upload",
            value: function upload() {
                var _this = this;
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    uploading: true
                }));
                var _state = this.state, files = _state.files, files_statuses = _state.files_statuses;
                files.map(function(file, idx) {
                    var _this1 = _this;
                    console.log("Trying to upload file idx := ".concat(idx));
                    //
                    var formData = new FormData();
                    formData.append("file", file);
                    //
                    var files_statuses_copy = Object.assign({
                    }, files_statuses);
                    //
                    files_statuses_copy[idx][0] = "Uploading";
                    files_statuses_copy[idx][1] = "File is being uploaded";
                    files_statuses_copy[idx][2] = "table-light";
                    _this.setState(_helpers.objectSpread({
                    }, _this.state, {
                        files_statuses: files_statuses_copy
                    }));
                    _apiDefault.default.uploadFile(formData).then(function(result) {
                        var success = result.data.success;
                        if (success) {
                            console.log(result);
                            files_statuses_copy[idx][0] = "Success";
                            files_statuses_copy[idx][1] = "File uploaded successfully";
                            files_statuses_copy[idx][2] = "table-success";
                            _this1.setState(_helpers.objectSpread({
                            }, _this1.state, {
                                files_statuses: files_statuses_copy,
                                handled_so_far: _this1.state.handled_so_far + 1
                            }));
                        } else {
                            files_statuses_copy[idx][0] = "Error";
                            files_statuses_copy[idx][1] = result.data.error.en;
                            files_statuses_copy[idx][2] = "table-danger";
                            _this1.setState(_helpers.objectSpread({
                            }, _this1.state, {
                                files_statuses: files_statuses_copy,
                                handled_so_far: _this1.state.handled_so_far + 1
                            }));
                        }
                    }, function(reason) {
                        console.log(reason);
                        files_statuses_copy[idx][0] = "API Error";
                        files_statuses_copy[idx][1] = "Error reason here";
                        files_statuses_copy[idx][2] = "table-danger";
                        _this1.setState(_helpers.objectSpread({
                        }, _this1.state, {
                            files_statuses: files_statuses_copy,
                            handled_so_far: _this1.state.handled_so_far + 1
                        }));
                    });
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var _state = this.state, hovering = _state.hovering, files = _state.files, files_statuses = _state.files_statuses, uploading = _state.uploading, handled_so_far = _state.handled_so_far;
                var can_upload = files.length !== 0;
                var progress_value = Math.ceil(100 * handled_so_far / files.length);
                var dropzoneID = "mfspDropzone";
                if (hovering === true) dropzoneID = "mfspDropzoneHovering";
                if (can_upload) dropzoneID = "mfspDropzoneHoveringDisabled";
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "container",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "row",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "col-md-12",
                            children: [
                                can_upload ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                    className: "d-flex justify-content-end",
                                    children: [
                                        handled_so_far === files.length ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                            style: {
                                                paddingLeft: "0.5rem"
                                            },
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                                className: "btn btn-secondary rounded-0",
                                                onClick: function(e) {
                                                    _this.setState(_helpers.objectSpread({
                                                    }, _this.state, {
                                                        uploading: false,
                                                        handled_so_far: 0,
                                                        files: [],
                                                        files_statuses: []
                                                    }));
                                                },
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                        className: "fas fa-redo"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 117,
                                                        columnNumber: 23
                                                    }, this),
                                                    "\xa0Start uploading again"
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                lineNumber: 105,
                                                columnNumber: 21
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 104,
                                            columnNumber: 19
                                        }, this) : "",
                                        handled_so_far === files.length ? "" : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                            style: {
                                                paddingLeft: "0.5rem"
                                            },
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                                disabled: !can_upload || uploading,
                                                className: "btn btn-success rounded-0",
                                                onClick: function(e) {
                                                    _this.upload();
                                                },
                                                children: uploading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                    children: [
                                                        handled_so_far === files.length ? "" : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                            className: "fas fa-spinner fa-pulse"
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 141,
                                                            columnNumber: 29
                                                        }, this),
                                                        "\xa0Uploading\xa0(",
                                                        handled_so_far,
                                                        ")"
                                                    ]
                                                }, void 0, true, {
                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                    lineNumber: 137,
                                                    columnNumber: 25
                                                }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                    children: [
                                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                            className: "fas fa-cloud-upload-alt"
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 147,
                                                            columnNumber: 27
                                                        }, this),
                                                        "\xa0Upload\xa0",
                                                        "".concat(files.length, " ").concat(files.length > 1 ? "files" : "file")
                                                    ]
                                                }, void 0, true, {
                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                    lineNumber: 146,
                                                    columnNumber: 25
                                                }, this)
                                            }, void 0, false, {
                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                lineNumber: 129,
                                                columnNumber: 21
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 128,
                                            columnNumber: 19
                                        }, this),
                                        handled_so_far === files.length ? "" : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                            style: {
                                                paddingLeft: "0.5rem"
                                            },
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                                className: "btn btn-danger rounded-0",
                                                disabled: uploading,
                                                onClick: function(e) {
                                                    _this.setState(_helpers.objectSpread({
                                                    }, _this.state, {
                                                        files: []
                                                    }));
                                                },
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                        className: "fas fa-trash-alt"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 168,
                                                        columnNumber: 23
                                                    }, this),
                                                    "\xa0Clear"
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                lineNumber: 161,
                                                columnNumber: 21
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 160,
                                            columnNumber: 19
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                    lineNumber: 102,
                                    columnNumber: 15
                                }, this) : "",
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                    className: "d-flex justify-content-center align-items-center",
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactDropzoneDefault.default, {
                                        disabled: can_upload,
                                        onDrop: function(acceptedFiles) {
                                            console.log(acceptedFiles);
                                            _this.setState(_helpers.objectSpread({
                                            }, _this.state, {
                                                files: acceptedFiles,
                                                files_statuses: acceptedFiles.map(function(file) {
                                                    return [
                                                        "Queued",
                                                        "This file waits for upload",
                                                        "table-queue", 
                                                    ];
                                                })
                                            }));
                                        },
                                        onDragEnter: function() {
                                            console.log("Drag enter");
                                            _this.setState(_helpers.objectSpread({
                                            }, _this.state, {
                                                hovering: true
                                            }));
                                        },
                                        onDragLeave: function() {
                                            console.log("Drag Leave");
                                            _this.setState(_helpers.objectSpread({
                                            }, _this.state, {
                                                hovering: false
                                            }));
                                        },
                                        children: function(param) {
                                            var getRootProps = param.getRootProps, getInputProps = param.getInputProps;
                                            /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("div", _helpers.objectSpread({
                                            }, getRootProps(), {
                                                className: can_upload ? "d-none" : "border rounded-1 p-5 d-flex flex-column justify-content-center align-items-center",
                                                id: dropzoneID,
                                                style: {
                                                    width: "50%",
                                                    cursor: "pointer"
                                                },
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("input", _helpers.objectSpread({
                                                    }, getInputProps()), void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 214,
                                                        columnNumber: 21
                                                    }, _this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                        className: "p-5",
                                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                            className: "fas fa-cloud-upload-alt",
                                                            style: {
                                                                fontSize: "4.5rem"
                                                            }
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 216,
                                                            columnNumber: 23
                                                        }, _this)
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 215,
                                                        columnNumber: 21
                                                    }, _this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                                                            children: "Drag & Drop files here, or click to select files"
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 222,
                                                            columnNumber: 23
                                                        }, _this)
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 221,
                                                        columnNumber: 21
                                                    }, _this)
                                                ]
                                            }), void 0, true, {
                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                lineNumber: 204,
                                                columnNumber: 19
                                            }, _this);
                                        }
                                    }, void 0, false, {
                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                        lineNumber: 178,
                                        columnNumber: 15
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                    lineNumber: 177,
                                    columnNumber: 13
                                }, this),
                                can_upload ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                    className: "row my-3",
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "col-12",
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                            class: "progress",
                                            children: [
                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                    style: {
                                                        position: "absolute",
                                                        left: "50%",
                                                        color: progress_value == 100 ? "white" : "black"
                                                    },
                                                    children: [
                                                        progress_value,
                                                        "%"
                                                    ]
                                                }, void 0, true, {
                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                    lineNumber: 234,
                                                    columnNumber: 21
                                                }, this),
                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                    class: "progress-bar ".concat(progress_value == 100 ? "bg-success" : ""),
                                                    role: "progressbar",
                                                    style: {
                                                        width: "".concat(progress_value, "%")
                                                    }
                                                }, void 0, false, {
                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                    lineNumber: 243,
                                                    columnNumber: 21
                                                }, this)
                                            ]
                                        }, void 0, true, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 233,
                                            columnNumber: 19
                                        }, this)
                                    }, void 0, false, {
                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                        lineNumber: 232,
                                        columnNumber: 17
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                    lineNumber: 231,
                                    columnNumber: 15
                                }, this) : "",
                                can_upload ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("table", {
                                    className: "table table-sm",
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("thead", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                        scope: "col",
                                                        children: "#"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 263,
                                                        columnNumber: 21
                                                    }, this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                        scope: "col",
                                                        children: "Filename"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 264,
                                                        columnNumber: 21
                                                    }, this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                        scope: "col",
                                                        children: "Size"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 265,
                                                        columnNumber: 21
                                                    }, this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                        scope: "col",
                                                        children: "Status"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                        lineNumber: 266,
                                                        columnNumber: 21
                                                    }, this)
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                lineNumber: 262,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 261,
                                            columnNumber: 17
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tbody", {
                                            children: files.map(function(file, idx) {
                                                /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("tr", {
                                                    className: files_statuses[idx][2],
                                                    children: [
                                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                            scope: "row",
                                                            children: idx + 1
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 272,
                                                            columnNumber: 23
                                                        }, _this),
                                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                                children: file.name
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                lineNumber: 274,
                                                                columnNumber: 25
                                                            }, _this)
                                                        }, void 0, false, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 273,
                                                            columnNumber: 23
                                                        }, _this),
                                                        Number(file.size / 1024) < 1 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                                            children: [
                                                                file.size,
                                                                " B"
                                                            ]
                                                        }, void 0, true, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 278,
                                                            columnNumber: 25
                                                        }, _this) : Number(file.size / 1024) > 1024 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                                            children: [
                                                                Math.round(Number(file.size / 1024 / 1024)),
                                                                " MB"
                                                            ]
                                                        }, void 0, true, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 280,
                                                            columnNumber: 25
                                                        }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                                            children: [
                                                                Math.round(Number(file.size / 1024)),
                                                                " KB"
                                                            ]
                                                        }, void 0, true, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 284,
                                                            columnNumber: 25
                                                        }, _this),
                                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                                            children: [
                                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                                    children: [
                                                                        files_statuses[idx][0] == "Uploading" ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                                            children: [
                                                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                                                    className: "fas fa-spinner fa-pulse"
                                                                                }, void 0, false, {
                                                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                                    lineNumber: 291,
                                                                                    columnNumber: 31
                                                                                }, _this),
                                                                                "\xa0"
                                                                            ]
                                                                        }, void 0, true, {
                                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                            lineNumber: 290,
                                                                            columnNumber: 29
                                                                        }, _this) : "",
                                                                        files_statuses[idx][0],
                                                                        files_statuses[idx][0] == "Uploading" ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                                            children: "..."
                                                                        }, void 0, false, {
                                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                            lineNumber: 299,
                                                                            columnNumber: 29
                                                                        }, _this) : ""
                                                                    ]
                                                                }, void 0, true, {
                                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                    lineNumber: 288,
                                                                    columnNumber: 25
                                                                }, _this),
                                                                " ",
                                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("br", {
                                                                }, void 0, false, {
                                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                    lineNumber: 304,
                                                                    columnNumber: 25
                                                                }, _this),
                                                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                                                                    className: "m-0",
                                                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("small", {
                                                                        children: files_statuses[idx][1]
                                                                    }, void 0, false, {
                                                                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                        lineNumber: 306,
                                                                        columnNumber: 27
                                                                    }, _this)
                                                                }, void 0, false, {
                                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                                    lineNumber: 305,
                                                                    columnNumber: 25
                                                                }, _this)
                                                            ]
                                                        }, void 0, true, {
                                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                            lineNumber: 287,
                                                            columnNumber: 23
                                                        }, _this)
                                                    ]
                                                }, void 0, true, {
                                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                                    lineNumber: 271,
                                                    columnNumber: 21
                                                }, _this);
                                            })
                                        }, void 0, false, {
                                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                            lineNumber: 269,
                                            columnNumber: 17
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                                    lineNumber: 260,
                                    columnNumber: 15
                                }, this) : ""
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                            lineNumber: 100,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                        lineNumber: 99,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/shared/CustomFileDropzone/index.jsx",
                    lineNumber: 98,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return CustomFileDropzone;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$4ebd.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../api":"fmHLW","react-dropzone":"jUQz5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"fmHLW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("./config");
var listFiles = function() {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/upload", {
        }).then(resolve, reject);
    });
};
var getUploadedFile = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/upload/".concat(id), {
        }).then(resolve, reject);
    });
};
var getFolder = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/folder/".concat(id), {
        }).then(resolve, reject);
    });
};
var deleteFolder = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.delete("/msfp/v1/folder/".concat(id), {
        }).then(resolve, reject);
    });
};
var uploadFile = function(formData) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/upload", formData, {
            headers: {
                "Content-Type": "multipart/form-data"
            }
        }).then(resolve, reject);
    });
};
var createFolder = function(folder_name) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/folder", {
            name: folder_name
        }).then(resolve, reject);
    });
};
var renameObject = function(id, new_name) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/rename/".concat(id), {
            new_name: new_name
        }).then(resolve, reject);
    });
};
var moveObjects = function(source_ids, destination_id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/move", {
            source_ids: source_ids,
            destination_id: destination_id
        }).then(resolve, reject);
    });
};
var deleteBatch = function(deletion_ids) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/deleteBatch", {
            deletion_ids: deletion_ids
        }).then(resolve, reject);
    });
};
var makeRoot = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/makeroot", {
            id: id
        }).then(resolve, reject);
    });
};
var createTag = function(fs_object, text) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/tag", {
            fs_object: fs_object,
            text: text
        }).then(resolve, reject);
    });
};
var deleteTag = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.delete("/msfp/v1/tag/".concat(id), {
        }).then(resolve, reject);
    });
};
var listTagsForUpload = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/upload/".concat(id, "/tags"), {
        }).then(resolve, reject);
    });
};
var createNote = function(fs_object, text) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/notes", {
            fs_object: fs_object,
            text: text
        }).then(resolve, reject);
    });
};
var listNotesForUpload = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/upload/".concat(id, "/notes")).then(resolve, reject);
    });
};
var deleteNote = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.delete("/msfp/v1/notes/".concat(id), {
        }).then(resolve, reject);
    });
};
var getSharing = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/sharing/".concat(id)).then(resolve, reject);
    });
};
var updateSharing = function(id, is_sharing, max_num_of_downloads, passphrase, email_text) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.patch("/msfp/v1/sharing/".concat(id), {
            is_sharing: is_sharing,
            max_num_of_downloads: max_num_of_downloads,
            passphrase: passphrase,
            email_text: email_text
        }).then(resolve, reject);
    });
};
var listSharingUsers = function(id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/sharing/".concat(id, "/users")).then(resolve, reject);
    });
};
var createSharingUser = function(id, email) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(id, "/users"), {
            email: email
        }).then(resolve, reject);
    });
};
var deleteSharingUser = function(sharing_object, id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.delete("/msfp/v1/sharing/".concat(sharing_object, "/users/").concat(id)).then(resolve, reject);
    });
};
var actionSetExpireSharing = function(sharing_object, expires) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/set-expire"), {
            expires: expires
        }).then(resolve, reject);
    });
};
var actionUnsetExpireSharing = function(sharing_object) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/unset-expire")).then(resolve, reject);
    });
};
var actionSharingUserToggleSharing = function(sharing_object, id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/users/").concat(id, "/toggle-sharing")).then(resolve, reject);
    });
};
var actionSharingUserSendEmail = function(sharing_object, id) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/users/").concat(id, "/send-email")).then(resolve, reject);
    });
};
var downloadFile = function(url) {
    // return new Promise((resolve, reject) => {
    //   axiosApi.get(path).then(resolve, reject);
    // });
    return new Promise(function(resolve, reject) {
        _config.axiosApi({
            method: "get",
            url: url,
            responseType: "blob"
        }).then(resolve, reject);
    });
};
var testEndpoint = function() {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.get("/msfp/v1/test").then(resolve, reject);
    });
};
var sharingSendBulkEmails = function(sharing_object) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/send-bulk-emails")).then(resolve, reject);
    });
};
var sharingDeleteProcedure = function(sharing_object) {
    return new Promise(function(resolve, reject) {
        _config.axiosApi.post("/msfp/v1/sharing/".concat(sharing_object, "/delete-procedure")).then(resolve, reject);
    });
};
var api = {
    listFiles: listFiles,
    uploadFile: uploadFile,
    createFolder: createFolder,
    getUploadedFile: getUploadedFile,
    getFolder: getFolder,
    renameObject: renameObject,
    moveObjects: moveObjects,
    deleteBatch: deleteBatch,
    makeRoot: makeRoot,
    deleteFolder: deleteFolder,
    createTag: createTag,
    deleteTag: deleteTag,
    listTagsForUpload: listTagsForUpload,
    createNote: createNote,
    listNotesForUpload: listNotesForUpload,
    deleteNote: deleteNote,
    getSharing: getSharing,
    updateSharing: updateSharing,
    listSharingUsers: listSharingUsers,
    createSharingUser: createSharingUser,
    deleteSharingUser: deleteSharingUser,
    actionSetExpireSharing: actionSetExpireSharing,
    actionUnsetExpireSharing: actionUnsetExpireSharing,
    actionSharingUserToggleSharing: actionSharingUserToggleSharing,
    actionSharingUserSendEmail: actionSharingUserSendEmail,
    downloadFile: downloadFile,
    sharingSendBulkEmails: sharingSendBulkEmails,
    sharingDeleteProcedure: sharingDeleteProcedure,
    testEndpoint: testEndpoint
};
exports.default = api;

},{"./config":"3PzRh","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3PzRh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axiosApi", function() {
    return axiosApi;
});
parcelHelpers.export(exports, "consts", function() {
    return consts;
});
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _utils = require("../utils");
var consts = {
    API_BASE_URL: MfspApiConfig.api_base_url
};
var axiosApi = _axiosDefault.default.create({
    baseURL: consts.API_BASE_URL,
    //   timeout: 7000,
    //   xsrfCookieName: "csrftoken",
    //   xsrfHeaderName: "X-WP-Nonce",
    headers: {
        "X-WP-Nonce": MfspApiConfig.nonce
    }
});
// Add a request interceptor
axiosApi.interceptors.request.use(function(config) {
    // Do something before request is sent
    var params = _utils.getUrlParameters();
    if (params.secret_explorer !== undefined) config.params = {
        secret_explorer: params.secret_explorer
    };
    return config;
}, function(error) {
    // Do something with request error
    return Promise.reject(error);
});

},{"axios":"bvUfA","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","../utils":"dpy6u"}],"bvUfA":[function(require,module,exports) {
module.exports = require('./lib/axios');

},{"./lib/axios":"cyOjn"}],"cyOjn":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Factory for creating new instances
axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
};
// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require('./helpers/spread');
// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"7AfzW","./helpers/bind":"aPVCn","./core/Axios":"k9uYv","./core/mergeConfig":"9em38","./defaults":"dBG6q","./cancel/Cancel":"HXEOx","./cancel/CancelToken":"klik8","./cancel/isCancel":"55zTx","./helpers/spread":"aSsO1","./helpers/isAxiosError":"9LsJ3"}],"7AfzW":[function(require,module,exports) {
'use strict';
var bind = require('./helpers/bind');
/*global toString:true*/ // utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== '[object Object]') return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) return false;
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') return;
    // Force an array if not already something iterable
    if (typeof obj !== 'object') /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {
    };
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({
        }, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"./helpers/bind":"aPVCn"}],"aPVCn":[function(require,module,exports) {
'use strict';
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"k9uYv":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
        config = arguments[1] || {
        };
        config.url = arguments[0];
    } else config = config || {
    };
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = 'get';
    // Hook up interceptors middleware
    var chain = [
        dispatchRequest,
        undefined
    ];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
    });
    while(chain.length)promise = promise.then(chain.shift(), chain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};
// Provide aliases for supported request methods
utils.forEach([
    'delete',
    'get',
    'head',
    'options'
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: (config || {
            }).data
        }));
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"./../utils":"7AfzW","../helpers/buildURL":"4HgyQ","./InterceptorManager":"jxDco","./dispatchRequest":"36wXj","./mergeConfig":"9em38"}],"4HgyQ":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === 'undefined') return;
            if (utils.isArray(val)) key = key + '[]';
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + '=' + encode(v));
            });
        });
        serializedParams = parts.join('&');
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
    return url;
};

},{"./../utils":"7AfzW"}],"jxDco":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"7AfzW"}],"36wXj":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {
    };
    // Transform request data
    config.data = transformData(config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {
    }, config.headers[config.method] || {
    }, config.headers);
    utils.forEach([
        'delete',
        'get',
        'head',
        'post',
        'put',
        'patch',
        'common'
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"7AfzW","./transformData":"9aHXk","../cancel/isCancel":"55zTx","../defaults":"dBG6q"}],"9aHXk":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
    });
    return data;
};

},{"./../utils":"7AfzW"}],"55zTx":[function(require,module,exports) {
'use strict';
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"dBG6q":[function(require,module,exports) {
'use strict';
var process = require("process");
var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');
var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) headers['Content-Type'] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
    else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') // For node use HTTP adapter
    adapter = require('./adapters/http');
    return adapter;
}
var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, 'Accept');
            normalizeHeaderName(headers, 'Content-Type');
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                return data.toString();
            }
            if (utils.isObject(data)) {
                setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                return JSON.stringify(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            /*eslint no-param-reassign:0*/ if (typeof data === 'string') try {
                data = JSON.parse(data);
            } catch (e) {
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    }
};
defaults.headers = {
    common: {
        'Accept': 'application/json, text/plain, */*'
    }
};
utils.forEach([
    'delete',
    'get',
    'head'
], function forEachMethodNoData(method) {
    defaults.headers[method] = {
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"cNsLR","./utils":"7AfzW","./helpers/normalizeHeaderName":"1nWz1","./adapters/xhr":"7oFWN","./adapters/http":"7oFWN"}],"cNsLR":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"1nWz1":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"7AfzW"}],"7oFWN":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) delete requestHeaders['Content-Type']; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || '';
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) return;
            // Prepare the response
            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(resolve, reject, response);
            // Clean up request
            request = null;
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError('Request aborted', config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError('Network Error', config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ('setRequestHeader' in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (config.responseType) try {
            request.responseType = config.responseType;
        } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') throw e;
        }
        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') request.addEventListener('progress', config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) request.upload.addEventListener('progress', config.onUploadProgress);
        if (config.cancelToken) // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) return;
            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
        });
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"7AfzW","./../core/settle":"j7yRv","./../helpers/cookies":"f24zy","./../helpers/buildURL":"4HgyQ","../core/buildFullPath":"hTgFl","./../helpers/parseHeaders":"1FsJj","./../helpers/isURLSameOrigin":"6XDr2","../core/createError":"3PlDn"}],"j7yRv":[function(require,module,exports) {
'use strict';
var createError = require('./createError');
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
};

},{"./createError":"3PlDn"}],"3PlDn":[function(require,module,exports) {
'use strict';
var enhanceError = require('./enhanceError');
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"q1GvY"}],"q1GvY":[function(require,module,exports) {
'use strict';
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code
        };
    };
    return error;
};

},{}],"f24zy":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
(function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push('expires=' + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push('path=' + path);
            if (utils.isString(domain)) cookie.push('domain=' + domain);
            if (secure === true) cookie.push('secure');
            document.cookie = cookie.join('; ');
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
        }
    };
})() : // Non standard browser env (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return {
        write: function write() {
        },
        read: function read() {
            return null;
        },
        remove: function remove() {
        }
    };
})();

},{"./../utils":"7AfzW"}],"hTgFl":[function(require,module,exports) {
'use strict';
var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"2Xfg7","../helpers/combineURLs":"cjhu7"}],"2Xfg7":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"cjhu7":[function(require,module,exports) {
'use strict';
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

},{}],"1FsJj":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    'age',
    'authorization',
    'content-length',
    'content-type',
    'etag',
    'expires',
    'from',
    'host',
    'if-modified-since',
    'if-unmodified-since',
    'last-modified',
    'location',
    'max-forwards',
    'proxy-authorization',
    'referer',
    'retry-after',
    'user-agent'
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {
    };
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === 'set-cookie') parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"7AfzW"}],"6XDr2":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
(function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
})() : // Non standard browser envs (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
})();

},{"./../utils":"7AfzW"}],"9em38":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {
    };
    var config = {
    };
    var valueFromConfig2Keys = [
        'url',
        'method',
        'data'
    ];
    var mergeDeepPropertiesKeys = [
        'headers',
        'auth',
        'proxy',
        'params'
    ];
    var defaultToConfig2Keys = [
        'baseURL',
        'transformRequest',
        'transformResponse',
        'paramsSerializer',
        'timeout',
        'timeoutMessage',
        'withCredentials',
        'adapter',
        'responseType',
        'xsrfCookieName',
        'xsrfHeaderName',
        'onUploadProgress',
        'onDownloadProgress',
        'decompress',
        'maxContentLength',
        'maxBodyLength',
        'maxRedirects',
        'transport',
        'httpAgent',
        'httpsAgent',
        'cancelToken',
        'socketPath',
        'responseEncoding'
    ];
    var directMergeKeys = [
        'validateStatus'
    ];
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({
        }, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    }
    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
    });
    utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
    var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
    });
    utils.forEach(otherKeys, mergeDeepProperties);
    return config;
};

},{"../utils":"7AfzW"}],"HXEOx":[function(require,module,exports) {
'use strict';
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"klik8":[function(require,module,exports) {
'use strict';
var Cancel = require('./Cancel');
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== 'function') throw new TypeError('executor must be a function.');
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./Cancel":"HXEOx"}],"aSsO1":[function(require,module,exports) {
'use strict';
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"9LsJ3":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return typeof payload === 'object' && payload.isAxiosError === true;
};

},{}],"dpy6u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Parse GET variables to change initial settings
 * @returns {object} GET parameters (key=value) object
 */ parcelHelpers.export(exports, "getUrlParameters", function() {
    return getUrlParameters;
});
function getUrlParameters() {
    var $_GET = {
    };
    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(a, name, value) {
        $_GET[name] = value;
    });
    return $_GET;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jUQz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A React hook that creates a drag 'n' drop area.
 *
 * ```jsx
 * function MyDropzone(props) {
 *   const {getRootProps, getInputProps} = useDropzone({
 *     onDrop: acceptedFiles => {
 *       // do something with the File objects, e.g. upload to some server
 *     }
 *   });
 *   return (
 *     <div {...getRootProps()}>
 *       <input {...getInputProps()} />
 *       <p>Drag and drop some files here, or click to select files</p>
 *     </div>
 *   )
 * }
 * ```
 *
 * @function useDropzone
 *
 * @param {object} props
 * @param {string|string[]} [props.accept] Set accepted file types.
 * See https://github.com/okonet/attr-accept for more information.
 * Keep in mind that mime type determination is not reliable across platforms. CSV files,
 * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
 * Windows. In some cases there might not be a mime type set at all.
 * See: https://github.com/react-dropzone/react-dropzone/issues/276
 * @param {boolean} [props.multiple=true] Allow drag 'n' drop (or selection from the file dialog) of multiple files
 * @param {boolean} [props.preventDropOnDocument=true] If false, allow dropped items to take over the current browser window
 * @param {boolean} [props.noClick=false] If true, disables click to open the native file selection dialog
 * @param {boolean} [props.noKeyboard=false] If true, disables SPACE/ENTER to open the native file selection dialog.
 * Note that it also stops tracking the focus state.
 * @param {boolean} [props.noDrag=false] If true, disables drag 'n' drop
 * @param {boolean} [props.noDragEventsBubbling=false] If true, stops drag event propagation to parents
 * @param {number} [props.minSize=0] Minimum file size (in bytes)
 * @param {number} [props.maxSize=Infinity] Maximum file size (in bytes)
 * @param {boolean} [props.disabled=false] Enable/disable the dropzone
 * @param {getFilesFromEvent} [props.getFilesFromEvent] Use this to provide a custom file aggregator
 * @param {Function} [props.onFileDialogCancel] Cb for when closing the file dialog with no selection
 * @param {dragCb} [props.onDragEnter] Cb for when the `dragenter` event occurs.
 * @param {dragCb} [props.onDragLeave] Cb for when the `dragleave` event occurs
 * @param {dragCb} [props.onDragOver] Cb for when the `dragover` event occurs
 * @param {dropCb} [props.onDrop] Cb for when the `drop` event occurs.
 * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
 *
 * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
 * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
 * If `multiple` is set to false and additional files are dropped,
 * all files besides the first will be rejected.
 * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
 *
 * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
 * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
 *
 * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
 * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
 *
 * ```js
 * function onDrop(acceptedFiles) {
 *   const req = request.post('/upload')
 *   acceptedFiles.forEach(file => {
 *     req.attach(file.name, file)
 *   })
 *   req.end(callback)
 * }
 * ```
 * @param {dropAcceptedCb} [props.onDropAccepted]
 * @param {dropRejectedCb} [props.onDropRejected]
 *
 * @returns {DropzoneState}
 */ parcelHelpers.export(exports, "useDropzone", function() {
    return useDropzone;
});
/* eslint prefer-template: 0 */ var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _fileSelector = require("file-selector");
var _index = require("./utils/index");
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    var _arguments = arguments, _loop = function(i) {
        var source = _arguments[i] != null ? _arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    };
    for(var i = 1; i < arguments.length; i++)_loop(i);
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Convenience wrapper component for the `useDropzone` hook
 *
 * ```jsx
 * <Dropzone>
 *   {({getRootProps, getInputProps}) => (
 *     <div {...getRootProps()}>
 *       <input {...getInputProps()} />
 *       <p>Drag 'n' drop some files here, or click to select files</p>
 *     </div>
 *   )}
 * </Dropzone>
 * ```
 */ var Dropzone = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var children = _ref.children, params = _objectWithoutProperties(_ref, [
        "children"
    ]);
    var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, [
        "open"
    ]);
    _react.useImperativeHandle(ref, function() {
        return {
            open: open
        };
    }, [
        open
    ]); // TODO: Figure out why react-styleguidist cannot create docs if we don't return a jsx element
    return(/*#__PURE__*/ _reactDefault.default.createElement(_react.Fragment, null, children(_objectSpread(_objectSpread({
    }, props), {
    }, {
        open: open
    }))));
});
Dropzone.displayName = 'Dropzone'; // Add default props for react-docgen
var defaultProps = {
    disabled: false,
    getFilesFromEvent: _fileSelector.fromEvent,
    maxSize: Infinity,
    minSize: 0,
    multiple: true,
    maxFiles: 0,
    preventDropOnDocument: true,
    noClick: false,
    noKeyboard: false,
    noDrag: false,
    noDragEventsBubbling: false,
    validator: null
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
    /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.draggedFiles Files in active drag
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */ children: _propTypesDefault.default.func,
    /**
   * Set accepted file types.
   * See https://github.com/okonet/attr-accept for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all.
   * See: https://github.com/react-dropzone/react-dropzone/issues/276
   */ accept: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.string)
    ]),
    /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */ multiple: _propTypesDefault.default.bool,
    /**
   * If false, allow dropped items to take over the current browser window
   */ preventDropOnDocument: _propTypesDefault.default.bool,
    /**
   * If true, disables click to open the native file selection dialog
   */ noClick: _propTypesDefault.default.bool,
    /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */ noKeyboard: _propTypesDefault.default.bool,
    /**
   * If true, disables drag 'n' drop
   */ noDrag: _propTypesDefault.default.bool,
    /**
   * If true, stops drag event propagation to parents
   */ noDragEventsBubbling: _propTypesDefault.default.bool,
    /**
   * Minimum file size (in bytes)
   */ minSize: _propTypesDefault.default.number,
    /**
   * Maximum file size (in bytes)
   */ maxSize: _propTypesDefault.default.number,
    /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */ maxFiles: _propTypesDefault.default.number,
    /**
   * Enable/disable the dropzone
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */ getFilesFromEvent: _propTypesDefault.default.func,
    /**
   * Cb for when closing the file dialog with no selection
   */ onFileDialogCancel: _propTypesDefault.default.func,
    /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */ onDragEnter: _propTypesDefault.default.func,
    /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */ onDragLeave: _propTypesDefault.default.func,
    /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */ onDragOver: _propTypesDefault.default.func,
    /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */ onDrop: _propTypesDefault.default.func,
    /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */ onDropAccepted: _propTypesDefault.default.func,
    /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */ onDropRejected: _propTypesDefault.default.func,
    /**
   * Custom validation function 
   * @param {File} file
   * @returns {FileError|FileError[]}
   */ validator: _propTypesDefault.default.func
};
exports.default = Dropzone;
/**
 * A function that is invoked for the `dragenter`,
 * `dragover` and `dragleave` events.
 * It is not invoked if the items are not files (such as link, text, etc.).
 *
 * @callback dragCb
 * @param {DragEvent} event
 */ /**
 * A function that is invoked for the `drop` or input change event.
 * It is not invoked if the items are not files (such as link, text, etc.).
 *
 * @callback dropCb
 * @param {File[]} acceptedFiles List of accepted files
 * @param {FileRejection[]} fileRejections List of rejected files and why they were rejected
 * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
 */ /**
 * A function that is invoked for the `drop` or input change event.
 * It is not invoked if the items are files (such as link, text, etc.).
 *
 * @callback dropAcceptedCb
 * @param {File[]} files List of accepted files that meet the given criteria
 * (`accept`, `multiple`, `minSize`, `maxSize`)
 * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
 */ /**
 * A function that is invoked for the `drop` or input change event.
 *
 * @callback dropRejectedCb
 * @param {File[]} files List of rejected files that do not meet the given criteria
 * (`accept`, `multiple`, `minSize`, `maxSize`)
 * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
 */ /**
 * A function that is used aggregate files,
 * in a asynchronous fashion, from drag or input change events.
 *
 * @callback getFilesFromEvent
 * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
 * @returns {(File[]|Promise<File[]>)}
 */ /**
 * An object with the current dropzone state and some helper functions.
 *
 * @typedef {object} DropzoneState
 * @property {Function} getRootProps Returns the props you should apply to the root drop container you render
 * @property {Function} getInputProps Returns the props you should apply to hidden file input you render
 * @property {Function} open Open the native file selection dialog
 * @property {boolean} isFocused Dropzone area is in focus
 * @property {boolean} isFileDialogActive File dialog is opened
 * @property {boolean} isDragActive Active drag is in progress
 * @property {boolean} isDragAccept Dragged files are accepted
 * @property {boolean} isDragReject Some dragged files are rejected
 * @property {File[]} draggedFiles Files in active drag
 * @property {File[]} acceptedFiles Accepted files
 * @property {FileRejection[]} fileRejections Rejected files and why they were rejected
 */ var initialState = {
    isFocused: false,
    isFileDialogActive: false,
    isDragActive: false,
    isDragAccept: false,
    isDragReject: false,
    draggedFiles: [],
    acceptedFiles: [],
    fileRejections: []
};
function useDropzone() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    };
    var _defaultProps$options = _objectSpread(_objectSpread({
    }, defaultProps), options), accept = _defaultProps$options.accept, disabled = _defaultProps$options.disabled, getFilesFromEvent = _defaultProps$options.getFilesFromEvent, maxSize = _defaultProps$options.maxSize, minSize = _defaultProps$options.minSize, multiple = _defaultProps$options.multiple, maxFiles = _defaultProps$options.maxFiles, onDragEnter1 = _defaultProps$options.onDragEnter, onDragLeave1 = _defaultProps$options.onDragLeave, onDragOver1 = _defaultProps$options.onDragOver, onDrop1 = _defaultProps$options.onDrop, onDropAccepted = _defaultProps$options.onDropAccepted, onDropRejected = _defaultProps$options.onDropRejected, onFileDialogCancel = _defaultProps$options.onFileDialogCancel, preventDropOnDocument = _defaultProps$options.preventDropOnDocument, noClick = _defaultProps$options.noClick, noKeyboard = _defaultProps$options.noKeyboard, noDrag = _defaultProps$options.noDrag, noDragEventsBubbling = _defaultProps$options.noDragEventsBubbling, validator = _defaultProps$options.validator;
    var rootRef = _react.useRef(null);
    var inputRef = _react.useRef(null);
    var _useReducer = _react.useReducer(reducer, initialState), _useReducer2 = _slicedToArray(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
    var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive, draggedFiles1 = state.draggedFiles; // Fn for opening the file dialog programmatically
    var openFileDialog = _react.useCallback(function() {
        if (inputRef.current) {
            dispatch({
                type: 'openDialog'
            });
            inputRef.current.value = null;
            inputRef.current.click();
        }
    }, [
        dispatch
    ]); // Update file dialog active state when the window is focused on
    var onWindowFocus = function onWindowFocus() {
        // Execute the timeout only if the file dialog is opened in the browser
        if (isFileDialogActive) setTimeout(function() {
            if (inputRef.current) {
                var files = inputRef.current.files;
                if (!files.length) {
                    dispatch({
                        type: 'closeDialog'
                    });
                    if (typeof onFileDialogCancel === 'function') onFileDialogCancel();
                }
            }
        }, 300);
    };
    _react.useEffect(function() {
        window.addEventListener('focus', onWindowFocus, false);
        return function() {
            window.removeEventListener('focus', onWindowFocus, false);
        };
    }, [
        inputRef,
        isFileDialogActive,
        onFileDialogCancel
    ]); // Cb to open the file dialog when SPACE/ENTER occurs on the dropzone
    var onKeyDownCb = _react.useCallback(function(event) {
        // Ignore keyboard events bubbling up the DOM tree
        if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) return;
        if (event.keyCode === 32 || event.keyCode === 13) {
            event.preventDefault();
            openFileDialog();
        }
    }, [
        rootRef,
        inputRef
    ]); // Update focus state for the dropzone
    var onFocusCb = _react.useCallback(function() {
        dispatch({
            type: 'focus'
        });
    }, []);
    var onBlurCb = _react.useCallback(function() {
        dispatch({
            type: 'blur'
        });
    }, []); // Cb to open the file dialog when click occurs on the dropzone
    var onClickCb = _react.useCallback(function() {
        if (noClick) return;
         // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()
        // to ensure React can handle state changes
        // See: https://github.com/react-dropzone/react-dropzone/issues/450
        if (_index.isIeOrEdge()) setTimeout(openFileDialog, 0);
        else openFileDialog();
    }, [
        inputRef,
        noClick
    ]);
    var dragTargetsRef = _react.useRef([]);
    var onDocumentDrop = function onDocumentDrop(event) {
        if (rootRef.current && rootRef.current.contains(event.target)) // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler
        return;
        event.preventDefault();
        dragTargetsRef.current = [];
    };
    _react.useEffect(function() {
        if (preventDropOnDocument) {
            document.addEventListener('dragover', _index.onDocumentDragOver, false);
            document.addEventListener('drop', onDocumentDrop, false);
        }
        return function() {
            if (preventDropOnDocument) {
                document.removeEventListener('dragover', _index.onDocumentDragOver);
                document.removeEventListener('drop', onDocumentDrop);
            }
        };
    }, [
        rootRef,
        preventDropOnDocument
    ]);
    var onDragEnterCb = _react.useCallback(function(event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done
        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [
            event.target
        ]);
        if (_index.isEvtWithFiles(event)) Promise.resolve(getFilesFromEvent(event)).then(function(draggedFiles) {
            if (_index.isPropagationStopped(event) && !noDragEventsBubbling) return;
            dispatch({
                draggedFiles: draggedFiles,
                isDragActive: true,
                type: 'setDraggedFiles'
            });
            if (onDragEnter1) onDragEnter1(event);
        });
    }, [
        getFilesFromEvent,
        onDragEnter1,
        noDragEventsBubbling
    ]);
    var onDragOverCb = _react.useCallback(function(event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event);
        var hasFiles = _index.isEvtWithFiles(event);
        if (hasFiles && event.dataTransfer) try {
            event.dataTransfer.dropEffect = 'copy';
        } catch (_unused) {
        }
        if (hasFiles && onDragOver1) onDragOver1(event);
        return false;
    }, [
        onDragOver1,
        noDragEventsBubbling
    ]);
    var onDragLeaveCb = _react.useCallback(function(event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event); // Only deactivate once the dropzone and all children have been left
        var targets = dragTargetsRef.current.filter(function(target) {
            return rootRef.current && rootRef.current.contains(target);
        }); // Make sure to remove a target present multiple times only once
        // (Firefox may fire dragenter/dragleave multiple times on the same element)
        var targetIdx = targets.indexOf(event.target);
        if (targetIdx !== -1) targets.splice(targetIdx, 1);
        dragTargetsRef.current = targets;
        if (targets.length > 0) return;
        dispatch({
            isDragActive: false,
            type: 'setDraggedFiles',
            draggedFiles: []
        });
        if (_index.isEvtWithFiles(event) && onDragLeave1) onDragLeave1(event);
    }, [
        rootRef,
        onDragLeave1,
        noDragEventsBubbling
    ]);
    var onDropCb = _react.useCallback(function(event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done
        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [];
        if (_index.isEvtWithFiles(event)) Promise.resolve(getFilesFromEvent(event)).then(function(files) {
            if (_index.isPropagationStopped(event) && !noDragEventsBubbling) return;
            var acceptedFiles = [];
            var fileRejections = [];
            files.forEach(function(file) {
                var _fileAccepted = _index.fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
                var _fileMatchSize = _index.fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
                var customErrors = validator ? validator(file) : null;
                if (accepted && sizeMatch && !customErrors) acceptedFiles.push(file);
                else {
                    var errors = [
                        acceptError,
                        sizeError
                    ];
                    if (customErrors) errors = errors.concat(customErrors);
                    fileRejections.push({
                        file: file,
                        errors: errors.filter(function(e) {
                            return e;
                        })
                    });
                }
            });
            if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
                // Reject everything and empty accepted files
                acceptedFiles.forEach(function(file) {
                    fileRejections.push({
                        file: file,
                        errors: [
                            _index.TOO_MANY_FILES_REJECTION
                        ]
                    });
                });
                acceptedFiles.splice(0);
            }
            dispatch({
                acceptedFiles: acceptedFiles,
                fileRejections: fileRejections,
                type: 'setFiles'
            });
            if (onDrop1) onDrop1(acceptedFiles, fileRejections, event);
            if (fileRejections.length > 0 && onDropRejected) onDropRejected(fileRejections, event);
            if (acceptedFiles.length > 0 && onDropAccepted) onDropAccepted(acceptedFiles, event);
        });
        dispatch({
            type: 'reset'
        });
    }, [
        multiple,
        accept,
        minSize,
        maxSize,
        maxFiles,
        getFilesFromEvent,
        onDrop1,
        onDropAccepted,
        onDropRejected,
        noDragEventsBubbling,
        validator
    ]);
    var composeHandler = function composeHandler(fn) {
        return disabled ? null : fn;
    };
    var composeKeyboardHandler = function composeKeyboardHandler(fn) {
        return noKeyboard ? null : composeHandler(fn);
    };
    var composeDragHandler = function composeDragHandler(fn) {
        return noDrag ? null : composeHandler(fn);
    };
    var stopPropagation = function stopPropagation(event) {
        if (noDragEventsBubbling) event.stopPropagation();
    };
    var getRootProps = _react.useMemo(function() {
        return function() {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            }, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? 'ref' : _ref2$refKey, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter = _ref2.onDragEnter, onDragOver = _ref2.onDragOver, onDragLeave = _ref2.onDragLeave, onDrop = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, [
                "refKey",
                "onKeyDown",
                "onFocus",
                "onBlur",
                "onClick",
                "onDragEnter",
                "onDragOver",
                "onDragLeave",
                "onDrop"
            ]);
            return _objectSpread(_objectSpread(_defineProperty({
                onKeyDown: composeKeyboardHandler(_index.composeEventHandlers(onKeyDown, onKeyDownCb)),
                onFocus: composeKeyboardHandler(_index.composeEventHandlers(onFocus, onFocusCb)),
                onBlur: composeKeyboardHandler(_index.composeEventHandlers(onBlur, onBlurCb)),
                onClick: composeHandler(_index.composeEventHandlers(onClick, onClickCb)),
                onDragEnter: composeDragHandler(_index.composeEventHandlers(onDragEnter, onDragEnterCb)),
                onDragOver: composeDragHandler(_index.composeEventHandlers(onDragOver, onDragOverCb)),
                onDragLeave: composeDragHandler(_index.composeEventHandlers(onDragLeave, onDragLeaveCb)),
                onDrop: composeDragHandler(_index.composeEventHandlers(onDrop, onDropCb))
            }, refKey, rootRef), !disabled && !noKeyboard ? {
                tabIndex: 0
            } : {
            }), rest);
        };
    }, [
        rootRef,
        onKeyDownCb,
        onFocusCb,
        onBlurCb,
        onClickCb,
        onDragEnterCb,
        onDragOverCb,
        onDragLeaveCb,
        onDropCb,
        noKeyboard,
        noDrag,
        disabled
    ]);
    var onInputElementClick = _react.useCallback(function(event) {
        event.stopPropagation();
    }, []);
    var getInputProps = _react.useMemo(function() {
        return function() {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            }, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, [
                "refKey",
                "onChange",
                "onClick"
            ]);
            var inputProps = _defineProperty({
                accept: accept,
                multiple: multiple,
                type: 'file',
                style: {
                    display: 'none'
                },
                onChange: composeHandler(_index.composeEventHandlers(onChange, onDropCb)),
                onClick: composeHandler(_index.composeEventHandlers(onClick, onInputElementClick)),
                autoComplete: 'off',
                tabIndex: -1
            }, refKey, inputRef);
            return _objectSpread(_objectSpread({
            }, inputProps), rest);
        };
    }, [
        inputRef,
        accept,
        multiple,
        onDropCb,
        disabled
    ]);
    var fileCount = draggedFiles1.length;
    var isDragAccept = fileCount > 0 && _index.allFilesAccepted({
        files: draggedFiles1,
        accept: accept,
        minSize: minSize,
        maxSize: maxSize,
        multiple: multiple,
        maxFiles: maxFiles
    });
    var isDragReject = fileCount > 0 && !isDragAccept;
    return _objectSpread(_objectSpread({
    }, state), {
    }, {
        isDragAccept: isDragAccept,
        isDragReject: isDragReject,
        isFocused: isFocused && !disabled,
        getRootProps: getRootProps,
        getInputProps: getInputProps,
        rootRef: rootRef,
        inputRef: inputRef,
        open: composeHandler(openFileDialog)
    });
}
function reducer(state, action) {
    /* istanbul ignore next */ switch(action.type){
        case 'focus':
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                isFocused: true
            });
        case 'blur':
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                isFocused: false
            });
        case 'openDialog':
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                isFileDialogActive: true
            });
        case 'closeDialog':
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                isFileDialogActive: false
            });
        case 'setDraggedFiles':
            /* eslint no-case-declarations: 0 */ var isDragActive = action.isDragActive, draggedFiles = action.draggedFiles;
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                draggedFiles: draggedFiles,
                isDragActive: isDragActive
            });
        case 'setFiles':
            return _objectSpread(_objectSpread({
            }, state), {
            }, {
                acceptedFiles: action.acceptedFiles,
                fileRejections: action.fileRejections
            });
        case 'reset':
            return _objectSpread({
            }, initialState);
        default:
            return state;
    }
}

},{"react":"kEcQC","prop-types":"h9rZg","file-selector":"xIxJ0","./utils/index":"lVkvP","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h9rZg":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"4rqId","./factoryWithTypeCheckers":"5YsXw"}],"4rqId":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"dymKl"}],"dymKl":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"5YsXw":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var has = require('./lib/has');
var checkPropTypes = require('./checkPropTypes');
var printWarning = function printWarning() {
};
printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {
        };
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
            var checker = arrayOfTypeCheckers[i1];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i1 + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, 'expectedType')) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue === "undefined" ? "undefined" : _helpers.typeOf(propValue)){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue === "undefined" ? "undefined" : _helpers.typeOf(propValue);
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"@swc/helpers":"cawJ1","react-is":"4rqId","object-assign":"geatC","./lib/ReactPropTypesSecret":"5wEtp","./lib/has":"hPiEM","./checkPropTypes":"eTgqN"}],"5wEtp":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"hPiEM":[function(require,module,exports) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

},{}],"eTgqN":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function printWarning() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = require('./lib/has');
printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _helpers.typeOf(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === "undefined" ? "undefined" : _helpers.typeOf(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"@swc/helpers":"cawJ1","./lib/ReactPropTypesSecret":"5wEtp","./lib/has":"hPiEM"}],"xIxJ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromEvent", function() {
    return _fileSelector.fromEvent;
});
var _fileSelector = require("./file-selector");

},{"./file-selector":"nluDP","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"nluDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert a DragEvent's DataTrasfer object to a list of File objects
 * NOTE: If some of the items are folders,
 * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.
 * @param evt
 */ parcelHelpers.export(exports, "fromEvent", function() {
    return fromEvent;
});
var _tslib = require("tslib");
var _file = require("./file");
var FILES_TO_IGNORE = [
    // Thumbnail cache files for macOS and Windows
    '.DS_Store',
    'Thumbs.db' // Windows
];
function fromEvent(evt) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(_a) {
            return [
                2 /*return*/ ,
                isDragEvt(evt) && evt.dataTransfer ? getDataTransferFiles(evt.dataTransfer, evt.type) : getInputFiles(evt)
            ];
        });
    });
}
function isDragEvt(value) {
    return !!value.dataTransfer;
}
function getInputFiles(evt) {
    var files = isInput(evt.target) ? evt.target.files ? fromList(evt.target.files) : [] : [];
    return files.map(function(file) {
        return _file.toFileWithPath(file);
    });
}
function isInput(value) {
    return value !== null;
}
function getDataTransferFiles(dt, type) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        var items, files;
        return _tslib.__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (!dt.items) return [
                        3 /*break*/ ,
                        2
                    ];
                    items = fromList(dt.items).filter(function(item) {
                        return item.kind === 'file';
                    });
                    // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,
                    // only 'dragstart' and 'drop' has access to the data (source node)
                    if (type !== 'drop') return [
                        2 /*return*/ ,
                        items
                    ];
                    return [
                        4 /*yield*/ ,
                        Promise.all(items.map(toFilePromises))
                    ];
                case 1:
                    files = _a.sent();
                    return [
                        2 /*return*/ ,
                        noIgnoredFiles(flatten(files))
                    ];
                case 2:
                    return [
                        2 /*return*/ ,
                        noIgnoredFiles(fromList(dt.files).map(function(file) {
                            return _file.toFileWithPath(file);
                        }))
                    ];
            }
        });
    });
}
function noIgnoredFiles(files) {
    return files.filter(function(file) {
        return FILES_TO_IGNORE.indexOf(file.name) === -1;
    });
}
// IE11 does not support Array.from()
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility
// https://developer.mozilla.org/en-US/docs/Web/API/FileList
// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList
function fromList(items) {
    var files = [];
    // tslint:disable: prefer-for-of
    for(var i = 0; i < items.length; i++){
        var file = items[i];
        files.push(file);
    }
    return files;
}
// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem
function toFilePromises(item) {
    if (typeof item.webkitGetAsEntry !== 'function') return fromDataTransferItem(item);
    var entry = item.webkitGetAsEntry();
    // Safari supports dropping an image node from a different window and can be retrieved using
    // the DataTransferItem.getAsFile() API
    // NOTE: FileSystemEntry.file() throws if trying to get the file
    if (entry && entry.isDirectory) return fromDirEntry(entry);
    return fromDataTransferItem(item);
}
function flatten(items) {
    return items.reduce(function(acc, files) {
        return _tslib.__spread(acc, Array.isArray(files) ? flatten(files) : [
            files
        ]);
    }, []);
}
function fromDataTransferItem(item) {
    var file = item.getAsFile();
    if (!file) return Promise.reject(item + " is not a File");
    var fwp = _file.toFileWithPath(file);
    return Promise.resolve(fwp);
}
// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry
function fromEntry(entry) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(_a) {
            return [
                2 /*return*/ ,
                entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)
            ];
        });
    });
}
// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry
function fromDirEntry(entry) {
    var reader = entry.createReader();
    return new Promise(function(resolve, reject) {
        var entries = [];
        function readEntries() {
            var _this = this;
            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader
            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries
            reader.readEntries(function(batch) {
                return _tslib.__awaiter(_this, void 0, void 0, function() {
                    var files, err_1, items;
                    return _tslib.__generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                if (!!batch.length) return [
                                    3 /*break*/ ,
                                    5
                                ];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([
                                    1,
                                    3,
                                    ,
                                    4
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    Promise.all(entries)
                                ];
                            case 2:
                                files = _a.sent();
                                resolve(files);
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case 3:
                                err_1 = _a.sent();
                                reject(err_1);
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case 4:
                                return [
                                    3 /*break*/ ,
                                    6
                                ];
                            case 5:
                                items = Promise.all(batch.map(fromEntry));
                                entries.push(items);
                                // Continue reading
                                readEntries();
                                _a.label = 6;
                            case 6:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }, function(err) {
                reject(err);
            });
        }
        readEntries();
    });
}
// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry
function fromFileEntry(entry) {
    return _tslib.__awaiter(this, void 0, void 0, function() {
        return _tslib.__generator(this, function(_a) {
            return [
                2 /*return*/ ,
                new Promise(function(resolve, reject) {
                    entry.file(function(file) {
                        var fwp = _file.toFileWithPath(file, entry.fullPath);
                        resolve(fwp);
                    }, function(err) {
                        reject(err);
                    });
                })
            ];
        });
    });
}

},{"tslib":"3QGnt","./file":"elLgy","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3QGnt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", function() {
    return __extends;
});
parcelHelpers.export(exports, "__assign", function() {
    return __assign;
});
parcelHelpers.export(exports, "__rest", function() {
    return __rest;
});
parcelHelpers.export(exports, "__decorate", function() {
    return __decorate;
});
parcelHelpers.export(exports, "__param", function() {
    return __param;
});
parcelHelpers.export(exports, "__metadata", function() {
    return __metadata;
});
parcelHelpers.export(exports, "__awaiter", function() {
    return __awaiter;
});
parcelHelpers.export(exports, "__generator", function() {
    return __generator;
});
parcelHelpers.export(exports, "__createBinding", function() {
    return __createBinding;
});
parcelHelpers.export(exports, "__exportStar", function() {
    return __exportStar;
});
parcelHelpers.export(exports, "__values", function() {
    return __values;
});
parcelHelpers.export(exports, "__read", function() {
    return __read;
});
/** @deprecated */ parcelHelpers.export(exports, "__spread", function() {
    return __spread;
});
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", function() {
    return __spreadArrays;
});
parcelHelpers.export(exports, "__spreadArray", function() {
    return __spreadArray;
});
parcelHelpers.export(exports, "__await", function() {
    return __await;
});
parcelHelpers.export(exports, "__asyncGenerator", function() {
    return __asyncGenerator;
});
parcelHelpers.export(exports, "__asyncDelegator", function() {
    return __asyncDelegator;
});
parcelHelpers.export(exports, "__asyncValues", function() {
    return __asyncValues;
});
parcelHelpers.export(exports, "__makeTemplateObject", function() {
    return __makeTemplateObject;
});
parcelHelpers.export(exports, "__importStar", function() {
    return __importStar;
});
parcelHelpers.export(exports, "__importDefault", function() {
    return __importDefault;
});
parcelHelpers.export(exports, "__classPrivateFieldGet", function() {
    return __classPrivateFieldGet;
});
parcelHelpers.export(exports, "__classPrivateFieldSet", function() {
    return __classPrivateFieldSet;
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var __createBinding = Object.create ? function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function __setModuleDefault(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"elLgy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COMMON_MIME_TYPES", function() {
    return COMMON_MIME_TYPES;
});
parcelHelpers.export(exports, "toFileWithPath", function() {
    return toFileWithPath;
});
var COMMON_MIME_TYPES = new Map([
    [
        'avi',
        'video/avi'
    ],
    [
        'gif',
        'image/gif'
    ],
    [
        'ico',
        'image/x-icon'
    ],
    [
        'jpeg',
        'image/jpeg'
    ],
    [
        'jpg',
        'image/jpeg'
    ],
    [
        'mkv',
        'video/x-matroska'
    ],
    [
        'mov',
        'video/quicktime'
    ],
    [
        'mp4',
        'video/mp4'
    ],
    [
        'pdf',
        'application/pdf'
    ],
    [
        'png',
        'image/png'
    ],
    [
        'zip',
        'application/zip'
    ],
    [
        'doc',
        'application/msword'
    ],
    [
        'docx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ]
]);
function toFileWithPath(file, path) {
    var f = withMimeType(file);
    if (typeof f.path !== 'string') {
        var webkitRelativePath = file.webkitRelativePath;
        Object.defineProperty(f, 'path', {
            value: typeof path === 'string' ? path : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,
            writable: false,
            configurable: false,
            enumerable: true
        });
    }
    return f;
}
function withMimeType(file) {
    var name = file.name;
    var hasExtension = name && name.lastIndexOf('.') !== -1;
    if (hasExtension && !file.type) {
        var ext = name.split('.').pop().toLowerCase();
        var type = COMMON_MIME_TYPES.get(ext);
        if (type) Object.defineProperty(file, 'type', {
            value: type,
            writable: false,
            configurable: false,
            enumerable: true
        });
    }
    return file;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lVkvP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FILE_INVALID_TYPE", function() {
    return FILE_INVALID_TYPE;
});
parcelHelpers.export(exports, "FILE_TOO_LARGE", function() {
    return FILE_TOO_LARGE;
});
parcelHelpers.export(exports, "FILE_TOO_SMALL", function() {
    return FILE_TOO_SMALL;
});
parcelHelpers.export(exports, "TOO_MANY_FILES", function() {
    return TOO_MANY_FILES;
});
parcelHelpers.export(exports, "getInvalidTypeRejectionErr", function() {
    return getInvalidTypeRejectionErr;
});
parcelHelpers.export(exports, "getTooLargeRejectionErr", function() {
    return getTooLargeRejectionErr;
});
parcelHelpers.export(exports, "getTooSmallRejectionErr", function() {
    return getTooSmallRejectionErr;
});
parcelHelpers.export(exports, "TOO_MANY_FILES_REJECTION", function() {
    return TOO_MANY_FILES_REJECTION;
});
// that MIME type will always be accepted
parcelHelpers.export(exports, "fileAccepted", function() {
    return fileAccepted;
});
parcelHelpers.export(exports, "fileMatchSize", function() {
    return fileMatchSize;
});
parcelHelpers.export(exports, "allFilesAccepted", function() {
    return allFilesAccepted;
}) // React's synthetic events has event.isPropagationStopped,
;
// but to remain compatibility with other libs (Preact) fall back
// to check event.cancelBubble
parcelHelpers.export(exports, "isPropagationStopped", function() {
    return isPropagationStopped;
});
parcelHelpers.export(exports, "isEvtWithFiles", function() {
    return isEvtWithFiles;
});
parcelHelpers.export(exports, "isKindFile", function() {
    return isKindFile;
}) // allow the entire document to be a drag target
;
parcelHelpers.export(exports, "onDocumentDragOver", function() {
    return onDocumentDragOver;
});
parcelHelpers.export(exports, "isIeOrEdge", function() {
    return isIeOrEdge;
});
/**
 * This is intended to be used to compose event handlers
 * They are executed in order until one of them calls `event.isPropagationStopped()`.
 * Note that the check is done on the first invoke too,
 * meaning that if propagation was stopped before invoking the fns,
 * no handlers will be executed.
 *
 * @param {Function} fns the event hanlder functions
 * @return {Function} the event handler to add to an element
 */ parcelHelpers.export(exports, "composeEventHandlers", function() {
    return composeEventHandlers;
});
var _helpers = require("@swc/helpers");
var _attrAccept = require("attr-accept"); // Error codes
var _attrAcceptDefault = parcelHelpers.interopDefault(_attrAccept);
function _typeof(obj1) {
    if (typeof Symbol === "function" && _helpers.typeOf(Symbol.iterator) === "symbol") _typeof = function _typeof(obj) {
        return typeof obj === "undefined" ? "undefined" : _helpers.typeOf(obj);
    };
    else _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _helpers.typeOf(obj);
    };
    return _typeof(obj1);
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
var FILE_INVALID_TYPE = 'file-invalid-type';
var FILE_TOO_LARGE = 'file-too-large';
var FILE_TOO_SMALL = 'file-too-small';
var TOO_MANY_FILES = 'too-many-files'; // File Errors
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr(accept) {
    accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
    var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(', ')) : accept;
    return {
        code: FILE_INVALID_TYPE,
        message: "File type must be ".concat(messageSuffix)
    };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr(maxSize) {
    return {
        code: FILE_TOO_LARGE,
        message: "File is larger than ".concat(maxSize, " bytes")
    };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr(minSize) {
    return {
        code: FILE_TOO_SMALL,
        message: "File is smaller than ".concat(minSize, " bytes")
    };
};
var TOO_MANY_FILES_REJECTION = {
    code: TOO_MANY_FILES,
    message: 'Too many files'
}; // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
function fileAccepted(file, accept) {
    var isAcceptable = file.type === 'application/x-moz-file' || _attrAcceptDefault.default(file, accept);
    return [
        isAcceptable,
        isAcceptable ? null : getInvalidTypeRejectionErr(accept)
    ];
}
function fileMatchSize(file, minSize, maxSize) {
    if (isDefined(file.size)) {
        if (isDefined(minSize) && isDefined(maxSize)) {
            if (file.size > maxSize) return [
                false,
                getTooLargeRejectionErr(maxSize)
            ];
            if (file.size < minSize) return [
                false,
                getTooSmallRejectionErr(minSize)
            ];
        } else if (isDefined(minSize) && file.size < minSize) return [
            false,
            getTooSmallRejectionErr(minSize)
        ];
        else if (isDefined(maxSize) && file.size > maxSize) return [
            false,
            getTooLargeRejectionErr(maxSize)
        ];
    }
    return [
        true,
        null
    ];
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
function allFilesAccepted(_ref) {
    var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles;
    if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) return false;
    return files.every(function(file) {
        var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
        var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
        return accepted && sizeMatch;
    });
}
function isPropagationStopped(event) {
    if (typeof event.isPropagationStopped === 'function') return event.isPropagationStopped();
    else if (typeof event.cancelBubble !== 'undefined') return event.cancelBubble;
    return false;
}
function isEvtWithFiles(event) {
    if (!event.dataTransfer) return !!event.target && !!event.target.files;
     // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
    // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file
    return Array.prototype.some.call(event.dataTransfer.types, function(type) {
        return type === 'Files' || type === 'application/x-moz-file';
    });
}
function isKindFile(item) {
    return _typeof(item) === 'object' && item !== null && item.kind === 'file';
}
function onDocumentDragOver(event) {
    event.preventDefault();
}
function isIe(userAgent) {
    return userAgent.indexOf('MSIE') !== -1 || userAgent.indexOf('Trident/') !== -1;
}
function isEdge(userAgent) {
    return userAgent.indexOf('Edge/') !== -1;
}
function isIeOrEdge() {
    var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
    return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++)fns[_key] = arguments[_key];
    return function(event) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        return fns.some(function(fn) {
            if (!isPropagationStopped(event) && fn) fn.apply(void 0, [
                event
            ].concat(args));
            return isPropagationStopped(event);
        });
    };
}

},{"@swc/helpers":"cawJ1","attr-accept":"6seOY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6seOY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = function(file, acceptedFiles) {
    if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
        var fileName = file.name || '';
        var mimeType = (file.type || '').toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, '');
        return acceptedFilesArray.some(function(type) {
            var validType = type.trim().toLowerCase();
            if (validType.charAt(0) === '.') return fileName.toLowerCase().endsWith(validType);
            else if (validType.endsWith('/*')) // This is something like a image/* mime type
            return baseMimeType === validType.replace(/\/.*$/, '');
            return mimeType === validType;
        });
    }
    return true;
};

},{}],"aTG8Q":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args1;
    var timeout = undefined;
    return function(args) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    var isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    var isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    var isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"cZAbo"}],"ewncR":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f9ac = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f9ac.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return AdminPage;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _fileExplorer = require("../../shared/FileExplorer");
var _fileExplorerDefault = parcelHelpers.interopDefault(_fileExplorer);
var AdminPage = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(AdminPage, _Component);
    var _super = _helpers.createSuper(AdminPage);
    function AdminPage(props) {
        _helpers.classCallCheck(this, AdminPage);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(AdminPage, [
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "container-fluid",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "row",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "card shadow-sm",
                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                className: "card-body",
                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileExplorerDefault.default, {
                                    mode: "admin"
                                }, void 0, false, {
                                    fileName: "src_react/views/AdminPage/index.jsx",
                                    lineNumber: 25,
                                    columnNumber: 15
                                }, this)
                            }, void 0, false, {
                                fileName: "src_react/views/AdminPage/index.jsx",
                                lineNumber: 15,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "src_react/views/AdminPage/index.jsx",
                            lineNumber: 14,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/views/AdminPage/index.jsx",
                        lineNumber: 13,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/views/AdminPage/index.jsx",
                    lineNumber: 12,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return AdminPage;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$f9ac.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../shared/FileExplorer":"gV3ea","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"gV3ea":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$e60a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e60a.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return FileExplorer;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _fileSaver = require("file-saver");
var _jquery = require("jquery");
var _jqueryDefault = parcelHelpers.interopDefault(_jquery);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _api = require("../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _constsJs = require("../../consts.js");
var _constsJsDefault = parcelHelpers.interopDefault(_constsJs);
var _alertsJs = require("../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var _panelCard = require("../../shared/PanelCard");
var _panelCardDefault = parcelHelpers.interopDefault(_panelCard);
var _buttonAddFolder = require("../buttons/ButtonAddFolder");
var _buttonAddFolderDefault = parcelHelpers.interopDefault(_buttonAddFolder);
var _buttonDelete = require("../buttons/ButtonDelete");
var _buttonDeleteDefault = parcelHelpers.interopDefault(_buttonDelete);
var _buttonFoldAll = require("../buttons/ButtonFoldAll");
var _buttonFoldAllDefault = parcelHelpers.interopDefault(_buttonFoldAll);
var _buttonRefresh = require("../buttons/ButtonRefresh");
var _buttonRefreshDefault = parcelHelpers.interopDefault(_buttonRefresh);
var _buttonUnfoldAll = require("../buttons/ButtonUnfoldAll");
var _buttonUnfoldAllDefault = parcelHelpers.interopDefault(_buttonUnfoldAll);
var _buttonUploadNew = require("../buttons/ButtonUploadNew");
var _buttonUploadNewDefault = parcelHelpers.interopDefault(_buttonUploadNew);
var _shareModal = require("../modals/ShareModal");
var _shareModalDefault = parcelHelpers.interopDefault(_shareModal);
// Modals
var _uploadModal = require("../modals/UploadModal");
var _uploadModalDefault = parcelHelpers.interopDefault(_uploadModal);
var _loadingSpinner = require("../spinners/LoadingSpinner");
var _loadingSpinnerDefault = parcelHelpers.interopDefault(_loadingSpinner);
var _objectDetailsJsx = require("./components/ObjectDetails.jsx");
var _objectDetailsJsxDefault = parcelHelpers.interopDefault(_objectDetailsJsx);
var _panelNotesJsx = require("./components/PanelNotes.jsx");
var _panelNotesJsxDefault = parcelHelpers.interopDefault(_panelNotesJsx);
var _panelTagsJsx = require("./components/PanelTags.jsx");
var _panelTagsJsxDefault = parcelHelpers.interopDefault(_panelTagsJsx);
var FileExplorer = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(FileExplorer, _Component);
    var _super = _helpers.createSuper(FileExplorer);
    function FileExplorer(props) {
        _helpers.classCallCheck(this, FileExplorer);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
            loading: true,
            tree_loaded: false,
            selected_count: 0,
            selected_data: [],
            single_select: {
            },
            modals: {
                show_upload: false,
                show_share: false
            }
        };
        _this.loadFiles = _this.loadFiles.bind(_helpers.assertThisInitialized(_this));
        _this.jstreeChanged = _this.jstreeChanged.bind(_helpers.assertThisInitialized(_this));
        _this.jstreeDropped = _this.jstreeDropped.bind(_helpers.assertThisInitialized(_this));
        _this.customMenu = _this.customMenu.bind(_helpers.assertThisInitialized(_this));
        _this.check_callback = _this.check_callback.bind(_helpers.assertThisInitialized(_this));
        // All Modals
        _this.hideAllModals = _this.hideAllModals.bind(_helpers.assertThisInitialized(_this));
        _this.showModal = _this.showModal.bind(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(FileExplorer, [
        {
            key: "hideAllModals",
            value: function hideAllModals() {
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    modals: {
                        show_upload: false,
                        show_share: false
                    }
                }));
            }
        },
        {
            key: "showModal",
            value: function showModal(modal_name) {
                console.log("*", modal_name);
                switch(modal_name){
                    case "upload":
                        console.log("ok");
                        this.setState(_helpers.objectSpread({
                        }, this.state, {
                            modals: {
                                show_upload: true
                            }
                        }));
                        break;
                    case "share":
                        this.setState(_helpers.objectSpread({
                        }, this.state, {
                            modals: {
                                show_share: true
                            }
                        }));
                        break;
                }
            }
        },
        {
            key: "check_callback",
            value: function check_callback(operation, node, node_parent, node_position, more) {
                console.log(operation, node, node_parent, node_position, more);
                // console.log(node_parent.id, node.id);
                // if (operation === "move_node") {
                //   return false;
                // }
                return true;
            }
        },
        {
            key: "customMenu",
            value: function customMenu(node) {
                var items = {
                    renameItem: {
                        label: "Rename",
                        action: (function() {
                            var _this = this;
                            console.log("Rename", node);
                            console.log("this", this);
                            var id = Number(node.id);
                            if (node.type.includes("folder")) var current_name = node.text;
                            else var current_name = node.text.split(".").slice(0, -1).join(".");
                            _alertsJsDefault.default.ShowInputAlert("Rename Object", "text", "Enter new name:", "ex. NewFolder", true, current_name).then(function(new_name) {
                                var _this1 = _this;
                                console.log(new_name);
                                if (new_name) _apiDefault.default.renameObject(id, new_name).then(function(result) {
                                    console.log(result);
                                    _this1.loadFiles();
                                    _alertsJsDefault.default.ToastAlert("success", "Object renamed successfully");
                                }, function(reason) {
                                    console.log(reason);
                                });
                                else _alertsJsDefault.default.ToastAlert("info", "No action taken");
                            });
                        }).bind(this)
                    },
                    makeRoot: {
                        label: "Make root",
                        action: (function() {
                            var _this = this;
                            console.log("Make root", node);
                            var id = Number(node.id);
                            _apiDefault.default.makeRoot(id).then(function(result) {
                                console.log(result);
                                _this.loadFiles();
                            }, function(reason) {
                                console.log(reason);
                            });
                        }).bind(this)
                    },
                    downloadItem: {
                        label: "Download",
                        action: (function() {
                            console.log("Download", node);
                            var id = Number(node.id);
                            // window.location = `/wp-json/msfp/v1/downloadSelected/${id}`;
                            _apiDefault.default.downloadFile("msfp/v1/downloadSelected/".concat(id)).then(function(param) {
                                var data = param.data, headers = param.headers;
                                console.log(headers);
                                var content_disposition = headers["content-disposition"];
                                var content_type = headers["content-type"];
                                var filename = content_disposition.split("filename=")[1].split('"')[1];
                                var blob = new Blob([
                                    data
                                ], {
                                    type: "".concat(content_type, ";charset=utf-8")
                                });
                                _fileSaver.saveAs(blob, filename);
                            });
                        }).bind(this)
                    },
                    shareItem: {
                        label: "Share",
                        action: (function() {
                            this.showModal("share");
                            console.log("Share", node);
                            console.log("single_select", this.state.single_select);
                        }).bind(this)
                    }
                };
                // if ($(node)[0].type.includes("file")) {
                //   delete items.shareItem;
                // }
                if (this.props.mode !== "admin") delete items.shareItem;
                return items;
            }
        },
        {
            key: "loadFiles",
            value: function loadFiles() {
                var _this = this;
                this.setState({
                    loading: true
                });
                console.log("[DEBUG] Loading files");
                _apiDefault.default.listFiles().then(function(response) {
                    console.log(response);
                    console.dir(response.data);
                    _jqueryDefault.default("#jstree_root").jstree(true).settings.core.data = response.data;
                    _jqueryDefault.default("#jstree_root").jstree(true).refresh();
                    _this.setState({
                        loading: false
                    });
                }, function(reason) {
                    console.log(reason);
                    _this.setState({
                        loading: false
                    });
                });
            }
        },
        {
            key: "jstreeChanged",
            value: function jstreeChanged(e, data) {
                // Single Select
                if (data.selected.length == 1) {
                    console.log("On Single Click :", data.selected);
                    var file_id = Number(data.selected);
                    if (data.node.type.includes("file")) {
                        var _this = this;
                        console.log("File");
                        _apiDefault.default.getUploadedFile(file_id).then(function(result) {
                            console.log(result.data);
                            _this.setState(_helpers.objectSpread({
                            }, _this.state, {
                                single_select: result.data
                            }));
                        }, function(reason) {
                            console.log(reason);
                        });
                    } else {
                        var _this2 = this;
                        console.log("Folder");
                        _apiDefault.default.getFolder(file_id).then(function(result) {
                            console.log(result.data);
                            _this2.setState(_helpers.objectSpread({
                            }, _this2.state, {
                                single_select: result.data
                            }));
                        }, function(reason) {
                            console.log(reason);
                        });
                    }
                }
                // Multi Select
                if (data.selected.length > 1) console.log("Multi Select");
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    selected_count: data.selected.length,
                    selected_data: data.selected
                }));
            }
        },
        {
            key: "jstreeDropped",
            value: function jstreeDropped(e1, data) {
                var _this = this;
                console.log("dnd_stop.vakata", data);
                var nodes = data.data.nodes;
                var sourceIDs = nodes.map(function(e) {
                    return Number(e);
                });
                var destinationID = Number(data.event.target.id.split("_")[0]);
                if (destinationID === 0) destinationID = Number(data.event.target.parentElement.id.split("_")[0]);
                console.log("Source IDs", sourceIDs);
                console.log("Destination ID", destinationID);
                _apiDefault.default.moveObjects(sourceIDs, destinationID).then(function(result) {
                    console.log(result);
                    _this.loadFiles();
                }, function(reason) {
                    console.log(reason);
                    _alertsJsDefault.default.ToastAlert("error", "".concat(reason.response.data.message));
                    // alert(`${reason.response.statusText}: ${reason.response.data.message}`);
                    _this.loadFiles();
                });
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                _jqueryDefault.default("#jstree_root").jstree({
                    contextmenu: {
                        items: this.customMenu
                    },
                    types: _constsJsDefault.default.JSTREE_TYPES,
                    plugins: [
                        "types",
                        "contextmenu",
                        "dnd",
                        "sort"
                    ],
                    sort: function sort(a, b) {
                        var a1 = this.get_node(a);
                        var b1 = this.get_node(b);
                        if (a1.icon == b1.icon) return a1.text > b1.text ? 1 : -1;
                        else return a1.icon > b1.icon ? 1 : -1;
                    },
                    core: {
                        check_callback: this.check_callback,
                        // check_callback: true,
                        data: []
                    }
                });
                _jqueryDefault.default("#jstree_root").on("changed.jstree", this.jstreeChanged);
                _jqueryDefault.default(document).on("dnd_stop.vakata", this.jstreeDropped);
                this.loadFiles();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var _state = this.state, single_select = _state.single_select, loading = _state.loading, selected_count = _state.selected_count, selected_data = _state.selected_data, modals = _state.modals;
                var mode = this.props.mode;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    children: [
                        modals.show_upload ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_uploadModalDefault.default, {
                            hideAllModals: this.hideAllModals,
                            loadFiles: this.loadFiles
                        }, void 0, false, {
                            fileName: "src_react/shared/FileExplorer/index.jsx",
                            lineNumber: 306,
                            columnNumber: 11
                        }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                        }, void 0, false),
                        modals.show_share ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_shareModalDefault.default, {
                            hideAllModals: this.hideAllModals,
                            fsObjectId: single_select.id
                        }, void 0, false, {
                            fileName: "src_react/shared/FileExplorer/index.jsx",
                            lineNumber: 314,
                            columnNumber: 11
                        }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                        }, void 0, false),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "container",
                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                className: "row",
                                children: [
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "col-md-6",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h1", {
                                                className: "d-flex align-items-center my-1",
                                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                    className: "text-dark fw-bolder fs-1",
                                                    children: [
                                                        "File structure ",
                                                        mode === "admin" ? "(Admin)" : "(Share)"
                                                    ]
                                                }, void 0, true, {
                                                    fileName: "src_react/shared/FileExplorer/index.jsx",
                                                    lineNumber: 332,
                                                    columnNumber: 17
                                                }, this)
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 331,
                                                columnNumber: 15
                                            }, this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_loadingSpinnerDefault.default, {
                                                loading: loading
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 337,
                                                columnNumber: 15
                                            }, this),
                                            loading ? "" : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                style: {
                                                    borderBottom: "1px solid lightgrey"
                                                },
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                        className: "mt-2",
                                                        children: [
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonRefreshDefault.default, {
                                                                callbackSuccess: this.loadFiles
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 344,
                                                                columnNumber: 21
                                                            }, this),
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonAddFolderDefault.default, {
                                                                callbackSuccess: this.loadFiles
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 345,
                                                                columnNumber: 21
                                                            }, this),
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonUploadNewDefault.default, {
                                                                callbackSuccess: function() {
                                                                    _this.showModal("upload");
                                                                }
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 346,
                                                                columnNumber: 21
                                                            }, this),
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                                                className: "btn btn-light-danger text-hover-white btn-sm rounded-0 text-danger",
                                                                style: {
                                                                    display: selected_count === 0 ? "none" : "inline-block"
                                                                },
                                                                onClick: function(e) {
                                                                    _jqueryDefault.default("#jstree_root").jstree().deselect_all(true);
                                                                    _this.setState(_helpers.objectSpread({
                                                                    }, _this.state, {
                                                                        selected_count: 0,
                                                                        single_select: {
                                                                        }
                                                                    }));
                                                                },
                                                                children: [
                                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                                        className: "jstree-icon-size fas fa-times"
                                                                    }, void 0, false, {
                                                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                        lineNumber: 366,
                                                                        columnNumber: 23
                                                                    }, this),
                                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                                                        className: "msfp-button-font-size",
                                                                        children: [
                                                                            "Unselect ( ",
                                                                            selected_count,
                                                                            " )"
                                                                        ]
                                                                    }, void 0, true, {
                                                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                        lineNumber: 367,
                                                                        columnNumber: 23
                                                                    }, this)
                                                                ]
                                                            }, void 0, true, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 352,
                                                                columnNumber: 21
                                                            }, this)
                                                        ]
                                                    }, void 0, true, {
                                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                                        lineNumber: 343,
                                                        columnNumber: 19
                                                    }, this),
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                        className: "mb-2",
                                                        children: [
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonFoldAllDefault.default, {
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 373,
                                                                columnNumber: 21
                                                            }, this),
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonUnfoldAllDefault.default, {
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 374,
                                                                columnNumber: 21
                                                            }, this),
                                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDeleteDefault.default, {
                                                                selected_count: selected_count,
                                                                selected_data: selected_data,
                                                                loadFilesFunc: this.loadFiles
                                                            }, void 0, false, {
                                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                                lineNumber: 375,
                                                                columnNumber: 21
                                                            }, this)
                                                        ]
                                                    }, void 0, true, {
                                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                                        lineNumber: 372,
                                                        columnNumber: 19
                                                    }, this)
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 342,
                                                columnNumber: 17
                                            }, this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                                id: "jstree_root",
                                                style: {
                                                    display: !loading ? "block" : "none"
                                                }
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 383,
                                                columnNumber: 15
                                            }, this)
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                        lineNumber: 325,
                                        columnNumber: 13
                                    }, this),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "col-md-6",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_panelCardDefault.default, {
                                                title: "Object information",
                                                icon_classname: "fas fa-info-circle",
                                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_objectDetailsJsxDefault.default, _helpers.objectSpread({
                                                }, single_select), void 0, false, {
                                                    fileName: "src_react/shared/FileExplorer/index.jsx",
                                                    lineNumber: 393,
                                                    columnNumber: 17
                                                }, this)
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 389,
                                                columnNumber: 15
                                            }, this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_panelCardDefault.default, {
                                                title: "Tags",
                                                icon_classname: "fas fa-tags",
                                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_panelTagsJsxDefault.default, _helpers.objectSpread({
                                                }, single_select), void 0, false, {
                                                    fileName: "src_react/shared/FileExplorer/index.jsx",
                                                    lineNumber: 396,
                                                    columnNumber: 17
                                                }, this)
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 395,
                                                columnNumber: 15
                                            }, this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_panelCardDefault.default, {
                                                title: "Notes",
                                                icon_classname: "fas fa-sticky-note",
                                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_panelNotesJsxDefault.default, _helpers.objectSpread({
                                                }, single_select), void 0, false, {
                                                    fileName: "src_react/shared/FileExplorer/index.jsx",
                                                    lineNumber: 399,
                                                    columnNumber: 17
                                                }, this)
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                                lineNumber: 398,
                                                columnNumber: 15
                                            }, this)
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/FileExplorer/index.jsx",
                                        lineNumber: 388,
                                        columnNumber: 13
                                    }, this)
                                ]
                            }, void 0, true, {
                                fileName: "src_react/shared/FileExplorer/index.jsx",
                                lineNumber: 324,
                                columnNumber: 11
                            }, this)
                        }, void 0, false, {
                            fileName: "src_react/shared/FileExplorer/index.jsx",
                            lineNumber: 323,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/FileExplorer/index.jsx",
                    lineNumber: 303,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return FileExplorer;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$e60a.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","jquery":"gmnaE","./components/ObjectDetails.jsx":"kF9JD","./components/PanelTags.jsx":"dhlNm","./components/PanelNotes.jsx":"jeguw","../spinners/LoadingSpinner":"gutuu","../buttons/ButtonUploadNew":"35v19","../buttons/ButtonAddFolder":"dNFPJ","../buttons/ButtonRefresh":"aCC2j","../buttons/ButtonUnfoldAll":"jTIdY","../buttons/ButtonFoldAll":"5I2UN","../buttons/ButtonDelete":"c8l6Y","../modals/UploadModal":"BpgP6","../modals/ShareModal":"hGvB5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q","../../api":"fmHLW","../../helpers/alerts.js":"HdCa2","../../consts.js":"50idF","../../shared/PanelCard":"5Dn2Z","file-saver":"CaNwG"}],"gmnaE":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */ (function(global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    };
    else factory(global);
// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function(window1, noGlobal) {
    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
    // enough that all such attempts are guarded in a try block.
    "use strict";
    var arr1 = [];
    var getProto = Object.getPrototypeOf;
    var slice2 = arr1.slice;
    var flat = arr1.flat ? function flat(array) {
        return arr1.flat.call(array);
    } : function(array) {
        return arr1.concat.apply([], array);
    };
    var push1 = arr1.push;
    var indexOf1 = arr1.indexOf;
    var class2type = {
    };
    var toString = class2type.toString;
    var hasOwn1 = class2type.hasOwnProperty;
    var fnToString = hasOwn1.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support1 = {
    };
    var isFunction = function isFunction(obj) {
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
        // Plus for old WebKit, typeof returns "function" for HTML collections
        // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var document1 = window1.document;
    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };
    function DOMEval(code, node, doc) {
        doc = doc || document1;
        var i, val, script = doc.createElement("script");
        script.text = code;
        if (node) for(i in preservedScriptAttributes){
            // Support: Firefox 64+, Edge 18+
            // Some browsers don't support the "nonce" property on scripts.
            // On the other hand, just using `getAttribute` is not enough as
            // the `nonce` attribute is reset to an empty string whenever it
            // becomes browsing-context connected.
            // See https://github.com/whatwg/html/issues/2369
            // See https://html.spec.whatwg.org/#nonce-attributes
            // The `node.getAttribute` check was added for the sake of
            // `jQuery.globalEval` so that it can fake a nonce-containing node
            // via an object.
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) script.setAttribute(i, val);
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) return obj + "";
        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _helpers.typeOf(obj);
    }
    /* global Symbol */ // Defining this global in .eslintrc.json would create a danger of using the global
    // unguarded in another place, it seems safer to define global only for this module
    var version = "3.6.0", // Define a local copy of jQuery
    jQuery = function(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context);
    };
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function toArray() {
            return slice2.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function get(num) {
            // Return all the elements in a clean array
            if (num == null) return slice2.call(this);
            // Return just the one element from the set
            return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function pushStack(elems) {
            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            // Return the newly-formed element set
            return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function each(callback) {
            return jQuery.each(this, callback);
        },
        map: function map(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function slice1() {
            return this.pushStack(slice2.apply(this, arguments));
        },
        first: function first() {
            return this.eq(0);
        },
        last: function last() {
            return this.eq(-1);
        },
        even: function even() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
                return (i + 1) % 2;
            }));
        },
        odd: function odd() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
                return i % 2;
            }));
        },
        eq: function eq(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [
                this[j]
            ] : []);
        },
        end: function end() {
            return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push1,
        sort: arr1.sort,
        splice: arr1.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {
        }, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            // Skip the boolean and the target
            target = arguments[i] || {
            };
            i++;
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !isFunction(target)) target = {
        };
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }
        for(; i < length; i++){
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) // Extend the base object
            for(name in options){
                copy = options[name];
                // Prevent Object.prototype pollution
                // Prevent never-ending loop
                if (name === "__proto__" || target === copy) continue;
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    src = target[name];
                    // Ensure proper type for the source value
                    if (copyIsArray && !Array.isArray(src)) clone = [];
                    else if (!copyIsArray && !jQuery.isPlainObject(src)) clone = {
                    };
                    else clone = src;
                    copyIsArray = false;
                    // Never move original objects, clone them
                    target[name] = jQuery.extend(deep, clone, copy);
                // Don't bring in undefined values
                } else if (copy !== undefined) target[name] = copy;
            }
        }
        // Return the modified object
        return target;
    };
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function error(msg) {
            throw new Error(msg);
        },
        noop: function noop() {
        },
        isPlainObject: function isPlainObject(obj) {
            var proto, Ctor;
            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if (!obj || toString.call(obj) !== "[object Object]") return false;
            proto = getProto(obj);
            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if (!proto) return true;
            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn1.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function isEmptyObject(obj) {
            var name;
            for(name in obj)return false;
            return true;
        },
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function globalEval(code, options, doc) {
            DOMEval(code, {
                nonce: options && options.nonce
            }, doc);
        },
        each: function each(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for(; i < length; i++){
                    if (callback.call(obj[i], i, obj[i]) === false) break;
                }
            } else for(i in obj){
                if (callback.call(obj[i], i, obj[i]) === false) break;
            }
            return obj;
        },
        // results is for internal usage only
        makeArray: function makeArray(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) jQuery.merge(ret, typeof arr === "string" ? [
                    arr
                ] : arr);
                else push1.call(ret, arr);
            }
            return ret;
        },
        inArray: function inArray(elem, arr, i) {
            return arr == null ? -1 : indexOf1.call(arr, elem, i);
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function merge(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for(; j < len; j++)first[i++] = second[j];
            first.length = i;
            return first;
        },
        grep: function grep(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            // Go through the array, only saving the items
            // that pass the validator function
            for(; i < length; i++){
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) matches.push(elems[i]);
            }
            return matches;
        },
        // arg is for internal usage only
        map: function map(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for(; i < length; i++){
                    value = callback(elems[i], i, arg);
                    if (value != null) ret.push(value);
                }
            // Go through every key on the object,
            } else for(i in elems){
                value = callback(elems[i], i, arg);
                if (value != null) ret.push(value);
            }
            // Flatten any nested arrays
            return flat(ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support1
    });
    if (typeof Symbol === "function") jQuery.fn[Symbol.iterator] = arr1[Symbol.iterator];
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) return false;
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle1 = /*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */ function(window) {
        var i1, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, // Local document vars
        setDocument, document, docElem1, documentIsHTML, rbuggyQSA, rbuggyMatches, matches1, contains, // Instance-specific data
        expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function sortOrder(a, b) {
            if (a === b) hasDuplicate = true;
            return 0;
        }, // Instance methods
        hasOwn = {
        }.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push = arr2.push, slice = arr2.slice, // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function indexOf(list, elem) {
            var i = 0, len = list.length;
            for(; i < len; i++){
                if (list[i] === elem) return i;
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
        // or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)", // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + identifier + ")"),
            "CLASS": new RegExp("^\\.(" + identifier + ")"),
            "TAG": new RegExp("^(" + identifier + "|[*])"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function funescape(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
            nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function fcssescape(ch, asCodePoint) {
            if (asCodePoint) {
                // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                if (ch === "\0") return "\uFFFD";
                // Control characters and (dependent upon position) numbers get escaped as code points
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return "\\" + ch;
        }, // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function unloadHandler() {
            setDocument();
        }, inDisabledFieldset = addCombinator(function(elem) {
            return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, {
            dir: "parentNode",
            next: "legend"
        });
        // Optimize for push.apply( _, NodeList )
        try {
            push.apply(arr2 = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            // eslint-disable-next-line no-unused-expressions
            arr2[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr2.length ? // Leverage slice if possible
                function(target, els) {
                    pushNative.apply(target, slice.call(els));
                } : // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                    var j = target.length, i = 0;
                    // Can't trust NodeList.length
                    while(target[j++] = els[i++]);
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
            results = results || [];
            // Return early from calls with invalid selector or context
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) return results;
            // Try to shortcut find operations (as opposed to filters) in HTML documents
            if (!seed) {
                setDocument(context);
                context = context || document;
                if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        // ID selector
                        if (m = match[1]) {
                            // Document context
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) // Support: IE, Opera, Webkit
                                // TODO: identify versions
                                // getElementById can match elements by name instead of ID
                                {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else return results;
                            // Element context
                            } else // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        // Type selector
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        // Class selector
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    // Take advantage of querySelectorAll
                    if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                        newSelector = selector;
                        newContext = context;
                        // qSA considers elements outside a scoping root when evaluating child or
                        // descendant combinators, which is not what we want.
                        // In such cases, we work around the behavior by prefixing every selector in the
                        // list with an ID selector referencing the scope context.
                        // The technique has to be used as well when a leading combinator is used
                        // as such selectors are not recognized by querySelectorAll.
                        // Thanks to Andrew Dupont for this technique.
                        if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                            // Expand context for sibling selectors
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                            // We can use :scope instead of the ID hack if the browser
                            // supports it & if we're not changing the context.
                            if (newContext !== context || !support.scope) {
                                // Capture the context ID, setting it first if necessary
                                if (nid = context.getAttribute("id")) nid = nid.replace(rcssescape, fcssescape);
                                else context.setAttribute("id", nid = expando);
                            }
                            // Prefix every selector in the list
                            groups = tokenize(selector);
                            i = groups.length;
                            while(i--)groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                            newSelector = groups.join(",");
                        }
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {
                            nonnativeSelectorCache(selector, true);
                        } finally{
                            if (nid === expando) context.removeAttribute("id");
                        }
                    }
                }
            }
            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */ function createCache() {
            var keys = [];
            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key + " ") > Expr.cacheLength) // Only keep the most recent entries
                delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            return cache;
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */ function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */ function assert(fn) {
            var el = document.createElement("fieldset");
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally{
                // Remove from its parent by default
                if (el.parentNode) el.parentNode.removeChild(el);
                // release memory in IE
                el = null;
            }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */ function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = arr.length;
            while(i--)Expr.attrHandle[arr[i]] = handler;
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */ function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            // Use IE sourceIndex if available on both nodes
            if (diff) return diff;
            // Check if b follows a
            if (cur) while(cur = cur.nextSibling){
                if (cur === b) return -1;
            }
            return a ? 1 : -1;
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */ function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */ function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */ function createDisabledPseudo(disabled) {
            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
            return function(elem) {
                // Only certain elements can match :enabled or :disabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                if ("form" in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                        // Option elements defer to a parent optgroup if present
                        if ("label" in elem) {
                            if ("label" in elem.parentNode) return elem.parentNode.disabled === disabled;
                            else return elem.disabled === disabled;
                        }
                        // Support: IE 6 - 11
                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                        return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                        /* jshint -W018 */ elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                // Try to winnow out elements that can't be disabled before trusting the disabled property.
                // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                // even exist on them, let alone have a boolean value.
                } else if ("label" in elem) return elem.disabled === disabled;
                // Remaining elements are neither :enabled nor :disabled
                return false;
            };
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */ function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    // Match elements found at the specified indexes
                    while(i--)if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j]);
                });
            });
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */ function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        // Expose support vars for convenience
        support = Sizzle.support = {
        };
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */ isXML = Sizzle.isXML = function isXML(elem) {
            var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
            // Support: IE <=8
            // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
            // https://bugs.jquery.com/ticket/4833
            return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */ setDocument = Sizzle.setDocument = function setDocument(node1) {
            var hasCompare, subWindow, doc = node1 ? node1.ownerDocument || node1 : preferredDoc;
            // Return early if doc is invalid or already selected
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if (doc == document || doc.nodeType !== 9 || !doc.documentElement) return document;
            // Update global variables
            document = doc;
            docElem1 = document.documentElement;
            documentIsHTML = !isXML(document);
            // Support: IE 9 - 11+, Edge 12 - 18+
            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                // Support: IE 11, Edge
                if (subWindow.addEventListener) subWindow.addEventListener("unload", unloadHandler, false);
                else if (subWindow.attachEvent) subWindow.attachEvent("onunload", unloadHandler);
            }
            // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
            // Safari 4 - 5 only, Opera <=11.6 - 12.x only
            // IE/Edge & older browsers don't support the :scope pseudo-class.
            // Support: Safari 6.0 only
            // Safari 6.0 supports :scope but it's an alias of :root there.
            support.scope = assert(function(el) {
                docElem1.appendChild(el).appendChild(document.createElement("div"));
                return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
            });
            /* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties
            // (excepting IE8 booleans)
            support.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
            });
            /* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(el) {
                el.appendChild(document.createComment(""));
                return !el.getElementsByTagName("*").length;
            });
            // Support: IE<9
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programmatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(el) {
                docElem1.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            // ID filter and find
            if (support.getById) {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [
                            elem
                        ] : [];
                    }
                };
            } else {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
                // Support: IE 6 - 7 only
                // getElementById is not reliable as a find shortcut
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            // Verify the id attribute
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) return [
                                elem
                            ];
                            // Fall back on getElementsByName
                            elems = context.getElementsByName(id);
                            i = 0;
                            while(elem = elems[i++]){
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) return [
                                    elem
                                ];
                            }
                        }
                        return [];
                    }
                };
            }
            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") return context.getElementsByTagName(tag);
                else if (support.qsa) return context.querySelectorAll(tag);
            } : function(tag, context) {
                var elem, tmp = [], i = 0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);
                // Filter out possible comments
                if (tag === "*") {
                    while(elem = results[i++])if (elem.nodeType === 1) tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) return context.getElementsByClassName(className);
            };
            /* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];
            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See https://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(el) {
                    var input;
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // https://bugs.jquery.com/ticket/12359
                    docElem1.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (el.querySelectorAll("[msallowcapture^='']").length) rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!el.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) rbuggyQSA.push("~=");
                    // Support: IE 11+, Edge 15 - 18+
                    // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                    // Adding a temporary attribute to the document before the selection works
                    // around the issue.
                    // Interestingly, IE 10 & older don't seem to have the issue.
                    input = document.createElement("input");
                    input.setAttribute("name", "");
                    el.appendChild(input);
                    if (!el.querySelectorAll("[name='']").length) rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!el.querySelectorAll(":checked").length) rbuggyQSA.push(":checked");
                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibling-combinator selector` fails
                    if (!el.querySelectorAll("a#" + expando + "+*").length) rbuggyQSA.push(".#.+[+~]");
                    // Support: Firefox <=3.6 - 5 only
                    // Old Firefox doesn't throw on a badly-escaped identifier.
                    el.querySelectorAll("\\\f");
                    rbuggyQSA.push("[\\r\\n\\f]");
                });
                assert(function(el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");
                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (el.querySelectorAll("[name=d]").length) rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (el.querySelectorAll(":enabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Support: IE9-11+
                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                    docElem1.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Support: Opera 10 - 11 only
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches1 = docElem1.matches || docElem1.webkitMatchesSelector || docElem1.mozMatchesSelector || docElem1.oMatchesSelector || docElem1.msMatchesSelector)) assert(function(el) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches1.call(el, "*");
                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches1.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            /* Contains
	---------------------------------------------------------------------- */ hasCompare = rnative.test(docElem1.compareDocumentPosition);
            // Element contains another
            // Purposefully self-exclusive
            // As in, an element does not contain itself
            contains = hasCompare || rnative.test(docElem1.contains) ? function contains(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) while(b = b.parentNode){
                    if (b === a) return true;
                }
                return false;
            };
            /* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
            sortOrder = hasCompare ? function sortOrder(a, b) {
                // Flag for duplicate removal
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                // Sort on method existence if only one input has compareDocumentPosition
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                // Calculate position if both inputs belong to the same document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
                1;
                // Disconnected nodes
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    // Choose the first element that is related to our preferred document
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) return -1;
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) return 1;
                    // Maintain original order
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                // Exit early if the nodes are identical
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [
                    a
                ], bp = [
                    b
                ];
                // Parentless nodes are either documents or disconnected
                if (!aup || !bup) // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */ return a == document ? -1 : b == document ? 1 : /* eslint-enable eqeqeq */ aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                else if (aup === bup) return siblingCheck(a, b);
                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while(cur = cur.parentNode)ap.unshift(cur);
                cur = b;
                while(cur = cur.parentNode)bp.unshift(cur);
                // Walk down the tree looking for a discrepancy
                while(ap[i] === bp[i])i++;
                return i ? // Do a sibling check if the nodes have a common ancestor
                siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */ ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 : /* eslint-enable eqeqeq */ 0;
            };
            return document;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches1.call(elem, expr);
                // IE 9's matchesSelector returns false on disconnected nodes
                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) return ret;
            } catch (e) {
                nonnativeSelectorCache(expr, true);
            }
            return Sizzle(expr, document, null, [
                elem
            ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((context.ownerDocument || context) != document) setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((elem.ownerDocument || elem) != document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */ Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while(elem = results[i++])if (elem === results[i]) j = duplicates.push(i);
                while(j--)results.splice(duplicates[j], 1);
            }
            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;
            return results;
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */ getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) // If no nodeType, this is expected to be an array
            while(node = elem[i++])// Do not traverse comment nodes
            ret += getText(node);
            else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (jQuery #11153)
                if (typeof elem.textContent === "string") return elem.textContent;
                else // Traverse its children
                for(elem = elem.firstChild; elem; elem = elem.nextSibling)ret += getText(elem);
            } else if (nodeType === 3 || nodeType === 4) return elem.nodeValue;
            // Do not include comment or processing instruction nodes
            return ret;
        };
        Expr = Sizzle.selectors = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {
            },
            find: {
            },
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") match[3] = " " + match[3] + " ";
                    return match.slice(0, 4);
                },
                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/ match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) Sizzle.error(match[0]);
                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    // other types prohibit arguments
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match;
                },
                "PSEUDO": function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    // Accept quoted arguments as-is
                    if (match[3]) match[2] = match[4] || match[5] || "";
                    else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },
            filter: {
                "TAG": function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                "CLASS": function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"), classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    }));
                },
                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) return operator === "!=";
                        if (!operator) return true;
                        result += "";
                        /* eslint-disable max-len */ return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    /* eslint-enable max-len */ };
                },
                "CHILD": function(type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
                    function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, _context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while(dir){
                                    node = elem;
                                    while(node = node[dir]){
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) return false;
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [
                                forward ? parent.firstChild : parent.lastChild
                            ];
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                // ...in a gzip-friendly way
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {
                                });
                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                });
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())// When found, cache indexes on `parent` and break
                                if (node.nodeType === 1 && ++diff && node === elem) {
                                    uniqueCache[type] = [
                                        dirruns,
                                        nodeIndex,
                                        diff
                                    ];
                                    break;
                                }
                            } else {
                                // Use previously-cached element index if available
                                if (useCache) {
                                    // ...in a gzip-friendly way
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {
                                    });
                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                    });
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                // xml :nth-child(...)
                                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                if (diff === false) {
                                    // Use the same loop as above to seek `elem` from the start
                                    while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            outerCache = node[expando] || (node[expando] = {
                                            });
                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                            });
                                            uniqueCache[type] = [
                                                dirruns,
                                                diff
                                            ];
                                        }
                                        if (node === elem) break;
                                    }
                                }
                            }
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) return fn(argument);
                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            "",
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while(i--){
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, _context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        // Match elements unmatched by `matcher`
                        while(i--)if (elem = unmatched[i]) seed[i] = !(matches[i] = elem);
                    }) : function(elem, _context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || getText(elem)).indexOf(text) > -1;
                    };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                        }
                        while ((elem = elem.parentNode) && elem.nodeType === 1)
                        return false;
                    };
                }),
                // Miscellaneous
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function(elem) {
                    return elem === docElem1;
                },
                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": createDisabledPseudo(false),
                "disabled": createDisabledPseudo(true),
                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) // eslint-disable-next-line no-unused-expressions
                    elem.parentNode.selectedIndex;
                    return elem.selected === true;
                },
                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for(elem = elem.firstChild; elem; elem = elem.nextSibling){
                        if (elem.nodeType < 6) return false;
                    }
                    return true;
                },
                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [
                        0
                    ];
                }),
                "last": createPositionalPseudo(function(_matchIndexes, length) {
                    return [
                        length - 1
                    ];
                }),
                "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                    return [
                        argument < 0 ? argument + length : argument
                    ];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument > length ? length : argument;
                    for(; --i >= 0;)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for(; ++i < length;)matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        // Add button/input type pseudos
        for(i1 in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        })Expr.pseudos[i1] = createInputPseudo(i1);
        for(i1 in {
            submit: true,
            reset: true
        })Expr.pseudos[i1] = createButtonPseudo(i1);
        // Easy API for creating new setFilters
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while(soFar){
                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) // Don't consume trailing commas as valid
                    soFar = soFar.slice(match[0].length) || soFar;
                    groups.push(tokens = []);
                }
                matched = false;
                // Combinators
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                // Filters
                for(type in Expr.filter)if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
            tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for(; i < len; i++)selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
                while(elem = elem[dir]){
                    if (elem.nodeType === 1 || checkNonElements) return matcher(elem, context, xml);
                }
                return false;
            } : // Check against all ancestor/preceding elements
            function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                    dirruns,
                    doneName
                ];
                // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                if (xml) {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) return true;
                    }
                } else {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {
                        });
                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {
                        });
                        if (skip && skip === elem.nodeName.toLowerCase()) elem = elem[dir] || elem;
                        else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) // Assign to newCache so results back-propagate to previous elements
                        return newCache[2] = oldCache[2];
                        else {
                            // Reuse newcache so results back-propagate to previous elements
                            uniqueCache[key] = newCache;
                            // A match means we're done; a fail means we have to keep checking
                            if (newCache[2] = matcher(elem, context, xml)) return true;
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while(i--){
                    if (!matchers[i](elem, context, xml)) return false;
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for(; i < len; i++)Sizzle(selector, contexts[i], results);
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for(; i < len; i++){
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) map.push(i);
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter = setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [
                    context
                ] : context, []), // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
                [] : // ...otherwise use results directly
                results : matcherIn;
                // Find primary matches
                if (matcher) matcher(matcherIn, matcherOut, context, xml);
                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while(i--)if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while(i--)if (elem = matcherOut[i]) // Restore matcherIn since elem is not yet a final match
                            temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while(i--)if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] = elem);
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml);
                    else push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [
                function(elem, context, xml) {
                    var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                    // Avoid hanging onto element (issue #299)
                    checkContext = null;
                    return ret;
                }
            ];
            for(; i < len; i++)if (matcher = Expr.relative[tokens[i].type]) matchers = [
                addCombinator(elementMatcher(matchers), matcher)
            ];
            else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                // Return special upon seeing a positional matcher
                if (matcher[expando]) {
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for(; j < len; j++){
                        if (Expr.relative[tokens[j].type]) break;
                    }
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens.slice(0, i - 1).concat({
                        value: tokens[i - 2].type === " " ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function superMatcher(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]("*", outermost), // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                outermostContext = context == document || context || outermost;
                // Add elements passing elementMatchers directly to results
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for(; i !== len && (elem = elems[i]) != null; i++){
                    if (byElement && elem) {
                        j = 0;
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (!context && elem.ownerDocument != document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                        }
                        while(matcher = elementMatchers[j++])if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                        }
                        if (outermost) dirruns = dirrunsUnique;
                    }
                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if (elem = !matcher && elem) matchedCount--;
                        // Lengthen the array for every element, matched or not
                        if (seed) unmatched.push(elem);
                    }
                }
                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;
                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while(matcher = setMatchers[j++])matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while(i--)if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                        }
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }
                    // Add matches to results
                    push.apply(results, setMatched);
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results);
                }
                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function compile(selector, match /* Internal Use Only */ ) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!match) match = tokenize(selector);
                i = match.length;
                while(i--){
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) setMatchers.push(cached);
                    else elementMatchers.push(cached);
                }
                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                // Save selector and tokenization
                cached.selector = selector;
            }
            return cached;
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */ select = Sizzle.select = function select(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            // Try to minimize operations if there is only one selector in the list and no seed
            // (the latter of which guarantees us context)
            if (match.length === 1) {
                // Reduce context if the leading compound selector is an ID
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    else if (compiled) context = context.parentNode;
                    selector = selector.slice(tokens.shift().value.length);
                }
                // Fetch a seed set for right-to-left matching
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while(i--){
                    token = tokens[i];
                    // Abort if we hit a combinator
                    if (Expr.relative[type = token.type]) break;
                    if (find = Expr.find[type]) // Search, expanding context for leading sibling combinators
                    {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            // If seed is empty or no tokens remain, we can return early
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function(el) {
            // Should return 1, but returns 4 (following)
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
        })) addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        });
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
        })) addHandle("value", function(elem, _name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") return elem.defaultValue;
        });
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
        })) addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window1);
    jQuery.find = Sizzle1;
    jQuery.expr = Sizzle1.selectors;
    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle1.uniqueSort;
    jQuery.text = Sizzle1.getText;
    jQuery.isXMLDoc = Sizzle1.isXML;
    jQuery.contains = Sizzle1.contains;
    jQuery.escapeSelector = Sizzle1.escape;
    var dir1 = function dir1(elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while((elem = elem[dir]) && elem.nodeType !== 9)if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) break;
            matched.push(elem);
        }
        return matched;
    };
    var siblings = function siblings(n, elem) {
        var matched = [];
        for(; n; n = n.nextSibling)if (n.nodeType === 1 && n !== elem) matched.push(n);
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName1(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        // Single element
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== "string") return jQuery.grep(elements, function(elem) {
            return indexOf1.call(qualifier, elem) > -1 !== not;
        });
        // Filtered directly for both simple and complex selectors
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function(expr, elems, not) {
        var elem1 = elems[0];
        if (not) expr = ":not(" + expr + ")";
        if (elems.length === 1 && elem1.nodeType === 1) return jQuery.find.matchesSelector(elem1, expr) ? [
            elem1
        ] : [];
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function find(selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== "string") return this.pushStack(jQuery(selector).filter(function() {
                for(i = 0; i < len; i++){
                    if (jQuery.contains(self[i], this)) return true;
                }
            }));
            ret = this.pushStack([]);
            for(i = 0; i < len; i++)jQuery.find(selector, self[i], ret);
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function filter(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function not(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function is(selector) {
            return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    // Initialize a jQuery object
    // A central reference to the root jQuery(document)
    var rootjQuery, // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr1 = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function init(selector, context, root) {
        var match, elem;
        // HANDLE: $(""), $(null), $(undefined), $(false)
        if (!selector) return this;
        // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)
        root = root || rootjQuery;
        // Handle HTML strings
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [
                null,
                selector,
                null
            ];
            else match = rquickExpr1.exec(selector);
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
                // HANDLE: $(html) -> $(array)
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document1, true));
                    // HANDLE: $(html, props)
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for(match in context)// Properties of context are called as methods if possible
                        if (isFunction(this[match])) this[match](context[match]);
                        else this.attr(match, context[match]);
                    }
                    return this;
                // HANDLE: $(#id)
                } else {
                    elem = document1.getElementById(match[2]);
                    if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                    }
                    return this;
                }
            } else if (!context || context.jquery) return (context || root).find(selector);
            else return this.constructor(context).find(selector);
        // HANDLE: $(DOMElement)
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        // HANDLE: $(function)
        // Shortcut for document ready
        } else if (isFunction(selector)) return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
        selector(jQuery);
        return jQuery.makeArray(selector, this);
    };
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    // Initialize central reference
    rootjQuery = jQuery(document1);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        has: function has(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for(; i < l; i++){
                    if (jQuery.contains(this, targets[i])) return true;
                }
            });
        },
        closest: function closest(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            // Positional selectors never match, since there's no _selection_ context
            if (!rneedsContext.test(selectors)) for(; i < l; i++){
                for(cur = this[i]; cur && cur !== context; cur = cur.parentNode)// Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function index(elem) {
            // No argument, return index in parent
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            // Index in selector
            if (typeof elem === "string") return indexOf1.call(jQuery(elem), this[0]);
            // Locate the position of the desired element
            return indexOf1.call(this, // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem);
        },
        add: function add1(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function addBack(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while((cur = cur[dir]) && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function parent(elem) {
            var parent1 = elem.parentNode;
            return parent1 && parent1.nodeType !== 11 ? parent1 : null;
        },
        parents: function parents(elem) {
            return dir1(elem, "parentNode");
        },
        parentsUntil: function parentsUntil(elem, _i, until) {
            return dir1(elem, "parentNode", until);
        },
        next: function next(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function prev(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function nextAll(elem) {
            return dir1(elem, "nextSibling");
        },
        prevAll: function prevAll(elem) {
            return dir1(elem, "previousSibling");
        },
        nextUntil: function nextUntil(elem, _i, until) {
            return dir1(elem, "nextSibling", until);
        },
        prevUntil: function prevUntil(elem, _i, until) {
            return dir1(elem, "previousSibling", until);
        },
        siblings: function siblings1(elem) {
            return siblings((elem.parentNode || {
            }).firstChild, elem);
        },
        children: function children(elem) {
            return siblings(elem.firstChild);
        },
        contents: function contents(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) return elem.contentDocument;
            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if (nodeName1(elem, "template")) elem = elem.content || elem;
            return jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") selector = until;
            if (selector && typeof selector === "string") matched = jQuery.filter(selector, matched);
            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) jQuery.uniqueSort(matched);
                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) matched.reverse();
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {
        };
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */ jQuery.Callbacks = function(options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({
        }, options);
        var firing, // Last fire value for non-forgettable lists
        memory, // Flag to know if list was already fired
        fired, // Flag to prevent firing
        locked, // Actual callback list
        list = [], // Queue of execution data for repeatable lists
        queue = [], // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1, // Fire callbacks
        fire = function fire() {
            // Enforce single-firing
            locked = locked || options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for(; queue.length; firingIndex = -1){
                memory = queue.shift();
                while(++firingIndex < list.length)// Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                    // Jump to end and forget the data so .add doesn't re-fire
                    firingIndex = list.length;
                    memory = false;
                }
            }
            // Forget the data if we're done with it
            if (!options.memory) memory = false;
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
                // Keep an empty list if we have data for future add calls
                if (memory) list = [];
                else list = "";
            }
        }, // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function add1() {
                if (list) {
                    // If we have memory from a past run, we should fire after adding
                    if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                    }
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            if (isFunction(arg)) {
                                if (!options.unique || !self.has(arg)) list.push(arg);
                            } else if (arg && arg.length && toType(arg) !== "string") // Inspect recursively
                            add(arg);
                        });
                    })(arguments);
                    if (memory && !firing) fire();
                }
                return this;
            },
            // Remove a callback from the list
            remove: function remove1() {
                jQuery.each(arguments, function(_, arg) {
                    var index;
                    while((index = jQuery.inArray(arg, list, index)) > -1){
                        list.splice(index, 1);
                        // Handle firing indexes
                        if (index <= firingIndex) firingIndex--;
                    }
                });
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function has(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function empty() {
                if (list) list = [];
                return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function disable() {
                locked = queue = [];
                list = memory = "";
                return this;
            },
            disabled: function disabled() {
                return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function lock() {
                locked = queue = [];
                if (!memory && !firing) list = memory = "";
                return this;
            },
            locked: function locked1() {
                return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function fireWith(context, args) {
                if (!locked) {
                    args = args || [];
                    args = [
                        context,
                        args.slice ? args.slice() : args
                    ];
                    queue.push(args);
                    if (!firing) fire();
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function fire() {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function fired1() {
                return !!fired;
            }
        };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            // Check for promise aspect first to privilege synchronous behavior
            if (value && isFunction(method = value.promise)) method.call(value).done(resolve).fail(reject);
            else if (value && isFunction(method = value.then)) method.call(value, resolve, reject);
            else // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
            // * false: [ value ].slice( 0 ) => resolve( value )
            // * true: [ value ].slice( 1 ) => resolve()
            resolve.apply(undefined, [
                value
            ].slice(noValue));
        // For Promises/A+, convert exceptions into rejections
        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
        // Deferred#then to conditionally suppress rejection.
        } catch (value1) {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply(undefined, [
                value1
            ]);
        }
    }
    jQuery.extend({
        Deferred: function Deferred(func) {
            var tuples = [
                // action, add listener, callbacks,
                // ... .then handlers, argument index, [final state]
                [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2
                ],
                [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved"
                ],
                [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected"
                ]
            ], state = "pending", promise = {
                state: function state1() {
                    return state;
                },
                always: function always() {
                    deferred1.done(arguments).fail(arguments);
                    return this;
                },
                "catch": function(fn) {
                    return promise.then(null, fn);
                },
                // Keep pipe for back-compat
                pipe: function pipe() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(_i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred1[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && isFunction(returned.promise)) returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                else newDefer[tuple[0] + "With"](this, fn ? [
                                    returned
                                ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                then: function then1(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                        return function() {
                            var that = this, args = arguments, mightThrow = function mightThrow() {
                                var returned, then;
                                // Support: Promises/A+ section 2.3.3.3.3
                                // https://promisesaplus.com/#point-59
                                // Ignore double-resolution attempts
                                if (depth < maxDepth) return;
                                returned = handler.apply(that, args);
                                // Support: Promises/A+ section 2.3.1
                                // https://promisesaplus.com/#point-48
                                if (returned === deferred.promise()) throw new TypeError("Thenable self-resolution");
                                // Support: Promises/A+ sections 2.3.3.1, 3.5
                                // https://promisesaplus.com/#point-54
                                // https://promisesaplus.com/#point-75
                                // Retrieve `then` only once
                                then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                                // Handle a returned thenable
                                if (isFunction(then)) {
                                    // Special processors (notify) just wait for resolution
                                    if (special) then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                    else {
                                        // ...and disregard older resolution values
                                        maxDepth++;
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                    }
                                } else {
                                    // Only substitute handlers pass on context
                                    // and multiple values (non-spec behavior)
                                    if (handler !== Identity) {
                                        that = undefined;
                                        args = [
                                            returned
                                        ];
                                    }
                                    // Process the value(s)
                                    // Default process is resolve
                                    (special || deferred.resolveWith)(that, args);
                                }
                            }, // Only normal processors (resolve) catch and reject exceptions
                            process = special ? mightThrow : function() {
                                try {
                                    mightThrow();
                                } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                    // Support: Promises/A+ section 2.3.3.3.4.1
                                    // https://promisesaplus.com/#point-61
                                    // Ignore post-resolution exceptions
                                    if (depth + 1 >= maxDepth) {
                                        // Only substitute handlers pass on context
                                        // and multiple values (non-spec behavior)
                                        if (handler !== Thrower) {
                                            that = undefined;
                                            args = [
                                                e
                                            ];
                                        }
                                        deferred.rejectWith(that, args);
                                    }
                                }
                            };
                            // Support: Promises/A+ section 2.3.3.3.1
                            // https://promisesaplus.com/#point-57
                            // Re-resolve promises immediately to dodge false rejection from
                            // subsequent errors
                            if (depth) process();
                            else {
                                // Call an optional hook to record the stack, in case of exception
                                // since it's otherwise lost when execution goes async
                                if (jQuery.Deferred.getStackHook) process.stackTrace = jQuery.Deferred.getStackHook();
                                window1.setTimeout(process);
                            }
                        };
                    }
                    return jQuery.Deferred(function(newDefer) {
                        // progress_handlers.add( ... )
                        tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                        // fulfilled_handlers.add( ... )
                        tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                        // rejected_handlers.add( ... )
                        tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function promise1(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred1 = {
            };
            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;
                // Handle state
                if (stateString) list.add(function() {
                    // state = "resolved" (i.e., fulfilled)
                    // state = "rejected"
                    state = stateString;
                }, // rejected_callbacks.disable
                // fulfilled_callbacks.disable
                tuples[3 - i][2].disable, // rejected_handlers.disable
                // fulfilled_handlers.disable
                tuples[3 - i][3].disable, // progress_callbacks.lock
                tuples[0][2].lock, // progress_handlers.lock
                tuples[0][3].lock);
                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);
                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred1[tuple[0]] = function() {
                    deferred1[tuple[0] + "With"](this === deferred1 ? undefined : this, arguments);
                    return this;
                };
                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred1[tuple[0] + "With"] = list.fireWith;
            });
            // Make the deferred a promise
            promise.promise(deferred1);
            // Call given func if any
            if (func) func.call(deferred1, deferred1);
            // All done!
            return deferred1;
        },
        // Deferred helper
        when: function when(singleValue) {
            var // count of uncompleted subordinates
            remaining = arguments.length, // count of unprocessed arguments
            i = remaining, // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice2.call(arguments), // the primary Deferred
            primary = jQuery.Deferred(), // subordinate callback factory
            updateFunc = function updateFunc(i) {
                return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice2.call(arguments) : value;
                    if (!--remaining) primary.resolveWith(resolveContexts, resolveValues);
                };
            };
            // Single- and empty arguments are adopted like Promise.resolve
            if (remaining <= 1) {
                adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) return primary.then();
            }
            // Multiple arguments are aggregated like Promise.all array elements
            while(i--)adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            return primary.promise();
        }
    });
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function(error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window1.console && window1.console.warn && error && rerrorNames.test(error.name)) window1.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    };
    jQuery.readyException = function(error) {
        window1.setTimeout(function() {
            throw error;
        });
    };
    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function(fn) {
        readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup
        // happens at the time of error handling instead of callback
        // registration.
        .catch(function(error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function ready(wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) return;
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) return;
            // If there are functions bound, to execute
            readyList.resolveWith(document1, [
                jQuery
            ]);
        }
    });
    jQuery.ready.then = readyList.then;
    // The ready event handler and self cleanup method
    function completed1() {
        document1.removeEventListener("DOMContentLoaded", completed1);
        window1.removeEventListener("load", completed1);
        jQuery.ready();
    }
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if (document1.readyState === "complete" || document1.readyState !== "loading" && !document1.documentElement.doScroll) // Handle it asynchronously to allow scripts the opportunity to delay ready
    window1.setTimeout(jQuery.ready);
    else {
        // Use the handy event callback
        document1.addEventListener("DOMContentLoaded", completed1);
        // A fallback to window.onload, that will always work
        window1.addEventListener("load", completed1);
    }
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function(elems, fn, key, value2, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (toType(key) === "object") {
            chainable = true;
            for(i in key)access(elems, fn, i, key[i], true, emptyGet, raw);
        // Sets one value
        } else if (value2 !== undefined) {
            chainable = true;
            if (!isFunction(value2)) raw = true;
            if (bulk) {
                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value2);
                    fn = null;
                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function fn(elem, _key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) for(; i < len; i++)fn(elems[i], key, raw ? value2 : value2.call(elems[i], i, fn(elems[i], key)));
        }
        if (chainable) return elems;
        // Gets
        if (bulk) return fn.call(elems);
        return len ? fn(elems[0], key) : emptyGet;
    };
    // Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    // Used by camelCase as callback to replace()
    function fcamelCase(_all, letter) {
        return letter.toUpperCase();
    }
    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE <=9 - 11, Edge 12 - 15
    // Microsoft forgot to hump their vendor prefix (#9572)
    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function acceptData(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function cache(owner) {
            // Check if the owner object already has a cache
            var value = owner[this.expando];
            // If not, create one
            if (!value) {
                value = {
                };
                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) owner[this.expando] = value;
                    else Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true
                    });
                }
            }
            return value;
        },
        set: function set(owner, data, value) {
            var prop, cache = this.cache(owner);
            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if (typeof data === "string") cache[camelCase(data)] = value;
            else // Copy the properties one-by-one to the cache object
            for(prop in data)cache[camelCase(prop)] = data[prop];
            return cache;
        },
        get: function get(owner, key) {
            return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
            owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function access(owner, key, value) {
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || key && typeof key === "string" && value === undefined) return this.get(owner, key);
            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);
            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function remove1(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) return;
            if (key !== undefined) {
                // Support array or space separated string of keys
                if (Array.isArray(key)) // If key is an array of keys...
                // We always set camelCase keys, so remove that.
                key = key.map(camelCase);
                else {
                    key = camelCase(key);
                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [
                        key
                    ] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while(i--)delete cache[key[i]];
            }
            // Remove the expando if there's no more data
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) owner[this.expando] = undefined;
                else delete owner[this.expando];
            }
        },
        hasData: function hasData(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") return true;
        if (data === "false") return false;
        if (data === "null") return null;
        // Only convert to a number if it doesn't change the string
        if (data === +data + "") return +data;
        if (rbrace.test(data)) return JSON.parse(data);
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) {
                }
                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            } else data = undefined;
        }
        return data;
    }
    jQuery.extend({
        hasData: function hasData(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function data1(elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function removeData(elem, name) {
            dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function _data(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function _removeData(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function data1(key, value3) {
            var i, name, data2, elem = this[0], attrs = elem && elem.attributes;
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data2 = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while(i--)// Support: IE 11 only
                        // The attrs elements can be null (#14894)
                        if (attrs[i]) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = camelCase(name.slice(5));
                                dataAttr(elem, name, data2[name]);
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data2;
            }
            // Sets multiple values
            if (typeof key === "object") return this.each(function() {
                dataUser.set(this, key);
            });
            return access(this, function(value) {
                var data;
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) return data;
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) return data;
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
                // Set the data...
                this.each(function() {
                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                });
            }, null, value3, arguments.length > 1, null, true);
        },
        removeData: function removeData(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function queue2(elem, type, data) {
            var queue1;
            if (elem) {
                type = (type || "fx") + "queue";
                queue1 = dataPriv.get(elem, type);
                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue1 || Array.isArray(data)) queue1 = dataPriv.access(elem, type, jQuery.makeArray(data));
                    else queue1.push(data);
                }
                return queue1 || [];
            }
        },
        dequeue: function dequeue(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function next() {
                jQuery.dequeue(elem, type);
            };
            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") queue.unshift("inprogress");
                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) hooks.empty.fire();
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function _queueHooks(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [
                        type + "queue",
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function queue2(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                // Ensure a hooks for this queue
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") jQuery.dequeue(this, type);
            });
        },
        dequeue: function dequeue(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function clearQueue(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function promise1(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function resolve() {
                if (!--count) defer.resolveWith(elements, [
                    elements
                ]);
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while(i--){
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = [
        "Top",
        "Right",
        "Bottom",
        "Left"
    ];
    var documentElement = document1.documentElement;
    var isAttached = function isAttached(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
    }, composed = {
        composed: true
    };
    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    // Check attachment across shadow DOM boundaries when possible (gh-3504)
    // Support: iOS 10.0-10.2 only
    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    // leading to errors. We need to check for `getRootNode`.
    if (documentElement.getRootNode) isAttached = function isAttached(elem) {
        return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
    var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) && jQuery.css(elem, "display") === "none";
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function currentValue() {
            return tween.cur();
        } : function() {
            return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), // Starting value computation is required for potential unit mismatches
        initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;
            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];
            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
            while(maxIterations--){
                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) maxIterations = 0;
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {
    };
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) return display;
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") display = "block";
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for(; index < length; index++){
            elem = elements[index];
            if (!elem.style) continue;
            display = elem.style.display;
            if (show) {
                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) elem.style.display = "";
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) values[index] = getDefaultDisplay(elem);
            } else if (display !== "none") {
                values[index] = "none";
                // Remember what we're overwriting
                dataPriv.set(elem, "display", display);
            }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for(index = 0; index < length; index++)if (values[index] != null) elements[index].style.display = values[index];
        return elements;
    }
    jQuery.fn.extend({
        show: function show() {
            return showHide(this, true);
        },
        hide: function hide() {
            return showHide(this);
        },
        toggle: function toggle(state) {
            if (typeof state === "boolean") return state ? this.show() : this.hide();
            return this.each(function() {
                if (isHiddenWithinTree(this)) jQuery(this).show();
                else jQuery(this).hide();
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    (function() {
        var fragment = document1.createDocumentFragment(), div = fragment.appendChild(document1.createElement("div")), input = document1.createElement("input");
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support1.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support1.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.
        div.innerHTML = "<option></option>";
        support1.option = !!div.lastChild;
    })();
    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
            1,
            "<table>",
            "</table>"
        ],
        col: [
            2,
            "<table><colgroup>",
            "</colgroup></table>"
        ],
        tr: [
            2,
            "<table><tbody>",
            "</tbody></table>"
        ],
        td: [
            3,
            "<table><tbody><tr>",
            "</tr></tbody></table>"
        ],
        _default: [
            0,
            "",
            ""
        ]
    };
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    // Support: IE <=9 only
    if (!support1.option) wrapMap.optgroup = wrapMap.option = [
        1,
        "<select multiple='multiple'>",
        "</select>"
    ];
    function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") ret = context.getElementsByTagName(tag || "*");
        else if (typeof context.querySelectorAll !== "undefined") ret = context.querySelectorAll(tag || "*");
        else ret = [];
        if (tag === undefined || tag && nodeName1(context, tag)) return jQuery.merge([
            context
        ], ret);
        return ret;
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for(; i < l; i++)dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
    var rhtml1 = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for(; i < l; i++){
            elem = elems[i];
            if (elem || elem === 0) {
                // Add nodes directly
                if (toType(elem) === "object") // Support: Android <=4.0 only, PhantomJS 1 only
                // push.apply(_, arraylike) throws on ancient WebKit
                jQuery.merge(nodes, elem.nodeType ? [
                    elem
                ] : elem);
                else if (!rhtml1.test(elem)) nodes.push(context.createTextNode(elem));
                else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || [
                        "",
                        ""
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while(j--)tmp = tmp.lastChild;
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);
                    // Remember the top-level container
                    tmp = fragment.firstChild;
                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }
        // Remove wrapper from fragment
        fragment.textContent = "";
        i = 0;
        while(elem = nodes[i++]){
            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) ignored.push(elem);
                continue;
            }
            attached = isAttached(elem);
            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");
            // Preserve script evaluation history
            if (attached) setGlobalEval(tmp);
            // Capture executables
            if (scripts) {
                j = 0;
                while(elem = tmp[j++])if (rscriptType.test(elem.type || "")) scripts.push(elem);
            }
        }
        return fragment;
    }
    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    // Support: IE <=9 - 11+
    // focus() and blur() are asynchronous, except when they are no-op.
    // So expect focus to be synchronous when the element is already active,
    // and blur to be synchronous when the element is not already active.
    // (focus and blur are always synchronous in other supported browsers,
    // this just defines when we can count on it).
    function expectSync1(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
    }
    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
        try {
            return document1.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === "object") {
            // ( types-Object, selector, data )
            if (typeof selector !== "string") {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for(type in types)on(elem, type, selector, data, types[type], one);
            return elem;
        }
        if (data == null && fn == null) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) fn = returnFalse;
        else if (!fn) return elem;
        if (one === 1) {
            origFn = fn;
            fn = function fn(event) {
                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */ jQuery.event = {
        global: {
        },
        add: function add1(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            // Only attach events to objects that accept data
            if (!acceptData(elem)) return;
            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if (selector) jQuery.find.matchesSelector(documentElement, selector);
            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) handler.guid = jQuery.guid++;
            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) events = elemData.events = Object.create(null);
            if (!(eventHandle = elemData.handle)) eventHandle = elemData.handle = function eventHandle(e) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
            // Handle multiple events separated by a space
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // There *must* be a type, no attaching namespace-only handlers
                if (!type) continue;
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {
                };
                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;
                // Update special based on newly reset type
                special = jQuery.event.special[type] || {
                };
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) elem.addEventListener(type, eventHandle);
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid;
                }
                // Add to the element's handler list, delegates in front
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj);
                else handlers.push(handleObj);
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }
        },
        // Detach an event or set of events from an element
        remove: function remove1(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) return;
            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for(type in events)jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue;
                }
                special = jQuery.event.special[type] || {
                };
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                // Remove matching events
                origCount = j = handlers.length;
                while(j--){
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj);
                    }
                }
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type];
                }
            }
            // Remove data and the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) dataPriv.remove(elem, "handle events");
        },
        dispatch: function dispatch(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {
            };
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            for(i = 1; i < arguments.length; i++)args[i] = arguments[i];
            event.delegateTarget = this;
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) return;
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while((matched = handlerQueue[i++]) && !event.isPropagationStopped()){
                event.currentTarget = matched.elem;
                j = 0;
                while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped())// If the event is namespaced, then each handler is only invoked if it is
                // specially universal or its namespaces are a superset of the event's.
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;
                    ret = ((jQuery.event.special[handleObj.origType] || {
                    }).handle || handleObj.handler).apply(matched.elem, args);
                    if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result;
        },
        handlers: function handlers1(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            // Find delegate handlers
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
                for(; cur !== this; cur = cur.parentNode || this)// Don't check non-elements (#13208)
                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                    matchedHandlers = [];
                    matchedSelectors = {
                    };
                    for(i = 0; i < delegateCount; i++){
                        handleObj = handlers[i];
                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";
                        if (matchedSelectors[sel] === undefined) matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [
                            cur
                        ]).length;
                        if (matchedSelectors[sel]) matchedHandlers.push(handleObj);
                    }
                    if (matchedHandlers.length) handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers
                    });
                }
            }
            // Add the remaining (directly-bound) handlers
            cur = this;
            if (delegateCount < handlers.length) handlerQueue.push({
                elem: cur,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        addProp: function addProp(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function() {
                    if (this.originalEvent) return hook(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[name];
                },
                set: function set(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function fix(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {
                // Utilize native event to ensure correct state for checkable inputs
                setup: function setup(data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
                    // Claim the first handler
                    if (rcheckableType.test(el.type) && el.click && nodeName1(el, "input")) // dataPriv.set( el, "click", ... )
                    leverageNative(el, "click", returnTrue);
                    // Return false to allow normal processing in the caller
                    return false;
                },
                trigger: function trigger(data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
                    // Force setup before triggering a click
                    if (rcheckableType.test(el.type) && el.click && nodeName1(el, "input")) leverageNative(el, "click");
                    // Return non-false to allow normal event-path propagation
                    return true;
                },
                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function _default(event) {
                    var target = event.target;
                    return rcheckableType.test(target.type) && target.click && nodeName1(target, "input") && dataPriv.get(target, "click") || nodeName1(target, "a");
                }
            },
            beforeunload: {
                postDispatch: function postDispatch(event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) event.originalEvent.returnValue = event.result;
                }
            }
        }
    };
    // Ensure the presence of an event listener that handles manually-triggered
    // synthetic events by interrupting progress until reinvoked in response to
    // *native* events that it fires directly, ensuring that state changes have
    // already occurred before other listeners are invoked.
    function leverageNative(el, type, expectSync) {
        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if (!expectSync) {
            if (dataPriv.get(el, type) === undefined) jQuery.event.add(el, type, returnTrue);
            return;
        }
        // Register the controller as a special universal handler for all event namespaces
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
            namespace: false,
            handler: function handler(event) {
                var notAsync, result, saved = dataPriv.get(this, type);
                if (event.isTrigger & 1 && this[type]) {
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    // Saved data should be false in such cases, but might be a leftover capture object
                    // from an async native handler (gh-4350)
                    if (!saved.length) {
                        // Store arguments for use when handling the inner native event
                        // There will always be at least one argument (an event object), so this array
                        // will not be confused with a leftover capture object.
                        saved = slice2.call(arguments);
                        dataPriv.set(this, type, saved);
                        // Trigger the native event and capture its result
                        // Support: IE <=9 - 11+
                        // focus() and blur() are asynchronous
                        notAsync = expectSync(this, type);
                        this[type]();
                        result = dataPriv.get(this, type);
                        if (saved !== result || notAsync) dataPriv.set(this, type, false);
                        else result = {
                        };
                        if (saved !== result) {
                            // Cancel the outer synthetic event
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            // Support: Chrome 86+
                            // In Chrome, if an element having a focusout handler is blurred by
                            // clicking outside of it, it invokes the handler synchronously. If
                            // that handler calls `.remove()` on the element, the data is cleared,
                            // leaving `result` undefined. We need to guard against this.
                            return result && result.value;
                        }
                    // If this is an inner synthetic event for an event with a bubbling surrogate
                    // (focus or blur), assume that the surrogate already propagated from triggering the
                    // native event and prevent that from happening again here.
                    // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                    // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                    // less bad than duplication.
                    } else if ((jQuery.event.special[type] || {
                    }).delegateType) event.stopPropagation();
                // If this is a native event triggered above, everything is now in order
                // Fire an inner synthetic event with the original arguments
                } else if (saved.length) {
                    // ...and capture the result
                    dataPriv.set(this, type, {
                        value: jQuery.event.trigger(// Support: IE <=9 - 11+
                        // Extend with the prototype to reset the above stopImmediatePropagation()
                        jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
                    });
                    // Abort handling of the native event
                    event.stopImmediatePropagation();
                }
            }
        });
    }
    jQuery.removeEvent = function(elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) elem.removeEventListener(type, handle);
    };
    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (#504, #13143)
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        // Event type
        } else this.type = src;
        // Put explicitly provided properties onto the event object
        if (props) jQuery.extend(this, props);
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();
        // Mark it as fixed
        this[jQuery.expando] = true;
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function preventDefault() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) e.preventDefault();
        },
        stopPropagation: function stopPropagation() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopPropagation();
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    // Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
    }, jQuery.event.addProp);
    jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(type, delegateType) {
        jQuery.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function setup() {
                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative(this, type, expectSync1);
                // Return false to allow normal processing in the caller
                return false;
            },
            trigger: function trigger() {
                // Force setup before trigger
                leverageNative(this, type);
                // Return non-false to allow normal event-path propagation
                return true;
            },
            // Suppress native focus or blur as it's already being fired
            // in leverageNative.
            _default: function _default() {
                return true;
            },
            delegateType: delegateType
        };
    });
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function handle(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function on1(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function one(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function off(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for(type in types)this.off(type, selector, types[type]);
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) fn = returnFalse;
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i, // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    // Prefer a tbody over its parent table for containing new rows
    function manipulationTarget(elem, content) {
        if (nodeName1(elem, "table") && nodeName1(content.nodeType !== 11 ? content : content.firstChild, "tr")) return jQuery(elem).children("tbody")[0] || elem;
        return elem;
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") elem.type = elem.type.slice(5);
        else elem.removeAttribute("type");
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) return;
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
                dataPriv.remove(dest, "handle events");
                for(type in events)for(i = 0, l = events[type].length; i < l; i++)jQuery.event.add(dest, type, events[type][i]);
            }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({
            }, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) dest.checked = src.checked;
        else if (nodeName === "input" || nodeName === "textarea") dest.defaultValue = src.defaultValue;
    }
    function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (valueIsFunction || l > 1 && typeof value === "string" && !support1.checkClone && rchecked.test(value)) return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) args[0] = value.call(this, index, self.html());
            domManip(self, args, callback, ignored);
        });
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) fragment = first;
            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;
                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for(; i < l; i++){
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, "script"));
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);
                    // Evaluate executable scripts on first document insertion
                    for(i = 0; i < hasScripts; i++){
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || "").toLowerCase() !== "module") // Optional AJAX dependency, but won't run scripts if not present
                            {
                                if (jQuery._evalUrl && !node.noModule) jQuery._evalUrl(node.src, {
                                    nonce: node.nonce || node.getAttribute("nonce")
                                }, doc);
                            } else DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for(; (node = nodes[i]) != null; i++){
            if (!keepData && node.nodeType === 1) jQuery.cleanData(getAll(node));
            if (node.parentNode) {
                if (keepData && isAttached(node)) setGlobalEval(getAll(node, "script"));
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function htmlPrefilter(html) {
            return html;
        },
        clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone1 = elem.cloneNode(true), inPage = isAttached(elem);
            // Fix IE cloning issues
            if (!support1.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone1);
                srcElements = getAll(elem);
                for(i = 0, l = srcElements.length; i < l; i++)fixInput(srcElements[i], destElements[i]);
            }
            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone1);
                    for(i = 0, l = srcElements.length; i < l; i++)cloneCopyEvent(srcElements[i], destElements[i]);
                } else cloneCopyEvent(elem, clone1);
            }
            // Preserve script evaluation history
            destElements = getAll(clone1, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            // Return the cloned set
            return clone1;
        },
        cleanData: function cleanData(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for(; (elem = elems[i]) !== undefined; i++)if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                    if (data.events) {
                        for(type in data.events)if (special[type]) jQuery.event.remove(elem, type);
                        else jQuery.removeEvent(elem, type, data.handle);
                    }
                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataPriv.expando] = undefined;
                }
                if (elem[dataUser.expando]) // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
            }
        }
    });
    jQuery.fn.extend({
        detach: function detach(selector) {
            return remove(this, selector, true);
        },
        remove: function remove1(selector) {
            return remove(this, selector);
        },
        text: function text(value4) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) this.textContent = value;
                });
            }, null, value4, arguments.length);
        },
        append: function append() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function prepend() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function before() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this);
            });
        },
        after: function after() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        empty: function empty() {
            var elem, i = 0;
            for(; (elem = this[i]) != null; i++)if (elem.nodeType === 1) {
                // Prevent memory leaks
                jQuery.cleanData(getAll(elem, false));
                // Remove any remaining nodes
                elem.textContent = "";
            }
            return this;
        },
        clone: function clone(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function html(value5) {
            return access(this, function(value) {
                var elem = this[0] || {
                }, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) return elem.innerHTML;
                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                    "",
                    ""
                ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for(; i < l; i++){
                            elem = this[i] || {
                            };
                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {
                    }
                }
                if (elem) this.empty().append(value);
            }, null, value5, arguments.length);
        },
        replaceWith: function replaceWith() {
            var ignored = [];
            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) parent.replaceChild(elem, this);
                }
            // Force callback invocation
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for(; i <= last; i++){
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push1.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function getStyles(elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) view = window1;
        return view.getComputedStyle(elem);
    };
    var swap = function swap(elem, options, callback) {
        var ret, name, old = {
        };
        // Remember the old values, and insert the new ones
        for(name in options){
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        // Revert the old values
        for(name in options)elem.style[name] = old[name];
        return ret;
    };
    var rboxStyle = new RegExp(cssExpand.join("|"), "i");
    (function() {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
            // This is a singleton, we need to execute it only once
            if (!div) return;
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window1.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document1.createElement("div"), div = document1.createElement("div");
        // Finish early in limited (non-browser) environments
        if (!div.style) return;
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support1.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support1, {
            boxSizingReliable: function boxSizingReliable() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function pixelBoxStyles() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function pixelPosition() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function reliableMarginLeft() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function scrollboxSize() {
                computeStyleTests();
                return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function reliableTrDimensions() {
                var table, tr, trChild, trStyle;
                if (reliableTrDimensionsVal == null) {
                    table = document1.createElement("table");
                    tr = document1.createElement("tr");
                    trChild = document1.createElement("div");
                    table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText = "border:1px solid";
                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";
                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is display: block
                    // gets around this issue.
                    trChild.style.display = "block";
                    documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                    trStyle = window1.getComputedStyle(tr);
                    reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                    documentElement.removeChild(table);
                }
                return reliableTrDimensionsVal;
            }
        });
    })();
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, // Support: Firefox 51+
        // Retrieving style before computed somehow
        // fixes an issue with getting wrong values
        // on detached elements
        style = elem.style;
        computed = computed || getStyles(elem);
        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !isAttached(elem)) ret = jQuery.style(elem, name);
            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if (!support1.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function get() {
                if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var cssPrefixes = [
        "Webkit",
        "Moz",
        "ms"
    ], emptyStyle = document1.createElement("div").style, vendorProps = {
    };
    // Return a vendor-prefixed property or undefined
    function vendorPropName(name) {
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while(i--){
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) return name;
        }
    }
    // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) return final;
        if (name in emptyStyle) return name;
        return vendorProps[name] = vendorPropName(name) || name;
    }
    var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    };
    function setPositiveNumber(_elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        // Adjustment may not be necessary
        if (box === (isBorderBox ? "border" : "content")) return 0;
        for(; i < 4; i += 2){
            // Both box models exclude margin
            if (box === "margin") delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if (!isBorderBox) {
                // Add padding
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "border" or "margin", add border
                if (box !== "padding") delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                else extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"
            } else {
                // For "content", subtract padding
                if (box === "content") delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "content" or "padding", subtract border
                if (box !== "margin") delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
        }
        // Account for positive content-box scroll gutter when requested by providing computedVal
        if (!isBorderBox && computedVal >= 0) // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
        // Assuming integer scroll gutter, subtract the rest and round down
        delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        // Start with computed style
        var styles = getStyles(elem), // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
        // Fake content-box until we know it's needed to know the true value.
        boxSizingNeeded = !support1.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if (rnumnonpx.test(val)) {
            if (!extra) return val;
            val = "auto";
        }
        // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.
        if ((!support1.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        !support1.reliableTrDimensions() && nodeName1(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" || // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
        elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) val = elem[offsetProp];
        }
        // Normalize "" and auto
        val = parseFloat(val) || 0;
        // Adjust for the element's box model
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val) + "px";
    }
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function get(elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
        },
        // Get and set the style property on a DOM Node
        style: function style(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) return;
            // Make sure that we're working with the right name
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style1 = elem.style;
            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    // Fixes bug #9237
                    type = "number";
                }
                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) return;
                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if (type === "number" && !isCustomProp) value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                // background-* props affect original clone's values
                if (!support1.clearCloneStyle && value === "" && name.indexOf("background") === 0) style1[name] = "inherit";
                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) style1.setProperty(name, value);
                    else style1[name] = value;
                }
            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) return ret;
                // Otherwise just get the value from the style object
                return style1[name];
            }
        },
        css: function css(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) val = curCSS(elem, name, styles);
            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) val = cssNormalTransform[name];
            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        "height",
        "width"
    ], function(_i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function get(elem, computed, extra) {
                if (computed) // Certain elements can have dimension info if we invisibly show them
                // but it must have a current display style that would benefit
                return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
            },
            set: function set(elem, value, extra) {
                var matches, styles = getStyles(elem), // Only read styles.position if the test has a chance to fail
                // to avoid forcing a reflow.
                scrollboxSizeBuggy = !support1.scrollboxSize() && styles.position === "absolute", // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if (isBorderBox && scrollboxSizeBuggy) subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support1.reliableMarginLeft, function(elem, computed) {
        if (computed) return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft: 0
        }, function() {
            return elem.getBoundingClientRect().left;
        })) + "px";
    });
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function expand(value) {
                var i = 0, expanded = {
                }, // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [
                    value
                ];
                for(; i < 4; i++)expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        if (prefix !== "margin") jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    });
    jQuery.fn.extend({
        css: function css(name1, value6) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {
                }, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for(; i < len; i++)map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name1, value6, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function init(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function cur() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function run(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this);
            else Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function get(tween) {
                var result;
                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) return tween.elem[tween.prop];
                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function set(tween) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween);
                else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                else tween.elem[tween.prop] = tween.now;
            }
        }
    };
    // Support: IE <=9 only
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function set(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now;
        }
    };
    jQuery.easing = {
        linear: function linear(p) {
            return p;
        },
        swing: function swing(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;
    // Back compat <1.8 extension point
    jQuery.fx.step = {
    };
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document1.hidden === false && window1.requestAnimationFrame) window1.requestAnimationFrame(schedule);
            else window1.setTimeout(schedule, jQuery.fx.interval);
            jQuery.fx.tick();
        }
    }
    // Animations created synchronously will run synchronously
    function createFxNow() {
        window1.setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for(; i < 4; i += 2 - includeWidth){
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for(; index < length; index++){
            if (tween = collection[index].call(animation, prop, value)) // We're done with this property
            return tween;
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var _loop = function(prop) {
            // General show/hide setup for this element animation
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) hidden = dataShow.hidden;
                } else dataShow = dataPriv.access(elem, "fxshow", {
                    display: restoreDisplay
                });
                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) dataShow.hidden = !hidden;
                // Show elements before animating them
                if (hidden) showHide([
                    elem
                ], true);
                /* eslint-disable no-loop-func */ anim.done(function() {
                    /* eslint-enable no-loop-func */ // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) showHide([
                        elem
                    ]);
                    dataPriv.remove(elem, "fxshow");
                    for(prop in orig)jQuery.style(elem, prop, orig[prop]);
                });
            }
            // Per-property setup
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        };
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {
        }, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire();
                });
            });
        }
        // Detect show/hide animations
        for(prop in props){
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) hidden = true;
                    else continue;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) return;
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) restoreDisplay = dataPriv.get(elem, "display");
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) display = restoreDisplay;
                else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([
                        elem
                    ], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([
                        elem
                    ]);
                }
            }
            // Animate inline elements as inline-block
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                        anim.done(function() {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        // Implement show/hide animations
        propTween = false;
        for(prop in orig)_loop(prop);
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for(index in props){
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for(index in value)if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index1 = 0, length1 = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            // Don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function tick() {
            if (stopped) return false;
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), // Support: Android 2.3 only
            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for(; index < length; index++)animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [
                animation,
                percent,
                remaining
            ]);
            // If there's more to do, yield
            if (percent < 1 && length) return remaining;
            // If this was an empty animation, synthesize a final progress notification
            if (!length) deferred.notifyWith(elem, [
                animation,
                1,
                0
            ]);
            // Resolve the animation and report its conclusion
            deferred.resolveWith(elem, [
                animation
            ]);
            return false;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({
            }, properties),
            opts: jQuery.extend(true, {
                specialEasing: {
                },
                easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function createTween(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function stop1(gotoEnd) {
                var index = 0, // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = true;
                for(; index < length; index++)animation.tweens[index].run(1);
                // Resolve when we played the last frame; otherwise, reject
                if (gotoEnd) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                    deferred.resolveWith(elem, [
                        animation,
                        gotoEnd
                    ]);
                } else deferred.rejectWith(elem, [
                    animation,
                    gotoEnd
                ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for(; index1 < length1; index1++){
            result = Animation.prefilters[index1].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        // Attach callbacks from options
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [
                function(prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }
            ]
        },
        tweener: function tweener(props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = [
                    "*"
                ];
            } else props = props.match(rnothtmlwhite);
            var prop, index = 0, length = props.length;
            for(; index < length; index++){
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [
            defaultPrefilter
        ],
        prefilter: function prefilter(callback, prepend) {
            if (prepend) Animation.prefilters.unshift(callback);
            else Animation.prefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({
        }, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        // Go to the end state if fx are off
        if (jQuery.fx.off) opt.duration = 0;
        else if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) opt.duration = jQuery.fx.speeds[opt.duration];
            else opt.duration = jQuery.fx.speeds._default;
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) opt.queue = "fx";
        // Queueing
        opt.old = opt.complete;
        opt.complete = function() {
            if (isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function fadeTo(speed, to, easing, callback) {
            // Show any hidden elements after setting opacity to 0
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()// Animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function animate(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function doAnimation() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({
                }, prop), optall);
                // Empty animations, or finishing resolves immediately
                if (empty || dataPriv.get(this, "finish")) anim.stop(true);
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function stop1(type, clearQueue, gotoEnd) {
            var stopQueue = function stopQueue(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue) this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index]);
                } else {
                    for(index in data)if (data[index] && data[index].stop && rrun.test(index)) stopQueue(data[index]);
                }
                for(index = timers.length; index--;)if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                }
                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type);
            });
        },
        finish: function finish(type) {
            if (type !== false) type = type || "fx";
            return this.each(function() {
                var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                // Enable finishing flag on private data
                data.finish = true;
                // Empty the queue first
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                // Look for any active animations, and finish them
                for(index = timers.length; index--;)if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                }
                // Look for any animations in the old queue and finish them
                for(index = 0; index < length; index++)if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                // Turn off finishing flag
                delete data.finish;
            });
        }
    });
    jQuery.each([
        "toggle",
        "show",
        "hide"
    ], function(_i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for(; i < timers.length; i++){
            timer = timers[i];
            // Run the timer and safely remove it when done (allowing for external removal)
            if (!timer() && timers[i] === timer) timers.splice(i--, 1);
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (inProgress) return;
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    // Based off of the plugin by Clint Helfers, with permission.
    // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = window1.setTimeout(next, time);
            hooks.stop = function() {
                window1.clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document1.createElement("input"), select = document1.createElement("select"), opt = select.appendChild(document1.createElement("option"));
        input.type = "checkbox";
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support1.checkOn = input.value !== "";
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support1.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document1.createElement("input");
        input.value = "t";
        input.type = "radio";
        support1.radioValue = input.value === "t";
    })();
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function attr(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function removeAttr(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function attr(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") return jQuery.prop(elem, name, value);
            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            ret = jQuery.find.attr(elem, name);
            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function set(elem, value) {
                    if (!support1.radioValue && value === "radio" && nodeName1(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value;
                    }
                }
            }
        },
        removeAttr: function removeAttr(elem, value) {
            var name, i = 0, // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) while(name = attrNames[i++])elem.removeAttribute(name);
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function set(elem, value, name) {
            if (value === false) // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
            else elem.setAttribute(name, name);
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name2) {
        var getter = attrHandle[name2] || jQuery.find.attr;
        attrHandle[name2] = function(elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function prop(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function removeProp(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function prop(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function get(elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    if (tabindex) return parseInt(tabindex, 10);
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) return 0;
                    return -1;
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });
    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    // eslint rule "no-unused-expressions" is disabled for this code
    // since it considers such accessions noop
    if (!support1.optSelected) jQuery.propHooks.selected = {
        get: function get(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent && parent.parentNode) parent.parentNode.selectedIndex;
            return null;
        },
        set: function set(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) parent.parentNode.selectedIndex;
            }
        }
    };
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }
    function classesToArray(value) {
        if (Array.isArray(value)) return value;
        if (typeof value === "string") return value.match(rnothtmlwhite) || [];
        return [];
    }
    jQuery.fn.extend({
        addClass: function addClass(value) {
            var classes, elem, cur, curValue, clazz, j1, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j1 = 0;
                    while(clazz = classes[j1++])if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        removeClass: function removeClass(value) {
            var classes, elem, cur, curValue, clazz, j2, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j2 = 0;
                    while(clazz = classes[j2++])// Remove *all* instances
                    while(cur.indexOf(" " + clazz + " ") > -1)cur = cur.replace(" " + clazz + " ", " ");
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        toggleClass: function toggleClass(value, stateVal) {
            var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value), isValidValue = type === "string" || Array.isArray(value);
            if (typeof stateVal === "boolean" && isValidValue) return stateVal ? this.addClass(value) : this.removeClass(value);
            if (isFunction(value)) return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
            return this.each(function() {
                var className, i, self, classNames;
                if (isValidValue) {
                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while(className = classNames[i++])// Check each className given, space separated list
                    if (self.hasClass(className)) self.removeClass(className);
                    else self.addClass(className);
                // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) // Store className if set
                    dataPriv.set(this, "__className__", className);
                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                }
            });
        },
        hasClass: function hasClass(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while(elem = this[i++]){
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) return true;
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function val1(value7) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) return ret;
                    ret = elem.value;
                    // Handle most common string cases
                    if (typeof ret === "string") return ret.replace(rreturn, "");
                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value7);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) return;
                if (valueIsFunction) val = value7.call(this, i, jQuery(this).val());
                else val = value7;
                // Treat null/undefined as ""; convert numbers to string
                if (val == null) val = "";
                else if (typeof val === "number") val += "";
                else if (Array.isArray(val)) val = jQuery.map(val, function(value) {
                    return value == null ? "" : value + "";
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) this.value = val;
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function get(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : // Support: IE <=10 - 11 only
                    // option.text throws exceptions (#14686, #14858)
                    // Strip and collapse whitespace
                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                    stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function get(elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) i = max;
                    else i = one ? index : 0;
                    // Loop through all the selected options
                    for(; i < max; i++){
                        option = options[i];
                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled && (!option.parentNode.disabled || !nodeName1(option.parentNode, "optgroup"))) {
                            // Get the specific value for the option
                            value = jQuery(option).val();
                            // We don't need an array for one selects
                            if (one) return value;
                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function set(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while(i--){
                        option = options[i];
                        /* eslint-disable no-cond-assign */ if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) optionSet = true;
                    /* eslint-enable no-cond-assign */ }
                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) elem.selectedIndex = -1;
                    return values;
                }
            }
        }
    });
    // Radios and checkboxes getter/setter
    jQuery.each([
        "radio",
        "checkbox"
    ], function() {
        jQuery.valHooks[this] = {
            set: function set(elem, value) {
                if (Array.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
        };
        if (!support1.checkOn) jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    });
    // Return jQuery for attributes-only inclusion
    support1.focusin = "onfocusin" in window1;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function stopPropagationCallback(e) {
        e.stopPropagation();
    };
    jQuery.extend(jQuery.event, {
        trigger: function trigger(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [
                elem || document1
            ], type = hasOwn1.call(event, "type") ? event.type : event, namespaces = hasOwn1.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document1;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) return;
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) return;
            if (type.indexOf(".") > -1) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) event.target = elem;
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [
                event
            ] : jQuery.makeArray(data, [
                event
            ]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {
            };
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) return;
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for(; cur; cur = cur.parentNode){
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document1)) eventPath.push(tmp.defaultView || tmp.parentWindow || window1);
            }
            // Fire handlers on the event path
            i = 0;
            while((cur = eventPath[i++]) && !event.isPropagationStopped()){
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                // jQuery handler
                handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
                if (handle) handle.apply(cur, data);
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) event.preventDefault();
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) // Call a native DOM method on the target with the same name as the event.
                // Don't do default actions on window, that's where global variables be (#6170)
                {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) elem[ontype] = null;
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) lastElement.addEventListener(type, stopPropagationCallback);
                        elem[type]();
                        if (event.isPropagationStopped()) lastElement.removeEventListener(type, stopPropagationCallback);
                        jQuery.event.triggered = undefined;
                        if (tmp) elem[ontype] = tmp;
                    }
                }
            }
            return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function simulate(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function trigger(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function triggerHandler(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, true);
        }
    });
    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if (!support1.focusin) jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function handler(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
        };
        jQuery.event.special[fix] = {
            setup: function setup() {
                // Handle: regular nodes (via `this.ownerDocument`), window
                // (via `this.document`) & document (via `this`).
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) doc.addEventListener(orig, handler, true);
                dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function teardown() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    dataPriv.remove(doc, fix);
                } else dataPriv.access(doc, fix, attaches);
            }
        };
    });
    var location = window1.location;
    var nonce = {
        guid: Date.now()
    };
    var rquery = /\?/;
    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") return null;
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = new window1.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
        }).join("\n") : data));
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) // Serialize array item.
        jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) // Treat each array item as a scalar.
            add(prefix, v);
            else // Item is non-scalar (array or object), encode its numeric index.
            buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
        });
        else if (!traditional && toType(obj) === "object") // Serialize object item.
        for(name in obj)buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
        else // Serialize scalar item.
        add(prefix, obj);
    }
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function add(key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) return "";
        // If an array was passed in, assume that it is an array of form elements.
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) // Serialize the form elements
        jQuery.each(a, function() {
            add(this.name, this.value);
        });
        else // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for(prefix in a)buildParams(prefix, a[prefix], traditional, add);
        // Return the resulting serialization
        return s.join("&");
    };
    jQuery.fn.extend({
        serialize: function serialize() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function serializeArray() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
                var val2 = jQuery(this).val();
                if (val2 == null) return null;
                if (Array.isArray(val2)) return jQuery.map(val2, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                });
                return {
                    name: elem.name,
                    value: val2.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */ prefilters = {
    }, /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */ transports = {
    }, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*"), // Anchor tag for parsing the document origin
    originAnchor = document1.createElement("a");
    originAnchor.href = location.href;
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while(dataType = dataTypes[i++])// Prepend if requested
                if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(func);
                // Otherwise append
                } else (structure[dataType] = structure[dataType] || []).push(func);
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {
        }, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {
        };
        for(key in src)if (src[key] !== undefined) (flatOptions[key] ? target : deep || (deep = {
        }))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target;
    }
    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */ function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while(dataTypes[0] === "*"){
            dataTypes.shift();
            if (ct === undefined) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for(type in contents)if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) finalDataType = dataTypes[0];
        else {
            // Try convertible dataTypes
            for(type in responses){
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) firstDataType = type;
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */ function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {
        }, // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) for(conv in s.converters)converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while(current){
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") current = prev;
                else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) for(conv2 in converters){
                        // If conv2 outputs current
                        tmp = conv2.split(" ");
                        if (tmp[1] === current) {
                            // If prev can be converted to accepted input
                            conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                            if (conv) {
                                // Condense equivalence converters
                                if (conv === true) conv = converters[conv2];
                                else if (converters[conv2] !== true) {
                                    current = tmp[0];
                                    dataTypes.unshift(tmp[1]);
                                }
                                break;
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) response = conv(response);
                        else try {
                            response = conv(response);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: conv ? e : "No conversion from " + prev + " to " + current
                            };
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {
        },
        etag: {
        },
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/ accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": JSON.parse,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function ajaxSetup(target, settings) {
            return settings ? // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function ajax(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {
            };
            var transport, // URL without anti-cache param
            cacheURL, // Response headers
            responseHeadersString, responseHeaders, // timeout handle
            timeoutTimer, // Url cleanup var
            urlAnchor, // Request state (becomes false upon send and true upon completion)
            completed, // To know if global events are to be dispatched
            fireGlobals, // Loop variable
            i, // uncached part of the url
            uncached, // Create the final options object
            s = jQuery.ajaxSetup({
            }, options), // Callbacks context
            callbackContext = s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), // Status-dependent callbacks
            statusCode = s.statusCode || {
            }, // Headers (they are sent all at once)
            requestHeaders = {
            }, requestHeadersNames = {
            }, // Default abort message
            strAbort = "canceled", // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function getResponseHeader(key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {
                            };
                            while(match = rheaders.exec(responseHeadersString))responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                        }
                        match = responseHeaders[key.toLowerCase() + " "];
                    }
                    return match == null ? null : match.join(", ");
                },
                // Raw string
                getAllResponseHeaders: function getAllResponseHeaders() {
                    return completed ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function setRequestHeader(name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function overrideMimeType(type) {
                    if (completed == null) s.mimeType = type;
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function statusCode1(map) {
                    var code;
                    if (map) {
                        if (completed) // Execute the appropriate callbacks
                        jqXHR.always(map[jqXHR.status]);
                        else // Lazy-add the new callbacks in a way that preserves old ones
                        for(code in map)statusCode[code] = [
                            statusCode[code],
                            map[code]
                        ];
                    }
                    return this;
                },
                // Cancel the request
                abort: function abort(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR);
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [
                ""
            ];
            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document1.createElement("a");
                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;
                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") s.data = jQuery.param(s.data, s.traditional);
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (completed) return jqXHR;
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;
            // Watch for a new set of requests
            if (fireGlobals && (jQuery.active++) === 0) jQuery.event.trigger("ajaxStart");
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");
            // More options handling for requests with no content
            if (!s.hasContent) {
                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);
                // If data is available and should be processed, append data to url
                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add or update anti-cache param if needed
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
                }
                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;
            // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) s.data = s.data.replace(r20, "+");
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            // Check for headers option
            for(i in s.headers)jqXHR.setRequestHeader(i, s.headers[i]);
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) // Abort if not done already and return
            return jqXHR.abort();
            // Aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) done(-1, "No Transport");
            else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [
                    jqXHR,
                    s
                ]);
                // If request was aborted inside ajaxSend, stop there
                if (completed) return jqXHR;
                // Timeout
                if (s.async && s.timeout > 0) timeoutTimer = window1.setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout);
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) throw e;
                    // Propagate others as results
                    done(-1, e);
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Ignore repeat invocations
                if (completed) return;
                completed = true;
                // Clear timeout if it exists
                if (timeoutTimer) window1.clearTimeout(timeoutTimer);
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                // Use a noop converter for missing script but not if jsonp
                if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) s.converters["text script"] = function() {
                };
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] = modified;
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") statusText = "nocontent";
                    else if (status === 304) statusText = "notmodified";
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0;
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) deferred.resolveWith(callbackContext, [
                    success,
                    statusText,
                    jqXHR
                ]);
                else deferred.rejectWith(callbackContext, [
                    jqXHR,
                    statusText,
                    error
                ]);
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
                    jqXHR,
                    s,
                    isSuccess ? success : error
                ]);
                // Complete
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [
                        jqXHR,
                        s
                    ]);
                    // Handle the global AJAX counter
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop");
                }
            }
            return jqXHR;
        },
        getJSON: function getJSON(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function getScript(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([
        "get",
        "post"
    ], function(_i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery.ajaxPrefilter(function(s) {
        var i;
        for(i in s.headers)if (i.toLowerCase() === "content-type") s.contentType = s.headers[i] || "";
    });
    jQuery._evalUrl = function(url, options, doc) {
        return jQuery.ajax({
            url: url,
            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
                "text script": function() {
                }
            },
            dataFilter: function dataFilter(response) {
                jQuery.globalEval(response, options, doc);
            }
        });
    };
    jQuery.fn.extend({
        wrapAll: function wrapAll(html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) html = html.call(this[0]);
                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function() {
                    var elem = this;
                    while(elem.firstElementChild)elem = elem.firstElementChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function wrapInner(html) {
            if (isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            });
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) contents.wrapAll(html);
                else self.append(html);
            });
        },
        wrap: function wrap(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function unwrap(selector) {
            this.parent(selector).not("body").each(function() {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window1.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    support1.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support1.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support1.cors || xhrSupported && !options.crossDomain) return {
            send: function send(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                // Apply custom fields if provided
                if (options.xhrFields) for(i in options.xhrFields)xhr[i] = options.xhrFields[i];
                // Override mime type if needed
                if (options.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(options.mimeType);
                // X-Requested-With header
                // For cross-domain requests, seeing as conditions for a preflight are
                // akin to a jigsaw puzzle, we simply never set it to be sure.
                // (it can always be set on a per-request basis or even using ajaxSetup)
                // For same-domain requests, won't change header if already provided.
                if (!options.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                // Set headers
                for(i in headers)xhr.setRequestHeader(i, headers[i]);
                // Callback
                callback = function(type) {
                    return function() {
                        if (callback) {
                            callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                            if (type === "abort") xhr.abort();
                            else if (type === "error") {
                                // Support: IE <=9 only
                                // On a manual native abort, IE9 throws
                                // errors on any property access that is not readyState
                                if (typeof xhr.status !== "number") complete(0, "error");
                                else complete(// File: protocol always yields status 0; see #8605, #14207
                                xhr.status, xhr.statusText);
                            } else complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                            // IE9 has no XHR2 but throws on binary (trac-11426)
                            // For XHR2 non-text, let the caller handle it (gh-2498)
                            (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                binary: xhr.response
                            } : {
                                text: xhr.responseText
                            }, xhr.getAllResponseHeaders());
                        }
                    };
                };
                // Listen to events
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                // Support: IE 9 only
                // Use onreadystatechange to replace onabort
                // to handle uncaught aborts
                if (xhr.onabort !== undefined) xhr.onabort = errorCallback;
                else xhr.onreadystatechange = function() {
                    // Check readyState before timeout as it changes
                    if (xhr.readyState === 4) // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window1.setTimeout(function() {
                        if (callback) errorCallback();
                    });
                };
                // Create the abort callback
                callback = callback("abort");
                try {
                    // Do send the request (this may raise an exception)
                    xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if (callback) throw e;
                }
            },
            abort: function abort() {
                if (callback) callback();
            }
        };
    });
    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) s.contents.script = false;
    });
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) s.cache = false;
        if (s.crossDomain) s.type = "GET";
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {
        // This transport only deals with cross domain or forced-by-attrs requests
        if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
                send: function send(_, complete) {
                    script = jQuery("<script>").attr(s.scriptAttrs || {
                    }).prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) complete(evt.type === "error" ? 404 : 200, evt.type);
                    });
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document1.head.appendChild(script[0]);
                },
                abort: function abort() {
                    if (callback) callback();
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function jsonpCallback() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            else if (s.jsonp !== false) s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            // Force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window1[callbackName];
            window1[callbackName] = function() {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // If previous value didn't exist - remove it
                if (overwritten === undefined) jQuery(window1).removeProp(callbackName);
                else window1[callbackName] = overwritten;
                // Save back as free
                if (s[callbackName]) {
                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
    // Support: Safari 8 only
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support1.createHTMLDocument = (function() {
        var body = document1.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    })();
    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") return [];
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if (support1.createHTMLDocument) {
                context = document1.implementation.createHTMLDocument("");
                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document1.location.href;
                context.head.appendChild(base);
            } else context = document1;
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) return [
            context.createElement(parsed[1])
        ];
        parsed = buildFragment([
            data
        ], context, scripts);
        if (scripts && scripts.length) jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    /**
 * Load a url into a page
 */ jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        // If it's a function
        if (isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
        // Otherwise, build a param string
        } else if (params && typeof params === "object") type = "POST";
        // If we have elements to modify, make the request
        if (self.length > 0) jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
        }).done(function(responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText);
        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
        }).always(callback && function(jqXHR, status) {
            self.each(function() {
                callback.apply(this, response || [
                    jqXHR.responseText,
                    status,
                    jqXHR
                ]);
            });
        });
        return this;
    };
    jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function setOffset(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {
            };
            // Set position first, in-case top/left are set even on static elem
            if (position === "static") elem.style.position = "relative";
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({
            }, curOffset));
            if (options.top != null) props.top = options.top - curOffset.top + curTop;
            if (options.left != null) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props);
            else curElem.css(props);
        }
    };
    jQuery.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function offset(options) {
            // Preserve chaining for setter
            if (arguments.length) return options === undefined ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var rect, win, elem = this[0];
            if (!elem) return;
            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if (!elem.getClientRects().length) return {
                top: 0,
                left: 0
            };
            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function position() {
            if (!this[0]) return;
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if (jQuery.css(elem, "position") === "fixed") // Assume position:fixed implies availability of getBoundingClientRect
            offset = elem.getBoundingClientRect();
            else {
                offset = this.offset();
                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while(offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.parentNode;
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }
            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function offsetParent1() {
            return this.map(function() {
                var offsetParent = this.offsetParent;
                while(offsetParent && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.offsetParent;
                return offsetParent || documentElement;
            });
        }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val3) {
            return access(this, function(elem, method, val) {
                // Coalesce documents and windows
                var win;
                if (isWindow(elem)) win = elem;
                else if (elem.nodeType === 9) win = elem.defaultView;
                if (val === undefined) return win ? win[prop] : elem[method];
                if (win) win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                else elem[method] = val;
            }, method, val3, arguments.length);
        };
    });
    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each([
        "top",
        "left"
    ], function(_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support1.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                // If curCSS returns percentage, fallback to offset
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type1) {
        jQuery.each({
            padding: "inner" + name,
            content: type1,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value8) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value8 === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (isWindow(elem)) // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                    return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) : // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type1, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function(_i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.fn.extend({
        bind: function bind(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function unbind(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function delegate(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function undelegate(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function hover(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    // Support: Android <=4.0 only
    // Make sure we trim BOM and NBSP
    var rtrim1 = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    // Bind a function to a context, optionally partially applying any
    // arguments.
    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    // However, it is not slated for removal any time soon
    jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!isFunction(fn)) return undefined;
        // Simulated bind
        args = slice2.call(arguments, 2);
        proxy = function proxy() {
            return fn.apply(context || this, args.concat(slice2.call(arguments)));
        };
        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function(hold) {
        if (hold) jQuery.readyWait++;
        else jQuery.ready(true);
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName1;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function(obj) {
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
    };
    jQuery.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim1, "");
    };
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === "function" && define.amd) define("jquery", [], function() {
        return jQuery;
    });
    var // Map over jQuery in case of overwrite
    _jQuery = window1.jQuery, // Map over the $ in case of overwrite
    _$ = window1.$;
    jQuery.noConflict = function(deep) {
        if (window1.$ === jQuery) window1.$ = _$;
        if (deep && window1.jQuery === jQuery) window1.jQuery = _jQuery;
        return jQuery;
    };
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (typeof noGlobal === "undefined") window1.jQuery = window1.$ = jQuery;
    return jQuery;
});

},{"@swc/helpers":"cawJ1"}],"kF9JD":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$da26 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$da26.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ObjectDetails;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var ObjectDetails = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ObjectDetails, _Component);
    var _super = _helpers.createSuper(ObjectDetails);
    function ObjectDetails(props) {
        _helpers.classCallCheck(this, ObjectDetails);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ObjectDetails, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var _props = this.props, type = _props.type, created_at = _props.created_at, updated_at = _props.updated_at, filename = _props.filename, mime_type = _props.mime_type, is_shared = _props.is_shared, text = _props.text;
                if (type === undefined) return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                    children: "No object selected"
                }, void 0, false, {
                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                    lineNumber: 23,
                    columnNumber: 14
                }, this));
                if (type === "DIR") return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "table-responsive",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("table", {
                        className: "table table-sm-custom",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tbody", {
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Dirname"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 39,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 38,
                                            columnNumber: 17
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: text
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 41,
                                            columnNumber: 17
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 37,
                                    columnNumber: 15
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Type"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 45,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 44,
                                            columnNumber: 17
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: "Directory"
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 47,
                                            columnNumber: 17
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 43,
                                    columnNumber: 15
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Created"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 57,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 56,
                                            columnNumber: 17
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: created_at
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 59,
                                            columnNumber: 17
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 55,
                                    columnNumber: 15
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                            lineNumber: 30,
                            columnNumber: 13
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                        lineNumber: 29,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                    lineNumber: 28,
                    columnNumber: 9
                }, this));
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "table-responsive",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("table", {
                        className: "table table-sm-custom",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tbody", {
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Filename"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 79,
                                                columnNumber: 17
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 78,
                                            columnNumber: 15
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: text
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 81,
                                            columnNumber: 15
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 77,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Type"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 85,
                                                columnNumber: 17
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 84,
                                            columnNumber: 15
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: "File"
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 87,
                                            columnNumber: 15
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 83,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "MIME Type"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 91,
                                                columnNumber: 17
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 90,
                                            columnNumber: 15
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: mime_type
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 93,
                                            columnNumber: 15
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 89,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Original name"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 98,
                                                columnNumber: 17
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 97,
                                            columnNumber: 15
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: filename
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 100,
                                            columnNumber: 15
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 96,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                    children: [
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                children: "Created"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                                lineNumber: 110,
                                                columnNumber: 17
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 109,
                                            columnNumber: 15
                                        }, this),
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                                            children: created_at
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                            lineNumber: 112,
                                            columnNumber: 15
                                        }, this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                                    lineNumber: 108,
                                    columnNumber: 13
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                            lineNumber: 70,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                        lineNumber: 69,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/shared/FileExplorer/components/ObjectDetails.jsx",
                    lineNumber: 68,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ObjectDetails;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$da26.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"dhlNm":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$7666 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$7666.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return PanelTags;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _api = require("../../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _alertsJs = require("../../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var PanelTags = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(PanelTags, _Component);
    var _super = _helpers.createSuper(PanelTags);
    function PanelTags(props) {
        _helpers.classCallCheck(this, PanelTags);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
            tags: [],
            loading: false
        };
        _this.loadTags = _this.loadTags.bind(_helpers.assertThisInitialized(_this));
        _this.deleteTag = _this.deleteTag.bind(_helpers.assertThisInitialized(_this));
        _this.addTag = _this.addTag.bind(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(PanelTags, [
        {
            key: "addTag",
            value: function addTag() {
                var _this = this;
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    loading: true
                }));
                _alertsJsDefault.default.ShowInputAlert("Add Tag", "text", "Enter new tag name:", "ex. MyTag").then(function(tag_text) {
                    var _this1 = _this;
                    console.log(tag_text);
                    if (tag_text) _apiDefault.default.createTag(_this.props.id, tag_text).then(function(result) {
                        console.log(result.data);
                        _this1.loadTags();
                    });
                    else _alertsJsDefault.default.ToastAlert("info", "No action taken.");
                    _this.setState(_helpers.objectSpread({
                    }, _this.state, {
                        loading: false
                    }));
                });
            }
        },
        {
            key: "loadTags",
            value: function loadTags() {
                var _this = this;
                console.log("[PanelTags] loading tags with", this.props.id);
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    loading: true
                }));
                _apiDefault.default.listTagsForUpload(this.props.id).then(function(result) {
                    console.log("[PanelTags] Loaded tags", result.data);
                    _this.setState(_helpers.objectSpread({
                    }, _this.state, {
                        tags: result.data,
                        loading: false
                    }));
                });
            }
        },
        {
            key: "deleteTag",
            value: function deleteTag(id) {
                var _this = this;
                _apiDefault.default.deleteTag(id).then(function(result) {
                    console.log(result);
                    _this.loadTags();
                });
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                console.log("[PanelTags] mounted");
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (this.props.id !== prevProps.id) this.loadTags();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var _state = this.state, tags = _state.tags, loading = _state.loading;
                var _props = this.props, id = _props.id, type = _props.type, created_at = _props.created_at, updated_at = _props.updated_at, filename = _props.filename, mime_type = _props.mime_type, is_shared = _props.is_shared, text = _props.text;
                if (type === undefined) return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                    children: "No object selected"
                }, void 0, false, {
                    fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                    lineNumber: 75,
                    columnNumber: 14
                }, this));
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    children: [
                        tags.map(function(tag, idx) {
                            /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("span", {
                                className: "custom-badge rounded-5 badge bg-info",
                                id: idx,
                                children: [
                                    tag.text,
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                        className: "badge badge-button bg-info",
                                        onClick: function(e) {
                                            _this.deleteTag(tag.id);
                                        },
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                            className: "fas fa-times text-white"
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                            lineNumber: 92,
                                            columnNumber: 15
                                        }, _this)
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                        lineNumber: 86,
                                        columnNumber: 13
                                    }, _this)
                                ]
                            }, "tag-".concat(idx), true, {
                                fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                lineNumber: 80,
                                columnNumber: 11
                            }, _this);
                        }),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "cursor-pointer custom-badge rounded-5 badge ".concat(loading ? "bg-secondary" : "bg-success"),
                            onClick: function(e) {
                                if (!loading) _this.addTag();
                            },
                            children: [
                                "Add tag",
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                    className: "badge badge-button ".concat(loading ? "bg-secondary" : "bg-success"),
                                    children: loading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                        className: "fas fa-spinner fa-pulse text-black"
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                        lineNumber: 113,
                                        columnNumber: 15
                                    }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                        className: "fas fa-plus text-white"
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                        lineNumber: 115,
                                        columnNumber: 15
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                                    lineNumber: 107,
                                    columnNumber: 11
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                            lineNumber: 96,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/FileExplorer/components/PanelTags.jsx",
                    lineNumber: 78,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return PanelTags;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$7666.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../../api":"fmHLW","../../../helpers/alerts.js":"HdCa2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"HdCa2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _regeneratorRuntime = require("regenerator-runtime");
var _regeneratorRuntimeDefault = parcelHelpers.interopDefault(_regeneratorRuntime);
var _sweetalert2Js = require("sweetalert2/dist/sweetalert2.js");
var _sweetalert2JsDefault = parcelHelpers.interopDefault(_sweetalert2Js);
function SimpleCallback(title, text, icon, callback) {
    _sweetalert2JsDefault.default.fire(title, text, icon).then(function(result) {
        callback();
    });
}
_c = SimpleCallback;
function BulkEmailSummary(success_array, failure_array, callback) {
    var success_html = "";
    var failure_html = "";
    success_array.forEach(function(element) {
        success_html += "<li>".concat(element.email, "</li>");
    });
    failure_array.forEach(function(element) {
        failure_html += "<li>".concat(element.email, " (").concat(element.msg, ")</li>");
    });
    _sweetalert2JsDefault.default.fire({
        title: "Bulk Send Summary",
        icon: "info",
        html: "<b>Successfully sent:</b>, <ul>" + success_html + "</ul>" + "<b>Failures:</b>, " + "<ul>" + failure_html + "</ul>",
        showCloseButton: false,
        showCancelButton: false,
        focusConfirm: false,
        confirmButtonText: "OK"
    }).then(callback);
}
_c1 = BulkEmailSummary;
function ToastAlert(icon, title) {
    var timer = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3000, position = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "top-end";
    var Toast = _sweetalert2JsDefault.default.mixin({
        toast: true,
        position: position,
        showConfirmButton: false,
        timer: timer,
        timerProgressBar: true,
        didOpen: function(toast) {
            toast.addEventListener("mouseenter", _sweetalert2JsDefault.default.stopTimer);
            toast.addEventListener("mouseleave", _sweetalert2JsDefault.default.resumeTimer);
        }
    });
    Toast.fire({
        icon: icon,
        title: title
    });
}
_c2 = ToastAlert;
function ShowInputAlert(title, input, inputLabel, inputPlaceholder) {
    return _ShowInputAlert.apply(this, arguments);
}
function _ShowInputAlert() {
    _ShowInputAlert = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(title, input, inputLabel, inputPlaceholder) {
        var showCancelButton, inputValue, ref, dirname, _args = arguments;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    showCancelButton = _args.length > 4 && _args[4] !== void 0 ? _args[4] : true, inputValue = _args.length > 5 && _args[5] !== void 0 ? _args[5] : "";
                    _ctx.next = 3;
                    return _sweetalert2JsDefault.default.fire({
                        title: title,
                        input: input,
                        inputLabel: inputLabel,
                        showCancelButton: showCancelButton,
                        inputPlaceholder: inputPlaceholder,
                        inputValue: inputValue,
                        inputAttributes: {
                            autocomplete: "off"
                        }
                    });
                case 3:
                    ref = _ctx.sent;
                    dirname = ref.value;
                    return _ctx.abrupt("return", dirname);
                case 6:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _ShowInputAlert.apply(this, arguments);
}
_c3 = ShowInputAlert;
function ShowDeletionSharingConfirmationAlert() {
    return _ShowDeletionSharingConfirmationAlert.apply(this, arguments);
}
function _ShowDeletionSharingConfirmationAlert() {
    _ShowDeletionSharingConfirmationAlert = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
        var swalWithBootstrapButtons, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    swalWithBootstrapButtons = _sweetalert2JsDefault.default.mixin({
                        customClass: {
                            confirmButton: "btn btn-danger rounded-0",
                            cancelButton: "btn btn-secondary rounded-0"
                        },
                        buttonsStyling: false
                    });
                    _ctx.next = 3;
                    return swalWithBootstrapButtons.fire({
                        title: "Are you sure?",
                        html: "Are you sure you want to <b>delete</b> this sharing?<br />You won't be able to revert this!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, delete it!",
                        cancelButtonText: "No, cancel!",
                        reverseButtons: false,
                        focusConfirm: false,
                        focusCancel: true
                    });
                case 3:
                    result = _ctx.sent;
                    return _ctx.abrupt("return", result);
                case 5:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _ShowDeletionSharingConfirmationAlert.apply(this, arguments);
}
_c4 = ShowDeletionSharingConfirmationAlert;
function ShowBulkEmailConfirmationAlert() {
    return _ShowBulkEmailConfirmationAlert.apply(this, arguments);
}
function _ShowBulkEmailConfirmationAlert() {
    _ShowBulkEmailConfirmationAlert = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee() {
        var swalWithBootstrapButtons, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    swalWithBootstrapButtons = _sweetalert2JsDefault.default.mixin({
                        customClass: {
                            confirmButton: "btn btn-primary rounded-0",
                            cancelButton: "btn btn-secondary rounded-0"
                        },
                        buttonsStyling: false
                    });
                    _ctx.next = 3;
                    return swalWithBootstrapButtons.fire({
                        title: "Are you sure?",
                        html: "Are you sure you want to <b>bulk send</b> sharing URL to users?",
                        icon: "info",
                        showCancelButton: true,
                        confirmButtonText: "Yes, send it",
                        cancelButtonText: "No, cancel",
                        reverseButtons: false,
                        focusConfirm: false,
                        focusCancel: true
                    });
                case 3:
                    result = _ctx.sent;
                    return _ctx.abrupt("return", result);
                case 5:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _ShowBulkEmailConfirmationAlert.apply(this, arguments);
}
_c5 = ShowBulkEmailConfirmationAlert;
function ShowDeletionConfirmationAlert(deletion_count) {
    return _ShowDeletionConfirmationAlert.apply(this, arguments);
}
function _ShowDeletionConfirmationAlert() {
    _ShowDeletionConfirmationAlert = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(deletion_count) {
        var swalWithBootstrapButtons, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    swalWithBootstrapButtons = _sweetalert2JsDefault.default.mixin({
                        customClass: {
                            confirmButton: "btn btn-danger rounded-0",
                            cancelButton: "btn btn-secondary rounded-0"
                        },
                        buttonsStyling: false
                    });
                    _ctx.next = 3;
                    return swalWithBootstrapButtons.fire({
                        title: "Are you sure?",
                        html: "Are you sure you want to <b>delete ".concat(deletion_count, " ").concat(deletion_count === 1 ? "object" : "objects", "</b>? <br />You won't be able to revert this!"),
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, delete it!",
                        cancelButtonText: "No, cancel!",
                        reverseButtons: false,
                        focusConfirm: false,
                        focusCancel: true
                    });
                case 3:
                    result = _ctx.sent;
                    return _ctx.abrupt("return", result);
                case 5:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _ShowDeletionConfirmationAlert.apply(this, arguments);
}
_c6 = ShowDeletionConfirmationAlert;
function ShowCustomTextDeletionConfirmationAlert(html, confirmButtonText, cancelButtonText) {
    return _ShowCustomTextDeletionConfirmationAlert.apply(this, arguments);
}
function _ShowCustomTextDeletionConfirmationAlert() {
    _ShowCustomTextDeletionConfirmationAlert = _helpers.asyncToGenerator(_regeneratorRuntimeDefault.default.mark(function _callee(html, confirmButtonText, cancelButtonText) {
        var swalWithBootstrapButtons, result;
        return _regeneratorRuntimeDefault.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    swalWithBootstrapButtons = _sweetalert2JsDefault.default.mixin({
                        customClass: {
                            confirmButton: "btn btn-danger rounded-0",
                            cancelButton: "btn btn-secondary rounded-0"
                        },
                        buttonsStyling: false
                    });
                    _ctx.next = 3;
                    return swalWithBootstrapButtons.fire({
                        title: "Are you sure?",
                        html: html,
                        showCancelButton: true,
                        confirmButtonText: confirmButtonText,
                        cancelButtonText: cancelButtonText,
                        reverseButtons: false,
                        focusConfirm: false,
                        focusCancel: true
                    });
                case 3:
                    result = _ctx.sent;
                    return _ctx.abrupt("return", result);
                case 5:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _ShowCustomTextDeletionConfirmationAlert.apply(this, arguments);
}
_c7 = ShowCustomTextDeletionConfirmationAlert;
var alerts = {
    SimpleCallback: SimpleCallback,
    ToastAlert: ToastAlert,
    ShowInputAlert: ShowInputAlert,
    ShowDeletionConfirmationAlert: ShowDeletionConfirmationAlert,
    ShowCustomTextDeletionConfirmationAlert: ShowCustomTextDeletionConfirmationAlert,
    ShowDeletionSharingConfirmationAlert: ShowDeletionSharingConfirmationAlert,
    ShowBulkEmailConfirmationAlert: ShowBulkEmailConfirmationAlert,
    BulkEmailSummary: BulkEmailSummary
};
exports.default = alerts;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;
$RefreshReg$(_c, "SimpleCallback");
$RefreshReg$(_c1, "BulkEmailSummary");
$RefreshReg$(_c2, "ToastAlert");
$RefreshReg$(_c3, "ShowInputAlert");
$RefreshReg$(_c4, "ShowDeletionSharingConfirmationAlert");
$RefreshReg$(_c5, "ShowBulkEmailConfirmationAlert");
$RefreshReg$(_c6, "ShowDeletionConfirmationAlert");
$RefreshReg$(_c7, "ShowCustomTextDeletionConfirmationAlert");

},{"@swc/helpers":"cawJ1","regenerator-runtime":"4h7QB","sweetalert2/dist/sweetalert2.js":"3Zban","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4h7QB":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {
    };
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({
        }, "");
    } catch (err1) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {
    };
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {
    };
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value1 = result.value;
                if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return PromiseImpl.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return PromiseImpl.resolve(value1).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {
        };
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next1.next = next1;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {
            };
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
typeof module === "object" ? module.exports : {
});
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
    else Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"3Zban":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Sweetalert2 = factory());
})(undefined, function() {
    'use strict';
    var DismissReason = Object.freeze({
        cancel: 'cancel',
        backdrop: 'backdrop',
        close: 'close',
        esc: 'esc',
        timer: 'timer'
    });
    var consolePrefix = 'SweetAlert2:';
    /**
   * Filter the unique values into a new array
   * @param arr
   */ var uniqueArray = function(arr) {
        var result = [];
        for(var i = 0; i < arr.length; i++)if (result.indexOf(arr[i]) === -1) result.push(arr[i]);
        return result;
    };
    /**
   * Capitalize the first letter of a string
   * @param str
   */ var capitalizeFirstLetter = function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    };
    /**
   * Convert NodeList to Array
   * @param nodeList
   */ var toArray = function(nodeList) {
        return Array.prototype.slice.call(nodeList);
    };
    /**
   * Standardise console warnings
   * @param message
   */ var warn = function(message) {
        console.warn("".concat(consolePrefix, " ").concat(typeof message === 'object' ? message.join(' ') : message));
    };
    /**
   * Standardise console errors
   * @param message
   */ var error1 = function(message) {
        console.error("".concat(consolePrefix, " ").concat(message));
    };
    /**
   * Private global state for `warnOnce`
   * @type {Array}
   * @private
   */ var previousWarnOnceMessages = [];
    /**
   * Show a console warning, but only if it hasn't already been shown
   * @param message
   */ var warnOnce = function(message) {
        if (!previousWarnOnceMessages.includes(message)) {
            previousWarnOnceMessages.push(message);
            warn(message);
        }
    };
    /**
   * Show a one-time console warning about deprecated params/methods
   */ var warnAboutDeprecation = function(deprecatedParam, useInstead) {
        warnOnce("\"".concat(deprecatedParam, "\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead, "\" instead."));
    };
    /**
   * If `arg` is a function, call it (with no arguments or context) and return the result.
   * Otherwise, just pass the value through
   * @param arg
   */ var callIfFunction = function(arg) {
        return typeof arg === 'function' ? arg() : arg;
    };
    var hasToPromiseFn = function(arg) {
        return arg && typeof arg.toPromise === 'function';
    };
    var asPromise = function(arg) {
        return hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);
    };
    var isPromise = function(arg) {
        return arg && Promise.resolve(arg) === arg;
    };
    var isJqueryElement = function(elem) {
        return typeof elem === 'object' && elem.jquery;
    };
    var isElement = function(elem) {
        return elem instanceof Element || isJqueryElement(elem);
    };
    var argsToParams = function(args) {
        var params = {
        };
        if (typeof args[0] === 'object' && !isElement(args[0])) Object.assign(params, args[0]);
        else [
            'title',
            'html',
            'icon'
        ].forEach(function(name, index) {
            var arg = args[index];
            if (typeof arg === 'string' || isElement(arg)) params[name] = arg;
            else if (arg !== undefined) error1("Unexpected type of ".concat(name, "! Expected \"string\" or \"Element\", got ").concat(typeof arg === "undefined" ? "undefined" : _helpers.typeOf(arg)));
        });
        return params;
    };
    var swalPrefix = 'swal2-';
    var prefix = function(items) {
        var result = {
        };
        for(var i in items)result[items[i]] = swalPrefix + items[i];
        return result;
    };
    var swalClasses = prefix([
        'container',
        'shown',
        'height-auto',
        'iosfix',
        'popup',
        'modal',
        'no-backdrop',
        'no-transition',
        'toast',
        'toast-shown',
        'show',
        'hide',
        'close',
        'title',
        'html-container',
        'actions',
        'confirm',
        'deny',
        'cancel',
        'default-outline',
        'footer',
        'icon',
        'icon-content',
        'image',
        'input',
        'file',
        'range',
        'select',
        'radio',
        'checkbox',
        'label',
        'textarea',
        'inputerror',
        'input-label',
        'validation-message',
        'progress-steps',
        'active-progress-step',
        'progress-step',
        'progress-step-line',
        'loader',
        'loading',
        'styled',
        'top',
        'top-start',
        'top-end',
        'top-left',
        'top-right',
        'center',
        'center-start',
        'center-end',
        'center-left',
        'center-right',
        'bottom',
        'bottom-start',
        'bottom-end',
        'bottom-left',
        'bottom-right',
        'grow-row',
        'grow-column',
        'grow-fullscreen',
        'rtl',
        'timer-progress-bar',
        'timer-progress-bar-container',
        'scrollbar-measure',
        'icon-success',
        'icon-warning',
        'icon-info',
        'icon-question',
        'icon-error'
    ]);
    var iconTypes = prefix([
        'success',
        'warning',
        'info',
        'question',
        'error'
    ]);
    var getContainer = function() {
        return document.body.querySelector(".".concat(swalClasses.container));
    };
    var elementBySelector = function(selectorString) {
        var container = getContainer();
        return container ? container.querySelector(selectorString) : null;
    };
    var elementByClass = function(className) {
        return elementBySelector(".".concat(className));
    };
    var getPopup = function() {
        return elementByClass(swalClasses.popup);
    };
    var getIcon = function() {
        return elementByClass(swalClasses.icon);
    };
    var getTitle = function() {
        return elementByClass(swalClasses.title);
    };
    var getHtmlContainer = function() {
        return elementByClass(swalClasses['html-container']);
    };
    var getImage = function() {
        return elementByClass(swalClasses.image);
    };
    var getProgressSteps = function() {
        return elementByClass(swalClasses['progress-steps']);
    };
    var getValidationMessage = function() {
        return elementByClass(swalClasses['validation-message']);
    };
    var getConfirmButton = function() {
        return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.confirm));
    };
    var getDenyButton = function() {
        return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.deny));
    };
    var getInputLabel = function() {
        return elementByClass(swalClasses['input-label']);
    };
    var getLoader = function() {
        return elementBySelector(".".concat(swalClasses.loader));
    };
    var getCancelButton = function() {
        return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.cancel));
    };
    var getActions = function() {
        return elementByClass(swalClasses.actions);
    };
    var getFooter = function() {
        return elementByClass(swalClasses.footer);
    };
    var getTimerProgressBar = function() {
        return elementByClass(swalClasses['timer-progress-bar']);
    };
    var getCloseButton = function() {
        return elementByClass(swalClasses.close);
    }; // https://github.com/jkup/focusable/blob/master/index.js
    var focusable = "\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n";
    var getFocusableElements = function() {
        var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')) // sort according to tabindex
        .sort(function(a, b) {
            a = parseInt(a.getAttribute('tabindex'));
            b = parseInt(b.getAttribute('tabindex'));
            if (a > b) return 1;
            else if (a < b) return -1;
            return 0;
        });
        var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function(el) {
            return el.getAttribute('tabindex') !== '-1';
        });
        return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function(el) {
            return isVisible(el);
        });
    };
    var isModal = function() {
        return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);
    };
    var isToast = function() {
        return document.body.classList.contains(swalClasses['toast-shown']);
    };
    var isLoading = function() {
        return getPopup().hasAttribute('data-loading');
    };
    var states = {
        previousBodyPadding: null
    };
    var setInnerHtml = function(elem, html) {
        // #1926
        elem.textContent = '';
        if (html) {
            var parser = new DOMParser();
            var parsed = parser.parseFromString(html, "text/html");
            toArray(parsed.querySelector('head').childNodes).forEach(function(child) {
                elem.appendChild(child);
            });
            toArray(parsed.querySelector('body').childNodes).forEach(function(child) {
                elem.appendChild(child);
            });
        }
    };
    var hasClass = function(elem, className) {
        if (!className) return false;
        var classList = className.split(/\s+/);
        for(var i = 0; i < classList.length; i++){
            if (!elem.classList.contains(classList[i])) return false;
        }
        return true;
    };
    var removeCustomClasses = function(elem, params) {
        toArray(elem.classList).forEach(function(className) {
            if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) elem.classList.remove(className);
        });
    };
    var applyCustomClass = function(elem, params, className) {
        removeCustomClasses(elem, params);
        if (params.customClass && params.customClass[className]) {
            if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) return warn("Invalid type of customClass.".concat(className, "! Expected string or iterable object, got \"").concat(_helpers.typeOf(params.customClass[className]), "\""));
            addClass(elem, params.customClass[className]);
        }
    };
    var getInput = function(popup, inputType) {
        if (!inputType) return null;
        switch(inputType){
            case 'select':
            case 'textarea':
            case 'file':
                return getChildByClass(popup, swalClasses[inputType]);
            case 'checkbox':
                return popup.querySelector(".".concat(swalClasses.checkbox, " input"));
            case 'radio':
                return popup.querySelector(".".concat(swalClasses.radio, " input:checked")) || popup.querySelector(".".concat(swalClasses.radio, " input:first-child"));
            case 'range':
                return popup.querySelector(".".concat(swalClasses.range, " input"));
            default:
                return getChildByClass(popup, swalClasses.input);
        }
    };
    var focusInput = function(input) {
        input.focus(); // place cursor at end of text in text input
        if (input.type !== 'file') {
            // http://stackoverflow.com/a/2345915
            var val = input.value;
            input.value = '';
            input.value = val;
        }
    };
    var toggleClass = function(target, classList, condition) {
        if (!target || !classList) return;
        if (typeof classList === 'string') classList = classList.split(/\s+/).filter(Boolean);
        classList.forEach(function(className) {
            if (target.forEach) target.forEach(function(elem) {
                condition ? elem.classList.add(className) : elem.classList.remove(className);
            });
            else condition ? target.classList.add(className) : target.classList.remove(className);
        });
    };
    var addClass = function(target, classList) {
        toggleClass(target, classList, true);
    };
    var removeClass = function(target, classList) {
        toggleClass(target, classList, false);
    };
    var getChildByClass = function(elem, className) {
        for(var i = 0; i < elem.childNodes.length; i++){
            if (hasClass(elem.childNodes[i], className)) return elem.childNodes[i];
        }
    };
    var applyNumericalStyle = function(elem, property, value) {
        if (value === "".concat(parseInt(value))) value = parseInt(value);
        if (value || parseInt(value) === 0) elem.style[property] = typeof value === 'number' ? "".concat(value, "px") : value;
        else elem.style.removeProperty(property);
    };
    var show = function(elem) {
        var display = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'flex';
        elem.style.display = display;
    };
    var hide = function(elem) {
        elem.style.display = 'none';
    };
    var setStyle = function(parent, selector, property, value) {
        var el = parent.querySelector(selector);
        if (el) el.style[property] = value;
    };
    var toggle = function(elem, condition, display) {
        condition ? show(elem, display) : hide(elem);
    }; // borrowed from jquery $(elem).is(':visible') implementation
    var isVisible = function(elem) {
        return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
    };
    var allButtonsAreHidden = function() {
        return !isVisible(getConfirmButton()) && !isVisible(getDenyButton()) && !isVisible(getCancelButton());
    };
    var isScrollable = function(elem) {
        return !!(elem.scrollHeight > elem.clientHeight);
    }; // borrowed from https://stackoverflow.com/a/46352119
    var hasCssAnimation = function(elem) {
        var style = window.getComputedStyle(elem);
        var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
        var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
        return animDuration > 0 || transDuration > 0;
    };
    var animateTimerProgressBar = function(timer) {
        var reset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var timerProgressBar = getTimerProgressBar();
        if (isVisible(timerProgressBar)) {
            if (reset) {
                timerProgressBar.style.transition = 'none';
                timerProgressBar.style.width = '100%';
            }
            setTimeout(function() {
                timerProgressBar.style.transition = "width ".concat(timer / 1000, "s linear");
                timerProgressBar.style.width = '0%';
            }, 10);
        }
    };
    var stopTimerProgressBar = function() {
        var timerProgressBar = getTimerProgressBar();
        var timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
        timerProgressBar.style.removeProperty('transition');
        timerProgressBar.style.width = '100%';
        var timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
        var timerProgressBarPercent = parseInt(timerProgressBarWidth / timerProgressBarFullWidth * 100);
        timerProgressBar.style.removeProperty('transition');
        timerProgressBar.style.width = "".concat(timerProgressBarPercent, "%");
    };
    // Detect Node env
    var isNodeEnv = function() {
        return typeof window === 'undefined' || typeof document === 'undefined';
    };
    var sweetHTML = "\n <div aria-labelledby=\"".concat(swalClasses.title, "\" aria-describedby=\"").concat(swalClasses['html-container'], "\" class=\"").concat(swalClasses.popup, "\" tabindex=\"-1\">\n   <button type=\"button\" class=\"").concat(swalClasses.close, "\"></button>\n   <ul class=\"").concat(swalClasses['progress-steps'], "\"></ul>\n   <div class=\"").concat(swalClasses.icon, "\"></div>\n   <img class=\"").concat(swalClasses.image, "\" />\n   <h2 class=\"").concat(swalClasses.title, "\" id=\"").concat(swalClasses.title, "\"></h2>\n   <div class=\"").concat(swalClasses['html-container'], "\" id=\"").concat(swalClasses['html-container'], "\"></div>\n   <input class=\"").concat(swalClasses.input, "\" />\n   <input type=\"file\" class=\"").concat(swalClasses.file, "\" />\n   <div class=\"").concat(swalClasses.range, "\">\n     <input type=\"range\" />\n     <output></output>\n   </div>\n   <select class=\"").concat(swalClasses.select, "\"></select>\n   <div class=\"").concat(swalClasses.radio, "\"></div>\n   <label for=\"").concat(swalClasses.checkbox, "\" class=\"").concat(swalClasses.checkbox, "\">\n     <input type=\"checkbox\" />\n     <span class=\"").concat(swalClasses.label, "\"></span>\n   </label>\n   <textarea class=\"").concat(swalClasses.textarea, "\"></textarea>\n   <div class=\"").concat(swalClasses['validation-message'], "\" id=\"").concat(swalClasses['validation-message'], "\"></div>\n   <div class=\"").concat(swalClasses.actions, "\">\n     <div class=\"").concat(swalClasses.loader, "\"></div>\n     <button type=\"button\" class=\"").concat(swalClasses.confirm, "\"></button>\n     <button type=\"button\" class=\"").concat(swalClasses.deny, "\"></button>\n     <button type=\"button\" class=\"").concat(swalClasses.cancel, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.footer, "\"></div>\n   <div class=\"").concat(swalClasses['timer-progress-bar-container'], "\">\n     <div class=\"").concat(swalClasses['timer-progress-bar'], "\"></div>\n   </div>\n </div>\n").replace(/(^|\n)\s*/g, '');
    var resetOldContainer = function() {
        var oldContainer = getContainer();
        if (!oldContainer) return false;
        oldContainer.remove();
        removeClass([
            document.documentElement,
            document.body
        ], [
            swalClasses['no-backdrop'],
            swalClasses['toast-shown'],
            swalClasses['has-column']
        ]);
        return true;
    };
    var resetValidationMessage = function() {
        if (Swal1.isVisible()) Swal1.resetValidationMessage();
    };
    var addInputChangeListeners = function() {
        var popup = getPopup();
        var input = getChildByClass(popup, swalClasses.input);
        var file = getChildByClass(popup, swalClasses.file);
        var range = popup.querySelector(".".concat(swalClasses.range, " input"));
        var rangeOutput = popup.querySelector(".".concat(swalClasses.range, " output"));
        var select = getChildByClass(popup, swalClasses.select);
        var checkbox = popup.querySelector(".".concat(swalClasses.checkbox, " input"));
        var textarea = getChildByClass(popup, swalClasses.textarea);
        input.oninput = resetValidationMessage;
        file.onchange = resetValidationMessage;
        select.onchange = resetValidationMessage;
        checkbox.onchange = resetValidationMessage;
        textarea.oninput = resetValidationMessage;
        range.oninput = function() {
            resetValidationMessage();
            rangeOutput.value = range.value;
        };
        range.onchange = function() {
            resetValidationMessage();
            range.nextSibling.value = range.value;
        };
    };
    var getTarget = function(target) {
        return typeof target === 'string' ? document.querySelector(target) : target;
    };
    var setupAccessibility = function(params) {
        var popup = getPopup();
        popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
        popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');
        if (!params.toast) popup.setAttribute('aria-modal', 'true');
    };
    var setupRTL = function(targetElement) {
        if (window.getComputedStyle(targetElement).direction === 'rtl') addClass(getContainer(), swalClasses.rtl);
    };
    /*
   * Add modal + backdrop to DOM
   */ var init = function(params) {
        // Clean up the old popup container if it exists
        var oldContainerExisted = resetOldContainer();
        /* istanbul ignore if */ if (isNodeEnv()) {
            error1('SweetAlert2 requires document to initialize');
            return;
        }
        var container = document.createElement('div');
        container.className = swalClasses.container;
        if (oldContainerExisted) addClass(container, swalClasses['no-transition']);
        setInnerHtml(container, sweetHTML);
        var targetElement = getTarget(params.target);
        targetElement.appendChild(container);
        setupAccessibility(params);
        setupRTL(targetElement);
        addInputChangeListeners();
    };
    var parseHtmlToContainer = function(param, target) {
        // DOM element
        if (param instanceof HTMLElement) target.appendChild(param); // Object
        else if (typeof param === 'object') handleObject(param, target); // Plain string
        else if (param) setInnerHtml(target, param);
    };
    var handleObject = function(param, target) {
        // JQuery element(s)
        if (param.jquery) handleJqueryElem(target, param); // For other objects use their string representation
        else setInnerHtml(target, param.toString());
    };
    var handleJqueryElem = function(target, elem) {
        target.textContent = '';
        if (0 in elem) for(var i = 0; (i in elem); i++)target.appendChild(elem[i].cloneNode(true));
        else target.appendChild(elem.cloneNode(true));
    };
    var animationEndEvent = function() {
        // Prevent run in Node env
        /* istanbul ignore if */ if (isNodeEnv()) return false;
        var testEl = document.createElement('div');
        var transEndEventNames = {
            WebkitAnimation: 'webkitAnimationEnd',
            OAnimation: 'oAnimationEnd oanimationend',
            animation: 'animationend'
        };
        for(var i in transEndEventNames){
            if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') return transEndEventNames[i];
        }
        return false;
    }();
    // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js
    var measureScrollbar = function() {
        var scrollDiv = document.createElement('div');
        scrollDiv.className = swalClasses['scrollbar-measure'];
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
    };
    var renderActions = function(instance, params) {
        var actions = getActions();
        var loader = getLoader();
        var confirmButton = getConfirmButton();
        var denyButton = getDenyButton();
        var cancelButton = getCancelButton(); // Actions (buttons) wrapper
        if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) hide(actions);
         // Custom class
        applyCustomClass(actions, params, 'actions'); // Render buttons
        renderButton(confirmButton, 'confirm', params);
        renderButton(denyButton, 'deny', params);
        renderButton(cancelButton, 'cancel', params);
        handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
        if (params.reverseButtons) {
            actions.insertBefore(cancelButton, loader);
            actions.insertBefore(denyButton, loader);
            actions.insertBefore(confirmButton, loader);
        } // Loader
        setInnerHtml(loader, params.loaderHtml);
        applyCustomClass(loader, params, 'loader');
    };
    function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
        if (!params.buttonsStyling) return removeClass([
            confirmButton,
            denyButton,
            cancelButton
        ], swalClasses.styled);
        addClass([
            confirmButton,
            denyButton,
            cancelButton
        ], swalClasses.styled); // Buttons background colors
        if (params.confirmButtonColor) {
            confirmButton.style.backgroundColor = params.confirmButtonColor;
            addClass(confirmButton, swalClasses['default-outline']);
        }
        if (params.denyButtonColor) {
            denyButton.style.backgroundColor = params.denyButtonColor;
            addClass(denyButton, swalClasses['default-outline']);
        }
        if (params.cancelButtonColor) {
            cancelButton.style.backgroundColor = params.cancelButtonColor;
            addClass(cancelButton, swalClasses['default-outline']);
        }
    }
    function renderButton(button, buttonType, params) {
        toggle(button, params["show".concat(capitalizeFirstLetter(buttonType), "Button")], 'inline-block');
        setInnerHtml(button, params["".concat(buttonType, "ButtonText")]); // Set caption text
        button.setAttribute('aria-label', params["".concat(buttonType, "ButtonAriaLabel")]); // ARIA label
        // Add buttons custom classes
        button.className = swalClasses[buttonType];
        applyCustomClass(button, params, "".concat(buttonType, "Button"));
        addClass(button, params["".concat(buttonType, "ButtonClass")]);
    }
    function handleBackdropParam(container, backdrop) {
        if (typeof backdrop === 'string') container.style.background = backdrop;
        else if (!backdrop) addClass([
            document.documentElement,
            document.body
        ], swalClasses['no-backdrop']);
    }
    function handlePositionParam(container, position) {
        if (position in swalClasses) addClass(container, swalClasses[position]);
        else {
            warn('The "position" parameter is not valid, defaulting to "center"');
            addClass(container, swalClasses.center);
        }
    }
    function handleGrowParam(container, grow) {
        if (grow && typeof grow === 'string') {
            var growClass = "grow-".concat(grow);
            if (growClass in swalClasses) addClass(container, swalClasses[growClass]);
        }
    }
    var renderContainer = function(instance, params) {
        var container = getContainer();
        if (!container) return;
        handleBackdropParam(container, params.backdrop);
        handlePositionParam(container, params.position);
        handleGrowParam(container, params.grow); // Custom class
        applyCustomClass(container, params, 'container');
    };
    /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */ var privateProps = {
        promise: new WeakMap(),
        innerParams: new WeakMap(),
        domCache: new WeakMap()
    };
    var inputTypes = [
        'input',
        'file',
        'range',
        'select',
        'radio',
        'checkbox',
        'textarea'
    ];
    var renderInput = function(instance, params) {
        var popup = getPopup();
        var innerParams = privateProps.innerParams.get(instance);
        var rerender = !innerParams || params.input !== innerParams.input;
        inputTypes.forEach(function(inputType) {
            var inputClass = swalClasses[inputType];
            var inputContainer = getChildByClass(popup, inputClass); // set attributes
            setAttributes(inputType, params.inputAttributes); // set class
            inputContainer.className = inputClass;
            if (rerender) hide(inputContainer);
        });
        if (params.input) {
            if (rerender) showInput(params);
             // set custom class
            setCustomClass(params);
        }
    };
    var showInput = function(params) {
        if (!renderInputType[params.input]) return error1("Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"".concat(params.input, "\""));
        var inputContainer = getInputContainer(params.input);
        var input = renderInputType[params.input](inputContainer, params);
        show(input); // input autofocus
        setTimeout(function() {
            focusInput(input);
        });
    };
    var removeAttributes = function(input) {
        for(var i = 0; i < input.attributes.length; i++){
            var attrName = input.attributes[i].name;
            if (![
                'type',
                'value',
                'style'
            ].includes(attrName)) input.removeAttribute(attrName);
        }
    };
    var setAttributes = function(inputType, inputAttributes) {
        var input = getInput(getPopup(), inputType);
        if (!input) return;
        removeAttributes(input);
        for(var attr in inputAttributes)input.setAttribute(attr, inputAttributes[attr]);
    };
    var setCustomClass = function(params) {
        var inputContainer = getInputContainer(params.input);
        if (params.customClass) addClass(inputContainer, params.customClass.input);
    };
    var setInputPlaceholder = function(input, params) {
        if (!input.placeholder || params.inputPlaceholder) input.placeholder = params.inputPlaceholder;
    };
    var setInputLabel = function(input, prependTo, params) {
        if (params.inputLabel) {
            input.id = swalClasses.input;
            var label = document.createElement('label');
            var labelClass = swalClasses['input-label'];
            label.setAttribute('for', input.id);
            label.className = labelClass;
            addClass(label, params.customClass.inputLabel);
            label.innerText = params.inputLabel;
            prependTo.insertAdjacentElement('beforebegin', label);
        }
    };
    var getInputContainer = function(inputType) {
        var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
        return getChildByClass(getPopup(), inputClass);
    };
    var renderInputType = {
    };
    renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function(input, params) {
        if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') input.value = params.inputValue;
        else if (!isPromise(params.inputValue)) warn("Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"".concat(_helpers.typeOf(params.inputValue), "\""));
        setInputLabel(input, input, params);
        setInputPlaceholder(input, params);
        input.type = params.input;
        return input;
    };
    renderInputType.file = function(input, params) {
        setInputLabel(input, input, params);
        setInputPlaceholder(input, params);
        return input;
    };
    renderInputType.range = function(range, params) {
        var rangeInput = range.querySelector('input');
        var rangeOutput = range.querySelector('output');
        rangeInput.value = params.inputValue;
        rangeInput.type = params.input;
        rangeOutput.value = params.inputValue;
        setInputLabel(rangeInput, range, params);
        return range;
    };
    renderInputType.select = function(select, params) {
        select.textContent = '';
        if (params.inputPlaceholder) {
            var placeholder = document.createElement('option');
            setInnerHtml(placeholder, params.inputPlaceholder);
            placeholder.value = '';
            placeholder.disabled = true;
            placeholder.selected = true;
            select.appendChild(placeholder);
        }
        setInputLabel(select, select, params);
        return select;
    };
    renderInputType.radio = function(radio) {
        radio.textContent = '';
        return radio;
    };
    renderInputType.checkbox = function(checkboxContainer, params) {
        var checkbox = getInput(getPopup(), 'checkbox');
        checkbox.value = 1;
        checkbox.id = swalClasses.checkbox;
        checkbox.checked = Boolean(params.inputValue);
        var label = checkboxContainer.querySelector('span');
        setInnerHtml(label, params.inputPlaceholder);
        return checkboxContainer;
    };
    renderInputType.textarea = function(textarea, params) {
        textarea.value = params.inputValue;
        setInputPlaceholder(textarea, params);
        setInputLabel(textarea, textarea, params);
        var getMargin = function(el) {
            return parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);
        };
        if ('MutationObserver' in window) {
            // #1699
            var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
            var outputsize = function() {
                var textareaWidth = textarea.offsetWidth + getMargin(textarea);
                if (textareaWidth > initialPopupWidth) getPopup().style.width = "".concat(textareaWidth, "px");
                else getPopup().style.width = null;
            };
            new MutationObserver(outputsize).observe(textarea, {
                attributes: true,
                attributeFilter: [
                    'style'
                ]
            });
        }
        return textarea;
    };
    var renderContent = function(instance, params) {
        var htmlContainer = getHtmlContainer();
        applyCustomClass(htmlContainer, params, 'htmlContainer'); // Content as HTML
        if (params.html) {
            parseHtmlToContainer(params.html, htmlContainer);
            show(htmlContainer, 'block'); // Content as plain text
        } else if (params.text) {
            htmlContainer.textContent = params.text;
            show(htmlContainer, 'block'); // No content
        } else hide(htmlContainer);
        renderInput(instance, params);
    };
    var renderFooter = function(instance, params) {
        var footer = getFooter();
        toggle(footer, params.footer);
        if (params.footer) parseHtmlToContainer(params.footer, footer);
         // Custom class
        applyCustomClass(footer, params, 'footer');
    };
    var renderCloseButton = function(instance, params) {
        var closeButton = getCloseButton();
        setInnerHtml(closeButton, params.closeButtonHtml); // Custom class
        applyCustomClass(closeButton, params, 'closeButton');
        toggle(closeButton, params.showCloseButton);
        closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
    };
    var renderIcon = function(instance, params) {
        var innerParams = privateProps.innerParams.get(instance);
        var icon = getIcon(); // if the given icon already rendered, apply the styling without re-rendering the icon
        if (innerParams && params.icon === innerParams.icon) {
            // Custom or default content
            setContent(icon, params);
            applyStyles(icon, params);
            return;
        }
        if (!params.icon && !params.iconHtml) return hide(icon);
        if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
            error1("Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"".concat(params.icon, "\""));
            return hide(icon);
        }
        show(icon); // Custom or default content
        setContent(icon, params);
        applyStyles(icon, params); // Animate icon
        addClass(icon, params.showClass.icon);
    };
    var applyStyles = function(icon, params) {
        for(var iconType in iconTypes)if (params.icon !== iconType) removeClass(icon, iconTypes[iconType]);
        addClass(icon, iconTypes[params.icon]); // Icon color
        setColor(icon, params); // Success icon background color
        adjustSuccessIconBackgoundColor(); // Custom class
        applyCustomClass(icon, params, 'icon');
    }; // Adjust success icon background color to match the popup background color
    var adjustSuccessIconBackgoundColor = function() {
        var popup = getPopup();
        var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
        var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');
        for(var i = 0; i < successIconParts.length; i++)successIconParts[i].style.backgroundColor = popupBackgroundColor;
    };
    var setContent = function(icon, params) {
        icon.textContent = '';
        if (params.iconHtml) setInnerHtml(icon, iconContent(params.iconHtml));
        else if (params.icon === 'success') setInnerHtml(icon, "\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    ");
        else if (params.icon === 'error') setInnerHtml(icon, "\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    ");
        else {
            var defaultIconHtml = {
                question: '?',
                warning: '!',
                info: 'i'
            };
            setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));
        }
    };
    var setColor = function(icon, params) {
        if (!params.iconColor) return;
        icon.style.color = params.iconColor;
        icon.style.borderColor = params.iconColor;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = [
                '.swal2-success-line-tip',
                '.swal2-success-line-long',
                '.swal2-x-mark-line-left',
                '.swal2-x-mark-line-right'
            ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var sel = _step.value;
                setStyle(icon, sel, 'backgroundColor', params.iconColor);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);
    };
    var iconContent = function(content) {
        return "<div class=\"".concat(swalClasses['icon-content'], "\">").concat(content, "</div>");
    };
    var renderImage = function(instance, params) {
        var image = getImage();
        if (!params.imageUrl) return hide(image);
        show(image, ''); // Src, alt
        image.setAttribute('src', params.imageUrl);
        image.setAttribute('alt', params.imageAlt); // Width, height
        applyNumericalStyle(image, 'width', params.imageWidth);
        applyNumericalStyle(image, 'height', params.imageHeight); // Class
        image.className = swalClasses.image;
        applyCustomClass(image, params, 'image');
    };
    var createStepElement = function(step) {
        var stepEl = document.createElement('li');
        addClass(stepEl, swalClasses['progress-step']);
        setInnerHtml(stepEl, step);
        return stepEl;
    };
    var createLineElement = function(params) {
        var lineEl = document.createElement('li');
        addClass(lineEl, swalClasses['progress-step-line']);
        if (params.progressStepsDistance) lineEl.style.width = params.progressStepsDistance;
        return lineEl;
    };
    var renderProgressSteps = function(instance, params) {
        var progressStepsContainer = getProgressSteps();
        if (!params.progressSteps || params.progressSteps.length === 0) return hide(progressStepsContainer);
        show(progressStepsContainer);
        progressStepsContainer.textContent = '';
        if (params.currentProgressStep >= params.progressSteps.length) warn("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)");
        params.progressSteps.forEach(function(step, index) {
            var stepEl = createStepElement(step);
            progressStepsContainer.appendChild(stepEl);
            if (index === params.currentProgressStep) addClass(stepEl, swalClasses['active-progress-step']);
            if (index !== params.progressSteps.length - 1) {
                var lineEl = createLineElement(params);
                progressStepsContainer.appendChild(lineEl);
            }
        });
    };
    var renderTitle = function(instance, params) {
        var title = getTitle();
        toggle(title, params.title || params.titleText, 'block');
        if (params.title) parseHtmlToContainer(params.title, title);
        if (params.titleText) title.innerText = params.titleText;
         // Custom class
        applyCustomClass(title, params, 'title');
    };
    var renderPopup = function(instance, params) {
        var container = getContainer();
        var popup = getPopup(); // Width
        if (params.toast) {
            // #2170
            applyNumericalStyle(container, 'width', params.width);
            popup.style.width = '100%';
            popup.insertBefore(getLoader(), getIcon());
        } else applyNumericalStyle(popup, 'width', params.width);
         // Padding
        applyNumericalStyle(popup, 'padding', params.padding); // Background
        if (params.background) popup.style.background = params.background;
        hide(getValidationMessage()); // Classes
        addClasses(popup, params);
    };
    var addClasses = function(popup, params) {
        // Default Class + showClass when updating Swal.update({})
        popup.className = "".concat(swalClasses.popup, " ").concat(isVisible(popup) ? params.showClass.popup : '');
        if (params.toast) {
            addClass([
                document.documentElement,
                document.body
            ], swalClasses['toast-shown']);
            addClass(popup, swalClasses.toast);
        } else addClass(popup, swalClasses.modal);
         // Custom class
        applyCustomClass(popup, params, 'popup');
        if (typeof params.customClass === 'string') addClass(popup, params.customClass);
         // Icon class (#1842)
        if (params.icon) addClass(popup, swalClasses["icon-".concat(params.icon)]);
    };
    var render = function(instance, params) {
        renderPopup(instance, params);
        renderContainer(instance, params);
        renderProgressSteps(instance, params);
        renderIcon(instance, params);
        renderImage(instance, params);
        renderTitle(instance, params);
        renderCloseButton(instance, params);
        renderContent(instance, params);
        renderActions(instance, params);
        renderFooter(instance, params);
        if (typeof params.didRender === 'function') params.didRender(getPopup());
    };
    /*
   * Global function to determine if SweetAlert2 popup is shown
   */ var isVisible$1 = function() {
        return isVisible(getPopup());
    };
    /*
   * Global function to click 'Confirm' button
   */ var clickConfirm = function() {
        return getConfirmButton() && getConfirmButton().click();
    };
    /*
   * Global function to click 'Deny' button
   */ var clickDeny = function() {
        return getDenyButton() && getDenyButton().click();
    };
    /*
   * Global function to click 'Cancel' button
   */ var clickCancel = function() {
        return getCancelButton() && getCancelButton().click();
    };
    function fire() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var Swal = this;
        return _helpers.construct(Swal, _helpers.toConsumableArray(args));
    }
    /**
   * Returns an extended version of `Swal` containing `params` as defaults.
   * Useful for reusing Swal configuration.
   *
   * For example:
   *
   * Before:
   * const textPromptOptions = { input: 'text', showCancelButton: true }
   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
   *
   * After:
   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
   * const {value: firstName} = await TextPrompt('What is your first name?')
   * const {value: lastName} = await TextPrompt('What is your last name?')
   *
   * @param mixinParams
   */ function mixin(mixinParams) {
        var MixinSwal = /*#__PURE__*/ function(_super) {
            _helpers.inherits(MixinSwal, _super);
            var _super1 = _helpers.createSuper(MixinSwal);
            function MixinSwal() {
                _helpers.classCallCheck(this, MixinSwal);
                return _super1.apply(this, arguments);
            }
            _helpers.createClass(MixinSwal, [
                {
                    key: "_main",
                    value: function _main(params, priorityMixinParams) {
                        return _helpers.get(_helpers.getPrototypeOf(MixinSwal.prototype), "_main", this).call(this, params, Object.assign({
                        }, mixinParams, priorityMixinParams));
                    }
                }
            ]);
            return MixinSwal;
        }(this);
        return MixinSwal;
    }
    /**
   * Shows loader (spinner), this is useful with AJAX requests.
   * By default the loader be shown instead of the "Confirm" button.
   */ var showLoading = function(buttonToReplace) {
        var popup = getPopup();
        if (!popup) Swal1.fire();
        popup = getPopup();
        var loader = getLoader();
        if (isToast()) hide(getIcon());
        else replaceButton(popup, buttonToReplace);
        show(loader);
        popup.setAttribute('data-loading', true);
        popup.setAttribute('aria-busy', true);
        popup.focus();
    };
    var replaceButton = function(popup, buttonToReplace) {
        var actions = getActions();
        var loader = getLoader();
        if (!buttonToReplace && isVisible(getConfirmButton())) buttonToReplace = getConfirmButton();
        show(actions);
        if (buttonToReplace) {
            hide(buttonToReplace);
            loader.setAttribute('data-button-to-replace', buttonToReplace.className);
        }
        loader.parentNode.insertBefore(loader, buttonToReplace);
        addClass([
            popup,
            actions
        ], swalClasses.loading);
    };
    var RESTORE_FOCUS_TIMEOUT = 100;
    var globalState1 = {
    };
    var focusPreviousActiveElement = function() {
        if (globalState1.previousActiveElement && globalState1.previousActiveElement.focus) {
            globalState1.previousActiveElement.focus();
            globalState1.previousActiveElement = null;
        } else if (document.body) document.body.focus();
    }; // Restore previous active (focused) element
    var restoreActiveElement = function(returnFocus) {
        return new Promise(function(resolve) {
            if (!returnFocus) return resolve();
            var x = window.scrollX;
            var y = window.scrollY;
            globalState1.restoreFocusTimeout = setTimeout(function() {
                focusPreviousActiveElement();
                resolve();
            }, RESTORE_FOCUS_TIMEOUT); // issues/900
            window.scrollTo(x, y);
        });
    };
    /**
   * If `timer` parameter is set, returns number of milliseconds of timer remained.
   * Otherwise, returns undefined.
   */ var getTimerLeft = function() {
        return globalState1.timeout && globalState1.timeout.getTimerLeft();
    };
    /**
   * Stop timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */ var stopTimer = function() {
        if (globalState1.timeout) {
            stopTimerProgressBar();
            return globalState1.timeout.stop();
        }
    };
    /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */ var resumeTimer = function() {
        if (globalState1.timeout) {
            var remaining = globalState1.timeout.start();
            animateTimerProgressBar(remaining);
            return remaining;
        }
    };
    /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */ var toggleTimer = function() {
        var timer = globalState1.timeout;
        return timer && (timer.running ? stopTimer() : resumeTimer());
    };
    /**
   * Increase timer. Returns number of milliseconds of an updated timer.
   * If `timer` parameter isn't set, returns undefined.
   */ var increaseTimer = function(n) {
        if (globalState1.timeout) {
            var remaining = globalState1.timeout.increase(n);
            animateTimerProgressBar(remaining, true);
            return remaining;
        }
    };
    /**
   * Check if timer is running. Returns true if timer is running
   * or false if timer is paused or stopped.
   * If `timer` parameter isn't set, returns undefined
   */ var isTimerRunning = function() {
        return globalState1.timeout && globalState1.timeout.isRunning();
    };
    var bodyClickListenerAdded = false;
    var clickHandlers = {
    };
    function bindClickHandler() {
        var attr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'data-swal-template';
        clickHandlers[attr] = this;
        if (!bodyClickListenerAdded) {
            document.body.addEventListener('click', bodyClickListener);
            bodyClickListenerAdded = true;
        }
    }
    var bodyClickListener = function(event) {
        // TODO: replace with event.composedPath()
        for(var el = event.target; el && el !== document; el = el.parentNode)for(var attr in clickHandlers){
            var template = el.getAttribute(attr);
            if (template) {
                clickHandlers[attr].fire({
                    template: template
                });
                return;
            }
        }
    };
    var defaultParams = {
        title: '',
        titleText: '',
        text: '',
        html: '',
        footer: '',
        icon: undefined,
        iconColor: undefined,
        iconHtml: undefined,
        template: undefined,
        toast: false,
        showClass: {
            popup: 'swal2-show',
            backdrop: 'swal2-backdrop-show',
            icon: 'swal2-icon-show'
        },
        hideClass: {
            popup: 'swal2-hide',
            backdrop: 'swal2-backdrop-hide',
            icon: 'swal2-icon-hide'
        },
        customClass: {
        },
        target: 'body',
        backdrop: true,
        heightAuto: true,
        allowOutsideClick: true,
        allowEscapeKey: true,
        allowEnterKey: true,
        stopKeydownPropagation: true,
        keydownListenerCapture: false,
        showConfirmButton: true,
        showDenyButton: false,
        showCancelButton: false,
        preConfirm: undefined,
        preDeny: undefined,
        confirmButtonText: 'OK',
        confirmButtonAriaLabel: '',
        confirmButtonColor: undefined,
        denyButtonText: 'No',
        denyButtonAriaLabel: '',
        denyButtonColor: undefined,
        cancelButtonText: 'Cancel',
        cancelButtonAriaLabel: '',
        cancelButtonColor: undefined,
        buttonsStyling: true,
        reverseButtons: false,
        focusConfirm: true,
        focusDeny: false,
        focusCancel: false,
        returnFocus: true,
        showCloseButton: false,
        closeButtonHtml: '&times;',
        closeButtonAriaLabel: 'Close this dialog',
        loaderHtml: '',
        showLoaderOnConfirm: false,
        showLoaderOnDeny: false,
        imageUrl: undefined,
        imageWidth: undefined,
        imageHeight: undefined,
        imageAlt: '',
        timer: undefined,
        timerProgressBar: false,
        width: undefined,
        padding: undefined,
        background: undefined,
        input: undefined,
        inputPlaceholder: '',
        inputLabel: '',
        inputValue: '',
        inputOptions: {
        },
        inputAutoTrim: true,
        inputAttributes: {
        },
        inputValidator: undefined,
        returnInputValueOnDeny: false,
        validationMessage: undefined,
        grow: false,
        position: 'center',
        progressSteps: [],
        currentProgressStep: undefined,
        progressStepsDistance: undefined,
        willOpen: undefined,
        didOpen: undefined,
        didRender: undefined,
        willClose: undefined,
        didClose: undefined,
        didDestroy: undefined,
        scrollbarPadding: true
    };
    var updatableParams = [
        'allowEscapeKey',
        'allowOutsideClick',
        'background',
        'buttonsStyling',
        'cancelButtonAriaLabel',
        'cancelButtonColor',
        'cancelButtonText',
        'closeButtonAriaLabel',
        'closeButtonHtml',
        'confirmButtonAriaLabel',
        'confirmButtonColor',
        'confirmButtonText',
        'currentProgressStep',
        'customClass',
        'denyButtonAriaLabel',
        'denyButtonColor',
        'denyButtonText',
        'didClose',
        'didDestroy',
        'footer',
        'hideClass',
        'html',
        'icon',
        'iconColor',
        'iconHtml',
        'imageAlt',
        'imageHeight',
        'imageUrl',
        'imageWidth',
        'progressSteps',
        'returnFocus',
        'reverseButtons',
        'showCancelButton',
        'showCloseButton',
        'showConfirmButton',
        'showDenyButton',
        'text',
        'title',
        'titleText',
        'willClose'
    ];
    var deprecatedParams = {
    };
    var toastIncompatibleParams = [
        'allowOutsideClick',
        'allowEnterKey',
        'backdrop',
        'focusConfirm',
        'focusDeny',
        'focusCancel',
        'returnFocus',
        'heightAuto',
        'keydownListenerCapture'
    ];
    /**
   * Is valid parameter
   * @param {String} paramName
   */ var isValidParameter = function(paramName) {
        return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
    };
    /**
   * Is valid parameter for Swal.update() method
   * @param {String} paramName
   */ var isUpdatableParameter = function(paramName) {
        return updatableParams.indexOf(paramName) !== -1;
    };
    /**
   * Is deprecated parameter
   * @param {String} paramName
   */ var isDeprecatedParameter = function(paramName) {
        return deprecatedParams[paramName];
    };
    var checkIfParamIsValid = function(param) {
        if (!isValidParameter(param)) warn("Unknown parameter \"".concat(param, "\""));
    };
    var checkIfToastParamIsValid = function(param) {
        if (toastIncompatibleParams.includes(param)) warn("The parameter \"".concat(param, "\" is incompatible with toasts"));
    };
    var checkIfParamIsDeprecated = function(param) {
        if (isDeprecatedParameter(param)) warnAboutDeprecation(param, isDeprecatedParameter(param));
    };
    /**
   * Show relevant warnings for given params
   *
   * @param params
   */ var showWarningsForParams = function(params) {
        if (!params.backdrop && params.allowOutsideClick) warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
        for(var param in params){
            checkIfParamIsValid(param);
            if (params.toast) checkIfToastParamIsValid(param);
            checkIfParamIsDeprecated(param);
        }
    };
    var staticMethods = /*#__PURE__*/ Object.freeze({
        isValidParameter: isValidParameter,
        isUpdatableParameter: isUpdatableParameter,
        isDeprecatedParameter: isDeprecatedParameter,
        argsToParams: argsToParams,
        isVisible: isVisible$1,
        clickConfirm: clickConfirm,
        clickDeny: clickDeny,
        clickCancel: clickCancel,
        getContainer: getContainer,
        getPopup: getPopup,
        getTitle: getTitle,
        getHtmlContainer: getHtmlContainer,
        getImage: getImage,
        getIcon: getIcon,
        getInputLabel: getInputLabel,
        getCloseButton: getCloseButton,
        getActions: getActions,
        getConfirmButton: getConfirmButton,
        getDenyButton: getDenyButton,
        getCancelButton: getCancelButton,
        getLoader: getLoader,
        getFooter: getFooter,
        getTimerProgressBar: getTimerProgressBar,
        getFocusableElements: getFocusableElements,
        getValidationMessage: getValidationMessage,
        isLoading: isLoading,
        fire: fire,
        mixin: mixin,
        showLoading: showLoading,
        enableLoading: showLoading,
        getTimerLeft: getTimerLeft,
        stopTimer: stopTimer,
        resumeTimer: resumeTimer,
        toggleTimer: toggleTimer,
        increaseTimer: increaseTimer,
        isTimerRunning: isTimerRunning,
        bindClickHandler: bindClickHandler
    });
    /**
   * Hides loader and shows back the button which was hidden by .showLoading()
   */ function hideLoading() {
        // do nothing if popup is closed
        var innerParams = privateProps.innerParams.get(this);
        if (!innerParams) return;
        var domCache = privateProps.domCache.get(this);
        hide(domCache.loader);
        if (isToast()) {
            if (innerParams.icon) show(getIcon());
        } else showRelatedButton(domCache);
        removeClass([
            domCache.popup,
            domCache.actions
        ], swalClasses.loading);
        domCache.popup.removeAttribute('aria-busy');
        domCache.popup.removeAttribute('data-loading');
        domCache.confirmButton.disabled = false;
        domCache.denyButton.disabled = false;
        domCache.cancelButton.disabled = false;
    }
    var showRelatedButton = function(domCache) {
        var buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));
        if (buttonToReplace.length) show(buttonToReplace[0], 'inline-block');
        else if (allButtonsAreHidden()) hide(domCache.actions);
    };
    function getInput$1(instance) {
        var innerParams = privateProps.innerParams.get(instance || this);
        var domCache = privateProps.domCache.get(instance || this);
        if (!domCache) return null;
        return getInput(domCache.popup, innerParams.input);
    }
    var fixScrollbar = function() {
        // for queues, do not do this more than once
        if (states.previousBodyPadding !== null) return;
         // if the body has overflow
        if (document.body.scrollHeight > window.innerHeight) {
            // add padding so the content doesn't shift after removal of scrollbar
            states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
            document.body.style.paddingRight = "".concat(states.previousBodyPadding + measureScrollbar(), "px");
        }
    };
    var undoScrollbar = function() {
        if (states.previousBodyPadding !== null) {
            document.body.style.paddingRight = "".concat(states.previousBodyPadding, "px");
            states.previousBodyPadding = null;
        }
    };
    /* istanbul ignore file */ var iOSfix = function() {
        var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
        if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
            var offset = document.body.scrollTop;
            document.body.style.top = "".concat(offset * -1, "px");
            addClass(document.body, swalClasses.iosfix);
            lockBodyScroll();
            addBottomPaddingForTallPopups(); // #1948
        }
    };
    var addBottomPaddingForTallPopups = function() {
        var safari = !navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i);
        if (safari) {
            var bottomPanelHeight = 44;
            if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) getContainer().style.paddingBottom = "".concat(bottomPanelHeight, "px");
        }
    };
    var lockBodyScroll = function() {
        // #1246
        var container = getContainer();
        var preventTouchMove;
        container.ontouchstart = function(e) {
            preventTouchMove = shouldPreventTouchMove(e);
        };
        container.ontouchmove = function(e) {
            if (preventTouchMove) {
                e.preventDefault();
                e.stopPropagation();
            }
        };
    };
    var shouldPreventTouchMove = function(event) {
        var target = event.target;
        var container = getContainer();
        if (isStylys(event) || isZoom(event)) return false;
        if (target === container) return true;
        if (!isScrollable(container) && target.tagName !== 'INPUT' && target.tagName !== 'TEXTAREA' && !(isScrollable(getHtmlContainer()) && getHtmlContainer().contains(target))) return true;
        return false;
    };
    var isStylys = function(event) {
        // #1786
        return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';
    };
    var isZoom = function(event) {
        // #1891
        return event.touches && event.touches.length > 1;
    };
    var undoIOSfix = function() {
        if (hasClass(document.body, swalClasses.iosfix)) {
            var offset = parseInt(document.body.style.top, 10);
            removeClass(document.body, swalClasses.iosfix);
            document.body.style.top = '';
            document.body.scrollTop = offset * -1;
        }
    };
    // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
    // elements not within the active modal dialog will not be surfaced if a user opens a screen
    // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.
    var setAriaHidden = function() {
        var bodyChildren = toArray(document.body.children);
        bodyChildren.forEach(function(el) {
            if (el === getContainer() || el.contains(getContainer())) return;
            if (el.hasAttribute('aria-hidden')) el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
            el.setAttribute('aria-hidden', 'true');
        });
    };
    var unsetAriaHidden = function() {
        var bodyChildren = toArray(document.body.children);
        bodyChildren.forEach(function(el) {
            if (el.hasAttribute('data-previous-aria-hidden')) {
                el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
                el.removeAttribute('data-previous-aria-hidden');
            } else el.removeAttribute('aria-hidden');
        });
    };
    /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */ var privateMethods = {
        swalPromiseResolve: new WeakMap()
    };
    /*
   * Instance method to close sweetAlert
   */ function removePopupAndResetState(instance, container, returnFocus, didClose) {
        if (isToast()) triggerDidCloseAndDispose(instance, didClose);
        else {
            restoreActiveElement(returnFocus).then(function() {
                return triggerDidCloseAndDispose(instance, didClose);
            });
            globalState1.keydownTarget.removeEventListener('keydown', globalState1.keydownHandler, {
                capture: globalState1.keydownListenerCapture
            });
            globalState1.keydownHandlerAdded = false;
        }
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // workaround for #2088
        // for some reason removing the container in Safari will scroll the document to bottom
        if (isSafari) {
            container.setAttribute('style', 'display:none !important');
            container.removeAttribute('class');
            container.innerHTML = '';
        } else container.remove();
        if (isModal()) {
            undoScrollbar();
            undoIOSfix();
            unsetAriaHidden();
        }
        removeBodyClasses();
    }
    function removeBodyClasses() {
        removeClass([
            document.documentElement,
            document.body
        ], [
            swalClasses.shown,
            swalClasses['height-auto'],
            swalClasses['no-backdrop'],
            swalClasses['toast-shown']
        ]);
    }
    function close(resolveValue) {
        var popup = getPopup();
        if (!popup) return;
        resolveValue = prepareResolveValue(resolveValue);
        var innerParams = privateProps.innerParams.get(this);
        if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) return;
        var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
        removeClass(popup, innerParams.showClass.popup);
        addClass(popup, innerParams.hideClass.popup);
        var backdrop = getContainer();
        removeClass(backdrop, innerParams.showClass.backdrop);
        addClass(backdrop, innerParams.hideClass.backdrop);
        handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise
        swalPromiseResolve(resolveValue);
    }
    var prepareResolveValue = function(resolveValue) {
        // When user calls Swal.close()
        if (typeof resolveValue === 'undefined') return {
            isConfirmed: false,
            isDenied: false,
            isDismissed: true
        };
        return Object.assign({
            isConfirmed: false,
            isDenied: false,
            isDismissed: false
        }, resolveValue);
    };
    var handlePopupAnimation = function(instance, popup, innerParams) {
        var container = getContainer(); // If animation is supported, animate
        var animationIsSupported = animationEndEvent && hasCssAnimation(popup);
        if (typeof innerParams.willClose === 'function') innerParams.willClose(popup);
        if (animationIsSupported) animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
        else // Otherwise, remove immediately
        removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
    };
    var animatePopup = function(instance, popup, container, returnFocus, didClose) {
        globalState1.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);
        popup.addEventListener(animationEndEvent, function(e) {
            if (e.target === popup) {
                globalState1.swalCloseEventFinishedCallback();
                delete globalState1.swalCloseEventFinishedCallback;
            }
        });
    };
    var triggerDidCloseAndDispose = function(instance, didClose) {
        setTimeout(function() {
            if (typeof didClose === 'function') didClose.bind(instance.params)();
            instance._destroy();
        });
    };
    function setButtonsDisabled(instance, buttons, disabled) {
        var domCache = privateProps.domCache.get(instance);
        buttons.forEach(function(button) {
            domCache[button].disabled = disabled;
        });
    }
    function setInputDisabled(input, disabled) {
        if (!input) return false;
        if (input.type === 'radio') {
            var radiosContainer = input.parentNode.parentNode;
            var radios = radiosContainer.querySelectorAll('input');
            for(var i = 0; i < radios.length; i++)radios[i].disabled = disabled;
        } else input.disabled = disabled;
    }
    function enableButtons() {
        setButtonsDisabled(this, [
            'confirmButton',
            'denyButton',
            'cancelButton'
        ], false);
    }
    function disableButtons() {
        setButtonsDisabled(this, [
            'confirmButton',
            'denyButton',
            'cancelButton'
        ], true);
    }
    function enableInput() {
        return setInputDisabled(this.getInput(), false);
    }
    function disableInput() {
        return setInputDisabled(this.getInput(), true);
    }
    function showValidationMessage(error) {
        var domCache = privateProps.domCache.get(this);
        var params = privateProps.innerParams.get(this);
        setInnerHtml(domCache.validationMessage, error);
        domCache.validationMessage.className = swalClasses['validation-message'];
        if (params.customClass && params.customClass.validationMessage) addClass(domCache.validationMessage, params.customClass.validationMessage);
        show(domCache.validationMessage);
        var input = this.getInput();
        if (input) {
            input.setAttribute('aria-invalid', true);
            input.setAttribute('aria-describedby', swalClasses['validation-message']);
            focusInput(input);
            addClass(input, swalClasses.inputerror);
        }
    } // Hide block with validation message
    function resetValidationMessage$1() {
        var domCache = privateProps.domCache.get(this);
        if (domCache.validationMessage) hide(domCache.validationMessage);
        var input = this.getInput();
        if (input) {
            input.removeAttribute('aria-invalid');
            input.removeAttribute('aria-describedby');
            removeClass(input, swalClasses.inputerror);
        }
    }
    function getProgressSteps$1() {
        var domCache = privateProps.domCache.get(this);
        return domCache.progressSteps;
    }
    var Timer = /*#__PURE__*/ function() {
        function Timer(callback, delay) {
            _helpers.classCallCheck(this, Timer);
            this.callback = callback;
            this.remaining = delay;
            this.running = false;
            this.start();
        }
        _helpers.createClass(Timer, [
            {
                key: "start",
                value: function start() {
                    if (!this.running) {
                        this.running = true;
                        this.started = new Date();
                        this.id = setTimeout(this.callback, this.remaining);
                    }
                    return this.remaining;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    if (this.running) {
                        this.running = false;
                        clearTimeout(this.id);
                        this.remaining -= new Date() - this.started;
                    }
                    return this.remaining;
                }
            },
            {
                key: "increase",
                value: function increase(n) {
                    var running = this.running;
                    if (running) this.stop();
                    this.remaining += n;
                    if (running) this.start();
                    return this.remaining;
                }
            },
            {
                key: "getTimerLeft",
                value: function getTimerLeft() {
                    if (this.running) {
                        this.stop();
                        this.start();
                    }
                    return this.remaining;
                }
            },
            {
                key: "isRunning",
                value: function isRunning() {
                    return this.running;
                }
            }
        ]);
        return Timer;
    }();
    var defaultInputValidators = {
        email: function(string, validationMessage) {
            return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');
        },
        url: function(string, validationMessage) {
            // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013
            return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');
        }
    };
    function setDefaultInputValidators(params) {
        // Use default `inputValidator` for supported input types if not provided
        if (!params.inputValidator) Object.keys(defaultInputValidators).forEach(function(key) {
            if (params.input === key) params.inputValidator = defaultInputValidators[key];
        });
    }
    function validateCustomTargetElement(params) {
        // Determine if the custom target element is valid
        if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
            warn('Target parameter is not valid, defaulting to "body"');
            params.target = 'body';
        }
    }
    /**
   * Set type, text and actions on popup
   *
   * @param params
   * @returns {boolean}
   */ function setParameters(params) {
        setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm
        if (params.showLoaderOnConfirm && !params.preConfirm) warn("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request");
        validateCustomTargetElement(params); // Replace newlines with <br> in title
        if (typeof params.title === 'string') params.title = params.title.split('\n').join('<br />');
        init(params);
    }
    var swalStringParams = [
        'swal-title',
        'swal-html',
        'swal-footer'
    ];
    var getTemplateParams = function(params) {
        var template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;
        if (!template) return {
        };
        var templateContent = template.content;
        showWarningsForElements(templateContent);
        var result = Object.assign(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));
        return result;
    };
    var getSwalParams = function(templateContent) {
        var result = {
        };
        toArray(templateContent.querySelectorAll('swal-param')).forEach(function(param) {
            showWarningsForAttributes(param, [
                'name',
                'value'
            ]);
            var paramName = param.getAttribute('name');
            var value = param.getAttribute('value');
            if (typeof defaultParams[paramName] === 'boolean' && value === 'false') value = false;
            if (typeof defaultParams[paramName] === 'object') value = JSON.parse(value);
            result[paramName] = value;
        });
        return result;
    };
    var getSwalButtons = function(templateContent) {
        var result = {
        };
        toArray(templateContent.querySelectorAll('swal-button')).forEach(function(button) {
            showWarningsForAttributes(button, [
                'type',
                'color',
                'aria-label'
            ]);
            var type = button.getAttribute('type');
            result["".concat(type, "ButtonText")] = button.innerHTML;
            result["show".concat(capitalizeFirstLetter(type), "Button")] = true;
            if (button.hasAttribute('color')) result["".concat(type, "ButtonColor")] = button.getAttribute('color');
            if (button.hasAttribute('aria-label')) result["".concat(type, "ButtonAriaLabel")] = button.getAttribute('aria-label');
        });
        return result;
    };
    var getSwalImage = function(templateContent) {
        var result = {
        };
        var image = templateContent.querySelector('swal-image');
        if (image) {
            showWarningsForAttributes(image, [
                'src',
                'width',
                'height',
                'alt'
            ]);
            if (image.hasAttribute('src')) result.imageUrl = image.getAttribute('src');
            if (image.hasAttribute('width')) result.imageWidth = image.getAttribute('width');
            if (image.hasAttribute('height')) result.imageHeight = image.getAttribute('height');
            if (image.hasAttribute('alt')) result.imageAlt = image.getAttribute('alt');
        }
        return result;
    };
    var getSwalIcon = function(templateContent) {
        var result = {
        };
        var icon = templateContent.querySelector('swal-icon');
        if (icon) {
            showWarningsForAttributes(icon, [
                'type',
                'color'
            ]);
            if (icon.hasAttribute('type')) result.icon = icon.getAttribute('type');
            if (icon.hasAttribute('color')) result.iconColor = icon.getAttribute('color');
            result.iconHtml = icon.innerHTML;
        }
        return result;
    };
    var getSwalInput = function(templateContent) {
        var result = {
        };
        var input = templateContent.querySelector('swal-input');
        if (input) {
            showWarningsForAttributes(input, [
                'type',
                'label',
                'placeholder',
                'value'
            ]);
            result.input = input.getAttribute('type') || 'text';
            if (input.hasAttribute('label')) result.inputLabel = input.getAttribute('label');
            if (input.hasAttribute('placeholder')) result.inputPlaceholder = input.getAttribute('placeholder');
            if (input.hasAttribute('value')) result.inputValue = input.getAttribute('value');
        }
        var inputOptions = templateContent.querySelectorAll('swal-input-option');
        if (inputOptions.length) {
            result.inputOptions = {
            };
            toArray(inputOptions).forEach(function(option) {
                showWarningsForAttributes(option, [
                    'value'
                ]);
                var optionValue = option.getAttribute('value');
                var optionName = option.innerHTML;
                result.inputOptions[optionValue] = optionName;
            });
        }
        return result;
    };
    var getSwalStringParams = function(templateContent, paramNames) {
        var result = {
        };
        for(var i in paramNames){
            var paramName = paramNames[i];
            var tag = templateContent.querySelector(paramName);
            if (tag) {
                showWarningsForAttributes(tag, []);
                result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();
            }
        }
        return result;
    };
    var showWarningsForElements = function(template) {
        var allowedElements = swalStringParams.concat([
            'swal-param',
            'swal-button',
            'swal-image',
            'swal-icon',
            'swal-input',
            'swal-input-option'
        ]);
        toArray(template.children).forEach(function(el) {
            var tagName = el.tagName.toLowerCase();
            if (allowedElements.indexOf(tagName) === -1) warn("Unrecognized element <".concat(tagName, ">"));
        });
    };
    var showWarningsForAttributes = function(el, allowedAttributes) {
        toArray(el.attributes).forEach(function(attribute) {
            if (allowedAttributes.indexOf(attribute.name) === -1) warn([
                "Unrecognized attribute \"".concat(attribute.name, "\" on <").concat(el.tagName.toLowerCase(), ">."),
                "".concat(allowedAttributes.length ? "Allowed attributes are: ".concat(allowedAttributes.join(', ')) : 'To set the value, use HTML within the element.')
            ]);
        });
    };
    var SHOW_CLASS_TIMEOUT = 10;
    /**
   * Open popup, add necessary classes and styles, fix scrollbar
   *
   * @param params
   */ var openPopup = function(params) {
        var container = getContainer();
        var popup = getPopup();
        if (typeof params.willOpen === 'function') params.willOpen(popup);
        var bodyStyles = window.getComputedStyle(document.body);
        var initialBodyOverflow = bodyStyles.overflowY;
        addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'
        setTimeout(function() {
            setScrollingVisibility(container, popup);
        }, SHOW_CLASS_TIMEOUT);
        if (isModal()) {
            fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
            setAriaHidden();
        }
        if (!isToast() && !globalState1.previousActiveElement) globalState1.previousActiveElement = document.activeElement;
        if (typeof params.didOpen === 'function') setTimeout(function() {
            return params.didOpen(popup);
        });
        removeClass(container, swalClasses['no-transition']);
    };
    var swalOpenAnimationFinished = function(event) {
        var popup = getPopup();
        if (event.target !== popup) return;
        var container = getContainer();
        popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
        container.style.overflowY = 'auto';
    };
    var setScrollingVisibility = function(container, popup) {
        if (animationEndEvent && hasCssAnimation(popup)) {
            container.style.overflowY = 'hidden';
            popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
        } else container.style.overflowY = 'auto';
    };
    var fixScrollContainer = function(container, scrollbarPadding, initialBodyOverflow) {
        iOSfix();
        if (scrollbarPadding && initialBodyOverflow !== 'hidden') fixScrollbar();
         // sweetalert2/issues/1247
        setTimeout(function() {
            container.scrollTop = 0;
        });
    };
    var addClasses$1 = function(container, popup, params) {
        addClass(container, params.showClass.backdrop); // the workaround with setting/unsetting opacity is needed for #2019 and 2059
        popup.style.setProperty('opacity', '0', 'important');
        show(popup, 'grid');
        setTimeout(function() {
            // Animate popup right after showing it
            addClass(popup, params.showClass.popup); // and remove the opacity workaround
            popup.style.removeProperty('opacity');
        }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062
        addClass([
            document.documentElement,
            document.body
        ], swalClasses.shown);
        if (params.heightAuto && params.backdrop && !params.toast) addClass([
            document.documentElement,
            document.body
        ], swalClasses['height-auto']);
    };
    var handleInputOptionsAndValue = function(instance, params) {
        if (params.input === 'select' || params.input === 'radio') handleInputOptions(instance, params);
        else if ([
            'text',
            'email',
            'number',
            'tel',
            'textarea'
        ].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {
            showLoading(getConfirmButton());
            handleInputValue(instance, params);
        }
    };
    var getInputValue = function(instance, innerParams) {
        var input = instance.getInput();
        if (!input) return null;
        switch(innerParams.input){
            case 'checkbox':
                return getCheckboxValue(input);
            case 'radio':
                return getRadioValue(input);
            case 'file':
                return getFileValue(input);
            default:
                return innerParams.inputAutoTrim ? input.value.trim() : input.value;
        }
    };
    var getCheckboxValue = function(input) {
        return input.checked ? 1 : 0;
    };
    var getRadioValue = function(input) {
        return input.checked ? input.value : null;
    };
    var getFileValue = function(input) {
        return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;
    };
    var handleInputOptions = function(instance, params) {
        var popup = getPopup();
        var processInputOptions = function(inputOptions) {
            return populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);
        };
        if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {
            showLoading(getConfirmButton());
            asPromise(params.inputOptions).then(function(inputOptions) {
                instance.hideLoading();
                processInputOptions(inputOptions);
            });
        } else if (typeof params.inputOptions === 'object') processInputOptions(params.inputOptions);
        else error1("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(_helpers.typeOf(params.inputOptions)));
    };
    var handleInputValue = function(instance, params) {
        var input = instance.getInput();
        hide(input);
        asPromise(params.inputValue).then(function(inputValue) {
            input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : "".concat(inputValue);
            show(input);
            input.focus();
            instance.hideLoading();
        }).catch(function(err) {
            error1("Error in inputValue promise: ".concat(err));
            input.value = '';
            show(input);
            input.focus();
            instance.hideLoading();
        });
    };
    var populateInputOptions = {
        select: function(popup, inputOptions, params) {
            var select = getChildByClass(popup, swalClasses.select);
            var renderOption = function(parent, optionLabel, optionValue) {
                var option = document.createElement('option');
                option.value = optionValue;
                setInnerHtml(option, optionLabel);
                option.selected = isSelected(optionValue, params.inputValue);
                parent.appendChild(option);
            };
            inputOptions.forEach(function(inputOption) {
                var optionValue = inputOption[0];
                var optionLabel = inputOption[1]; // <optgroup> spec:
                // https://www.w3.org/TR/html401/interact/forms.html#h-17.6
                // "...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)..."
                // check whether this is a <optgroup>
                if (Array.isArray(optionLabel)) {
                    // if it is an array, then it is an <optgroup>
                    var optgroup = document.createElement('optgroup');
                    optgroup.label = optionValue;
                    optgroup.disabled = false; // not configurable for now
                    select.appendChild(optgroup);
                    optionLabel.forEach(function(o) {
                        return renderOption(optgroup, o[1], o[0]);
                    });
                } else // case of <option>
                renderOption(select, optionLabel, optionValue);
            });
            select.focus();
        },
        radio: function(popup, inputOptions, params) {
            var radio = getChildByClass(popup, swalClasses.radio);
            inputOptions.forEach(function(inputOption) {
                var radioValue = inputOption[0];
                var radioLabel = inputOption[1];
                var radioInput = document.createElement('input');
                var radioLabelElement = document.createElement('label');
                radioInput.type = 'radio';
                radioInput.name = swalClasses.radio;
                radioInput.value = radioValue;
                if (isSelected(radioValue, params.inputValue)) radioInput.checked = true;
                var label = document.createElement('span');
                setInnerHtml(label, radioLabel);
                label.className = swalClasses.label;
                radioLabelElement.appendChild(radioInput);
                radioLabelElement.appendChild(label);
                radio.appendChild(radioLabelElement);
            });
            var radios = radio.querySelectorAll('input');
            if (radios.length) radios[0].focus();
        }
    };
    /**
   * Converts `inputOptions` into an array of `[value, label]`s
   * @param inputOptions
   */ var formatInputOptions = function(inputOptions) {
        var result = [];
        if (typeof Map !== 'undefined' && inputOptions instanceof Map) inputOptions.forEach(function(value, key) {
            var valueFormatted = value;
            if (typeof valueFormatted === 'object') // case of <optgroup>
            valueFormatted = formatInputOptions(valueFormatted);
            result.push([
                key,
                valueFormatted
            ]);
        });
        else Object.keys(inputOptions).forEach(function(key) {
            var valueFormatted = inputOptions[key];
            if (typeof valueFormatted === 'object') // case of <optgroup>
            valueFormatted = formatInputOptions(valueFormatted);
            result.push([
                key,
                valueFormatted
            ]);
        });
        return result;
    };
    var isSelected = function(optionValue, inputValue) {
        return inputValue && inputValue.toString() === optionValue.toString();
    };
    var handleConfirmButtonClick = function(instance, innerParams) {
        instance.disableButtons();
        if (innerParams.input) handleConfirmOrDenyWithInput(instance, innerParams, 'confirm');
        else confirm(instance, innerParams, true);
    };
    var handleDenyButtonClick = function(instance, innerParams) {
        instance.disableButtons();
        if (innerParams.returnInputValueOnDeny) handleConfirmOrDenyWithInput(instance, innerParams, 'deny');
        else deny(instance, innerParams, false);
    };
    var handleCancelButtonClick = function(instance, dismissWith) {
        instance.disableButtons();
        dismissWith(DismissReason.cancel);
    };
    var handleConfirmOrDenyWithInput = function(instance, innerParams, type) {
        var inputValue = getInputValue(instance, innerParams);
        if (innerParams.inputValidator) handleInputValidator(instance, innerParams, inputValue, type);
        else if (!instance.getInput().checkValidity()) {
            instance.enableButtons();
            instance.showValidationMessage(innerParams.validationMessage);
        } else if (type === 'deny') deny(instance, innerParams, inputValue);
        else confirm(instance, innerParams, inputValue);
    };
    var handleInputValidator = function(instance, innerParams, inputValue, type) {
        instance.disableInput();
        var validationPromise = Promise.resolve().then(function() {
            return asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage));
        });
        validationPromise.then(function(validationMessage) {
            instance.enableButtons();
            instance.enableInput();
            if (validationMessage) instance.showValidationMessage(validationMessage);
            else if (type === 'deny') deny(instance, innerParams, inputValue);
            else confirm(instance, innerParams, inputValue);
        });
    };
    var deny = function(instance, innerParams, value) {
        if (innerParams.showLoaderOnDeny) showLoading(getDenyButton());
        if (innerParams.preDeny) {
            var preDenyPromise = Promise.resolve().then(function() {
                return asPromise(innerParams.preDeny(value, innerParams.validationMessage));
            });
            preDenyPromise.then(function(preDenyValue) {
                if (preDenyValue === false) instance.hideLoading();
                else instance.closePopup({
                    isDenied: true,
                    value: typeof preDenyValue === 'undefined' ? value : preDenyValue
                });
            });
        } else instance.closePopup({
            isDenied: true,
            value: value
        });
    };
    var succeedWith = function(instance, value) {
        instance.closePopup({
            isConfirmed: true,
            value: value
        });
    };
    var confirm = function(instance, innerParams, value) {
        if (innerParams.showLoaderOnConfirm) showLoading(); // TODO: make showLoading an *instance* method
        if (innerParams.preConfirm) {
            instance.resetValidationMessage();
            var preConfirmPromise = Promise.resolve().then(function() {
                return asPromise(innerParams.preConfirm(value, innerParams.validationMessage));
            });
            preConfirmPromise.then(function(preConfirmValue) {
                if (isVisible(getValidationMessage()) || preConfirmValue === false) instance.hideLoading();
                else succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
            });
        } else succeedWith(instance, value);
    };
    var addKeydownHandler = function(instance, globalState, innerParams, dismissWith) {
        if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
            globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
                capture: globalState.keydownListenerCapture
            });
            globalState.keydownHandlerAdded = false;
        }
        if (!innerParams.toast) {
            globalState.keydownHandler = function(e) {
                return keydownHandler(instance, e, dismissWith);
            };
            globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
            globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
            globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
                capture: globalState.keydownListenerCapture
            });
            globalState.keydownHandlerAdded = true;
        }
    }; // Focus handling
    var setFocus = function(innerParams, index, increment) {
        var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match
        if (focusableElements.length) {
            index = index + increment; // rollover to first item
            if (index === focusableElements.length) index = 0; // go to last item
            else if (index === -1) index = focusableElements.length - 1;
            return focusableElements[index].focus();
        } // no visible focusable elements, focus the popup
        getPopup().focus();
    };
    var arrowKeysNextButton = [
        'ArrowRight',
        'ArrowDown'
    ];
    var arrowKeysPreviousButton = [
        'ArrowLeft',
        'ArrowUp'
    ];
    var keydownHandler = function(instance, e, dismissWith) {
        var innerParams = privateProps.innerParams.get(instance);
        if (!innerParams) return; // This instance has already been destroyed
        if (innerParams.stopKeydownPropagation) e.stopPropagation();
         // ENTER
        if (e.key === 'Enter') handleEnter(instance, e, innerParams); // TAB
        else if (e.key === 'Tab') handleTab(e, innerParams); // ARROWS - switch focus between buttons
        else if (_helpers.toConsumableArray(arrowKeysNextButton).concat(_helpers.toConsumableArray(arrowKeysPreviousButton)).includes(e.key)) handleArrows(e.key); // ESC
        else if (e.key === 'Escape') handleEsc(e, innerParams, dismissWith);
    };
    var handleEnter = function(instance, e, innerParams) {
        // #720 #721
        if (e.isComposing) return;
        if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
            if ([
                'textarea',
                'file'
            ].includes(innerParams.input)) return; // do not submit
            clickConfirm();
            e.preventDefault();
        }
    };
    var handleTab = function(e, innerParams) {
        var targetElement = e.target;
        var focusableElements = getFocusableElements();
        var btnIndex = -1;
        for(var i = 0; i < focusableElements.length; i++)if (targetElement === focusableElements[i]) {
            btnIndex = i;
            break;
        }
        if (!e.shiftKey) // Cycle to the next button
        setFocus(innerParams, btnIndex, 1);
        else // Cycle to the prev button
        setFocus(innerParams, btnIndex, -1);
        e.stopPropagation();
        e.preventDefault();
    };
    var handleArrows = function(key) {
        var confirmButton = getConfirmButton();
        var denyButton = getDenyButton();
        var cancelButton = getCancelButton();
        if (![
            confirmButton,
            denyButton,
            cancelButton
        ].includes(document.activeElement)) return;
        var sibling = arrowKeysNextButton.includes(key) ? 'nextElementSibling' : 'previousElementSibling';
        var buttonToFocus = document.activeElement[sibling];
        if (buttonToFocus) buttonToFocus.focus();
    };
    var handleEsc = function(e, innerParams, dismissWith) {
        if (callIfFunction(innerParams.allowEscapeKey)) {
            e.preventDefault();
            dismissWith(DismissReason.esc);
        }
    };
    var handlePopupClick = function(instance, domCache, dismissWith) {
        var innerParams = privateProps.innerParams.get(instance);
        if (innerParams.toast) handleToastClick(instance, domCache, dismissWith);
        else {
            // Ignore click events that had mousedown on the popup but mouseup on the container
            // This can happen when the user drags a slider
            handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup
            handleContainerMousedown(domCache);
            handleModalClick(instance, domCache, dismissWith);
        }
    };
    var handleToastClick = function(instance, domCache, dismissWith) {
        // Closing toast by internal click
        domCache.popup.onclick = function() {
            var innerParams = privateProps.innerParams.get(instance);
            if (innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.timer || innerParams.input) return;
            dismissWith(DismissReason.close);
        };
    };
    var ignoreOutsideClick = false;
    var handleModalMousedown = function(domCache) {
        domCache.popup.onmousedown = function() {
            domCache.container.onmouseup = function handleModalMousedown(e) {
                domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
                // have any other direct children aside of the popup
                if (e.target === domCache.container) ignoreOutsideClick = true;
            };
        };
    };
    var handleContainerMousedown = function(domCache) {
        domCache.container.onmousedown = function() {
            domCache.popup.onmouseup = function handleContainerMousedown(e) {
                domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup
                if (e.target === domCache.popup || domCache.popup.contains(e.target)) ignoreOutsideClick = true;
            };
        };
    };
    var handleModalClick = function(instance, domCache, dismissWith) {
        domCache.container.onclick = function(e) {
            var innerParams = privateProps.innerParams.get(instance);
            if (ignoreOutsideClick) {
                ignoreOutsideClick = false;
                return;
            }
            if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) dismissWith(DismissReason.backdrop);
        };
    };
    function _main(userParams) {
        var mixinParams = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        };
        showWarningsForParams(Object.assign({
        }, mixinParams, userParams));
        if (globalState1.currentInstance) globalState1.currentInstance._destroy();
        globalState1.currentInstance = this;
        var innerParams = prepareParams(userParams, mixinParams);
        setParameters(innerParams);
        Object.freeze(innerParams); // clear the previous timer
        if (globalState1.timeout) {
            globalState1.timeout.stop();
            delete globalState1.timeout;
        } // clear the restore focus timeout
        clearTimeout(globalState1.restoreFocusTimeout);
        var domCache = populateDomCache(this);
        render(this, innerParams);
        privateProps.innerParams.set(this, innerParams);
        return swalPromise(this, domCache, innerParams);
    }
    var prepareParams = function(userParams, mixinParams) {
        var templateParams = getTemplateParams(userParams);
        var params = Object.assign({
        }, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131
        params.showClass = Object.assign({
        }, defaultParams.showClass, params.showClass);
        params.hideClass = Object.assign({
        }, defaultParams.hideClass, params.hideClass);
        return params;
    };
    var swalPromise = function(instance, domCache, innerParams) {
        return new Promise(function(resolve) {
            // functions to handle all closings/dismissals
            var dismissWith = function(dismiss) {
                instance.closePopup({
                    isDismissed: true,
                    dismiss: dismiss
                });
            };
            privateMethods.swalPromiseResolve.set(instance, resolve);
            domCache.confirmButton.onclick = function() {
                return handleConfirmButtonClick(instance, innerParams);
            };
            domCache.denyButton.onclick = function() {
                return handleDenyButtonClick(instance, innerParams);
            };
            domCache.cancelButton.onclick = function() {
                return handleCancelButtonClick(instance, dismissWith);
            };
            domCache.closeButton.onclick = function() {
                return dismissWith(DismissReason.close);
            };
            handlePopupClick(instance, domCache, dismissWith);
            addKeydownHandler(instance, globalState1, innerParams, dismissWith);
            handleInputOptionsAndValue(instance, innerParams);
            openPopup(innerParams);
            setupTimer(globalState1, innerParams, dismissWith);
            initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)
            setTimeout(function() {
                domCache.container.scrollTop = 0;
            });
        });
    };
    var populateDomCache = function(instance) {
        var domCache = {
            popup: getPopup(),
            container: getContainer(),
            actions: getActions(),
            confirmButton: getConfirmButton(),
            denyButton: getDenyButton(),
            cancelButton: getCancelButton(),
            loader: getLoader(),
            closeButton: getCloseButton(),
            validationMessage: getValidationMessage(),
            progressSteps: getProgressSteps()
        };
        privateProps.domCache.set(instance, domCache);
        return domCache;
    };
    var setupTimer = function(globalState$$1, innerParams, dismissWith) {
        var timerProgressBar = getTimerProgressBar();
        hide(timerProgressBar);
        if (innerParams.timer) {
            globalState$$1.timeout = new Timer(function() {
                dismissWith('timer');
                delete globalState$$1.timeout;
            }, innerParams.timer);
            if (innerParams.timerProgressBar) {
                show(timerProgressBar);
                setTimeout(function() {
                    if (globalState$$1.timeout && globalState$$1.timeout.running) // timer can be already stopped or unset at this point
                    animateTimerProgressBar(innerParams.timer);
                });
            }
        }
    };
    var initFocus = function(domCache, innerParams) {
        if (innerParams.toast) return;
        if (!callIfFunction(innerParams.allowEnterKey)) return blurActiveElement();
        if (!focusButton(domCache, innerParams)) setFocus(innerParams, -1, 1);
    };
    var focusButton = function(domCache, innerParams) {
        if (innerParams.focusDeny && isVisible(domCache.denyButton)) {
            domCache.denyButton.focus();
            return true;
        }
        if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
            domCache.cancelButton.focus();
            return true;
        }
        if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
            domCache.confirmButton.focus();
            return true;
        }
        return false;
    };
    var blurActiveElement = function() {
        if (document.activeElement && typeof document.activeElement.blur === 'function') document.activeElement.blur();
    };
    /**
   * Updates popup parameters.
   */ function update(params) {
        var popup = getPopup();
        var innerParams = privateProps.innerParams.get(this);
        if (!popup || hasClass(popup, innerParams.hideClass.popup)) return warn("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
        var validUpdatableParams = {
        }; // assign valid params from `params` to `defaults`
        Object.keys(params).forEach(function(param) {
            if (Swal1.isUpdatableParameter(param)) validUpdatableParams[param] = params[param];
            else warn("Invalid parameter to update: \"".concat(param, "\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\n\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md"));
        });
        var updatedParams = Object.assign({
        }, innerParams, validUpdatableParams);
        render(this, updatedParams);
        privateProps.innerParams.set(this, updatedParams);
        Object.defineProperties(this, {
            params: {
                value: Object.assign({
                }, this.params, params),
                writable: false,
                enumerable: true
            }
        });
    }
    function _destroy() {
        var domCache = privateProps.domCache.get(this);
        var innerParams = privateProps.innerParams.get(this);
        if (!innerParams) return; // This instance has already been destroyed
         // Check if there is another Swal closing
        if (domCache.popup && globalState1.swalCloseEventFinishedCallback) {
            globalState1.swalCloseEventFinishedCallback();
            delete globalState1.swalCloseEventFinishedCallback;
        } // Check if there is a swal disposal defer timer
        if (globalState1.deferDisposalTimer) {
            clearTimeout(globalState1.deferDisposalTimer);
            delete globalState1.deferDisposalTimer;
        }
        if (typeof innerParams.didDestroy === 'function') innerParams.didDestroy();
        disposeSwal(this);
    }
    var disposeSwal = function(instance) {
        // Unset this.params so GC will dispose it (#1569)
        delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)
        delete globalState1.keydownHandler;
        delete globalState1.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)
        unsetWeakMaps(privateProps);
        unsetWeakMaps(privateMethods);
    };
    var unsetWeakMaps = function(obj) {
        for(var i in obj)obj[i] = new WeakMap();
    };
    var instanceMethods = /*#__PURE__*/ Object.freeze({
        hideLoading: hideLoading,
        disableLoading: hideLoading,
        getInput: getInput$1,
        close: close,
        closePopup: close,
        closeModal: close,
        closeToast: close,
        enableButtons: enableButtons,
        disableButtons: disableButtons,
        enableInput: enableInput,
        disableInput: disableInput,
        showValidationMessage: showValidationMessage,
        resetValidationMessage: resetValidationMessage$1,
        getProgressSteps: getProgressSteps$1,
        _main: _main,
        update: update,
        _destroy: _destroy
    });
    var currentInstance;
    var SweetAlert = /*#__PURE__*/ function() {
        function SweetAlert() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            _helpers.classCallCheck(this, SweetAlert);
            // Prevent run in Node env
            if (typeof window === 'undefined') return;
            currentInstance = this;
            var outerParams = Object.freeze(this.constructor.argsToParams(args));
            Object.defineProperties(this, {
                params: {
                    value: outerParams,
                    writable: false,
                    enumerable: true,
                    configurable: true
                }
            });
            var promise = this._main(this.params);
            privateProps.promise.set(this, promise);
        }
        _helpers.createClass(SweetAlert, [
            {
                key: "then",
                value: function then(onFulfilled) {
                    var promise = privateProps.promise.get(this);
                    return promise.then(onFulfilled);
                }
            },
            {
                key: "finally",
                value: function _finally(onFinally) {
                    var promise = privateProps.promise.get(this);
                    return promise.finally(onFinally);
                }
            }
        ]);
        return SweetAlert;
    } // Assign instance methods from src/instanceMethods/*.js to prototype
    ();
    Object.assign(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor
    Object.assign(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility
    Object.keys(instanceMethods).forEach(function(key) {
        SweetAlert[key] = function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            var _currentInstance;
            if (currentInstance) return (_currentInstance = currentInstance)[key].apply(_currentInstance, _helpers.toConsumableArray(args));
        };
    });
    SweetAlert.DismissReason = DismissReason;
    SweetAlert.version = '11.0.18';
    var Swal1 = SweetAlert;
    Swal1.default = Swal1;
    return Swal1;
});
if (typeof undefined !== 'undefined' && undefined.Sweetalert2) undefined.swal = undefined.sweetAlert = undefined.Swal = undefined.SweetAlert = undefined.Sweetalert2;

},{"@swc/helpers":"cawJ1"}],"jeguw":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$efdc = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$efdc.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return PanelNotes;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _api = require("../../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _alertsJs = require("../../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var PanelNotes = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(PanelNotes, _Component);
    var _super = _helpers.createSuper(PanelNotes);
    function PanelNotes(props) {
        _helpers.classCallCheck(this, PanelNotes);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
            notes: [],
            loading: false
        };
        _this.loadNotes = _this.loadNotes.bind(_helpers.assertThisInitialized(_this));
        _this.deleteNote = _this.deleteNote.bind(_helpers.assertThisInitialized(_this));
        _this.addNote = _this.addNote.bind(_helpers.assertThisInitialized(_this));
        return _this;
    }
    _helpers.createClass(PanelNotes, [
        {
            key: "addNote",
            value: function addNote() {
                var _this = this;
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    loading: true
                }));
                _alertsJsDefault.default.ShowInputAlert("Add Note", "textarea", "Enter new note text:", "ex. This is my note").then(function(note_text) {
                    var _this1 = _this;
                    console.log(note_text);
                    if (note_text) _apiDefault.default.createNote(_this.props.id, note_text).then(function(result) {
                        console.log(result.data);
                        _this1.loadNotes();
                    });
                    else _alertsJsDefault.default.ToastAlert("info", "No action taken.");
                    _this.setState(_helpers.objectSpread({
                    }, _this.state, {
                        loading: false
                    }));
                });
            }
        },
        {
            key: "loadNotes",
            value: function loadNotes() {
                var _this = this;
                console.log("[PanelNotes] loading notes with", this.props.id);
                this.setState(_helpers.objectSpread({
                }, this.state, {
                    loading: true
                }));
                _apiDefault.default.listNotesForUpload(this.props.id).then(function(result) {
                    console.log("[PanelNotes] Loaded notes", result.data);
                    _this.setState(_helpers.objectSpread({
                    }, _this.state, {
                        notes: result.data,
                        loading: false
                    }));
                });
            }
        },
        {
            key: "deleteNote",
            value: function deleteNote(id) {
                var _this = this;
                _alertsJsDefault.default.ShowDeletionConfirmationAlert(1).then(function(result1) {
                    var _this2 = _this;
                    console.log(result1);
                    if (result1.isConfirmed) _apiDefault.default.deleteNote(id).then(function(result) {
                        console.log(result);
                        _this2.loadNotes();
                    });
                    else _alertsJsDefault.default.ToastAlert("info", "No action taken");
                });
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                console.log("[PanelNotes] mounted");
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (this.props.id !== prevProps.id) this.loadNotes();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var _state = this.state, notes = _state.notes, loading = _state.loading;
                var _props = this.props, id = _props.id, type = _props.type, created_at = _props.created_at, updated_at = _props.updated_at, filename = _props.filename, mime_type = _props.mime_type, is_shared = _props.is_shared, text = _props.text;
                if (type === undefined) return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                    children: "No object selected"
                }, void 0, false, {
                    fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                    lineNumber: 87,
                    columnNumber: 14
                }, this));
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "cursor-pointer custom-badge rounded-5 badge ".concat(loading ? "bg-secondary" : "bg-success"),
                            onClick: function(e) {
                                if (!loading) _this.addNote();
                            },
                            children: [
                                "Add note",
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                    className: "badge badge-button ".concat(loading ? "bg-secondary" : "bg-success"),
                                    children: loading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                        className: "fas fa-spinner fa-pulse text-black"
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                        lineNumber: 108,
                                        columnNumber: 15
                                    }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                        className: "fas fa-plus text-white"
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                        lineNumber: 110,
                                        columnNumber: 15
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                    lineNumber: 102,
                                    columnNumber: 11
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                            lineNumber: 91,
                            columnNumber: 9
                        }, this),
                        notes.map(function(note, idx) {
                            /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("div", {
                                className: "p-3 rounded text-dark mt-3",
                                style: {
                                    position: "relative",
                                    backgroundColor: "#fff7d1"
                                },
                                children: [
                                    note.text,
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("br", {
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                        lineNumber: 125,
                                        columnNumber: 13
                                    }, _this),
                                    "~ ",
                                    note.fullname,
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        style: {
                                            position: "absolute",
                                            right: "12px",
                                            top: "4px"
                                        },
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                            className: "far fa-trash-alt text-danger",
                                            style: {
                                                cursor: "pointer"
                                            },
                                            onClick: function(e) {
                                                _this.deleteNote(note.id);
                                            }
                                        }, void 0, false, {
                                            fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                            lineNumber: 133,
                                            columnNumber: 15
                                        }, _this)
                                    }, void 0, false, {
                                        fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                        lineNumber: 126,
                                        columnNumber: 13
                                    }, _this)
                                ]
                            }, "note-".concat(idx), true, {
                                fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                                lineNumber: 116,
                                columnNumber: 11
                            }, _this);
                        })
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/FileExplorer/components/PanelNotes.jsx",
                    lineNumber: 90,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return PanelNotes;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$efdc.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../../api":"fmHLW","../../../helpers/alerts.js":"HdCa2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"gutuu":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$3aba = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$3aba.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return LoadingSpinner;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var LoadingSpinner = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(LoadingSpinner, _Component);
    var _super = _helpers.createSuper(LoadingSpinner);
    function LoadingSpinner(props) {
        _helpers.classCallCheck(this, LoadingSpinner);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(LoadingSpinner, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var loading = this.props.loading;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    children: loading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "fa-2x mt-2",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                className: "fas fa-spinner fa-pulse"
                            }, void 0, false, {
                                fileName: "src_react/shared/spinners/LoadingSpinner/index.jsx",
                                lineNumber: 17,
                                columnNumber: 13
                            }, this),
                            " Loading ..."
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/spinners/LoadingSpinner/index.jsx",
                        lineNumber: 16,
                        columnNumber: 11
                    }, this) : ""
                }, void 0, false, {
                    fileName: "src_react/shared/spinners/LoadingSpinner/index.jsx",
                    lineNumber: 14,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return LoadingSpinner;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$3aba.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"35v19":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$d016 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$d016.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonUploadNew;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var ButtonUploadNew = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonUploadNew, _Component);
    var _super = _helpers.createSuper(ButtonUploadNew);
    function ButtonUploadNew(props) {
        _helpers.classCallCheck(this, ButtonUploadNew);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonUploadNew, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-secondary btn-sm rounded-0",
                    onClick: function(e) {
                        _this.props.callbackSuccess();
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-cloud-upload-alt"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonUploadNew/index.jsx",
                            lineNumber: 19,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: "Upload new"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonUploadNew/index.jsx",
                            lineNumber: 20,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonUploadNew/index.jsx",
                    lineNumber: 13,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonUploadNew;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$d016.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"dNFPJ":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$d718 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$d718.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonAddFolder;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _indexJs = require("../../../api/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _alertsJs = require("../../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var ButtonAddFolder = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonAddFolder, _Component);
    var _super = _helpers.createSuper(ButtonAddFolder);
    function ButtonAddFolder(props) {
        _helpers.classCallCheck(this, ButtonAddFolder);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonAddFolder, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var _this2 = this;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-secondary btn-sm rounded-0",
                    onClick: function(e) {
                        var _this1 = _this2;
                        // var dirname = prompt("Enter new folder name:", "New Folder");
                        _alertsJsDefault.default.ShowInputAlert("Add Folder", "text", "Enter new folder name:", "ex. NewFolder").then(function(dirname) {
                            var _this = _this1;
                            console.log(dirname);
                            if (dirname) _indexJsDefault.default.createFolder(dirname).then(function(result) {
                                console.log(result);
                                _this.props.callbackSuccess();
                                _alertsJsDefault.default.ToastAlert("success", "Folder created successfully");
                            }, function(reason) {
                                console.log(reason);
                            });
                            else _alertsJsDefault.default.ToastAlert("info", "No action taken. Directory name wasn't provided");
                        });
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-folder-plus"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonAddFolder/index.jsx",
                            lineNumber: 50,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: "Add folder"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonAddFolder/index.jsx",
                            lineNumber: 51,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonAddFolder/index.jsx",
                    lineNumber: 16,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonAddFolder;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$d718.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../../api/index.js":"fmHLW","../../../helpers/alerts.js":"HdCa2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"aCC2j":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$6faf = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$6faf.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonRefresh;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var ButtonRefresh = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonRefresh, _Component);
    var _super = _helpers.createSuper(ButtonRefresh);
    function ButtonRefresh(props) {
        _helpers.classCallCheck(this, ButtonRefresh);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonRefresh, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-secondary btn-sm rounded-0",
                    onClick: function(e) {
                        _this.props.callbackSuccess();
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-sync-alt"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonRefresh/index.jsx",
                            lineNumber: 19,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: "Refresh"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonRefresh/index.jsx",
                            lineNumber: 20,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonRefresh/index.jsx",
                    lineNumber: 13,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonRefresh;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$6faf.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"jTIdY":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$8067 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$8067.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonUnfoldAll;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _jquery = require("jquery");
var _jqueryDefault = parcelHelpers.interopDefault(_jquery);
var _jstree = require("jstree");
var _jstreeDefault = parcelHelpers.interopDefault(_jstree);
var ButtonUnfoldAll = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonUnfoldAll, _Component);
    var _super = _helpers.createSuper(ButtonUnfoldAll);
    function ButtonUnfoldAll(props) {
        _helpers.classCallCheck(this, ButtonUnfoldAll);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonUnfoldAll, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-secondary btn-sm rounded-0",
                    onClick: function(e) {
                        _jqueryDefault.default("#jstree_root").jstree("open_all");
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-chevron-down"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonUnfoldAll/index.jsx",
                            lineNumber: 22,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: "Unfold All"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonUnfoldAll/index.jsx",
                            lineNumber: 23,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonUnfoldAll/index.jsx",
                    lineNumber: 16,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonUnfoldAll;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$8067.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","jquery":"gmnaE","jstree":"2xYlB","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"2xYlB":[function(require,module,exports) {
(function(factory) {
    if (typeof define === 'function' && define.amd) define([
        'jquery'
    ], factory);
    else if (typeof module !== 'undefined' && module.exports) module.exports = factory(require('jquery'));
    else factory(jQuery);
})(function($1, undefined1) {
    "use strict";
    /*!
 * jsTree 3.3.11
 * http://jstree.com/
 *
 * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)
 *
 * Licensed same as jquery - under the terms of the MIT License
 *   http://www.opensource.org/licenses/mit-license.php
 */ /*!
 * if using jslint please allow for the jQuery global and use following options:
 * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true
 */ /*jshint -W083 */ // prevent another load? maybe there is a better way?
    if ($1.jstree) return;
    /**
	 * ### jsTree core functionality
	 */ // internal variables
    var instance_counter = 0, ccp_node = false, ccp_mode = false, ccp_inst = false, themes_loaded = [], src = $1('script:last').attr('src'), document = window.document; // local variable is always faster to access then a global
    var setImmediate = window.setImmediate;
    var Promise = window.Promise;
    if (!setImmediate && Promise) // Good enough approximation of setImmediate
    setImmediate = function setImmediate(cb, arg) {
        Promise.resolve(arg).then(cb);
    };
    /**
	 * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.
	 * @name $.jstree
	 */ $1.jstree = {
        /**
		 * specifies the jstree version in use
		 * @name $.jstree.version
		 */ version: '3.3.11',
        /**
		 * holds all the default options used when creating new instances
		 * @name $.jstree.defaults
		 */ defaults: {
            /**
			 * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`
			 * @name $.jstree.defaults.plugins
			 */ plugins: []
        },
        /**
		 * stores all loaded jstree plugins (used internally)
		 * @name $.jstree.plugins
		 */ plugins: {
        },
        path: src && src.indexOf('/') !== -1 ? src.replace(/\/[^\/]+$/, '') : '',
        idregex: /[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,
        root: '#'
    };
    /**
	 * creates a jstree instance
	 * @name $.jstree.create(el [, options])
	 * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector
	 * @param {Object} options options for this instance (extends `$.jstree.defaults`)
	 * @return {jsTree} the new instance
	 */ $1.jstree.create = function(el, options) {
        var tmp = new $1.jstree.core(++instance_counter), opt = options;
        options = $1.extend(true, {
        }, $1.jstree.defaults, options);
        if (opt && opt.plugins) options.plugins = opt.plugins;
        $1.each(options.plugins, function(i, k) {
            if (i !== 'core') tmp = tmp.plugin(k, options[k]);
        });
        $1(el).data('jstree', tmp);
        tmp.init(el, options);
        return tmp;
    };
    /**
	 * remove all traces of jstree from the DOM and destroy all instances
	 * @name $.jstree.destroy()
	 */ $1.jstree.destroy = function() {
        $1('.jstree:jstree').jstree('destroy');
        $1(document).off('.jstree');
    };
    /**
	 * the jstree class constructor, used only internally
	 * @private
	 * @name $.jstree.core(id)
	 * @param {Number} id this instance's index
	 */ $1.jstree.core = function(id) {
        this._id = id;
        this._cnt = 0;
        this._wrk = null;
        this._data = {
            core: {
                themes: {
                    name: false,
                    dots: false,
                    icons: false,
                    ellipsis: false
                },
                selected: [],
                last_error: {
                },
                working: false,
                worker_queue: [],
                focused: null
            }
        };
    };
    /**
	 * get a reference to an existing instance
	 *
	 * __Examples__
	 *
	 *	// provided a container with an ID of "tree", and a nested node with an ID of "branch"
	 *	// all of there will return the same instance
	 *	$.jstree.reference('tree');
	 *	$.jstree.reference('#tree');
	 *	$.jstree.reference($('#tree'));
	 *	$.jstree.reference(document.getElementByID('tree'));
	 *	$.jstree.reference('branch');
	 *	$.jstree.reference('#branch');
	 *	$.jstree.reference($('#branch'));
	 *	$.jstree.reference(document.getElementByID('branch'));
	 *
	 * @name $.jstree.reference(needle)
	 * @param {DOMElement|jQuery|String} needle
	 * @return {jsTree|null} the instance or `null` if not found
	 */ $1.jstree.reference = function(needle) {
        var tmp = null, obj = null;
        if (needle && needle.id && (!needle.tagName || !needle.nodeType)) needle = needle.id;
        if (!obj || !obj.length) try {
            obj = $1(needle);
        } catch (ignore) {
        }
        if (!obj || !obj.length) try {
            obj = $1('#' + needle.replace($1.jstree.idregex, '\\$&'));
        } catch (ignore1) {
        }
        if (obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) tmp = obj;
        else $1('.jstree').each(function() {
            var inst = $1(this).data('jstree');
            if (inst && inst._model.data[needle]) {
                tmp = inst;
                return false;
            }
        });
        return tmp;
    };
    /**
	 * Create an instance, get an instance or invoke a command on a instance.
	 *
	 * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).
	 *
	 * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).
	 *
	 * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).
	 *
	 * In any other case - nothing is returned and chaining is not broken.
	 *
	 * __Examples__
	 *
	 *	$('#tree1').jstree(); // creates an instance
	 *	$('#tree2').jstree({ plugins : [] }); // create an instance with some options
	 *	$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments
	 *	$('#tree2').jstree(); // get an existing instance (or create an instance)
	 *	$('#tree2').jstree(true); // get an existing instance (will not create new instance)
	 *	$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)
	 *
	 * @name $().jstree([arg])
	 * @param {String|Object} arg
	 * @return {Mixed}
	 */ $1.fn.jstree = function(arg) {
        // check for string argument
        var is_method = typeof arg === 'string', args = Array.prototype.slice.call(arguments, 1), result = null;
        if (arg === true && !this.length) return false;
        this.each(function() {
            // get the instance (if there is one) and method (if it exists)
            var instance = $1.jstree.reference(this), method = is_method && instance ? instance[arg] : null;
            // if calling a method, and method is available - execute on the instance
            result = is_method && method ? method.apply(instance, args) : null;
            // if there is no instance and no method is being called - create one
            if (!instance && !is_method && (arg === undefined1 || $1.isPlainObject(arg))) $1.jstree.create(this, arg);
            // if there is an instance and no method is called - return the instance
            if (instance && !is_method || arg === true) result = instance || false;
            // if there was a method call which returned a result - break and return the value
            if (result !== null && result !== undefined1) return false;
        });
        // if there was a method call with a valid return value - return that, otherwise continue the chain
        return result !== null && result !== undefined1 ? result : this;
    };
    /**
	 * used to find elements containing an instance
	 *
	 * __Examples__
	 *
	 *	$('div:jstree').each(function () {
	 *		$(this).jstree('destroy');
	 *	});
	 *
	 * @name $(':jstree')
	 * @return {jQuery}
	 */ $1.expr.pseudos.jstree = $1.expr.createPseudo(function(search) {
        return function(a) {
            return $1(a).hasClass('jstree') && $1(a).data('jstree') !== undefined1;
        };
    });
    /**
	 * stores all defaults for the core
	 * @name $.jstree.defaults.core
	 */ $1.jstree.defaults.core = {
        /**
		 * data configuration
		 *
		 * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).
		 *
		 * You can also pass in a HTML string or a JSON array here.
		 *
		 * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.
		 * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.
		 *
		 * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.
		 *
		 * __Examples__
		 *
		 *	// AJAX
		 *	$('#tree').jstree({
		 *		'core' : {
		 *			'data' : {
		 *				'url' : '/get/children/',
		 *				'data' : function (node) {
		 *					return { 'id' : node.id };
		 *				}
		 *			}
		 *		});
		 *
		 *	// direct data
		 *	$('#tree').jstree({
		 *		'core' : {
		 *			'data' : [
		 *				'Simple root node',
		 *				{
		 *					'id' : 'node_2',
		 *					'text' : 'Root node with options',
		 *					'state' : { 'opened' : true, 'selected' : true },
		 *					'children' : [ { 'text' : 'Child 1' }, 'Child 2']
		 *				}
		 *			]
		 *		}
		 *	});
		 *
		 *	// function
		 *	$('#tree').jstree({
		 *		'core' : {
		 *			'data' : function (obj, callback) {
		 *				callback.call(this, ['Root 1', 'Root 2']);
		 *			}
		 *		});
		 *
		 * @name $.jstree.defaults.core.data
		 */ data: false,
        /**
		 * configure the various strings used throughout the tree
		 *
		 * You can use an object where the key is the string you need to replace and the value is your replacement.
		 * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.
		 * If left as `false` no replacement is made.
		 *
		 * __Examples__
		 *
		 *	$('#tree').jstree({
		 *		'core' : {
		 *			'strings' : {
		 *				'Loading ...' : 'Please wait ...'
		 *			}
		 *		}
		 *	});
		 *
		 * @name $.jstree.defaults.core.strings
		 */ strings: false,
        /**
		 * determines what happens when a user tries to modify the structure of the tree
		 * If left as `false` all operations like create, rename, delete, move or copy are prevented.
		 * You can set this to `true` to allow all interactions or use a function to have better control.
		 *
		 * __Examples__
		 *
		 *	$('#tree').jstree({
		 *		'core' : {
		 *			'check_callback' : function (operation, node, node_parent, node_position, more) {
		 *				// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node' or 'edit'
		 *				// in case of 'rename_node' node_position is filled with the new node name
		 *				return operation === 'rename_node' ? true : false;
		 *			}
		 *		}
		 *	});
		 *
		 * @name $.jstree.defaults.core.check_callback
		 */ check_callback: false,
        /**
		 * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)
		 * @name $.jstree.defaults.core.error
		 */ error: $1.noop,
        /**
		 * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)
		 * @name $.jstree.defaults.core.animation
		 */ animation: 200,
        /**
		 * a boolean indicating if multiple nodes can be selected
		 * @name $.jstree.defaults.core.multiple
		 */ multiple: true,
        /**
		 * theme configuration object
		 * @name $.jstree.defaults.core.themes
		 */ themes: {
            /**
			 * the name of the theme to use (if left as `false` the default theme is used)
			 * @name $.jstree.defaults.core.themes.name
			 */ name: false,
            /**
			 * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.
			 * @name $.jstree.defaults.core.themes.url
			 */ url: false,
            /**
			 * the location of all jstree themes - only used if `url` is set to `true`
			 * @name $.jstree.defaults.core.themes.dir
			 */ dir: false,
            /**
			 * a boolean indicating if connecting dots are shown
			 * @name $.jstree.defaults.core.themes.dots
			 */ dots: true,
            /**
			 * a boolean indicating if node icons are shown
			 * @name $.jstree.defaults.core.themes.icons
			 */ icons: true,
            /**
			 * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container
			 * @name $.jstree.defaults.core.themes.ellipsis
			 */ ellipsis: false,
            /**
			 * a boolean indicating if the tree background is striped
			 * @name $.jstree.defaults.core.themes.stripes
			 */ stripes: false,
            /**
			 * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)
			 * @name $.jstree.defaults.core.themes.variant
			 */ variant: false,
            /**
			 * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.
			 * @name $.jstree.defaults.core.themes.responsive
			 */ responsive: false
        },
        /**
		 * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)
		 * @name $.jstree.defaults.core.expand_selected_onload
		 */ expand_selected_onload: true,
        /**
		 * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`
		 * @name $.jstree.defaults.core.worker
		 */ worker: true,
        /**
		 * Force node text to plain text (and escape HTML). Defaults to `false`
		 * @name $.jstree.defaults.core.force_text
		 */ force_text: false,
        /**
		 * Should the node be toggled if the text is double clicked. Defaults to `true`
		 * @name $.jstree.defaults.core.dblclick_toggle
		 */ dblclick_toggle: true,
        /**
		 * Should the loaded nodes be part of the state. Defaults to `false`
		 * @name $.jstree.defaults.core.loaded_state
		 */ loaded_state: false,
        /**
		 * Should the last active node be focused when the tree container is blurred and the focused again. This helps working with screen readers. Defaults to `true`
		 * @name $.jstree.defaults.core.restore_focus
		 */ restore_focus: true,
        /**
		 * Force to compute and set "aria-setsize" and "aria-posinset" explicitly for each treeitem. 
		 * Some browsers may compute incorrect elements position and produce wrong announcements for screen readers. Defaults to `false`
		 * @name $.jstree.defaults.core.compute_elements_positions
		 */ compute_elements_positions: false,
        /**
		 * Default keyboard shortcuts (an object where each key is the button name or combo - like 'enter', 'ctrl-space', 'p', etc and the value is the function to execute in the instance's scope)
		 * @name $.jstree.defaults.core.keyboard
		 */ keyboard: {
            'ctrl-space': function(e) {
                // aria defines space only with Ctrl
                e.type = "click";
                $1(e.currentTarget).trigger(e);
            },
            'enter': function(e) {
                // enter
                e.type = "click";
                $1(e.currentTarget).trigger(e);
            },
            'left': function(e) {
                // left
                e.preventDefault();
                if (this.is_open(e.currentTarget)) this.close_node(e.currentTarget);
                else {
                    var o = this.get_parent(e.currentTarget);
                    if (o && o.id !== $1.jstree.root) this.get_node(o, true).children('.jstree-anchor').focus();
                }
            },
            'up': function(e) {
                // up
                e.preventDefault();
                var o = this.get_prev_dom(e.currentTarget);
                if (o && o.length) o.children('.jstree-anchor').focus();
            },
            'right': function(e) {
                // right
                e.preventDefault();
                if (this.is_closed(e.currentTarget)) this.open_node(e.currentTarget, function(o) {
                    this.get_node(o, true).children('.jstree-anchor').focus();
                });
                else if (this.is_open(e.currentTarget)) {
                    var o1 = this.get_node(e.currentTarget, true).children('.jstree-children')[0];
                    if (o1) $1(this._firstChild(o1)).children('.jstree-anchor').focus();
                }
            },
            'down': function(e) {
                // down
                e.preventDefault();
                var o = this.get_next_dom(e.currentTarget);
                if (o && o.length) o.children('.jstree-anchor').focus();
            },
            '*': function(e) {
                // aria defines * on numpad as open_all - not very common
                this.open_all();
            },
            'home': function(e) {
                // home
                e.preventDefault();
                var o = this._firstChild(this.get_container_ul()[0]);
                if (o) $1(o).children('.jstree-anchor').filter(':visible').focus();
            },
            'end': function(e) {
                // end
                e.preventDefault();
                this.element.find('.jstree-anchor').filter(':visible').last().focus();
            },
            'f2': function(e) {
                // f2 - safe to include - if check_callback is false it will fail
                e.preventDefault();
                this.edit(e.currentTarget);
            }
        }
    };
    $1.jstree.core.prototype = {
        /**
		 * used to decorate an instance with a plugin. Used internally.
		 * @private
		 * @name plugin(deco [, opts])
		 * @param  {String} deco the plugin to decorate with
		 * @param  {Object} opts options for the plugin
		 * @return {jsTree}
		 */ plugin: function plugin(deco, opts) {
            var Child = $1.jstree.plugins[deco];
            if (Child) {
                this._data[deco] = {
                };
                Child.prototype = this;
                return new Child(opts, this);
            }
            return this;
        },
        /**
		 * initialize the instance. Used internally.
		 * @private
		 * @name init(el, optons)
		 * @param {DOMElement|jQuery|String} el the element we are transforming
		 * @param {Object} options options for this instance
		 * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree
		 */ init: function init(el, options) {
            this._model = {
                data: {
                },
                changed: [],
                force_full_redraw: false,
                redraw_timeout: false,
                default_state: {
                    loaded: true,
                    opened: false,
                    selected: false,
                    disabled: false
                }
            };
            this._model.data[$1.jstree.root] = {
                id: $1.jstree.root,
                parent: null,
                parents: [],
                children: [],
                children_d: [],
                state: {
                    loaded: false
                }
            };
            this.element = $1(el).addClass('jstree jstree-' + this._id);
            this.settings = options;
            this._data.core.ready = false;
            this._data.core.loaded = false;
            this._data.core.rtl = this.element.css("direction") === "rtl";
            this.element[this._data.core.rtl ? 'addClass' : 'removeClass']("jstree-rtl");
            this.element.attr('role', 'tree');
            if (this.settings.core.multiple) this.element.attr('aria-multiselectable', true);
            if (!this.element.attr('tabindex')) this.element.attr('tabindex', '0');
            this.bind();
            /**
			 * triggered after all events are bound
			 * @event
			 * @name init.jstree
			 */ this.trigger("init");
            this._data.core.original_container_html = this.element.find(" > ul > li").clone(true);
            this._data.core.original_container_html.find("li").addBack().contents().filter(function() {
                return this.nodeType === 3 && (!this.nodeValue || /^\s+$/.test(this.nodeValue));
            }).remove();
            this.element.html("<ul class='jstree-container-ul jstree-children' role='group'><li id='j" + this._id + "_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none'><i class='jstree-icon jstree-ocl'></i><" + "a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
            this.element.attr('aria-activedescendant', 'j' + this._id + '_loading');
            this._data.core.li_height = this.get_container_ul().children("li").first().outerHeight() || 24;
            this._data.core.node = this._create_prototype_node();
            /**
			 * triggered after the loading text is shown and before loading starts
			 * @event
			 * @name loading.jstree
			 */ this.trigger("loading");
            this.load_node($1.jstree.root);
        },
        /**
		 * destroy an instance
		 * @name destroy()
		 * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact
		 */ destroy: function destroy(keep_html) {
            /**
			 * triggered before the tree is destroyed
			 * @event
			 * @name destroy.jstree
			 */ this.trigger("destroy");
            if (this._wrk) try {
                window.URL.revokeObjectURL(this._wrk);
                this._wrk = null;
            } catch (ignore) {
            }
            if (!keep_html) this.element.empty();
            this.teardown();
        },
        /**
		 * Create a prototype node
		 * @name _create_prototype_node()
		 * @return {DOMElement}
		 */ _create_prototype_node: function _create_prototype_node() {
            var _node = document.createElement('LI'), _temp1, _temp2;
            _node.setAttribute('role', 'none');
            _temp1 = document.createElement('I');
            _temp1.className = 'jstree-icon jstree-ocl';
            _temp1.setAttribute('role', 'presentation');
            _node.appendChild(_temp1);
            _temp1 = document.createElement('A');
            _temp1.className = 'jstree-anchor';
            _temp1.setAttribute('href', '#');
            _temp1.setAttribute('tabindex', '-1');
            _temp1.setAttribute('role', 'treeitem');
            _temp2 = document.createElement('I');
            _temp2.className = 'jstree-icon jstree-themeicon';
            _temp2.setAttribute('role', 'presentation');
            _temp1.appendChild(_temp2);
            _node.appendChild(_temp1);
            _temp1 = _temp2 = null;
            return _node;
        },
        _kbevent_to_func: function _kbevent_to_func(e) {
            var keys = {
                8: "Backspace",
                9: "Tab",
                13: "Enter",
                19: "Pause",
                27: "Esc",
                32: "Space",
                33: "PageUp",
                34: "PageDown",
                35: "End",
                36: "Home",
                37: "Left",
                38: "Up",
                39: "Right",
                40: "Down",
                44: "Print",
                45: "Insert",
                46: "Delete",
                96: "Numpad0",
                97: "Numpad1",
                98: "Numpad2",
                99: "Numpad3",
                100: "Numpad4",
                101: "Numpad5",
                102: "Numpad6",
                103: "Numpad7",
                104: "Numpad8",
                105: "Numpad9",
                '-13': "NumpadEnter",
                112: "F1",
                113: "F2",
                114: "F3",
                115: "F4",
                116: "F5",
                117: "F6",
                118: "F7",
                119: "F8",
                120: "F9",
                121: "F10",
                122: "F11",
                123: "F12",
                144: "Numlock",
                145: "Scrolllock",
                16: 'Shift',
                17: 'Ctrl',
                18: 'Alt',
                48: '0',
                49: '1',
                50: '2',
                51: '3',
                52: '4',
                53: '5',
                54: '6',
                55: '7',
                56: '8',
                57: '9',
                59: ';',
                61: '=',
                65: 'a',
                66: 'b',
                67: 'c',
                68: 'd',
                69: 'e',
                70: 'f',
                71: 'g',
                72: 'h',
                73: 'i',
                74: 'j',
                75: 'k',
                76: 'l',
                77: 'm',
                78: 'n',
                79: 'o',
                80: 'p',
                81: 'q',
                82: 'r',
                83: 's',
                84: 't',
                85: 'u',
                86: 'v',
                87: 'w',
                88: 'x',
                89: 'y',
                90: 'z',
                107: '+',
                109: '-',
                110: '.',
                186: ';',
                187: '=',
                188: ',',
                189: '-',
                190: '.',
                191: '/',
                192: '`',
                219: '[',
                220: '\\',
                221: ']',
                222: "'",
                111: '/',
                106: '*',
                173: '-'
            };
            var parts = [];
            if (e.ctrlKey) parts.push('ctrl');
            if (e.altKey) parts.push('alt');
            if (e.shiftKey) parts.push('shift');
            parts.push(keys[e.which] || e.which);
            parts = parts.sort().join('-').toLowerCase();
            if (parts === 'shift-shift' || parts === 'ctrl-ctrl' || parts === 'alt-alt') return null;
            var kb = this.settings.core.keyboard, i, tmp;
            for(i in kb)if (kb.hasOwnProperty(i)) {
                tmp = i;
                if (tmp !== '-' && tmp !== '+') {
                    tmp = tmp.replace('--', '-MINUS').replace('+-', '-MINUS').replace('++', '-PLUS').replace('-+', '-PLUS');
                    tmp = tmp.split(/-|\+/).sort().join('-').replace('MINUS', '-').replace('PLUS', '+').toLowerCase();
                }
                if (tmp === parts) return kb[i];
            }
            return null;
        },
        /**
		 * part of the destroying of an instance. Used internally.
		 * @private
		 * @name teardown()
		 */ teardown: function teardown() {
            this.unbind();
            this.element.removeClass('jstree').removeData('jstree').find("[class^='jstree']").addBack().attr("class", function() {
                return this.className.replace(/jstree[^ ]*|$/ig, '');
            });
            this.element = null;
        },
        /**
		 * bind all events. Used internally.
		 * @private
		 * @name bind()
		 */ bind: function bind() {
            var word = '', tout = null, was_click = 0;
            this.element.on("dblclick.jstree", function(e) {
                if (e.target.tagName && e.target.tagName.toLowerCase() === "input") return true;
                if (document.selection && document.selection.empty) document.selection.empty();
                else if (window.getSelection) {
                    var sel = window.getSelection();
                    try {
                        sel.removeAllRanges();
                        sel.collapse();
                    } catch (ignore) {
                    }
                }
            }).on("mousedown.jstree", $1.proxy(function(e) {
                if (e.target === this.element[0]) {
                    e.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)
                    was_click = +new Date(); // ie does not allow to prevent losing focus
                }
            }, this)).on("mousedown.jstree", ".jstree-ocl", function(e) {
                e.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon
            }).on("click.jstree", ".jstree-ocl", $1.proxy(function(e) {
                this.toggle_node(e.target);
            }, this)).on("dblclick.jstree", ".jstree-anchor", $1.proxy(function(e) {
                if (e.target.tagName && e.target.tagName.toLowerCase() === "input") return true;
                if (this.settings.core.dblclick_toggle) this.toggle_node(e.target);
            }, this)).on("click.jstree", ".jstree-anchor", $1.proxy(function(e) {
                e.preventDefault();
                if (e.currentTarget !== document.activeElement) $1(e.currentTarget).focus();
                this.activate_node(e.currentTarget, e);
            }, this)).on('keydown.jstree', '.jstree-anchor', $1.proxy(function(e) {
                if (e.target.tagName && e.target.tagName.toLowerCase() === "input") return true;
                if (this._data.core.rtl) {
                    if (e.which === 37) e.which = 39;
                    else if (e.which === 39) e.which = 37;
                }
                var f = this._kbevent_to_func(e);
                if (f) {
                    var r = f.call(this, e);
                    if (r === false || r === true) return r;
                }
            }, this)).on("load_node.jstree", $1.proxy(function(e, data) {
                if (data.status) {
                    if (data.node.id === $1.jstree.root && !this._data.core.loaded) {
                        this._data.core.loaded = true;
                        if (this._firstChild(this.get_container_ul()[0])) this.element.attr('aria-activedescendant', this._firstChild(this.get_container_ul()[0]).id);
                        /**
								 * triggered after the root node is loaded for the first time
								 * @event
								 * @name loaded.jstree
								 */ this.trigger("loaded");
                    }
                    if (!this._data.core.ready) setTimeout($1.proxy(function() {
                        if (this.element && !this.get_container_ul().find('.jstree-loading').length) {
                            this._data.core.ready = true;
                            if (this._data.core.selected.length) {
                                if (this.settings.core.expand_selected_onload) {
                                    var tmp = [], i, j;
                                    for(i = 0, j = this._data.core.selected.length; i < j; i++)tmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);
                                    tmp = $1.vakata.array_unique(tmp);
                                    for(i = 0, j = tmp.length; i < j; i++)this.open_node(tmp[i], false, 0);
                                }
                                this.trigger('changed', {
                                    'action': 'ready',
                                    'selected': this._data.core.selected
                                });
                            }
                            /**
										 * triggered after all nodes are finished loading
										 * @event
										 * @name ready.jstree
										 */ this.trigger("ready");
                        }
                    }, this), 0);
                }
            }, this))// quick searching when the tree is focused
            .on('keypress.jstree', $1.proxy(function(e) {
                if (e.target.tagName && e.target.tagName.toLowerCase() === "input") return true;
                if (tout) clearTimeout(tout);
                tout = setTimeout(function() {
                    word = '';
                }, 500);
                var chr = String.fromCharCode(e.which).toLowerCase(), col = this.element.find('.jstree-anchor').filter(':visible'), ind = col.index(document.activeElement) || 0, end = false;
                word += chr;
                // match for whole word from current node down (including the current node)
                if (word.length > 1) {
                    col.slice(ind).each($1.proxy(function(i, v) {
                        if ($1(v).text().toLowerCase().indexOf(word) === 0) {
                            $1(v).focus();
                            end = true;
                            return false;
                        }
                    }, this));
                    if (end) return;
                    // match for whole word from the beginning of the tree
                    col.slice(0, ind).each($1.proxy(function(i, v) {
                        if ($1(v).text().toLowerCase().indexOf(word) === 0) {
                            $1(v).focus();
                            end = true;
                            return false;
                        }
                    }, this));
                    if (end) return;
                }
                // list nodes that start with that letter (only if word consists of a single char)
                if (new RegExp('^' + chr.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + '+$').test(word)) {
                    // search for the next node starting with that letter
                    col.slice(ind + 1).each($1.proxy(function(i, v) {
                        if ($1(v).text().toLowerCase().charAt(0) === chr) {
                            $1(v).focus();
                            end = true;
                            return false;
                        }
                    }, this));
                    if (end) return;
                    // search from the beginning
                    col.slice(0, ind + 1).each($1.proxy(function(i, v) {
                        if ($1(v).text().toLowerCase().charAt(0) === chr) {
                            $1(v).focus();
                            end = true;
                            return false;
                        }
                    }, this));
                    if (end) return;
                }
            }, this))// THEME RELATED
            .on("init.jstree", $1.proxy(function() {
                var s = this.settings.core.themes;
                this._data.core.themes.dots = s.dots;
                this._data.core.themes.stripes = s.stripes;
                this._data.core.themes.icons = s.icons;
                this._data.core.themes.ellipsis = s.ellipsis;
                this.set_theme(s.name || "default", s.url);
                this.set_theme_variant(s.variant);
            }, this)).on("loading.jstree", $1.proxy(function() {
                this[this._data.core.themes.dots ? "show_dots" : "hide_dots"]();
                this[this._data.core.themes.icons ? "show_icons" : "hide_icons"]();
                this[this._data.core.themes.stripes ? "show_stripes" : "hide_stripes"]();
                this[this._data.core.themes.ellipsis ? "show_ellipsis" : "hide_ellipsis"]();
            }, this)).on('blur.jstree', '.jstree-anchor', $1.proxy(function(e) {
                this._data.core.focused = null;
                $1(e.currentTarget).filter('.jstree-hovered').trigger('mouseleave');
                this.element.attr('tabindex', '0');
            }, this)).on('focus.jstree', '.jstree-anchor', $1.proxy(function(e) {
                var tmp = this.get_node(e.currentTarget);
                if (tmp && tmp.id) this._data.core.focused = tmp.id;
                this.element.find('.jstree-hovered').not(e.currentTarget).trigger('mouseleave');
                $1(e.currentTarget).trigger('mouseenter');
                this.element.attr('tabindex', '-1');
            }, this)).on('focus.jstree', $1.proxy(function() {
                if (+new Date() - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {
                    was_click = 0;
                    var act = this.get_node(this.element.attr('aria-activedescendant'), true);
                    if (act) act.find('> .jstree-anchor').focus();
                }
            }, this)).on('mouseenter.jstree', '.jstree-anchor', $1.proxy(function(e) {
                this.hover_node(e.currentTarget);
            }, this)).on('mouseleave.jstree', '.jstree-anchor', $1.proxy(function(e) {
                this.dehover_node(e.currentTarget);
            }, this));
        },
        /**
		 * part of the destroying of an instance. Used internally.
		 * @private
		 * @name unbind()
		 */ unbind: function unbind() {
            this.element.off('.jstree');
            $1(document).off('.jstree-' + this._id);
        },
        /**
		 * trigger an event. Used internally.
		 * @private
		 * @name trigger(ev [, data])
		 * @param  {String} ev the name of the event to trigger
		 * @param  {Object} data additional data to pass with the event
		 */ trigger: function trigger(ev, data) {
            if (!data) data = {
            };
            data.instance = this;
            this.element.triggerHandler(ev.replace('.jstree', '') + '.jstree', data);
        },
        /**
		 * returns the jQuery extended instance container
		 * @name get_container()
		 * @return {jQuery}
		 */ get_container: function get_container() {
            return this.element;
        },
        /**
		 * returns the jQuery extended main UL node inside the instance container. Used internally.
		 * @private
		 * @name get_container_ul()
		 * @return {jQuery}
		 */ get_container_ul: function get_container_ul() {
            return this.element.children(".jstree-children").first();
        },
        /**
		 * gets string replacements (localization). Used internally.
		 * @private
		 * @name get_string(key)
		 * @param  {String} key
		 * @return {String}
		 */ get_string: function get_string(key) {
            var a = this.settings.core.strings;
            if ($1.isFunction(a)) return a.call(this, key);
            if (a && a[key]) return a[key];
            return key;
        },
        /**
		 * gets the first child of a DOM node. Used internally.
		 * @private
		 * @name _firstChild(dom)
		 * @param  {DOMElement} dom
		 * @return {DOMElement}
		 */ _firstChild: function _firstChild(dom) {
            dom = dom ? dom.firstChild : null;
            while(dom !== null && dom.nodeType !== 1)dom = dom.nextSibling;
            return dom;
        },
        /**
		 * gets the next sibling of a DOM node. Used internally.
		 * @private
		 * @name _nextSibling(dom)
		 * @param  {DOMElement} dom
		 * @return {DOMElement}
		 */ _nextSibling: function _nextSibling(dom) {
            dom = dom ? dom.nextSibling : null;
            while(dom !== null && dom.nodeType !== 1)dom = dom.nextSibling;
            return dom;
        },
        /**
		 * gets the previous sibling of a DOM node. Used internally.
		 * @private
		 * @name _previousSibling(dom)
		 * @param  {DOMElement} dom
		 * @return {DOMElement}
		 */ _previousSibling: function _previousSibling(dom) {
            dom = dom ? dom.previousSibling : null;
            while(dom !== null && dom.nodeType !== 1)dom = dom.previousSibling;
            return dom;
        },
        /**
		 * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)
		 * @name get_node(obj [, as_dom])
		 * @param  {mixed} obj
		 * @param  {Boolean} as_dom
		 * @return {Object|jQuery}
		 */ get_node: function get_node(obj, as_dom) {
            if (obj && obj.id) obj = obj.id;
            if (obj instanceof $1 && obj.length && obj[0].id) obj = obj[0].id;
            var dom;
            try {
                if (this._model.data[obj]) obj = this._model.data[obj];
                else if (typeof obj === "string" && this._model.data[obj.replace(/^#/, '')]) obj = this._model.data[obj.replace(/^#/, '')];
                else if (typeof obj === "string" && (dom = $1('#' + obj.replace($1.jstree.idregex, '\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) obj = this._model.data[dom.closest('.jstree-node').attr('id')];
                else if ((dom = this.element.find(obj)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) obj = this._model.data[dom.closest('.jstree-node').attr('id')];
                else if ((dom = this.element.find(obj)).length && dom.hasClass('jstree')) obj = this._model.data[$1.jstree.root];
                else return false;
                if (as_dom) obj = obj.id === $1.jstree.root ? this.element : $1('#' + obj.id.replace($1.jstree.idregex, '\\$&'), this.element);
                return obj;
            } catch (ex) {
                return false;
            }
        },
        /**
		 * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)
		 * @name get_path(obj [, glue, ids])
		 * @param  {mixed} obj the node
		 * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned
		 * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used
		 * @return {mixed}
		 */ get_path: function get_path(obj, glue, ids) {
            obj = obj.parents ? obj : this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root || !obj.parents) return false;
            var i, j, p = [];
            p.push(ids ? obj.id : obj.text);
            for(i = 0, j = obj.parents.length; i < j; i++)p.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));
            p = p.reverse().slice(1);
            return glue ? p.join(glue) : p;
        },
        /**
		 * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
		 * @name get_next_dom(obj [, strict])
		 * @param  {mixed} obj
		 * @param  {Boolean} strict
		 * @return {jQuery}
		 */ get_next_dom: function get_next_dom(obj, strict) {
            var tmp;
            obj = this.get_node(obj, true);
            if (obj[0] === this.element[0]) {
                tmp = this._firstChild(this.get_container_ul()[0]);
                while(tmp && tmp.offsetHeight === 0)tmp = this._nextSibling(tmp);
                return tmp ? $1(tmp) : false;
            }
            if (!obj || !obj.length) return false;
            if (strict) {
                tmp = obj[0];
                do tmp = this._nextSibling(tmp);
                while (tmp && tmp.offsetHeight === 0)
                return tmp ? $1(tmp) : false;
            }
            if (obj.hasClass("jstree-open")) {
                tmp = this._firstChild(obj.children('.jstree-children')[0]);
                while(tmp && tmp.offsetHeight === 0)tmp = this._nextSibling(tmp);
                if (tmp !== null) return $1(tmp);
            }
            tmp = obj[0];
            do tmp = this._nextSibling(tmp);
            while (tmp && tmp.offsetHeight === 0)
            if (tmp !== null) return $1(tmp);
            return obj.parentsUntil(".jstree", ".jstree-node").nextAll(".jstree-node:visible").first();
        },
        /**
		 * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
		 * @name get_prev_dom(obj [, strict])
		 * @param  {mixed} obj
		 * @param  {Boolean} strict
		 * @return {jQuery}
		 */ get_prev_dom: function get_prev_dom(obj, strict) {
            var tmp;
            obj = this.get_node(obj, true);
            if (obj[0] === this.element[0]) {
                tmp = this.get_container_ul()[0].lastChild;
                while(tmp && tmp.offsetHeight === 0)tmp = this._previousSibling(tmp);
                return tmp ? $1(tmp) : false;
            }
            if (!obj || !obj.length) return false;
            if (strict) {
                tmp = obj[0];
                do tmp = this._previousSibling(tmp);
                while (tmp && tmp.offsetHeight === 0)
                return tmp ? $1(tmp) : false;
            }
            tmp = obj[0];
            do tmp = this._previousSibling(tmp);
            while (tmp && tmp.offsetHeight === 0)
            if (tmp !== null) {
                obj = $1(tmp);
                while(obj.hasClass("jstree-open"))obj = obj.children(".jstree-children").first().children(".jstree-node:visible:last");
                return obj;
            }
            tmp = obj[0].parentNode.parentNode;
            return tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $1(tmp) : false;
        },
        /**
		 * get the parent ID of a node
		 * @name get_parent(obj)
		 * @param  {mixed} obj
		 * @return {String}
		 */ get_parent: function get_parent(obj) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            return obj.parent;
        },
        /**
		 * get a jQuery collection of all the children of a node (node must be rendered), returns false on error
		 * @name get_children_dom(obj)
		 * @param  {mixed} obj
		 * @return {jQuery}
		 */ get_children_dom: function get_children_dom(obj) {
            obj = this.get_node(obj, true);
            if (obj[0] === this.element[0]) return this.get_container_ul().children(".jstree-node");
            if (!obj || !obj.length) return false;
            return obj.children(".jstree-children").children(".jstree-node");
        },
        /**
		 * checks if a node has children
		 * @name is_parent(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_parent: function is_parent(obj) {
            obj = this.get_node(obj);
            return obj && (obj.state.loaded === false || obj.children.length > 0);
        },
        /**
		 * checks if a node is loaded (its children are available)
		 * @name is_loaded(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_loaded: function is_loaded(obj) {
            obj = this.get_node(obj);
            return obj && obj.state.loaded;
        },
        /**
		 * check if a node is currently loading (fetching children)
		 * @name is_loading(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_loading: function is_loading(obj) {
            obj = this.get_node(obj);
            return obj && obj.state && obj.state.loading;
        },
        /**
		 * check if a node is opened
		 * @name is_open(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_open: function is_open(obj) {
            obj = this.get_node(obj);
            return obj && obj.state.opened;
        },
        /**
		 * check if a node is in a closed state
		 * @name is_closed(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_closed: function is_closed(obj) {
            obj = this.get_node(obj);
            return obj && this.is_parent(obj) && !obj.state.opened;
        },
        /**
		 * check if a node has no children
		 * @name is_leaf(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_leaf: function is_leaf(obj) {
            return !this.is_parent(obj);
        },
        /**
		 * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.
		 * @name load_node(obj [, callback])
		 * @param  {mixed} obj
		 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status
		 * @return {Boolean}
		 * @trigger load_node.jstree
		 */ load_node: function load_node(obj, callback) {
            var k, l, i1, j1, c;
            if ($1.isArray(obj)) {
                this._load_nodes(obj.slice(), callback);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj) {
                if (callback) callback.call(this, obj, false);
                return false;
            }
            // if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?
            if (obj.state.loaded) {
                obj.state.loaded = false;
                for(i1 = 0, j1 = obj.parents.length; i1 < j1; i1++)this._model.data[obj.parents[i1]].children_d = $1.vakata.array_filter(this._model.data[obj.parents[i1]].children_d, function(v) {
                    return $1.inArray(v, obj.children_d) === -1;
                });
                for(k = 0, l = obj.children_d.length; k < l; k++){
                    if (this._model.data[obj.children_d[k]].state.selected) c = true;
                    delete this._model.data[obj.children_d[k]];
                }
                if (c) this._data.core.selected = $1.vakata.array_filter(this._data.core.selected, function(v) {
                    return $1.inArray(v, obj.children_d) === -1;
                });
                obj.children = [];
                obj.children_d = [];
                if (c) this.trigger('changed', {
                    'action': 'load_node',
                    'node': obj,
                    'selected': this._data.core.selected
                });
            }
            obj.state.failed = false;
            obj.state.loading = true;
            this.get_node(obj, true).addClass("jstree-loading").attr('aria-busy', true);
            this._load_node(obj, $1.proxy(function(status) {
                obj = this._model.data[obj.id];
                obj.state.loading = false;
                obj.state.loaded = status;
                obj.state.failed = !obj.state.loaded;
                var dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;
                for(i = 0, j = obj.children.length; i < j; i++)if (m[obj.children[i]] && !m[obj.children[i]].state.hidden) {
                    has_children = true;
                    break;
                }
                if (obj.state.loaded && dom && dom.length) {
                    dom.removeClass('jstree-closed jstree-open jstree-leaf');
                    if (!has_children) dom.addClass('jstree-leaf');
                    else if (obj.id !== '#') dom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');
                }
                dom.removeClass("jstree-loading").attr('aria-busy', false);
                /**
				 * triggered after a node is loaded
				 * @event
				 * @name load_node.jstree
				 * @param {Object} node the node that was loading
				 * @param {Boolean} status was the node loaded successfully
				 */ this.trigger('load_node', {
                    "node": obj,
                    "status": status
                });
                if (callback) callback.call(this, obj, status);
            }, this));
            return true;
        },
        /**
		 * load an array of nodes (will also load unavailable nodes as soon as they appear in the structure). Used internally.
		 * @private
		 * @name _load_nodes(nodes [, callback])
		 * @param  {array} nodes
		 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes
		 */ _load_nodes: function _load_nodes(nodes, callback, is_callback, force_reload) {
            var r = true, c = function c() {
                this._load_nodes(nodes, callback, true);
            }, m = this._model.data, i, j, tmp = [];
            for(i = 0, j = nodes.length; i < j; i++)if (m[nodes[i]] && (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed || !is_callback && force_reload)) {
                if (!this.is_loading(nodes[i])) this.load_node(nodes[i], c);
                r = false;
            }
            if (r) {
                for(i = 0, j = nodes.length; i < j; i++)if (m[nodes[i]] && m[nodes[i]].state.loaded) tmp.push(nodes[i]);
                if (callback && !callback.done) {
                    callback.call(this, tmp);
                    callback.done = true;
                }
            }
        },
        /**
		 * loads all unloaded nodes
		 * @name load_all([obj, callback])
		 * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree
		 * @param {function} callback a function to be executed once loading all the nodes is complete,
		 * @trigger load_all.jstree
		 */ load_all: function load_all(obj, callback) {
            if (!obj) obj = $1.jstree.root;
            obj = this.get_node(obj);
            if (!obj) return false;
            var to_load = [], m = this._model.data, c = m[obj.id].children_d, i, j;
            if (obj.state && !obj.state.loaded) to_load.push(obj.id);
            for(i = 0, j = c.length; i < j; i++)if (m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) to_load.push(c[i]);
            if (to_load.length) this._load_nodes(to_load, function() {
                this.load_all(obj, callback);
            });
            else {
                /**
				 * triggered after a load_all call completes
				 * @event
				 * @name load_all.jstree
				 * @param {Object} node the recursively loaded node
				 */ if (callback) callback.call(this, obj);
                this.trigger('load_all', {
                    "node": obj
                });
            }
        },
        /**
		 * handles the actual loading of a node. Used only internally.
		 * @private
		 * @name _load_node(obj [, callback])
		 * @param  {mixed} obj
		 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status
		 * @return {Boolean}
		 */ _load_node: function _load_node(obj, callback) {
            var s = this.settings.core.data, t;
            var notTextOrCommentNode = function notTextOrCommentNode() {
                return this.nodeType !== 3 && this.nodeType !== 8;
            };
            // use original HTML
            if (!s) {
                if (obj.id === $1.jstree.root) return this._append_html_data(obj, this._data.core.original_container_html.clone(true), function(status) {
                    callback.call(this, status);
                });
                else return callback.call(this, false);
            // return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);
            }
            if ($1.isFunction(s)) return s.call(this, obj, $1.proxy(function(d) {
                if (d === false) callback.call(this, false);
                else this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $1($1.parseHTML(d)).filter(notTextOrCommentNode) : d, function(status) {
                    callback.call(this, status);
                });
            // return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));
            }, this));
            if (typeof s === 'object') {
                if (s.url) {
                    s = $1.extend(true, {
                    }, s);
                    if ($1.isFunction(s.url)) s.url = s.url.call(this, obj);
                    if ($1.isFunction(s.data)) s.data = s.data.call(this, obj);
                    return $1.ajax(s).done($1.proxy(function(d, t, x) {
                        var type = x.getResponseHeader('Content-Type');
                        if (type && type.indexOf('json') !== -1 || typeof d === "object") return this._append_json_data(obj, d, function(status) {
                            callback.call(this, status);
                        });
                        if (type && type.indexOf('html') !== -1 || typeof d === "string") return this._append_html_data(obj, $1($1.parseHTML(d)).filter(notTextOrCommentNode), function(status) {
                            callback.call(this, status);
                        });
                        this._data.core.last_error = {
                            'error': 'ajax',
                            'plugin': 'core',
                            'id': 'core_04',
                            'reason': 'Could not load node',
                            'data': JSON.stringify({
                                'id': obj.id,
                                'xhr': x
                            })
                        };
                        this.settings.core.error.call(this, this._data.core.last_error);
                        return callback.call(this, false);
                    }, this)).fail($1.proxy(function(f) {
                        this._data.core.last_error = {
                            'error': 'ajax',
                            'plugin': 'core',
                            'id': 'core_04',
                            'reason': 'Could not load node',
                            'data': JSON.stringify({
                                'id': obj.id,
                                'xhr': f
                            })
                        };
                        callback.call(this, false);
                        this.settings.core.error.call(this, this._data.core.last_error);
                    }, this));
                }
                if ($1.isArray(s)) t = $1.extend(true, [], s);
                else if ($1.isPlainObject(s)) t = $1.extend(true, {
                }, s);
                else t = s;
                if (obj.id === $1.jstree.root) return this._append_json_data(obj, t, function(status) {
                    callback.call(this, status);
                });
                else {
                    this._data.core.last_error = {
                        'error': 'nodata',
                        'plugin': 'core',
                        'id': 'core_05',
                        'reason': 'Could not load node',
                        'data': JSON.stringify({
                            'id': obj.id
                        })
                    };
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return callback.call(this, false);
                }
            //return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );
            }
            if (typeof s === 'string') {
                if (obj.id === $1.jstree.root) return this._append_html_data(obj, $1($1.parseHTML(s)).filter(notTextOrCommentNode), function(status) {
                    callback.call(this, status);
                });
                else {
                    this._data.core.last_error = {
                        'error': 'nodata',
                        'plugin': 'core',
                        'id': 'core_06',
                        'reason': 'Could not load node',
                        'data': JSON.stringify({
                            'id': obj.id
                        })
                    };
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return callback.call(this, false);
                }
            //return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );
            }
            return callback.call(this, false);
        },
        /**
		 * adds a node to the list of nodes to redraw. Used only internally.
		 * @private
		 * @name _node_changed(obj [, callback])
		 * @param  {mixed} obj
		 */ _node_changed: function _node_changed(obj) {
            obj = this.get_node(obj);
            if (obj && $1.inArray(obj.id, this._model.changed) === -1) this._model.changed.push(obj.id);
        },
        /**
		 * appends HTML content to the tree. Used internally.
		 * @private
		 * @name _append_html_data(obj, data)
		 * @param  {mixed} obj the node to append to
		 * @param  {String} data the HTML string to parse and append
		 * @trigger model.jstree, changed.jstree
		 */ _append_html_data: function _append_html_data(dom, data, cb) {
            dom = this.get_node(dom);
            dom.children = [];
            dom.children_d = [];
            var dat = data.is('ul') ? data.children() : data, par = dom.id, chd = [], dpc = [], m = this._model.data, p = m[par], s = this._data.core.selected.length, tmp, i, j;
            dat.each($1.proxy(function(i, v) {
                tmp = this._parse_model_from_html($1(v), par, p.parents.concat());
                if (tmp) {
                    chd.push(tmp);
                    dpc.push(tmp);
                    if (m[tmp].children_d.length) dpc = dpc.concat(m[tmp].children_d);
                }
            }, this));
            p.children = chd;
            p.children_d = dpc;
            for(i = 0, j = p.parents.length; i < j; i++)m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
            /**
			 * triggered when new data is inserted to the tree model
			 * @event
			 * @name model.jstree
			 * @param {Array} nodes an array of node IDs
			 * @param {String} parent the parent ID of the nodes
			 */ this.trigger('model', {
                "nodes": dpc,
                'parent': par
            });
            if (par !== $1.jstree.root) {
                this._node_changed(par);
                this.redraw();
            } else {
                this.get_container_ul().children('.jstree-initial-node').remove();
                this.redraw(true);
            }
            if (this._data.core.selected.length !== s) this.trigger('changed', {
                'action': 'model',
                'selected': this._data.core.selected
            });
            cb.call(this, true);
        },
        /**
		 * appends JSON content to the tree. Used internally.
		 * @private
		 * @name _append_json_data(obj, data)
		 * @param  {mixed} obj the node to append to
		 * @param  {String} data the JSON object to parse and append
		 * @param  {Boolean} force_processing internal param - do not set
		 * @trigger model.jstree, changed.jstree
		 */ _append_json_data: function _append_json_data(dom, data1, cb, force_processing) {
            if (this.element === null) return;
            dom = this.get_node(dom);
            dom.children = [];
            dom.children_d = [];
            // *%$@!!!
            if (data1.d) {
                data1 = data1.d;
                if (typeof data1 === "string") data1 = JSON.parse(data1);
            }
            if (!$1.isArray(data1)) data1 = [
                data1
            ];
            var w = null, args = {
                'df': this._model.default_state,
                'dat': data1,
                'par': dom.id,
                'm': this._model.data,
                't_id': this._id,
                't_cnt': this._cnt,
                'sel': this._data.core.selected
            }, inst = this, func = function func(data, undefined) {
                if (data.data) data = data.data;
                var dat = data.dat, par = data.par, chd = [], dpc = [], add = [], df = data.df, t_id = data.t_id, t_cnt = data.t_cnt, m = data.m, p1 = m[par], sel = data.sel, tmp1, i2, j2, rslt, parse_flat = function(d, p, ps) {
                    if (!ps) ps = [];
                    else ps = ps.concat();
                    if (p) ps.unshift(p);
                    var tid = d.id.toString(), i, j, c, e, tmp = {
                        id: tid,
                        text: d.text || '',
                        icon: d.icon !== undefined ? d.icon : true,
                        parent: p,
                        parents: ps,
                        children: d.children || [],
                        children_d: d.children_d || [],
                        data: d.data,
                        state: {
                        },
                        li_attr: {
                            id: false
                        },
                        a_attr: {
                            href: '#'
                        },
                        original: false
                    };
                    for(i in df)if (df.hasOwnProperty(i)) tmp.state[i] = df[i];
                    if (d && d.data && d.data.jstree && d.data.jstree.icon) tmp.icon = d.data.jstree.icon;
                    if (tmp.icon === undefined || tmp.icon === null || tmp.icon === "") tmp.icon = true;
                    if (d && d.data) {
                        tmp.data = d.data;
                        if (d.data.jstree) {
                            for(i in d.data.jstree)if (d.data.jstree.hasOwnProperty(i)) tmp.state[i] = d.data.jstree[i];
                        }
                    }
                    if (d && typeof d.state === 'object') {
                        for(i in d.state)if (d.state.hasOwnProperty(i)) tmp.state[i] = d.state[i];
                    }
                    if (d && typeof d.li_attr === 'object') {
                        for(i in d.li_attr)if (d.li_attr.hasOwnProperty(i)) tmp.li_attr[i] = d.li_attr[i];
                    }
                    if (!tmp.li_attr.id) tmp.li_attr.id = tid;
                    if (d && typeof d.a_attr === 'object') {
                        for(i in d.a_attr)if (d.a_attr.hasOwnProperty(i)) tmp.a_attr[i] = d.a_attr[i];
                    }
                    if (d && d.children && d.children === true) {
                        tmp.state.loaded = false;
                        tmp.children = [];
                        tmp.children_d = [];
                    }
                    m[tmp.id] = tmp;
                    for(i = 0, j = tmp.children.length; i < j; i++){
                        c = parse_flat(m[tmp.children[i]], tmp.id, ps);
                        e = m[c];
                        tmp.children_d.push(c);
                        if (e.children_d.length) tmp.children_d = tmp.children_d.concat(e.children_d);
                    }
                    delete d.data;
                    delete d.children;
                    m[tmp.id].original = d;
                    if (tmp.state.selected) add.push(tmp.id);
                    return tmp.id;
                }, parse_nest = function(d, p, ps) {
                    if (!ps) ps = [];
                    else ps = ps.concat();
                    if (p) ps.unshift(p);
                    var tid = false, i, j, c, e, tmp;
                    do tid = 'j' + t_id + '_' + ++t_cnt;
                    while (m[tid])
                    tmp = {
                        id: false,
                        text: typeof d === 'string' ? d : '',
                        icon: typeof d === 'object' && d.icon !== undefined ? d.icon : true,
                        parent: p,
                        parents: ps,
                        children: [],
                        children_d: [],
                        data: null,
                        state: {
                        },
                        li_attr: {
                            id: false
                        },
                        a_attr: {
                            href: '#'
                        },
                        original: false
                    };
                    for(i in df)if (df.hasOwnProperty(i)) tmp.state[i] = df[i];
                    if (d && d.id) tmp.id = d.id.toString();
                    if (d && d.text) tmp.text = d.text;
                    if (d && d.data && d.data.jstree && d.data.jstree.icon) tmp.icon = d.data.jstree.icon;
                    if (tmp.icon === undefined || tmp.icon === null || tmp.icon === "") tmp.icon = true;
                    if (d && d.data) {
                        tmp.data = d.data;
                        if (d.data.jstree) {
                            for(i in d.data.jstree)if (d.data.jstree.hasOwnProperty(i)) tmp.state[i] = d.data.jstree[i];
                        }
                    }
                    if (d && typeof d.state === 'object') {
                        for(i in d.state)if (d.state.hasOwnProperty(i)) tmp.state[i] = d.state[i];
                    }
                    if (d && typeof d.li_attr === 'object') {
                        for(i in d.li_attr)if (d.li_attr.hasOwnProperty(i)) tmp.li_attr[i] = d.li_attr[i];
                    }
                    if (tmp.li_attr.id && !tmp.id) tmp.id = tmp.li_attr.id.toString();
                    if (!tmp.id) tmp.id = tid;
                    if (!tmp.li_attr.id) tmp.li_attr.id = tmp.id;
                    if (d && typeof d.a_attr === 'object') {
                        for(i in d.a_attr)if (d.a_attr.hasOwnProperty(i)) tmp.a_attr[i] = d.a_attr[i];
                    }
                    if (d && d.children && d.children.length) {
                        for(i = 0, j = d.children.length; i < j; i++){
                            c = parse_nest(d.children[i], tmp.id, ps);
                            e = m[c];
                            tmp.children.push(c);
                            if (e.children_d.length) tmp.children_d = tmp.children_d.concat(e.children_d);
                        }
                        tmp.children_d = tmp.children_d.concat(tmp.children);
                    }
                    if (d && d.children && d.children === true) {
                        tmp.state.loaded = false;
                        tmp.children = [];
                        tmp.children_d = [];
                    }
                    delete d.data;
                    delete d.children;
                    tmp.original = d;
                    m[tmp.id] = tmp;
                    if (tmp.state.selected) add.push(tmp.id);
                    return tmp.id;
                };
                if (dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {
                    // Flat JSON support (for easy import from DB):
                    // 1) convert to object (foreach)
                    for(i2 = 0, j2 = dat.length; i2 < j2; i2++){
                        if (!dat[i2].children) dat[i2].children = [];
                        if (!dat[i2].state) dat[i2].state = {
                        };
                        m[dat[i2].id.toString()] = dat[i2];
                    }
                    // 2) populate children (foreach)
                    for(i2 = 0, j2 = dat.length; i2 < j2; i2++){
                        if (!m[dat[i2].parent.toString()]) {
                            if (typeof inst !== "undefined") {
                                inst._data.core.last_error = {
                                    'error': 'parse',
                                    'plugin': 'core',
                                    'id': 'core_07',
                                    'reason': 'Node with invalid parent',
                                    'data': JSON.stringify({
                                        'id': dat[i2].id.toString(),
                                        'parent': dat[i2].parent.toString()
                                    })
                                };
                                inst.settings.core.error.call(inst, inst._data.core.last_error);
                            }
                            continue;
                        }
                        m[dat[i2].parent.toString()].children.push(dat[i2].id.toString());
                        // populate parent.children_d
                        p1.children_d.push(dat[i2].id.toString());
                    }
                    // 3) normalize && populate parents and children_d with recursion
                    for(i2 = 0, j2 = p1.children.length; i2 < j2; i2++){
                        tmp1 = parse_flat(m[p1.children[i2]], par, p1.parents.concat());
                        dpc.push(tmp1);
                        if (m[tmp1].children_d.length) dpc = dpc.concat(m[tmp1].children_d);
                    }
                    for(i2 = 0, j2 = p1.parents.length; i2 < j2; i2++)m[p1.parents[i2]].children_d = m[p1.parents[i2]].children_d.concat(dpc);
                    // ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;
                    rslt = {
                        'cnt': t_cnt,
                        'mod': m,
                        'sel': sel,
                        'par': par,
                        'dpc': dpc,
                        'add': add
                    };
                } else {
                    for(i2 = 0, j2 = dat.length; i2 < j2; i2++){
                        tmp1 = parse_nest(dat[i2], par, p1.parents.concat());
                        if (tmp1) {
                            chd.push(tmp1);
                            dpc.push(tmp1);
                            if (m[tmp1].children_d.length) dpc = dpc.concat(m[tmp1].children_d);
                        }
                    }
                    p1.children = chd;
                    p1.children_d = dpc;
                    for(i2 = 0, j2 = p1.parents.length; i2 < j2; i2++)m[p1.parents[i2]].children_d = m[p1.parents[i2]].children_d.concat(dpc);
                    rslt = {
                        'cnt': t_cnt,
                        'mod': m,
                        'sel': sel,
                        'par': par,
                        'dpc': dpc,
                        'add': add
                    };
                }
                if (typeof window === 'undefined' || typeof window.document === 'undefined') postMessage(rslt);
                else return rslt;
            }, rslt1 = function rslt1(rslt, worker) {
                if (this.element === null) return;
                this._cnt = rslt.cnt;
                var i, m = this._model.data;
                for(i in m)if (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) rslt.mod[i].state.loading = true;
                this._model.data = rslt.mod; // breaks the reference in load_node - careful
                if (worker) {
                    var j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();
                    m = this._model.data;
                    // if selection was changed while calculating in worker
                    if (r.length !== s.length || $1.vakata.array_unique(r.concat(s)).length !== r.length) {
                        // deselect nodes that are no longer selected
                        for(i = 0, j = r.length; i < j; i++)if ($1.inArray(r[i], a) === -1 && $1.inArray(r[i], s) === -1) m[r[i]].state.selected = false;
                        // select nodes that were selected in the mean time
                        for(i = 0, j = s.length; i < j; i++)if ($1.inArray(s[i], r) === -1) m[s[i]].state.selected = true;
                    }
                }
                if (rslt.add.length) this._data.core.selected = this._data.core.selected.concat(rslt.add);
                this.trigger('model', {
                    "nodes": rslt.dpc,
                    'parent': rslt.par
                });
                if (rslt.par !== $1.jstree.root) {
                    this._node_changed(rslt.par);
                    this.redraw();
                } else // this.get_container_ul().children('.jstree-initial-node').remove();
                this.redraw(true);
                if (rslt.add.length) this.trigger('changed', {
                    'action': 'model',
                    'selected': this._data.core.selected
                });
                // If no worker, try to mimic worker behavioour, by invoking cb asynchronously
                if (!worker && setImmediate) setImmediate(function() {
                    cb.call(inst, true);
                });
                else cb.call(inst, true);
            };
            if (this.settings.core.worker && window.Blob && window.URL && window.Worker) try {
                if (this._wrk === null) this._wrk = window.URL.createObjectURL(new window.Blob([
                    'self.onmessage = ' + func.toString()
                ], {
                    type: "text/javascript"
                }));
                if (!this._data.core.working || force_processing) {
                    this._data.core.working = true;
                    w = new window.Worker(this._wrk);
                    w.onmessage = $1.proxy(function(e) {
                        rslt1.call(this, e.data, true);
                        try {
                            w.terminate();
                            w = null;
                        } catch (ignore) {
                        }
                        if (this._data.core.worker_queue.length) this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                        else this._data.core.working = false;
                    }, this);
                    if (!args.par) {
                        if (this._data.core.worker_queue.length) this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                        else this._data.core.working = false;
                    } else w.postMessage(args);
                } else this._data.core.worker_queue.push([
                    dom,
                    data1,
                    cb,
                    true
                ]);
            } catch (e) {
                rslt1.call(this, func(args), false);
                if (this._data.core.worker_queue.length) this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                else this._data.core.working = false;
            }
            else rslt1.call(this, func(args), false);
        },
        /**
		 * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.
		 * @private
		 * @name _parse_model_from_html(d [, p, ps])
		 * @param  {jQuery} d the jQuery object to parse
		 * @param  {String} p the parent ID
		 * @param  {Array} ps list of all parents
		 * @return {String} the ID of the object added to the model
		 */ _parse_model_from_html: function _parse_model_from_html(d, p, ps) {
            if (!ps) ps = [];
            else ps = [].concat(ps);
            if (p) ps.unshift(p);
            var c, e, m = this._model.data, data = {
                id: false,
                text: false,
                icon: true,
                parent: p,
                parents: ps,
                children: [],
                children_d: [],
                data: null,
                state: {
                },
                li_attr: {
                    id: false
                },
                a_attr: {
                    href: '#'
                },
                original: false
            }, i3, tmp, tid;
            for(i3 in this._model.default_state)if (this._model.default_state.hasOwnProperty(i3)) data.state[i3] = this._model.default_state[i3];
            tmp = $1.vakata.attributes(d, true);
            $1.each(tmp, function(i, v) {
                v = $1.vakata.trim(v);
                if (!v.length) return true;
                data.li_attr[i] = v;
                if (i === 'id') data.id = v.toString();
            });
            tmp = d.children('a').first();
            if (tmp.length) {
                tmp = $1.vakata.attributes(tmp, true);
                $1.each(tmp, function(i, v) {
                    v = $1.vakata.trim(v);
                    if (v.length) data.a_attr[i] = v;
                });
            }
            tmp = d.children("a").first().length ? d.children("a").first().clone() : d.clone();
            tmp.children("ins, i, ul").remove();
            tmp = tmp.html();
            tmp = $1('<div></div>').html(tmp);
            data.text = this.settings.core.force_text ? tmp.text() : tmp.html();
            tmp = d.data();
            data.data = tmp ? $1.extend(true, {
            }, tmp) : null;
            data.state.opened = d.hasClass('jstree-open');
            data.state.selected = d.children('a').hasClass('jstree-clicked');
            data.state.disabled = d.children('a').hasClass('jstree-disabled');
            if (data.data && data.data.jstree) {
                for(i3 in data.data.jstree)if (data.data.jstree.hasOwnProperty(i3)) data.state[i3] = data.data.jstree[i3];
            }
            tmp = d.children("a").children(".jstree-themeicon");
            if (tmp.length) data.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');
            if (data.state.icon !== undefined1) data.icon = data.state.icon;
            if (data.icon === undefined1 || data.icon === null || data.icon === "") data.icon = true;
            tmp = d.children("ul").children("li");
            do tid = 'j' + this._id + '_' + ++this._cnt;
            while (m[tid])
            data.id = data.li_attr.id ? data.li_attr.id.toString() : tid;
            if (tmp.length) {
                tmp.each($1.proxy(function(i, v) {
                    c = this._parse_model_from_html($1(v), data.id, ps);
                    e = this._model.data[c];
                    data.children.push(c);
                    if (e.children_d.length) data.children_d = data.children_d.concat(e.children_d);
                }, this));
                data.children_d = data.children_d.concat(data.children);
            } else if (d.hasClass('jstree-closed')) data.state.loaded = false;
            if (data.li_attr['class']) data.li_attr['class'] = data.li_attr['class'].replace('jstree-closed', '').replace('jstree-open', '');
            if (data.a_attr['class']) data.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked', '').replace('jstree-disabled', '');
            m[data.id] = data;
            if (data.state.selected) this._data.core.selected.push(data.id);
            return data.id;
        },
        /**
		 * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.
		 * @private
		 * @name _parse_model_from_flat_json(d [, p, ps])
		 * @param  {Object} d the JSON object to parse
		 * @param  {String} p the parent ID
		 * @param  {Array} ps list of all parents
		 * @return {String} the ID of the object added to the model
		 */ _parse_model_from_flat_json: function _parse_model_from_flat_json(d, p, ps) {
            if (!ps) ps = [];
            else ps = ps.concat();
            if (p) ps.unshift(p);
            var tid = d.id.toString(), m = this._model.data, df = this._model.default_state, i, j, c, e, tmp = {
                id: tid,
                text: d.text || '',
                icon: d.icon !== undefined1 ? d.icon : true,
                parent: p,
                parents: ps,
                children: d.children || [],
                children_d: d.children_d || [],
                data: d.data,
                state: {
                },
                li_attr: {
                    id: false
                },
                a_attr: {
                    href: '#'
                },
                original: false
            };
            for(i in df)if (df.hasOwnProperty(i)) tmp.state[i] = df[i];
            if (d && d.data && d.data.jstree && d.data.jstree.icon) tmp.icon = d.data.jstree.icon;
            if (tmp.icon === undefined1 || tmp.icon === null || tmp.icon === "") tmp.icon = true;
            if (d && d.data) {
                tmp.data = d.data;
                if (d.data.jstree) {
                    for(i in d.data.jstree)if (d.data.jstree.hasOwnProperty(i)) tmp.state[i] = d.data.jstree[i];
                }
            }
            if (d && typeof d.state === 'object') {
                for(i in d.state)if (d.state.hasOwnProperty(i)) tmp.state[i] = d.state[i];
            }
            if (d && typeof d.li_attr === 'object') {
                for(i in d.li_attr)if (d.li_attr.hasOwnProperty(i)) tmp.li_attr[i] = d.li_attr[i];
            }
            if (!tmp.li_attr.id) tmp.li_attr.id = tid;
            if (d && typeof d.a_attr === 'object') {
                for(i in d.a_attr)if (d.a_attr.hasOwnProperty(i)) tmp.a_attr[i] = d.a_attr[i];
            }
            if (d && d.children && d.children === true) {
                tmp.state.loaded = false;
                tmp.children = [];
                tmp.children_d = [];
            }
            m[tmp.id] = tmp;
            for(i = 0, j = tmp.children.length; i < j; i++){
                c = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);
                e = m[c];
                tmp.children_d.push(c);
                if (e.children_d.length) tmp.children_d = tmp.children_d.concat(e.children_d);
            }
            delete d.data;
            delete d.children;
            m[tmp.id].original = d;
            if (tmp.state.selected) this._data.core.selected.push(tmp.id);
            return tmp.id;
        },
        /**
		 * parses a node from a JSON object and appends it to the in memory tree model. Used internally.
		 * @private
		 * @name _parse_model_from_json(d [, p, ps])
		 * @param  {Object} d the JSON object to parse
		 * @param  {String} p the parent ID
		 * @param  {Array} ps list of all parents
		 * @return {String} the ID of the object added to the model
		 */ _parse_model_from_json: function _parse_model_from_json(d, p, ps) {
            if (!ps) ps = [];
            else ps = ps.concat();
            if (p) ps.unshift(p);
            var tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;
            do tid = 'j' + this._id + '_' + ++this._cnt;
            while (m[tid])
            tmp = {
                id: false,
                text: typeof d === 'string' ? d : '',
                icon: typeof d === 'object' && d.icon !== undefined1 ? d.icon : true,
                parent: p,
                parents: ps,
                children: [],
                children_d: [],
                data: null,
                state: {
                },
                li_attr: {
                    id: false
                },
                a_attr: {
                    href: '#'
                },
                original: false
            };
            for(i in df)if (df.hasOwnProperty(i)) tmp.state[i] = df[i];
            if (d && d.id) tmp.id = d.id.toString();
            if (d && d.text) tmp.text = d.text;
            if (d && d.data && d.data.jstree && d.data.jstree.icon) tmp.icon = d.data.jstree.icon;
            if (tmp.icon === undefined1 || tmp.icon === null || tmp.icon === "") tmp.icon = true;
            if (d && d.data) {
                tmp.data = d.data;
                if (d.data.jstree) {
                    for(i in d.data.jstree)if (d.data.jstree.hasOwnProperty(i)) tmp.state[i] = d.data.jstree[i];
                }
            }
            if (d && typeof d.state === 'object') {
                for(i in d.state)if (d.state.hasOwnProperty(i)) tmp.state[i] = d.state[i];
            }
            if (d && typeof d.li_attr === 'object') {
                for(i in d.li_attr)if (d.li_attr.hasOwnProperty(i)) tmp.li_attr[i] = d.li_attr[i];
            }
            if (tmp.li_attr.id && !tmp.id) tmp.id = tmp.li_attr.id.toString();
            if (!tmp.id) tmp.id = tid;
            if (!tmp.li_attr.id) tmp.li_attr.id = tmp.id;
            if (d && typeof d.a_attr === 'object') {
                for(i in d.a_attr)if (d.a_attr.hasOwnProperty(i)) tmp.a_attr[i] = d.a_attr[i];
            }
            if (d && d.children && d.children.length) {
                for(i = 0, j = d.children.length; i < j; i++){
                    c = this._parse_model_from_json(d.children[i], tmp.id, ps);
                    e = m[c];
                    tmp.children.push(c);
                    if (e.children_d.length) tmp.children_d = tmp.children_d.concat(e.children_d);
                }
                tmp.children_d = tmp.children.concat(tmp.children_d);
            }
            if (d && d.children && d.children === true) {
                tmp.state.loaded = false;
                tmp.children = [];
                tmp.children_d = [];
            }
            delete d.data;
            delete d.children;
            tmp.original = d;
            m[tmp.id] = tmp;
            if (tmp.state.selected) this._data.core.selected.push(tmp.id);
            return tmp.id;
        },
        /**
		 * redraws all nodes that need to be redrawn. Used internally.
		 * @private
		 * @name _redraw()
		 * @trigger redraw.jstree
		 */ _redraw: function _redraw() {
            var nodes = this._model.force_full_redraw ? this._model.data[$1.jstree.root].children.concat([]) : this._model.changed.concat([]), f = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;
            for(i = 0, j = nodes.length; i < j; i++){
                tmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);
                if (tmp && this._model.force_full_redraw) f.appendChild(tmp);
            }
            if (this._model.force_full_redraw) {
                f.className = this.get_container_ul()[0].className;
                f.setAttribute('role', 'group');
                this.element.empty().append(f);
            //this.get_container_ul()[0].appendChild(f);
            }
            if (fe !== null && this.settings.core.restore_focus) {
                tmp = this.get_node(fe, true);
                if (tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) tmp.children('.jstree-anchor').focus();
                else this._data.core.focused = null;
            }
            this._model.force_full_redraw = false;
            this._model.changed = [];
            /**
			 * triggered after nodes are redrawn
			 * @event
			 * @name redraw.jstree
			 * @param {array} nodes the redrawn nodes
			 */ this.trigger('redraw', {
                "nodes": nodes
            });
        },
        /**
		 * redraws all nodes that need to be redrawn or optionally - the whole tree
		 * @name redraw([full])
		 * @param {Boolean} full if set to `true` all nodes are redrawn.
		 */ redraw: function redraw(full) {
            if (full) this._model.force_full_redraw = true;
            //if(this._model.redraw_timeout) {
            //	clearTimeout(this._model.redraw_timeout);
            //}
            //this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);
            this._redraw();
        },
        /**
		 * redraws a single node's children. Used internally.
		 * @private
		 * @name draw_children(node)
		 * @param {mixed} node the node whose children will be redrawn
		 */ draw_children: function draw_children(node) {
            var obj = this.get_node(node), i = false, j = false, k = false, d = document;
            if (!obj) return false;
            if (obj.id === $1.jstree.root) return this.redraw(true);
            node = this.get_node(node, true);
            if (!node || !node.length) return false;
             // TODO: quick toggle
            node.children('.jstree-children').remove();
            node = node[0];
            if (obj.children.length && obj.state.loaded) {
                k = d.createElement('UL');
                k.setAttribute('role', 'group');
                k.className = 'jstree-children';
                for(i = 0, j = obj.children.length; i < j; i++)k.appendChild(this.redraw_node(obj.children[i], true, true));
                node.appendChild(k);
            }
        },
        /**
		 * redraws a single node. Used internally.
		 * @private
		 * @name redraw_node(node, deep, is_callback, force_render)
		 * @param {mixed} node the node to redraw
		 * @param {Boolean} deep should child nodes be redrawn too
		 * @param {Boolean} is_callback is this a recursion call
		 * @param {Boolean} force_render should children of closed parents be drawn anyway
		 */ redraw_node: function redraw_node(node, deep, is_callback, force_render) {
            var obj = this.get_node(node), par = false, ind = false, old = false, i = false, j = false, k = false, c = '', d = document, m = this._model.data, f = false, s = false, tmp = null, t = 0, l = 0, has_children = false, last_sibling = false;
            if (!obj) return false;
            if (obj.id === $1.jstree.root) return this.redraw(true);
            deep = deep || obj.children.length === 0;
            node = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + ("0123456789".indexOf(obj.id[0]) !== -1 ? '\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($1.jstree.idregex, '\\$&') : obj.id.replace($1.jstree.idregex, '\\$&'))); //, this.element);
            if (!node) {
                deep = true;
                //node = d.createElement('LI');
                if (!is_callback) {
                    par = obj.parent !== $1.jstree.root ? $1('#' + obj.parent.replace($1.jstree.idregex, '\\$&'), this.element)[0] : null;
                    if (par !== null && (!par || !m[obj.parent].state.opened)) return false;
                    ind = $1.inArray(obj.id, par === null ? m[$1.jstree.root].children : m[obj.parent].children);
                }
            } else {
                node = $1(node);
                if (!is_callback) {
                    par = node.parent().parent()[0];
                    if (par === this.element[0]) par = null;
                    ind = node.index();
                }
                // m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage
                if (!deep && obj.children.length && !node.children('.jstree-children').length) deep = true;
                if (!deep) old = node.children('.jstree-children')[0];
                f = node.children('.jstree-anchor')[0] === document.activeElement;
                node.remove();
            //node = d.createElement('LI');
            //node = node[0];
            }
            node = this._data.core.node.cloneNode(true);
            // node is DOM, deep is boolean
            c = 'jstree-node ';
            for(i in obj.li_attr)if (obj.li_attr.hasOwnProperty(i)) {
                if (i === 'id') continue;
                if (i !== 'class') node.setAttribute(i, obj.li_attr[i]);
                else c += obj.li_attr[i];
            }
            if (!obj.a_attr.id) obj.a_attr.id = obj.id + '_anchor';
            node.childNodes[1].setAttribute('aria-selected', !!obj.state.selected);
            node.childNodes[1].setAttribute('aria-level', obj.parents.length);
            if (this.settings.core.compute_elements_positions) {
                node.childNodes[1].setAttribute('aria-setsize', m[obj.parent].children.length);
                node.childNodes[1].setAttribute('aria-posinset', m[obj.parent].children.indexOf(obj.id) + 1);
            }
            if (obj.state.disabled) node.childNodes[1].setAttribute('aria-disabled', true);
            for(i = 0, j = obj.children.length; i < j; i++)if (!m[obj.children[i]].state.hidden) {
                has_children = true;
                break;
            }
            if (obj.parent !== null && m[obj.parent] && !obj.state.hidden) {
                i = $1.inArray(obj.id, m[obj.parent].children);
                last_sibling = obj.id;
                if (i !== -1) {
                    i++;
                    for(j = m[obj.parent].children.length; i < j; i++){
                        if (!m[m[obj.parent].children[i]].state.hidden) last_sibling = m[obj.parent].children[i];
                        if (last_sibling !== obj.id) break;
                    }
                }
            }
            if (obj.state.hidden) c += ' jstree-hidden';
            if (obj.state.loading) c += ' jstree-loading';
            if (obj.state.loaded && !has_children) c += ' jstree-leaf';
            else {
                c += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';
                node.childNodes[1].setAttribute('aria-expanded', obj.state.opened && obj.state.loaded);
            }
            if (last_sibling === obj.id) c += ' jstree-last';
            node.id = obj.id;
            node.className = c;
            c = (obj.state.selected ? ' jstree-clicked' : '') + (obj.state.disabled ? ' jstree-disabled' : '');
            for(j in obj.a_attr)if (obj.a_attr.hasOwnProperty(j)) {
                if (j === 'href' && obj.a_attr[j] === '#') continue;
                if (j !== 'class') node.childNodes[1].setAttribute(j, obj.a_attr[j]);
                else c += ' ' + obj.a_attr[j];
            }
            if (c.length) node.childNodes[1].className = 'jstree-anchor ' + c;
            if (obj.icon && obj.icon !== true || obj.icon === false) {
                if (obj.icon === false) node.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';
                else if (obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) node.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';
                else {
                    node.childNodes[1].childNodes[0].style.backgroundImage = 'url("' + obj.icon + '")';
                    node.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';
                    node.childNodes[1].childNodes[0].style.backgroundSize = 'auto';
                    node.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';
                }
            }
            if (this.settings.core.force_text) node.childNodes[1].appendChild(d.createTextNode(obj.text));
            else node.childNodes[1].innerHTML += obj.text;
            if (deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {
                k = d.createElement('UL');
                k.setAttribute('role', 'group');
                k.className = 'jstree-children';
                for(i = 0, j = obj.children.length; i < j; i++)k.appendChild(this.redraw_node(obj.children[i], deep, true));
                node.appendChild(k);
            }
            if (old) node.appendChild(old);
            if (!is_callback) {
                // append back using par / ind
                if (!par) par = this.element[0];
                for(i = 0, j = par.childNodes.length; i < j; i++)if (par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {
                    tmp = par.childNodes[i];
                    break;
                }
                if (!tmp) {
                    tmp = d.createElement('UL');
                    tmp.setAttribute('role', 'group');
                    tmp.className = 'jstree-children';
                    par.appendChild(tmp);
                }
                par = tmp;
                if (ind < par.childNodes.length) par.insertBefore(node, par.childNodes[ind]);
                else par.appendChild(node);
                if (f) {
                    t = this.element[0].scrollTop;
                    l = this.element[0].scrollLeft;
                    node.childNodes[1].focus();
                    this.element[0].scrollTop = t;
                    this.element[0].scrollLeft = l;
                }
            }
            if (obj.state.opened && !obj.state.loaded) {
                obj.state.opened = false;
                setTimeout($1.proxy(function() {
                    this.open_node(obj.id, false, 0);
                }, this), 0);
            }
            return node;
        },
        /**
		 * opens a node, revealing its children. If the node is not loaded it will be loaded and opened once ready.
		 * @name open_node(obj [, callback, animation])
		 * @param {mixed} obj the node to open
		 * @param {Function} callback a function to execute once the node is opened
		 * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.
		 * @trigger open_node.jstree, after_open.jstree, before_open.jstree
		 */ open_node: function open_node(obj, callback, animation) {
            var t1, t2, d, t;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.open_node(obj[t1], callback, animation);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            animation = animation === undefined1 ? this.settings.core.animation : animation;
            if (!this.is_closed(obj)) {
                if (callback) callback.call(this, obj, false);
                return false;
            }
            if (!this.is_loaded(obj)) {
                if (this.is_loading(obj)) return setTimeout($1.proxy(function() {
                    this.open_node(obj, callback, animation);
                }, this), 500);
                this.load_node(obj, function(o, ok) {
                    return ok ? this.open_node(o, callback, animation) : callback ? callback.call(this, o, false) : false;
                });
            } else {
                d = this.get_node(obj, true);
                t = this;
                if (d.length) {
                    if (animation && d.children(".jstree-children").length) d.children(".jstree-children").stop(true, true);
                    if (obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) this.draw_children(obj);
                    if (!animation) {
                        this.trigger('before_open', {
                            "node": obj
                        });
                        d[0].className = d[0].className.replace('jstree-closed', 'jstree-open');
                        d[0].childNodes[1].setAttribute("aria-expanded", true);
                    } else {
                        this.trigger('before_open', {
                            "node": obj
                        });
                        d.children(".jstree-children").css("display", "none").end().removeClass("jstree-closed").addClass("jstree-open").children('.jstree-anchor').attr("aria-expanded", true).end().children(".jstree-children").stop(true, true).slideDown(animation, function() {
                            this.style.display = "";
                            if (t.element) t.trigger("after_open", {
                                "node": obj
                            });
                        });
                    }
                }
                obj.state.opened = true;
                if (callback) callback.call(this, obj, true);
                if (!d.length) /**
					 * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)
					 * @event
					 * @name before_open.jstree
					 * @param {Object} node the opened node
					 */ this.trigger('before_open', {
                    "node": obj
                });
                /**
				 * triggered when a node is opened (if there is an animation it will not be completed yet)
				 * @event
				 * @name open_node.jstree
				 * @param {Object} node the opened node
				 */ this.trigger('open_node', {
                    "node": obj
                });
                if (!animation || !d.length) /**
					 * triggered when a node is opened and the animation is complete
					 * @event
					 * @name after_open.jstree
					 * @param {Object} node the opened node
					 */ this.trigger("after_open", {
                    "node": obj
                });
                return true;
            }
        },
        /**
		 * opens every parent of a node (node should be loaded)
		 * @name _open_to(obj)
		 * @param {mixed} obj the node to reveal
		 * @private
		 */ _open_to: function _open_to(obj) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            var i, j, p = obj.parents;
            for(i = 0, j = p.length; i < j; i += 1)if (i !== $1.jstree.root) this.open_node(p[i], false, 0);
            return $1('#' + obj.id.replace($1.jstree.idregex, '\\$&'), this.element);
        },
        /**
		 * closes a node, hiding its children
		 * @name close_node(obj [, animation])
		 * @param {mixed} obj the node to close
		 * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.
		 * @trigger close_node.jstree, after_close.jstree
		 */ close_node: function close_node(obj, animation) {
            var t1, t2, t, d;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.close_node(obj[t1], animation);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            if (this.is_closed(obj)) return false;
            animation = animation === undefined1 ? this.settings.core.animation : animation;
            t = this;
            d = this.get_node(obj, true);
            obj.state.opened = false;
            /**
			 * triggered when a node is closed (if there is an animation it will not be complete yet)
			 * @event
			 * @name close_node.jstree
			 * @param {Object} node the closed node
			 */ this.trigger('close_node', {
                "node": obj
            });
            if (!d.length) /**
				 * triggered when a node is closed and the animation is complete
				 * @event
				 * @name after_close.jstree
				 * @param {Object} node the closed node
				 */ this.trigger("after_close", {
                "node": obj
            });
            else if (!animation) {
                d[0].className = d[0].className.replace('jstree-open', 'jstree-closed');
                d.children('.jstree-anchor').attr("aria-expanded", false);
                d.children('.jstree-children').remove();
                this.trigger("after_close", {
                    "node": obj
                });
            } else d.children(".jstree-children").attr("style", "display:block !important").end().removeClass("jstree-open").addClass("jstree-closed").children('.jstree-anchor').attr("aria-expanded", false).end().children(".jstree-children").stop(true, true).slideUp(animation, function() {
                this.style.display = "";
                d.children('.jstree-children').remove();
                if (t.element) t.trigger("after_close", {
                    "node": obj
                });
            });
        },
        /**
		 * toggles a node - closing it if it is open, opening it if it is closed
		 * @name toggle_node(obj)
		 * @param {mixed} obj the node to toggle
		 */ toggle_node: function toggle_node(obj) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.toggle_node(obj[t1]);
                return true;
            }
            if (this.is_closed(obj)) return this.open_node(obj);
            if (this.is_open(obj)) return this.close_node(obj);
        },
        /**
		 * opens all nodes within a node (or the tree), revealing their children. If the node is not loaded it will be loaded and opened once ready.
		 * @name open_all([obj, animation, original_obj])
		 * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree
		 * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation
		 * @param {jQuery} reference to the node that started the process (internal use)
		 * @trigger open_all.jstree
		 */ open_all: function open_all(obj, animation, original_obj) {
            if (!obj) obj = $1.jstree.root;
            obj = this.get_node(obj);
            if (!obj) return false;
            var dom = obj.id === $1.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;
            if (!dom.length) {
                for(i = 0, j = obj.children_d.length; i < j; i++)if (this.is_closed(this._model.data[obj.children_d[i]])) this._model.data[obj.children_d[i]].state.opened = true;
                return this.trigger('open_all', {
                    "node": obj
                });
            }
            original_obj = original_obj || dom;
            _this = this;
            dom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');
            dom.each(function() {
                _this.open_node(this, function(node, status) {
                    if (status && this.is_parent(node)) this.open_all(node, animation, original_obj);
                }, animation || 0);
            });
            if (original_obj.find('.jstree-closed').length === 0) /**
				 * triggered when an `open_all` call completes
				 * @event
				 * @name open_all.jstree
				 * @param {Object} node the opened node
				 */ this.trigger('open_all', {
                "node": this.get_node(original_obj)
            });
        },
        /**
		 * closes all nodes within a node (or the tree), revealing their children
		 * @name close_all([obj, animation])
		 * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree
		 * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation
		 * @trigger close_all.jstree
		 */ close_all: function close_all(obj, animation) {
            if (!obj) obj = $1.jstree.root;
            obj = this.get_node(obj);
            if (!obj) return false;
            var dom = obj.id === $1.jstree.root ? this.get_container_ul() : this.get_node(obj, true), _this = this, i, j;
            if (dom.length) {
                dom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');
                $1(dom.get().reverse()).each(function() {
                    _this.close_node(this, animation || 0);
                });
            }
            for(i = 0, j = obj.children_d.length; i < j; i++)this._model.data[obj.children_d[i]].state.opened = false;
            /**
			 * triggered when an `close_all` call completes
			 * @event
			 * @name close_all.jstree
			 * @param {Object} node the closed node
			 */ this.trigger('close_all', {
                "node": obj
            });
        },
        /**
		 * checks if a node is disabled (not selectable)
		 * @name is_disabled(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ is_disabled: function is_disabled(obj) {
            obj = this.get_node(obj);
            return obj && obj.state && obj.state.disabled;
        },
        /**
		 * enables a node - so that it can be selected
		 * @name enable_node(obj)
		 * @param {mixed} obj the node to enable
		 * @trigger enable_node.jstree
		 */ enable_node: function enable_node(obj) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.enable_node(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            obj.state.disabled = false;
            this.get_node(obj, true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);
            /**
			 * triggered when an node is enabled
			 * @event
			 * @name enable_node.jstree
			 * @param {Object} node the enabled node
			 */ this.trigger('enable_node', {
                'node': obj
            });
        },
        /**
		 * disables a node - so that it can not be selected
		 * @name disable_node(obj)
		 * @param {mixed} obj the node to disable
		 * @trigger disable_node.jstree
		 */ disable_node: function disable_node(obj) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.disable_node(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            obj.state.disabled = true;
            this.get_node(obj, true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);
            /**
			 * triggered when an node is disabled
			 * @event
			 * @name disable_node.jstree
			 * @param {Object} node the disabled node
			 */ this.trigger('disable_node', {
                'node': obj
            });
        },
        /**
		 * determines if a node is hidden
		 * @name is_hidden(obj)
		 * @param {mixed} obj the node
		 */ is_hidden: function is_hidden(obj) {
            obj = this.get_node(obj);
            return obj.state.hidden === true;
        },
        /**
		 * hides a node - it is still in the structure but will not be visible
		 * @name hide_node(obj)
		 * @param {mixed} obj the node to hide
		 * @param {Boolean} skip_redraw internal parameter controlling if redraw is called
		 * @trigger hide_node.jstree
		 */ hide_node: function hide_node(obj, skip_redraw) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.hide_node(obj[t1], true);
                if (!skip_redraw) this.redraw();
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            if (!obj.state.hidden) {
                obj.state.hidden = true;
                this._node_changed(obj.parent);
                if (!skip_redraw) this.redraw();
                /**
				 * triggered when an node is hidden
				 * @event
				 * @name hide_node.jstree
				 * @param {Object} node the hidden node
				 */ this.trigger('hide_node', {
                    'node': obj
                });
            }
        },
        /**
		 * shows a node
		 * @name show_node(obj)
		 * @param {mixed} obj the node to show
		 * @param {Boolean} skip_redraw internal parameter controlling if redraw is called
		 * @trigger show_node.jstree
		 */ show_node: function show_node(obj, skip_redraw) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.show_node(obj[t1], true);
                if (!skip_redraw) this.redraw();
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            if (obj.state.hidden) {
                obj.state.hidden = false;
                this._node_changed(obj.parent);
                if (!skip_redraw) this.redraw();
                /**
				 * triggered when an node is shown
				 * @event
				 * @name show_node.jstree
				 * @param {Object} node the shown node
				 */ this.trigger('show_node', {
                    'node': obj
                });
            }
        },
        /**
		 * hides all nodes
		 * @name hide_all()
		 * @trigger hide_all.jstree
		 */ hide_all: function hide_all(skip_redraw) {
            var i, m = this._model.data, ids = [];
            for(i in m)if (m.hasOwnProperty(i) && i !== $1.jstree.root && !m[i].state.hidden) {
                m[i].state.hidden = true;
                ids.push(i);
            }
            this._model.force_full_redraw = true;
            if (!skip_redraw) this.redraw();
            /**
			 * triggered when all nodes are hidden
			 * @event
			 * @name hide_all.jstree
			 * @param {Array} nodes the IDs of all hidden nodes
			 */ this.trigger('hide_all', {
                'nodes': ids
            });
            return ids;
        },
        /**
		 * shows all nodes
		 * @name show_all()
		 * @trigger show_all.jstree
		 */ show_all: function show_all(skip_redraw) {
            var i, m = this._model.data, ids = [];
            for(i in m)if (m.hasOwnProperty(i) && i !== $1.jstree.root && m[i].state.hidden) {
                m[i].state.hidden = false;
                ids.push(i);
            }
            this._model.force_full_redraw = true;
            if (!skip_redraw) this.redraw();
            /**
			 * triggered when all nodes are shown
			 * @event
			 * @name show_all.jstree
			 * @param {Array} nodes the IDs of all shown nodes
			 */ this.trigger('show_all', {
                'nodes': ids
            });
            return ids;
        },
        /**
		 * called when a node is selected by the user. Used internally.
		 * @private
		 * @name activate_node(obj, e)
		 * @param {mixed} obj the node
		 * @param {Object} e the related event
		 * @trigger activate_node.jstree, changed.jstree
		 */ activate_node: function activate_node(obj, e) {
            if (this.is_disabled(obj)) return false;
            if (!e || typeof e !== 'object') e = {
            };
            // ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node
            this._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined1 ? this.get_node(this._data.core.last_clicked.id) : null;
            if (this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) this._data.core.last_clicked = null;
            if (!this._data.core.last_clicked && this._data.core.selected.length) this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]);
            if (!this.settings.core.multiple || !e.metaKey && !e.ctrlKey && !e.shiftKey || e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent)) {
                if (!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) this.deselect_node(obj, false, e);
                else {
                    this.deselect_all(true);
                    this.select_node(obj, false, false, e);
                    this._data.core.last_clicked = this.get_node(obj);
                }
            } else {
                if (e.shiftKey) {
                    var o = this.get_node(obj).id, l = this._data.core.last_clicked.id, p = this.get_node(this._data.core.last_clicked.parent).children, c = false, i, j;
                    for(i = 0, j = p.length; i < j; i += 1){
                        // separate IFs work whem o and l are the same
                        if (p[i] === o) c = !c;
                        if (p[i] === l) c = !c;
                        if (!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {
                            if (!this.is_hidden(p[i])) this.select_node(p[i], true, false, e);
                        } else this.deselect_node(p[i], true, e);
                    }
                    this.trigger('changed', {
                        'action': 'select_node',
                        'node': this.get_node(obj),
                        'selected': this._data.core.selected,
                        'event': e
                    });
                } else if (!this.is_selected(obj)) this.select_node(obj, false, false, e);
                else this.deselect_node(obj, false, e);
            }
            /**
			 * triggered when an node is clicked or intercated with by the user
			 * @event
			 * @name activate_node.jstree
			 * @param {Object} node
			 * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)
			 */ this.trigger('activate_node', {
                'node': this.get_node(obj),
                'event': e
            });
        },
        /**
		 * applies the hover state on a node, called when a node is hovered by the user. Used internally.
		 * @private
		 * @name hover_node(obj)
		 * @param {mixed} obj
		 * @trigger hover_node.jstree
		 */ hover_node: function hover_node(obj) {
            obj = this.get_node(obj, true);
            if (!obj || !obj.length || obj.children('.jstree-hovered').length) return false;
            var o = this.element.find('.jstree-hovered'), t = this.element;
            if (o && o.length) this.dehover_node(o);
            obj.children('.jstree-anchor').addClass('jstree-hovered');
            /**
			 * triggered when an node is hovered
			 * @event
			 * @name hover_node.jstree
			 * @param {Object} node
			 */ this.trigger('hover_node', {
                'node': this.get_node(obj)
            });
            setTimeout(function() {
                t.attr('aria-activedescendant', obj[0].id);
            }, 0);
        },
        /**
		 * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.
		 * @private
		 * @name dehover_node(obj)
		 * @param {mixed} obj
		 * @trigger dehover_node.jstree
		 */ dehover_node: function dehover_node(obj) {
            obj = this.get_node(obj, true);
            if (!obj || !obj.length || !obj.children('.jstree-hovered').length) return false;
            obj.children('.jstree-anchor').removeClass('jstree-hovered');
            /**
			 * triggered when an node is no longer hovered
			 * @event
			 * @name dehover_node.jstree
			 * @param {Object} node
			 */ this.trigger('dehover_node', {
                'node': this.get_node(obj)
            });
        },
        /**
		 * select a node
		 * @name select_node(obj [, supress_event, prevent_open])
		 * @param {mixed} obj an array can be used to select multiple nodes
		 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
		 * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened
		 * @trigger select_node.jstree, changed.jstree
		 */ select_node: function select_node(obj, supress_event, prevent_open, e) {
            var dom, t1, t2, th;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.select_node(obj[t1], supress_event, prevent_open, e);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (!obj.state.selected) {
                obj.state.selected = true;
                this._data.core.selected.push(obj.id);
                if (!prevent_open) dom = this._open_to(obj);
                if (dom && dom.length) dom.children('.jstree-anchor').addClass('jstree-clicked').attr('aria-selected', true);
                /**
				 * triggered when an node is selected
				 * @event
				 * @name select_node.jstree
				 * @param {Object} node
				 * @param {Array} selected the current selection
				 * @param {Object} event the event (if any) that triggered this select_node
				 */ this.trigger('select_node', {
                    'node': obj,
                    'selected': this._data.core.selected,
                    'event': e
                });
                if (!supress_event) /**
					 * triggered when selection changes
					 * @event
					 * @name changed.jstree
					 * @param {Object} node
					 * @param {Object} action the action that caused the selection to change
					 * @param {Array} selected the current selection
					 * @param {Object} event the event (if any) that triggered this changed event
					 */ this.trigger('changed', {
                    'action': 'select_node',
                    'node': obj,
                    'selected': this._data.core.selected,
                    'event': e
                });
            }
        },
        /**
		 * deselect a node
		 * @name deselect_node(obj [, supress_event])
		 * @param {mixed} obj an array can be used to deselect multiple nodes
		 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
		 * @trigger deselect_node.jstree, changed.jstree
		 */ deselect_node: function deselect_node(obj, supress_event, e) {
            var t1, t2, dom;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.deselect_node(obj[t1], supress_event, e);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (obj.state.selected) {
                obj.state.selected = false;
                this._data.core.selected = $1.vakata.array_remove_item(this._data.core.selected, obj.id);
                if (dom.length) dom.children('.jstree-anchor').removeClass('jstree-clicked').attr('aria-selected', false);
                /**
				 * triggered when an node is deselected
				 * @event
				 * @name deselect_node.jstree
				 * @param {Object} node
				 * @param {Array} selected the current selection
				 * @param {Object} event the event (if any) that triggered this deselect_node
				 */ this.trigger('deselect_node', {
                    'node': obj,
                    'selected': this._data.core.selected,
                    'event': e
                });
                if (!supress_event) this.trigger('changed', {
                    'action': 'deselect_node',
                    'node': obj,
                    'selected': this._data.core.selected,
                    'event': e
                });
            }
        },
        /**
		 * select all nodes in the tree
		 * @name select_all([supress_event])
		 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
		 * @trigger select_all.jstree, changed.jstree
		 */ select_all: function select_all(supress_event) {
            var tmp = this._data.core.selected.concat([]), i, j;
            this._data.core.selected = this._model.data[$1.jstree.root].children_d.concat();
            for(i = 0, j = this._data.core.selected.length; i < j; i++)if (this._model.data[this._data.core.selected[i]]) this._model.data[this._data.core.selected[i]].state.selected = true;
            this.redraw(true);
            /**
			 * triggered when all nodes are selected
			 * @event
			 * @name select_all.jstree
			 * @param {Array} selected the current selection
			 */ this.trigger('select_all', {
                'selected': this._data.core.selected
            });
            if (!supress_event) this.trigger('changed', {
                'action': 'select_all',
                'selected': this._data.core.selected,
                'old_selection': tmp
            });
        },
        /**
		 * deselect all selected nodes
		 * @name deselect_all([supress_event])
		 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
		 * @trigger deselect_all.jstree, changed.jstree
		 */ deselect_all: function deselect_all(supress_event) {
            var tmp = this._data.core.selected.concat([]), i, j;
            for(i = 0, j = this._data.core.selected.length; i < j; i++)if (this._model.data[this._data.core.selected[i]]) this._model.data[this._data.core.selected[i]].state.selected = false;
            this._data.core.selected = [];
            this.element.find('.jstree-clicked').removeClass('jstree-clicked').attr('aria-selected', false);
            /**
			 * triggered when all nodes are deselected
			 * @event
			 * @name deselect_all.jstree
			 * @param {Object} node the previous selection
			 * @param {Array} selected the current selection
			 */ this.trigger('deselect_all', {
                'selected': this._data.core.selected,
                'node': tmp
            });
            if (!supress_event) this.trigger('changed', {
                'action': 'deselect_all',
                'selected': this._data.core.selected,
                'old_selection': tmp
            });
        },
        /**
		 * checks if a node is selected
		 * @name is_selected(obj)
		 * @param  {mixed}  obj
		 * @return {Boolean}
		 */ is_selected: function is_selected(obj) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            return obj.state.selected;
        },
        /**
		 * get an array of all selected nodes
		 * @name get_selected([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 */ get_selected: function get_selected(full) {
            return full ? $1.map(this._data.core.selected, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : this._data.core.selected.slice();
        },
        /**
		 * get an array of all top level selected nodes (ignoring children of selected nodes)
		 * @name get_top_selected([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 */ get_top_selected: function get_top_selected(full) {
            var tmp = this.get_selected(true), obj = {
            }, i4, j, k, l;
            for(i4 = 0, j = tmp.length; i4 < j; i4++)obj[tmp[i4].id] = tmp[i4];
            for(i4 = 0, j = tmp.length; i4 < j; i4++){
                for(k = 0, l = tmp[i4].children_d.length; k < l; k++)if (obj[tmp[i4].children_d[k]]) delete obj[tmp[i4].children_d[k]];
            }
            tmp = [];
            for(i4 in obj)if (obj.hasOwnProperty(i4)) tmp.push(i4);
            return full ? $1.map(tmp, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : tmp;
        },
        /**
		 * get an array of all bottom level selected nodes (ignoring selected parents)
		 * @name get_bottom_selected([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 */ get_bottom_selected: function get_bottom_selected(full) {
            var tmp = this.get_selected(true), obj = [], i5, j;
            for(i5 = 0, j = tmp.length; i5 < j; i5++)if (!tmp[i5].children.length) obj.push(tmp[i5].id);
            return full ? $1.map(obj, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : obj;
        },
        /**
		 * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.
		 * @name get_state()
		 * @private
		 * @return {Object}
		 */ get_state: function get_state() {
            var state = {
                'core': {
                    'open': [],
                    'loaded': [],
                    'scroll': {
                        'left': this.element.scrollLeft(),
                        'top': this.element.scrollTop()
                    },
                    /*!
					'themes' : {
						'name' : this.get_theme(),
						'icons' : this._data.core.themes.icons,
						'dots' : this._data.core.themes.dots
					},
					*/ 'selected': []
                }
            }, i;
            for(i in this._model.data){
                if (this._model.data.hasOwnProperty(i)) {
                    if (i !== $1.jstree.root) {
                        if (this._model.data[i].state.loaded && this.settings.core.loaded_state) state.core.loaded.push(i);
                        if (this._model.data[i].state.opened) state.core.open.push(i);
                        if (this._model.data[i].state.selected) state.core.selected.push(i);
                    }
                }
            }
            return state;
        },
        /**
		 * sets the state of the tree. Used internally.
		 * @name set_state(state [, callback])
		 * @private
		 * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.
		 * @param {Function} callback an optional function to execute once the state is restored.
		 * @trigger set_state.jstree
		 */ set_state: function set_state(state, callback) {
            if (state) {
                if (state.core && state.core.selected && state.core.initial_selection === undefined1) state.core.initial_selection = this._data.core.selected.concat([]).sort().join(',');
                if (state.core) {
                    var res, n, t, _this, i;
                    if (state.core.loaded) {
                        if (!this.settings.core.loaded_state || !$1.isArray(state.core.loaded) || !state.core.loaded.length) {
                            delete state.core.loaded;
                            this.set_state(state, callback);
                        } else this._load_nodes(state.core.loaded, function(nodes) {
                            delete state.core.loaded;
                            this.set_state(state, callback);
                        });
                        return false;
                    }
                    if (state.core.open) {
                        if (!$1.isArray(state.core.open) || !state.core.open.length) {
                            delete state.core.open;
                            this.set_state(state, callback);
                        } else this._load_nodes(state.core.open, function(nodes) {
                            this.open_node(nodes, false, 0);
                            delete state.core.open;
                            this.set_state(state, callback);
                        });
                        return false;
                    }
                    if (state.core.scroll) {
                        if (state.core.scroll && state.core.scroll.left !== undefined1) this.element.scrollLeft(state.core.scroll.left);
                        if (state.core.scroll && state.core.scroll.top !== undefined1) this.element.scrollTop(state.core.scroll.top);
                        delete state.core.scroll;
                        this.set_state(state, callback);
                        return false;
                    }
                    if (state.core.selected) {
                        _this = this;
                        if (state.core.initial_selection === undefined1 || state.core.initial_selection === this._data.core.selected.concat([]).sort().join(',')) {
                            this.deselect_all();
                            $1.each(state.core.selected, function(i, v) {
                                _this.select_node(v, false, true);
                            });
                        }
                        delete state.core.initial_selection;
                        delete state.core.selected;
                        this.set_state(state, callback);
                        return false;
                    }
                    for(i in state)if (state.hasOwnProperty(i) && i !== "core" && $1.inArray(i, this.settings.plugins) === -1) delete state[i];
                    if ($1.isEmptyObject(state.core)) {
                        delete state.core;
                        this.set_state(state, callback);
                        return false;
                    }
                }
                if ($1.isEmptyObject(state)) {
                    state = null;
                    if (callback) callback.call(this);
                    /**
					 * triggered when a `set_state` call completes
					 * @event
					 * @name set_state.jstree
					 */ this.trigger('set_state');
                    return false;
                }
                return true;
            }
            return false;
        },
        /**
		 * refreshes the tree - all nodes are reloaded with calls to `load_node`.
		 * @name refresh()
		 * @param {Boolean} skip_loading an option to skip showing the loading indicator
		 * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state
		 * @trigger refresh.jstree
		 */ refresh: function refresh(skip_loading, forget_state) {
            this._data.core.state = forget_state === true ? {
            } : this.get_state();
            if (forget_state && $1.isFunction(forget_state)) this._data.core.state = forget_state.call(this, this._data.core.state);
            this._cnt = 0;
            this._model.data = {
            };
            this._model.data[$1.jstree.root] = {
                id: $1.jstree.root,
                parent: null,
                parents: [],
                children: [],
                children_d: [],
                state: {
                    loaded: false
                }
            };
            this._data.core.selected = [];
            this._data.core.last_clicked = null;
            this._data.core.focused = null;
            var c = this.get_container_ul()[0].className;
            if (!skip_loading) {
                this.element.html("<ul class='" + c + "' role='group'><" + "li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none' id='j" + this._id + "_loading'><i class='jstree-icon jstree-ocl'></i><" + "a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
                this.element.attr('aria-activedescendant', 'j' + this._id + '_loading');
            }
            this.load_node($1.jstree.root, function(o, s) {
                if (s) {
                    this.get_container_ul()[0].className = c;
                    if (this._firstChild(this.get_container_ul()[0])) this.element.attr('aria-activedescendant', this._firstChild(this.get_container_ul()[0]).id);
                    this.set_state($1.extend(true, {
                    }, this._data.core.state), function() {
                        /**
						 * triggered when a `refresh` call completes
						 * @event
						 * @name refresh.jstree
						 */ this.trigger('refresh');
                    });
                }
                this._data.core.state = null;
            });
        },
        /**
		 * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.
		 * @name refresh_node(obj)
		 * @param  {mixed} obj the node
		 * @trigger refresh_node.jstree
		 */ refresh_node: function refresh_node(obj) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            var opened = [], to_load = [], s = this._data.core.selected.concat([]);
            to_load.push(obj.id);
            if (obj.state.opened === true) opened.push(obj.id);
            this.get_node(obj, true).find('.jstree-open').each(function() {
                to_load.push(this.id);
                opened.push(this.id);
            });
            this._load_nodes(to_load, $1.proxy(function(nodes) {
                this.open_node(opened, false, 0);
                this.select_node(s);
                /**
				 * triggered when a node is refreshed
				 * @event
				 * @name refresh_node.jstree
				 * @param {Object} node - the refreshed node
				 * @param {Array} nodes - an array of the IDs of the nodes that were reloaded
				 */ this.trigger('refresh_node', {
                    'node': obj,
                    'nodes': nodes
                });
            }, this), false, true);
        },
        /**
		 * set (change) the ID of a node
		 * @name set_id(obj, id)
		 * @param  {mixed} obj the node
		 * @param  {String} id the new ID
		 * @return {Boolean}
		 * @trigger set_id.jstree
		 */ set_id: function set_id(obj, id) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            var i, j, m = this._model.data, old = obj.id;
            id = id.toString();
            // update parents (replace current ID with new one in children and children_d)
            m[obj.parent].children[$1.inArray(obj.id, m[obj.parent].children)] = id;
            for(i = 0, j = obj.parents.length; i < j; i++)m[obj.parents[i]].children_d[$1.inArray(obj.id, m[obj.parents[i]].children_d)] = id;
            // update children (replace current ID with new one in parent and parents)
            for(i = 0, j = obj.children.length; i < j; i++)m[obj.children[i]].parent = id;
            for(i = 0, j = obj.children_d.length; i < j; i++)m[obj.children_d[i]].parents[$1.inArray(obj.id, m[obj.children_d[i]].parents)] = id;
            i = $1.inArray(obj.id, this._data.core.selected);
            if (i !== -1) this._data.core.selected[i] = id;
            // update model and obj itself (obj.id, this._model.data[KEY])
            i = this.get_node(obj.id, true);
            if (i) {
                i.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');
                if (this.element.attr('aria-activedescendant') === obj.id) this.element.attr('aria-activedescendant', id);
            }
            delete m[obj.id];
            obj.id = id;
            obj.li_attr.id = id;
            m[id] = obj;
            /**
			 * triggered when a node id value is changed
			 * @event
			 * @name set_id.jstree
			 * @param {Object} node
			 * @param {String} old the old id
			 */ this.trigger('set_id', {
                "node": obj,
                "new": obj.id,
                "old": old
            });
            return true;
        },
        /**
		 * get the text value of a node
		 * @name get_text(obj)
		 * @param  {mixed} obj the node
		 * @return {String}
		 */ get_text: function get_text(obj) {
            obj = this.get_node(obj);
            return !obj || obj.id === $1.jstree.root ? false : obj.text;
        },
        /**
		 * set the text value of a node. Used internally, please use `rename_node(obj, val)`.
		 * @private
		 * @name set_text(obj, val)
		 * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes
		 * @param  {String} val the new text value
		 * @return {Boolean}
		 * @trigger set_text.jstree
		 */ set_text: function set_text(obj, val) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.set_text(obj[t1], val);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            obj.text = val;
            if (this.get_node(obj, true).length) this.redraw_node(obj.id);
            /**
			 * triggered when a node text value is changed
			 * @event
			 * @name set_text.jstree
			 * @param {Object} obj
			 * @param {String} text the new value
			 */ this.trigger('set_text', {
                "obj": obj,
                "text": val
            });
            return true;
        },
        /**
		 * gets a JSON representation of a node (or the whole tree)
		 * @name get_json([obj, options])
		 * @param  {mixed} obj
		 * @param  {Object} options
		 * @param  {Boolean} options.no_state do not return state information
		 * @param  {Boolean} options.no_id do not return ID
		 * @param  {Boolean} options.no_children do not include children
		 * @param  {Boolean} options.no_data do not include node data
		 * @param  {Boolean} options.no_li_attr do not include LI attributes
		 * @param  {Boolean} options.no_a_attr do not include A attributes
		 * @param  {Boolean} options.flat return flat JSON instead of nested
		 * @return {Object}
		 */ get_json: function get_json(obj, options, flat) {
            obj = this.get_node(obj || $1.jstree.root);
            if (!obj) return false;
            if (options && options.flat && !flat) flat = [];
            var tmp = {
                'id': obj.id,
                'text': obj.text,
                'icon': this.get_icon(obj),
                'li_attr': $1.extend(true, {
                }, obj.li_attr),
                'a_attr': $1.extend(true, {
                }, obj.a_attr),
                'state': {
                },
                'data': options && options.no_data ? false : $1.extend(true, $1.isArray(obj.data) ? [] : {
                }, obj.data)
            }, i, j;
            if (options && options.flat) tmp.parent = obj.parent;
            else tmp.children = [];
            if (!options || !options.no_state) {
                for(i in obj.state)if (obj.state.hasOwnProperty(i)) tmp.state[i] = obj.state[i];
            } else delete tmp.state;
            if (options && options.no_li_attr) delete tmp.li_attr;
            if (options && options.no_a_attr) delete tmp.a_attr;
            if (options && options.no_id) {
                delete tmp.id;
                if (tmp.li_attr && tmp.li_attr.id) delete tmp.li_attr.id;
                if (tmp.a_attr && tmp.a_attr.id) delete tmp.a_attr.id;
            }
            if (options && options.flat && obj.id !== $1.jstree.root) flat.push(tmp);
            if (!options || !options.no_children) {
                for(i = 0, j = obj.children.length; i < j; i++)if (options && options.flat) this.get_json(obj.children[i], options, flat);
                else tmp.children.push(this.get_json(obj.children[i], options));
            }
            return options && options.flat ? flat : obj.id === $1.jstree.root ? tmp.children : tmp;
        },
        /**
		 * create a new node (do not confuse with load_node)
		 * @name create_node([par, node, pos, callback, is_loaded])
		 * @param  {mixed}   par       the parent node (to create a root node use either "#" (string) or `null`)
		 * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)
		 * @param  {mixed}   pos       the index at which to insert the node, "first" and "last" are also supported, default is "last"
		 * @param  {Function} callback a function to be called once the node is created
		 * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded
		 * @return {String}            the ID of the newly create node
		 * @trigger model.jstree, create_node.jstree
		 */ create_node: function create_node(par, node, pos, callback, is_loaded) {
            if (par === null) par = $1.jstree.root;
            par = this.get_node(par);
            if (!par) return false;
            pos = pos === undefined1 ? "last" : pos;
            if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) return this.load_node(par, function() {
                this.create_node(par, node, pos, callback, true);
            });
            if (!node) node = {
                "text": this.get_string('New node')
            };
            if (typeof node === "string") node = {
                "text": node
            };
            else node = $1.extend(true, {
            }, node);
            if (node.text === undefined1) node.text = this.get_string('New node');
            var tmp, dpc, i, j;
            if (par.id === $1.jstree.root) {
                if (pos === "before") pos = "first";
                if (pos === "after") pos = "last";
            }
            switch(pos){
                case "before":
                    tmp = this.get_node(par.parent);
                    pos = $1.inArray(par.id, tmp.children);
                    par = tmp;
                    break;
                case "after":
                    tmp = this.get_node(par.parent);
                    pos = $1.inArray(par.id, tmp.children) + 1;
                    par = tmp;
                    break;
                case "inside":
                case "first":
                    pos = 0;
                    break;
                case "last":
                    pos = par.children.length;
                    break;
                default:
                    if (!pos) pos = 0;
                    break;
            }
            if (pos > par.children.length) pos = par.children.length;
            if (!node.id) node.id = true;
            if (!this.check("create_node", node, par, pos)) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            if (node.id === true) delete node.id;
            node = this._parse_model_from_json(node, par.id, par.parents.concat());
            if (!node) return false;
            tmp = this.get_node(node);
            dpc = [];
            dpc.push(node);
            dpc = dpc.concat(tmp.children_d);
            this.trigger('model', {
                "nodes": dpc,
                "parent": par.id
            });
            par.children_d = par.children_d.concat(dpc);
            for(i = 0, j = par.parents.length; i < j; i++)this._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);
            node = tmp;
            tmp = [];
            for(i = 0, j = par.children.length; i < j; i++)tmp[i >= pos ? i + 1 : i] = par.children[i];
            tmp[pos] = node.id;
            par.children = tmp;
            this.redraw_node(par, true);
            /**
			 * triggered when a node is created
			 * @event
			 * @name create_node.jstree
			 * @param {Object} node
			 * @param {String} parent the parent's ID
			 * @param {Number} position the position of the new node among the parent's children
			 */ this.trigger('create_node', {
                "node": this.get_node(node),
                "parent": par.id,
                "position": pos
            });
            if (callback) callback.call(this, this.get_node(node));
            return node.id;
        },
        /**
		 * set the text value of a node
		 * @name rename_node(obj, val)
		 * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name
		 * @param  {String} val the new text value
		 * @return {Boolean}
		 * @trigger rename_node.jstree
		 */ rename_node: function rename_node(obj, val) {
            var t1, t2, old;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.rename_node(obj[t1], val);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            old = obj.text;
            if (!this.check("rename_node", obj, this.get_parent(obj), val)) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            this.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))
            /**
			 * triggered when a node is renamed
			 * @event
			 * @name rename_node.jstree
			 * @param {Object} node
			 * @param {String} text the new value
			 * @param {String} old the old value
			 */ this.trigger('rename_node', {
                "node": obj,
                "text": val,
                "old": old
            });
            return true;
        },
        /**
		 * remove a node
		 * @name delete_node(obj)
		 * @param  {mixed} obj the node, you can pass an array to delete multiple nodes
		 * @return {Boolean}
		 * @trigger delete_node.jstree, changed.jstree
		 */ delete_node: function delete_node(obj) {
            var t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.delete_node(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            par = this.get_node(obj.parent);
            pos = $1.inArray(obj.id, par.children);
            c = false;
            if (!this.check("delete_node", obj, par, pos)) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            if (pos !== -1) par.children = $1.vakata.array_remove(par.children, pos);
            tmp = obj.children_d.concat([]);
            tmp.push(obj.id);
            for(i = 0, j = obj.parents.length; i < j; i++)this._model.data[obj.parents[i]].children_d = $1.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function(v) {
                return $1.inArray(v, tmp) === -1;
            });
            for(k = 0, l = tmp.length; k < l; k++)if (this._model.data[tmp[k]].state.selected) {
                c = true;
                break;
            }
            if (c) this._data.core.selected = $1.vakata.array_filter(this._data.core.selected, function(v) {
                return $1.inArray(v, tmp) === -1;
            });
            /**
			 * triggered when a node is deleted
			 * @event
			 * @name delete_node.jstree
			 * @param {Object} node
			 * @param {String} parent the parent's ID
			 */ this.trigger('delete_node', {
                "node": obj,
                "parent": par.id
            });
            if (c) this.trigger('changed', {
                'action': 'delete_node',
                'node': obj,
                'selected': this._data.core.selected,
                'parent': par.id
            });
            for(k = 0, l = tmp.length; k < l; k++)delete this._model.data[tmp[k]];
            if ($1.inArray(this._data.core.focused, tmp) !== -1) {
                this._data.core.focused = null;
                top = this.element[0].scrollTop;
                lft = this.element[0].scrollLeft;
                if (par.id === $1.jstree.root) {
                    if (this._model.data[$1.jstree.root].children[0]) this.get_node(this._model.data[$1.jstree.root].children[0], true).children('.jstree-anchor').focus();
                } else this.get_node(par, true).children('.jstree-anchor').focus();
                this.element[0].scrollTop = top;
                this.element[0].scrollLeft = lft;
            }
            this.redraw_node(par, true);
            return true;
        },
        /**
		 * check if an operation is premitted on the tree. Used internally.
		 * @private
		 * @name check(chk, obj, par, pos)
		 * @param  {String} chk the operation to check, can be "create_node", "rename_node", "delete_node", "copy_node" or "move_node"
		 * @param  {mixed} obj the node
		 * @param  {mixed} par the parent
		 * @param  {mixed} pos the position to insert at, or if "rename_node" - the new name
		 * @param  {mixed} more some various additional information, for example if a "move_node" operations is triggered by DND this will be the hovered node
		 * @return {Boolean}
		 */ check: function check(chk, obj, par, pos, more) {
            obj = obj && obj.id ? obj : this.get_node(obj);
            par = par && par.id ? par : this.get_node(par);
            var tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj, chc = this.settings.core.check_callback;
            if (chk === "move_node" || chk === "copy_node") {
                if ((!more || !more.is_multi) && chk === "move_node" && $1.inArray(obj.id, par.children) === pos) {
                    this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'core',
                        'id': 'core_08',
                        'reason': 'Moving node to its current position',
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return false;
                }
                if ((!more || !more.is_multi) && (obj.id === par.id || chk === "move_node" && $1.inArray(obj.id, par.children) === pos || $1.inArray(par.id, obj.children_d) !== -1)) {
                    this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'core',
                        'id': 'core_01',
                        'reason': 'Moving parent inside child',
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return false;
                }
            }
            if (tmp && tmp.data) tmp = tmp.data;
            if (tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {
                if (tmp.functions[chk] === false) this._data.core.last_error = {
                    'error': 'check',
                    'plugin': 'core',
                    'id': 'core_02',
                    'reason': 'Node data prevents function: ' + chk,
                    'data': JSON.stringify({
                        'chk': chk,
                        'pos': pos,
                        'obj': obj && obj.id ? obj.id : false,
                        'par': par && par.id ? par.id : false
                    })
                };
                return tmp.functions[chk];
            }
            if (chc === false || $1.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false || chc && chc[chk] === false) {
                this._data.core.last_error = {
                    'error': 'check',
                    'plugin': 'core',
                    'id': 'core_03',
                    'reason': 'User config for core.check_callback prevents function: ' + chk,
                    'data': JSON.stringify({
                        'chk': chk,
                        'pos': pos,
                        'obj': obj && obj.id ? obj.id : false,
                        'par': par && par.id ? par.id : false
                    })
                };
                return false;
            }
            return true;
        },
        /**
		 * get the last error
		 * @name last_error()
		 * @return {Object}
		 */ last_error: function last_error() {
            return this._data.core.last_error;
        },
        /**
		 * move a node to a new parent
		 * @name move_node(obj, par [, pos, callback, is_loaded])
		 * @param  {mixed} obj the node to move, pass an array to move multiple nodes
		 * @param  {mixed} par the new parent
		 * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
		 * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
		 * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
		 * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
		 * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
		 * @trigger move_node.jstree
		 */ move_node: function move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin) {
            var t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;
            par = this.get_node(par);
            pos = pos === undefined1 ? 0 : pos;
            if (!par) return false;
            if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) return this.load_node(par, function() {
                this.move_node(obj, par, pos, callback, true, false, origin);
            });
            if ($1.isArray(obj)) {
                if (obj.length === 1) obj = obj[0];
                else {
                    //obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++)if (tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin)) {
                        par = tmp;
                        pos = "after";
                    }
                    this.redraw();
                    return true;
                }
            }
            obj = obj && obj.id ? obj : this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            old_par = (obj.parent || $1.jstree.root).toString();
            new_par = !pos.toString().match(/^(before|after)$/) || par.id === $1.jstree.root ? par : this.get_node(par.parent);
            old_ins = origin ? origin : this._model.data[obj.id] ? this : $1.jstree.reference(obj.id);
            is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;
            old_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $1.inArray(obj.id, old_ins._model.data[old_par].children) : -1;
            if (old_ins && old_ins._id) obj = old_ins._model.data[obj.id];
            if (is_multi) {
                if (tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin)) {
                    if (old_ins) old_ins.delete_node(obj);
                    return tmp;
                }
                return false;
            }
            //var m = this._model.data;
            if (par.id === $1.jstree.root) {
                if (pos === "before") pos = "first";
                if (pos === "after") pos = "last";
            }
            switch(pos){
                case "before":
                    pos = $1.inArray(par.id, new_par.children);
                    break;
                case "after":
                    pos = $1.inArray(par.id, new_par.children) + 1;
                    break;
                case "inside":
                case "first":
                    pos = 0;
                    break;
                case "last":
                    pos = new_par.children.length;
                    break;
                default:
                    if (!pos) pos = 0;
                    break;
            }
            if (pos > new_par.children.length) pos = new_par.children.length;
            if (!this.check("move_node", obj, new_par, pos, {
                'core': true,
                'origin': origin,
                'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,
                'is_foreign': !old_ins || !old_ins._id
            })) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            if (obj.parent === new_par.id) {
                dpc = new_par.children.concat();
                tmp = $1.inArray(obj.id, dpc);
                if (tmp !== -1) {
                    dpc = $1.vakata.array_remove(dpc, tmp);
                    if (pos > tmp) pos--;
                }
                tmp = [];
                for(i = 0, j = dpc.length; i < j; i++)tmp[i >= pos ? i + 1 : i] = dpc[i];
                tmp[pos] = obj.id;
                new_par.children = tmp;
                this._node_changed(new_par.id);
                this.redraw(new_par.id === $1.jstree.root);
            } else {
                // clean old parent and up
                tmp = obj.children_d.concat();
                tmp.push(obj.id);
                for(i = 0, j = obj.parents.length; i < j; i++){
                    dpc = [];
                    p = old_ins._model.data[obj.parents[i]].children_d;
                    for(k = 0, l = p.length; k < l; k++)if ($1.inArray(p[k], tmp) === -1) dpc.push(p[k]);
                    old_ins._model.data[obj.parents[i]].children_d = dpc;
                }
                old_ins._model.data[old_par].children = $1.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);
                // insert into new parent and up
                for(i = 0, j = new_par.parents.length; i < j; i++)this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);
                dpc = [];
                for(i = 0, j = new_par.children.length; i < j; i++)dpc[i >= pos ? i + 1 : i] = new_par.children[i];
                dpc[pos] = obj.id;
                new_par.children = dpc;
                new_par.children_d.push(obj.id);
                new_par.children_d = new_par.children_d.concat(obj.children_d);
                // update object
                obj.parent = new_par.id;
                tmp = new_par.parents.concat();
                tmp.unshift(new_par.id);
                p = obj.parents.length;
                obj.parents = tmp;
                // update object children
                tmp = tmp.concat();
                for(i = 0, j = obj.children_d.length; i < j; i++){
                    this._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0, p * -1);
                    Array.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);
                }
                if (old_par === $1.jstree.root || new_par.id === $1.jstree.root) this._model.force_full_redraw = true;
                if (!this._model.force_full_redraw) {
                    this._node_changed(old_par);
                    this._node_changed(new_par.id);
                }
                if (!skip_redraw) this.redraw();
            }
            if (callback) callback.call(this, obj, new_par, pos);
            /**
			 * triggered when a node is moved
			 * @event
			 * @name move_node.jstree
			 * @param {Object} node
			 * @param {String} parent the parent's ID
			 * @param {Number} position the position of the node among the parent's children
			 * @param {String} old_parent the old parent of the node
			 * @param {Number} old_position the old position of the node
			 * @param {Boolean} is_multi do the node and new parent belong to different instances
			 * @param {jsTree} old_instance the instance the node came from
			 * @param {jsTree} new_instance the instance of the new parent
			 */ this.trigger('move_node', {
                "node": obj,
                "parent": new_par.id,
                "position": pos,
                "old_parent": old_par,
                "old_position": old_pos,
                'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,
                'is_foreign': !old_ins || !old_ins._id,
                'old_instance': old_ins,
                'new_instance': this
            });
            return obj.id;
        },
        /**
		 * copy a node to a new parent
		 * @name copy_node(obj, par [, pos, callback, is_loaded])
		 * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes
		 * @param  {mixed} par the new parent
		 * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
		 * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
		 * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
		 * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
		 * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
		 * @trigger model.jstree copy_node.jstree
		 */ copy_node: function copy_node(obj, par, pos, callback, is_loaded, skip_redraw, origin) {
            var t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;
            par = this.get_node(par);
            pos = pos === undefined1 ? 0 : pos;
            if (!par) return false;
            if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) return this.load_node(par, function() {
                this.copy_node(obj, par, pos, callback, true, false, origin);
            });
            if ($1.isArray(obj)) {
                if (obj.length === 1) obj = obj[0];
                else {
                    //obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++)if (tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin)) {
                        par = tmp;
                        pos = "after";
                    }
                    this.redraw();
                    return true;
                }
            }
            obj = obj && obj.id ? obj : this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            old_par = (obj.parent || $1.jstree.root).toString();
            new_par = !pos.toString().match(/^(before|after)$/) || par.id === $1.jstree.root ? par : this.get_node(par.parent);
            old_ins = origin ? origin : this._model.data[obj.id] ? this : $1.jstree.reference(obj.id);
            is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;
            if (old_ins && old_ins._id) obj = old_ins._model.data[obj.id];
            if (par.id === $1.jstree.root) {
                if (pos === "before") pos = "first";
                if (pos === "after") pos = "last";
            }
            switch(pos){
                case "before":
                    pos = $1.inArray(par.id, new_par.children);
                    break;
                case "after":
                    pos = $1.inArray(par.id, new_par.children) + 1;
                    break;
                case "inside":
                case "first":
                    pos = 0;
                    break;
                case "last":
                    pos = new_par.children.length;
                    break;
                default:
                    if (!pos) pos = 0;
                    break;
            }
            if (pos > new_par.children.length) pos = new_par.children.length;
            if (!this.check("copy_node", obj, new_par, pos, {
                'core': true,
                'origin': origin,
                'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,
                'is_foreign': !old_ins || !old_ins._id
            })) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            node = old_ins ? old_ins.get_json(obj, {
                no_id: true,
                no_data: true,
                no_state: true
            }) : obj;
            if (!node) return false;
            if (node.id === true) delete node.id;
            node = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());
            if (!node) return false;
            tmp = this.get_node(node);
            if (obj && obj.state && obj.state.loaded === false) tmp.state.loaded = false;
            dpc = [];
            dpc.push(node);
            dpc = dpc.concat(tmp.children_d);
            this.trigger('model', {
                "nodes": dpc,
                "parent": new_par.id
            });
            // insert into new parent and up
            for(i = 0, j = new_par.parents.length; i < j; i++)this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);
            dpc = [];
            for(i = 0, j = new_par.children.length; i < j; i++)dpc[i >= pos ? i + 1 : i] = new_par.children[i];
            dpc[pos] = tmp.id;
            new_par.children = dpc;
            new_par.children_d.push(tmp.id);
            new_par.children_d = new_par.children_d.concat(tmp.children_d);
            if (new_par.id === $1.jstree.root) this._model.force_full_redraw = true;
            if (!this._model.force_full_redraw) this._node_changed(new_par.id);
            if (!skip_redraw) this.redraw(new_par.id === $1.jstree.root);
            if (callback) callback.call(this, tmp, new_par, pos);
            /**
			 * triggered when a node is copied
			 * @event
			 * @name copy_node.jstree
			 * @param {Object} node the copied node
			 * @param {Object} original the original node
			 * @param {String} parent the parent's ID
			 * @param {Number} position the position of the node among the parent's children
			 * @param {String} old_parent the old parent of the node
			 * @param {Number} old_position the position of the original node
			 * @param {Boolean} is_multi do the node and new parent belong to different instances
			 * @param {jsTree} old_instance the instance the node came from
			 * @param {jsTree} new_instance the instance of the new parent
			 */ this.trigger('copy_node', {
                "node": tmp,
                "original": obj,
                "parent": new_par.id,
                "position": pos,
                "old_parent": old_par,
                "old_position": old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $1.inArray(obj.id, old_ins._model.data[old_par].children) : -1,
                'is_multi': old_ins && old_ins._id && old_ins._id !== this._id,
                'is_foreign': !old_ins || !old_ins._id,
                'old_instance': old_ins,
                'new_instance': this
            });
            return tmp.id;
        },
        /**
		 * cut a node (a later call to `paste(obj)` would move the node)
		 * @name cut(obj)
		 * @param  {mixed} obj multiple objects can be passed using an array
		 * @trigger cut.jstree
		 */ cut: function cut(obj) {
            if (!obj) obj = this._data.core.selected.concat();
            if (!$1.isArray(obj)) obj = [
                obj
            ];
            if (!obj.length) return false;
            var tmp = [], o, t1, t2;
            for(t1 = 0, t2 = obj.length; t1 < t2; t1++){
                o = this.get_node(obj[t1]);
                if (o && o.id && o.id !== $1.jstree.root) tmp.push(o);
            }
            if (!tmp.length) return false;
            ccp_node = tmp;
            ccp_inst = this;
            ccp_mode = 'move_node';
            /**
			 * triggered when nodes are added to the buffer for moving
			 * @event
			 * @name cut.jstree
			 * @param {Array} node
			 */ this.trigger('cut', {
                "node": obj
            });
        },
        /**
		 * copy a node (a later call to `paste(obj)` would copy the node)
		 * @name copy(obj)
		 * @param  {mixed} obj multiple objects can be passed using an array
		 * @trigger copy.jstree
		 */ copy: function copy(obj) {
            if (!obj) obj = this._data.core.selected.concat();
            if (!$1.isArray(obj)) obj = [
                obj
            ];
            if (!obj.length) return false;
            var tmp = [], o, t1, t2;
            for(t1 = 0, t2 = obj.length; t1 < t2; t1++){
                o = this.get_node(obj[t1]);
                if (o && o.id && o.id !== $1.jstree.root) tmp.push(o);
            }
            if (!tmp.length) return false;
            ccp_node = tmp;
            ccp_inst = this;
            ccp_mode = 'copy_node';
            /**
			 * triggered when nodes are added to the buffer for copying
			 * @event
			 * @name copy.jstree
			 * @param {Array} node
			 */ this.trigger('copy', {
                "node": obj
            });
        },
        /**
		 * get the current buffer (any nodes that are waiting for a paste operation)
		 * @name get_buffer()
		 * @return {Object} an object consisting of `mode` ("copy_node" or "move_node"), `node` (an array of objects) and `inst` (the instance)
		 */ get_buffer: function get_buffer() {
            return {
                'mode': ccp_mode,
                'node': ccp_node,
                'inst': ccp_inst
            };
        },
        /**
		 * check if there is something in the buffer to paste
		 * @name can_paste()
		 * @return {Boolean}
		 */ can_paste: function can_paste() {
            return ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];
        },
        /**
		 * copy or move the previously cut or copied nodes to a new parent
		 * @name paste(obj [, pos])
		 * @param  {mixed} obj the new parent
		 * @param  {mixed} pos the position to insert at (besides integer, "first" and "last" are supported), defaults to integer `0`
		 * @trigger paste.jstree
		 */ paste: function paste(obj, pos) {
            obj = this.get_node(obj);
            if (!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) return false;
            if (this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) /**
				 * triggered when paste is invoked
				 * @event
				 * @name paste.jstree
				 * @param {String} parent the ID of the receiving node
				 * @param {Array} node the nodes in the buffer
				 * @param {String} mode the performed operation - "copy_node" or "move_node"
				 */ this.trigger('paste', {
                "parent": obj.id,
                "node": ccp_node,
                "mode": ccp_mode
            });
            ccp_node = false;
            ccp_mode = false;
            ccp_inst = false;
        },
        /**
		 * clear the buffer of previously copied or cut nodes
		 * @name clear_buffer()
		 * @trigger clear_buffer.jstree
		 */ clear_buffer: function clear_buffer() {
            ccp_node = false;
            ccp_mode = false;
            ccp_inst = false;
            /**
			 * triggered when the copy / cut buffer is cleared
			 * @event
			 * @name clear_buffer.jstree
			 */ this.trigger('clear_buffer');
        },
        /**
		 * put a node in edit mode (input field to rename the node)
		 * @name edit(obj [, default_text, callback])
		 * @param  {mixed} obj
		 * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)
		 * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise), a boolean indicating if the user cancelled the edit and the original unescaped value provided by the user. You can also access the node's title using .text
		 */ edit: function edit(obj, default_text, callback) {
            var rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;
            obj = this.get_node(obj);
            if (!obj) return false;
            if (!this.check("edit", obj, this.get_parent(obj))) {
                this.settings.core.error.call(this, this._data.core.last_error);
                return false;
            }
            tmp = obj;
            default_text = typeof default_text === 'string' ? default_text : obj.text;
            this.set_text(obj, "");
            obj = this._open_to(obj);
            tmp.text = default_text;
            rtl = this._data.core.rtl;
            w = this.element.width();
            this._data.core.focused = tmp.id;
            a = obj.children('.jstree-anchor').focus();
            s = $1('<span></span>');
            /*!
			oi = obj.children("i:visible"),
			ai = a.children("i:visible"),
			w1 = oi.width() * oi.length,
			w2 = ai.width() * ai.length,
			*/ t = default_text;
            h1 = $1("<div></div>", {
                css: {
                    "position": "absolute",
                    "top": "-200px",
                    "left": rtl ? "0px" : "-1000px",
                    "visibility": "hidden"
                }
            }).appendTo(document.body);
            h2 = $1("<input />", {
                "value": t,
                "class": "jstree-rename-input",
                // "size" : t.length,
                "css": {
                    "padding": "0",
                    "border": "1px solid silver",
                    "box-sizing": "border-box",
                    "display": "inline-block",
                    "height": this._data.core.li_height + "px",
                    "lineHeight": this._data.core.li_height + "px",
                    "width": "150px" // will be set a bit further down
                },
                "blur": $1.proxy(function(e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var i = s.children(".jstree-rename-input"), v = i.val(), f = this.settings.core.force_text, nv;
                    if (v === "") v = t;
                    h1.remove();
                    s.replaceWith(a);
                    s.remove();
                    t = f ? t : $1('<div></div>').append($1.parseHTML(t)).html();
                    obj = this.get_node(obj);
                    this.set_text(obj, t);
                    nv = !!this.rename_node(obj, f ? $1('<div></div>').text(v).text() : $1('<div></div>').append($1.parseHTML(v)).html());
                    if (!nv) this.set_text(obj, t); // move this up? and fix #483
                    this._data.core.focused = tmp.id;
                    setTimeout($1.proxy(function() {
                        var node = this.get_node(tmp.id, true);
                        if (node.length) {
                            this._data.core.focused = tmp.id;
                            node.children('.jstree-anchor').focus();
                        }
                    }, this), 0);
                    if (callback) callback.call(this, tmp, nv, cancel, v);
                    h2 = null;
                }, this),
                "keydown": function(e) {
                    var key = e.which;
                    if (key === 27) {
                        cancel = true;
                        this.value = t;
                    }
                    if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) e.stopImmediatePropagation();
                    if (key === 27 || key === 13) {
                        e.preventDefault();
                        this.blur();
                    }
                },
                "click": function(e) {
                    e.stopImmediatePropagation();
                },
                "mousedown": function(e) {
                    e.stopImmediatePropagation();
                },
                "keyup": function(e) {
                    h2.width(Math.min(h1.text("pW" + this.value).width(), w));
                },
                "keypress": function(e) {
                    if (e.which === 13) return false;
                }
            });
            fn = {
                fontFamily: a.css('fontFamily') || '',
                fontSize: a.css('fontSize') || '',
                fontWeight: a.css('fontWeight') || '',
                fontStyle: a.css('fontStyle') || '',
                fontStretch: a.css('fontStretch') || '',
                fontVariant: a.css('fontVariant') || '',
                letterSpacing: a.css('letterSpacing') || '',
                wordSpacing: a.css('wordSpacing') || ''
            };
            s.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);
            a.replaceWith(s);
            h1.css(fn);
            h2.css(fn).width(Math.min(h1.text("pW" + h2[0].value).width(), w))[0].select();
            $1(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function(e) {
                if (h2 && e.target !== h2) $1(h2).blur();
            });
        },
        /**
		 * changes the theme
		 * @name set_theme(theme_name [, theme_url])
		 * @param {String} theme_name the name of the new theme to apply
		 * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.
		 * @trigger set_theme.jstree
		 */ set_theme: function set_theme(theme_name, theme_url) {
            if (!theme_name) return false;
            if (theme_url === true) {
                var dir = this.settings.core.themes.dir;
                if (!dir) dir = $1.jstree.path + '/themes';
                theme_url = dir + '/' + theme_name + '/style.css';
            }
            if (theme_url && $1.inArray(theme_url, themes_loaded) === -1) {
                $1('head').append("<link rel=\"stylesheet\" href=\"" + theme_url + '" type="text/css" />');
                themes_loaded.push(theme_url);
            }
            if (this._data.core.themes.name) this.element.removeClass('jstree-' + this._data.core.themes.name);
            this._data.core.themes.name = theme_name;
            this.element.addClass('jstree-' + theme_name);
            this.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass']('jstree-' + theme_name + '-responsive');
            /**
			 * triggered when a theme is set
			 * @event
			 * @name set_theme.jstree
			 * @param {String} theme the new theme
			 */ this.trigger('set_theme', {
                'theme': theme_name
            });
        },
        /**
		 * gets the name of the currently applied theme name
		 * @name get_theme()
		 * @return {String}
		 */ get_theme: function get_theme() {
            return this._data.core.themes.name;
        },
        /**
		 * changes the theme variant (if the theme has variants)
		 * @name set_theme_variant(variant_name)
		 * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)
		 */ set_theme_variant: function set_theme_variant(variant_name) {
            if (this._data.core.themes.variant) this.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
            this._data.core.themes.variant = variant_name;
            if (variant_name) this.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
        },
        /**
		 * gets the name of the currently applied theme variant
		 * @name get_theme()
		 * @return {String}
		 */ get_theme_variant: function get_theme_variant() {
            return this._data.core.themes.variant;
        },
        /**
		 * shows a striped background on the container (if the theme supports it)
		 * @name show_stripes()
		 */ show_stripes: function show_stripes() {
            this._data.core.themes.stripes = true;
            this.get_container_ul().addClass("jstree-striped");
            /**
			 * triggered when stripes are shown
			 * @event
			 * @name show_stripes.jstree
			 */ this.trigger('show_stripes');
        },
        /**
		 * hides the striped background on the container
		 * @name hide_stripes()
		 */ hide_stripes: function hide_stripes() {
            this._data.core.themes.stripes = false;
            this.get_container_ul().removeClass("jstree-striped");
            /**
			 * triggered when stripes are hidden
			 * @event
			 * @name hide_stripes.jstree
			 */ this.trigger('hide_stripes');
        },
        /**
		 * toggles the striped background on the container
		 * @name toggle_stripes()
		 */ toggle_stripes: function toggle_stripes() {
            if (this._data.core.themes.stripes) this.hide_stripes();
            else this.show_stripes();
        },
        /**
		 * shows the connecting dots (if the theme supports it)
		 * @name show_dots()
		 */ show_dots: function show_dots() {
            this._data.core.themes.dots = true;
            this.get_container_ul().removeClass("jstree-no-dots");
            /**
			 * triggered when dots are shown
			 * @event
			 * @name show_dots.jstree
			 */ this.trigger('show_dots');
        },
        /**
		 * hides the connecting dots
		 * @name hide_dots()
		 */ hide_dots: function hide_dots() {
            this._data.core.themes.dots = false;
            this.get_container_ul().addClass("jstree-no-dots");
            /**
			 * triggered when dots are hidden
			 * @event
			 * @name hide_dots.jstree
			 */ this.trigger('hide_dots');
        },
        /**
		 * toggles the connecting dots
		 * @name toggle_dots()
		 */ toggle_dots: function toggle_dots() {
            if (this._data.core.themes.dots) this.hide_dots();
            else this.show_dots();
        },
        /**
		 * show the node icons
		 * @name show_icons()
		 */ show_icons: function show_icons() {
            this._data.core.themes.icons = true;
            this.get_container_ul().removeClass("jstree-no-icons");
            /**
			 * triggered when icons are shown
			 * @event
			 * @name show_icons.jstree
			 */ this.trigger('show_icons');
        },
        /**
		 * hide the node icons
		 * @name hide_icons()
		 */ hide_icons: function hide_icons() {
            this._data.core.themes.icons = false;
            this.get_container_ul().addClass("jstree-no-icons");
            /**
			 * triggered when icons are hidden
			 * @event
			 * @name hide_icons.jstree
			 */ this.trigger('hide_icons');
        },
        /**
		 * toggle the node icons
		 * @name toggle_icons()
		 */ toggle_icons: function toggle_icons() {
            if (this._data.core.themes.icons) this.hide_icons();
            else this.show_icons();
        },
        /**
		 * show the node ellipsis
		 * @name show_icons()
		 */ show_ellipsis: function show_ellipsis() {
            this._data.core.themes.ellipsis = true;
            this.get_container_ul().addClass("jstree-ellipsis");
            /**
			 * triggered when ellisis is shown
			 * @event
			 * @name show_ellipsis.jstree
			 */ this.trigger('show_ellipsis');
        },
        /**
		 * hide the node ellipsis
		 * @name hide_ellipsis()
		 */ hide_ellipsis: function hide_ellipsis() {
            this._data.core.themes.ellipsis = false;
            this.get_container_ul().removeClass("jstree-ellipsis");
            /**
			 * triggered when ellisis is hidden
			 * @event
			 * @name hide_ellipsis.jstree
			 */ this.trigger('hide_ellipsis');
        },
        /**
		 * toggle the node ellipsis
		 * @name toggle_icons()
		 */ toggle_ellipsis: function toggle_ellipsis() {
            if (this._data.core.themes.ellipsis) this.hide_ellipsis();
            else this.show_ellipsis();
        },
        /**
		 * set the node icon for a node
		 * @name set_icon(obj, icon)
		 * @param {mixed} obj
		 * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
		 */ set_icon: function set_icon(obj, icon) {
            var t1, t2, dom, old;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.set_icon(obj[t1], icon);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            old = obj.icon;
            obj.icon = icon === true || icon === null || icon === undefined1 || icon === '' ? true : icon;
            dom = this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon");
            if (icon === false) {
                dom.removeClass('jstree-themeicon-custom ' + old).css("background", "").removeAttr("rel");
                this.hide_icon(obj);
            } else if (icon === true || icon === null || icon === undefined1 || icon === '') {
                dom.removeClass('jstree-themeicon-custom ' + old).css("background", "").removeAttr("rel");
                if (old === false) this.show_icon(obj);
            } else if (icon.indexOf("/") === -1 && icon.indexOf(".") === -1) {
                dom.removeClass(old).css("background", "");
                dom.addClass(icon + ' jstree-themeicon-custom').attr("rel", icon);
                if (old === false) this.show_icon(obj);
            } else {
                dom.removeClass(old).css("background", "");
                dom.addClass('jstree-themeicon-custom').css("background", "url('" + icon + "') center center no-repeat").attr("rel", icon);
                if (old === false) this.show_icon(obj);
            }
            return true;
        },
        /**
		 * get the node icon for a node
		 * @name get_icon(obj)
		 * @param {mixed} obj
		 * @return {String}
		 */ get_icon: function get_icon(obj) {
            obj = this.get_node(obj);
            return !obj || obj.id === $1.jstree.root ? false : obj.icon;
        },
        /**
		 * hide the icon on an individual node
		 * @name hide_icon(obj)
		 * @param {mixed} obj
		 */ hide_icon: function hide_icon(obj) {
            var t1, t2;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.hide_icon(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj === $1.jstree.root) return false;
            obj.icon = false;
            this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon").addClass('jstree-themeicon-hidden');
            return true;
        },
        /**
		 * show the icon on an individual node
		 * @name show_icon(obj)
		 * @param {mixed} obj
		 */ show_icon: function show_icon(obj) {
            var t1, t2, dom;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.show_icon(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            obj.icon = dom.length ? dom.children(".jstree-anchor").children(".jstree-themeicon").attr('rel') : true;
            if (!obj.icon) obj.icon = true;
            dom.children(".jstree-anchor").children(".jstree-themeicon").removeClass('jstree-themeicon-hidden');
            return true;
        }
    };
    // helpers
    $1.vakata = {
    };
    // collect attributes
    $1.vakata.attributes = function(node, with_values) {
        node = $1(node)[0];
        var attr = with_values ? {
        } : [];
        if (node && node.attributes) $1.each(node.attributes, function(i, v) {
            if ($1.inArray(v.name.toLowerCase(), [
                'style',
                'contenteditable',
                'hasfocus',
                'tabindex'
            ]) !== -1) return;
            if (v.value !== null && $1.vakata.trim(v.value) !== '') {
                if (with_values) attr[v.name] = v.value;
                else attr.push(v.name);
            }
        });
        return attr;
    };
    $1.vakata.array_unique = function(array) {
        var a = [], i, j, l, o = {
        };
        for(i = 0, l = array.length; i < l; i++)if (o[array[i]] === undefined1) {
            a.push(array[i]);
            o[array[i]] = true;
        }
        return a;
    };
    // remove item from array
    $1.vakata.array_remove = function(array, from) {
        array.splice(from, 1);
        return array;
    //var rest = array.slice((to || from) + 1 || array.length);
    //array.length = from < 0 ? array.length + from : from;
    //array.push.apply(array, rest);
    //return array;
    };
    // remove item from array
    $1.vakata.array_remove_item = function(array, item) {
        var tmp = $1.inArray(item, array);
        return tmp !== -1 ? $1.vakata.array_remove(array, tmp) : array;
    };
    $1.vakata.array_filter = function(c, a, b, d, e) {
        if (c.filter) return c.filter(a, b);
        d = [];
        for(e in c)if (~~e + '' === e + '' && e >= 0 && a.call(b, c[e], +e, c)) d.push(c[e]);
        return d;
    };
    $1.vakata.trim = function(text) {
        return String.prototype.trim ? String.prototype.trim.call(text.toString()) : text.toString().replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
    /**
 * ### Changed plugin
 *
 * This plugin adds more information to the `changed.jstree` event. The new data is contained in the `changed` event data property, and contains a lists of `selected` and `deselected` nodes.
 */ $1.jstree.plugins.changed = function(options, parent) {
        var last = [];
        this.trigger = function(ev, data) {
            var i, j;
            if (!data) data = {
            };
            if (ev.replace('.jstree', '') === 'changed') {
                data.changed = {
                    selected: [],
                    deselected: []
                };
                var tmp = {
                };
                for(i = 0, j = last.length; i < j; i++)tmp[last[i]] = 1;
                for(i = 0, j = data.selected.length; i < j; i++)if (!tmp[data.selected[i]]) data.changed.selected.push(data.selected[i]);
                else tmp[data.selected[i]] = 2;
                for(i = 0, j = last.length; i < j; i++)if (tmp[last[i]] === 1) data.changed.deselected.push(last[i]);
                last = data.selected.slice();
            }
            /**
			 * triggered when selection changes (the "changed" plugin enhances the original event with more data)
			 * @event
			 * @name changed.jstree
			 * @param {Object} node
			 * @param {Object} action the action that caused the selection to change
			 * @param {Array} selected the current selection
			 * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event
			 * @param {Object} event the event (if any) that triggered this changed event
			 * @plugin changed
			 */ parent.trigger.call(this, ev, data);
        };
        this.refresh = function(skip_loading, forget_state) {
            last = [];
            return parent.refresh.apply(this, arguments);
        };
    };
    /**
 * ### Checkbox plugin
 *
 * This plugin renders checkbox icons in front of each node, making multiple selection much easier.
 * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.
 */ var _i = document.createElement('I');
    _i.className = 'jstree-icon jstree-checkbox';
    _i.setAttribute('role', 'presentation');
    /**
	 * stores all defaults for the checkbox plugin
	 * @name $.jstree.defaults.checkbox
	 * @plugin checkbox
	 */ $1.jstree.defaults.checkbox = {
        /**
		 * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.
		 * @name $.jstree.defaults.checkbox.visible
		 * @plugin checkbox
		 */ visible: true,
        /**
		 * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.
		 * @name $.jstree.defaults.checkbox.three_state
		 * @plugin checkbox
		 */ three_state: true,
        /**
		 * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.
		 * @name $.jstree.defaults.checkbox.whole_node
		 * @plugin checkbox
		 */ whole_node: true,
        /**
		 * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.
		 * @name $.jstree.defaults.checkbox.keep_selected_style
		 * @plugin checkbox
		 */ keep_selected_style: true,
        /**
		 * This setting controls how cascading and undetermined nodes are applied.
		 * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.
		 * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.
		 * @name $.jstree.defaults.checkbox.cascade
		 * @plugin checkbox
		 */ cascade: '',
        /**
		 * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.
		 * @name $.jstree.defaults.checkbox.tie_selection
		 * @plugin checkbox
		 */ tie_selection: true,
        /**
		 * This setting controls if cascading down affects disabled checkboxes
		 * @name $.jstree.defaults.checkbox.cascade_to_disabled
		 * @plugin checkbox
		 */ cascade_to_disabled: true,
        /**
		 * This setting controls if cascading down affects hidden checkboxes
		 * @name $.jstree.defaults.checkbox.cascade_to_hidden
		 * @plugin checkbox
		 */ cascade_to_hidden: true
    };
    $1.jstree.plugins.checkbox = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            this._data.checkbox.uto = false;
            this._data.checkbox.selected = [];
            if (this.settings.checkbox.three_state) this.settings.checkbox.cascade = 'up+down+undetermined';
            this.element.on("init.jstree", $1.proxy(function() {
                this._data.checkbox.visible = this.settings.checkbox.visible;
                if (!this.settings.checkbox.keep_selected_style) this.element.addClass('jstree-checkbox-no-clicked');
                if (this.settings.checkbox.tie_selection) this.element.addClass('jstree-checkbox-selection');
            }, this)).on("loading.jstree", $1.proxy(function() {
                this[this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes']();
            }, this));
            if (this.settings.checkbox.cascade.indexOf('undetermined') !== -1) this.element.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $1.proxy(function() {
                // only if undetermined is in setting
                if (this._data.checkbox.uto) clearTimeout(this._data.checkbox.uto);
                this._data.checkbox.uto = setTimeout($1.proxy(this._undetermined, this), 50);
            }, this));
            if (!this.settings.checkbox.tie_selection) this.element.on('model.jstree', $1.proxy(function(e, data) {
                var m = this._model.data, p = m[data.parent], dpc = data.nodes, i, j;
                for(i = 0, j = dpc.length; i < j; i++){
                    m[dpc[i]].state.checked = m[dpc[i]].state.checked || m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked;
                    if (m[dpc[i]].state.checked) this._data.checkbox.selected.push(dpc[i]);
                }
            }, this));
            if (this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) this.element.on('model.jstree', $1.proxy(function(e, data) {
                var m = this._model.data, p = m[data.parent], dpc = data.nodes, chd = [], c, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;
                if (s.indexOf('down') !== -1) {
                    // apply down
                    if (p.state[t ? 'selected' : 'checked']) {
                        for(i = 0, j = dpc.length; i < j; i++)m[dpc[i]].state[t ? 'selected' : 'checked'] = true;
                        this._data[t ? 'core' : 'checkbox'].selected = this._data[t ? 'core' : 'checkbox'].selected.concat(dpc);
                    } else {
                        for(i = 0, j = dpc.length; i < j; i++)if (m[dpc[i]].state[t ? 'selected' : 'checked']) {
                            for(k = 0, l = m[dpc[i]].children_d.length; k < l; k++)m[m[dpc[i]].children_d[k]].state[t ? 'selected' : 'checked'] = true;
                            this._data[t ? 'core' : 'checkbox'].selected = this._data[t ? 'core' : 'checkbox'].selected.concat(m[dpc[i]].children_d);
                        }
                    }
                }
                if (s.indexOf('up') !== -1) {
                    // apply up
                    for(i = 0, j = p.children_d.length; i < j; i++)if (!m[p.children_d[i]].children.length) chd.push(m[p.children_d[i]].parent);
                    chd = $1.vakata.array_unique(chd);
                    for(k = 0, l = chd.length; k < l; k++){
                        p = m[chd[k]];
                        while(p && p.id !== $1.jstree.root){
                            c = 0;
                            for(i = 0, j = p.children.length; i < j; i++)c += m[p.children[i]].state[t ? 'selected' : 'checked'];
                            if (c === j) {
                                p.state[t ? 'selected' : 'checked'] = true;
                                this._data[t ? 'core' : 'checkbox'].selected.push(p.id);
                                tmp = this.get_node(p, true);
                                if (tmp && tmp.length) tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                            } else break;
                            p = this.get_node(p.parent);
                        }
                    }
                }
                this._data[t ? 'core' : 'checkbox'].selected = $1.vakata.array_unique(this._data[t ? 'core' : 'checkbox'].selected);
            }, this)).on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $1.proxy(function(e, data) {
                var self = this, obj = data.node, m = this._model.data, par = this.get_node(obj.parent), i, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection, sel = {
                }, cur = this._data[t ? 'core' : 'checkbox'].selected;
                for(i = 0, j = cur.length; i < j; i++)sel[cur[i]] = true;
                // apply down
                if (s.indexOf('down') !== -1) {
                    //this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));
                    var selectedIds = this._cascade_new_checked_state(obj.id, true);
                    var temp = obj.children_d.concat(obj.id);
                    for(i = 0, j = temp.length; i < j; i++)if (selectedIds.indexOf(temp[i]) > -1) sel[temp[i]] = true;
                    else delete sel[temp[i]];
                }
                // apply up
                if (s.indexOf('up') !== -1) while(par && par.id !== $1.jstree.root){
                    c = 0;
                    for(i = 0, j = par.children.length; i < j; i++)c += m[par.children[i]].state[t ? 'selected' : 'checked'];
                    if (c === j) {
                        par.state[t ? 'selected' : 'checked'] = true;
                        sel[par.id] = true;
                        //this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);
                        tmp = this.get_node(par, true);
                        if (tmp && tmp.length) tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                    } else break;
                    par = this.get_node(par.parent);
                }
                cur = [];
                for(i in sel)if (sel.hasOwnProperty(i)) cur.push(i);
                this._data[t ? 'core' : 'checkbox'].selected = cur;
            }, this)).on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $1.proxy(function(e, data) {
                var obj = this.get_node($1.jstree.root), m = this._model.data, i, j, tmp;
                for(i = 0, j = obj.children_d.length; i < j; i++){
                    tmp = m[obj.children_d[i]];
                    if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) tmp.original.state.undetermined = false;
                }
            }, this)).on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $1.proxy(function(e, data) {
                var self = this, obj = data.node, dom = this.get_node(obj, true), i, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection, cur = this._data[t ? 'core' : 'checkbox'].selected, sel = {
                }, stillSelectedIds = [], allIds = obj.children_d.concat(obj.id);
                // apply down
                if (s.indexOf('down') !== -1) {
                    var selectedIds = this._cascade_new_checked_state(obj.id, false);
                    cur = $1.vakata.array_filter(cur, function(id) {
                        return allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;
                    });
                }
                // only apply up if cascade up is enabled and if this node is not selected
                // (if all child nodes are disabled and cascade_to_disabled === false then this node will till be selected).
                if (s.indexOf('up') !== -1 && cur.indexOf(obj.id) === -1) {
                    for(i = 0, j = obj.parents.length; i < j; i++){
                        tmp = this._model.data[obj.parents[i]];
                        tmp.state[t ? 'selected' : 'checked'] = false;
                        if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) tmp.original.state.undetermined = false;
                        tmp = this.get_node(obj.parents[i], true);
                        if (tmp && tmp.length) tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                    }
                    cur = $1.vakata.array_filter(cur, function(id) {
                        return obj.parents.indexOf(id) === -1;
                    });
                }
                this._data[t ? 'core' : 'checkbox'].selected = cur;
            }, this));
            if (this.settings.checkbox.cascade.indexOf('up') !== -1) this.element.on('delete_node.jstree', $1.proxy(function(e, data) {
                // apply up (whole handler)
                var p = this.get_node(data.parent), m = this._model.data, i, j, c, tmp, t = this.settings.checkbox.tie_selection;
                while(p && p.id !== $1.jstree.root && !p.state[t ? 'selected' : 'checked']){
                    c = 0;
                    for(i = 0, j = p.children.length; i < j; i++)c += m[p.children[i]].state[t ? 'selected' : 'checked'];
                    if (j > 0 && c === j) {
                        p.state[t ? 'selected' : 'checked'] = true;
                        this._data[t ? 'core' : 'checkbox'].selected.push(p.id);
                        tmp = this.get_node(p, true);
                        if (tmp && tmp.length) tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                    } else break;
                    p = this.get_node(p.parent);
                }
            }, this)).on('move_node.jstree', $1.proxy(function(e, data) {
                // apply up (whole handler)
                var is_multi = data.is_multi, old_par = data.old_parent, new_par = this.get_node(data.parent), m = this._model.data, p, c, i, j, tmp, t = this.settings.checkbox.tie_selection;
                if (!is_multi) {
                    p = this.get_node(old_par);
                    while(p && p.id !== $1.jstree.root && !p.state[t ? 'selected' : 'checked']){
                        c = 0;
                        for(i = 0, j = p.children.length; i < j; i++)c += m[p.children[i]].state[t ? 'selected' : 'checked'];
                        if (j > 0 && c === j) {
                            p.state[t ? 'selected' : 'checked'] = true;
                            this._data[t ? 'core' : 'checkbox'].selected.push(p.id);
                            tmp = this.get_node(p, true);
                            if (tmp && tmp.length) tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                        } else break;
                        p = this.get_node(p.parent);
                    }
                }
                p = new_par;
                while(p && p.id !== $1.jstree.root){
                    c = 0;
                    for(i = 0, j = p.children.length; i < j; i++)c += m[p.children[i]].state[t ? 'selected' : 'checked'];
                    if (c === j) {
                        if (!p.state[t ? 'selected' : 'checked']) {
                            p.state[t ? 'selected' : 'checked'] = true;
                            this._data[t ? 'core' : 'checkbox'].selected.push(p.id);
                            tmp = this.get_node(p, true);
                            if (tmp && tmp.length) tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                        }
                    } else {
                        if (p.state[t ? 'selected' : 'checked']) {
                            p.state[t ? 'selected' : 'checked'] = false;
                            this._data[t ? 'core' : 'checkbox'].selected = $1.vakata.array_remove_item(this._data[t ? 'core' : 'checkbox'].selected, p.id);
                            tmp = this.get_node(p, true);
                            if (tmp && tmp.length) tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                        } else break;
                    }
                    p = this.get_node(p.parent);
                }
            }, this));
        };
        /**
		 * get an array of all nodes whose state is "undetermined"
		 * @name get_undetermined([full])
		 * @param  {boolean} full: if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 * @plugin checkbox
		 */ this.get_undetermined = function(full) {
            if (this.settings.checkbox.cascade.indexOf('undetermined') === -1) return [];
            var i, j, k, l, o = {
            }, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[t ? 'core' : 'checkbox'].selected, p = [], tt = this, r = [];
            for(i = 0, j = s.length; i < j; i++){
                if (m[s[i]] && m[s[i]].parents) for(k = 0, l = m[s[i]].parents.length; k < l; k++){
                    if (o[m[s[i]].parents[k]] !== undefined1) break;
                    if (m[s[i]].parents[k] !== $1.jstree.root) {
                        o[m[s[i]].parents[k]] = true;
                        p.push(m[s[i]].parents[k]);
                    }
                }
            }
            // attempt for server side undetermined state
            this.element.find('.jstree-closed').not(':has(.jstree-children)').each(function() {
                var tmp = tt.get_node(this), tmp2;
                if (!tmp) return;
                if (!tmp.state.loaded) {
                    if (tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {
                        if (o[tmp.id] === undefined1 && tmp.id !== $1.jstree.root) {
                            o[tmp.id] = true;
                            p.push(tmp.id);
                        }
                        for(k = 0, l = tmp.parents.length; k < l; k++)if (o[tmp.parents[k]] === undefined1 && tmp.parents[k] !== $1.jstree.root) {
                            o[tmp.parents[k]] = true;
                            p.push(tmp.parents[k]);
                        }
                    }
                } else for(i = 0, j = tmp.children_d.length; i < j; i++){
                    tmp2 = m[tmp.children_d[i]];
                    if (!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {
                        if (o[tmp2.id] === undefined1 && tmp2.id !== $1.jstree.root) {
                            o[tmp2.id] = true;
                            p.push(tmp2.id);
                        }
                        for(k = 0, l = tmp2.parents.length; k < l; k++)if (o[tmp2.parents[k]] === undefined1 && tmp2.parents[k] !== $1.jstree.root) {
                            o[tmp2.parents[k]] = true;
                            p.push(tmp2.parents[k]);
                        }
                    }
                }
            });
            for(i = 0, j = p.length; i < j; i++)if (!m[p[i]].state[t ? 'selected' : 'checked']) r.push(full ? m[p[i]] : p[i]);
            return r;
        };
        /**
		 * set the undetermined state where and if necessary. Used internally.
		 * @private
		 * @name _undetermined()
		 * @plugin checkbox
		 */ this._undetermined = function() {
            if (this.element === null) return;
            var p = this.get_undetermined(false), i, j, s;
            this.element.find('.jstree-undetermined').removeClass('jstree-undetermined');
            for(i = 0, j = p.length; i < j; i++){
                s = this.get_node(p[i], true);
                if (s && s.length) s.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');
            }
        };
        this.redraw_node = function(obj, deep, is_callback, force_render) {
            obj = parent.redraw_node.apply(this, arguments);
            if (obj) {
                var i, j, tmp = null, icon = null;
                for(i = 0, j = obj.childNodes.length; i < j; i++)if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                    tmp = obj.childNodes[i];
                    break;
                }
                if (tmp) {
                    if (!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) tmp.className += ' jstree-checked';
                    icon = _i.cloneNode(false);
                    if (this._model.data[obj.id].state.checkbox_disabled) icon.className += ' jstree-checkbox-disabled';
                    tmp.insertBefore(icon, tmp.childNodes[0]);
                }
            }
            if (!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
                if (this._data.checkbox.uto) clearTimeout(this._data.checkbox.uto);
                this._data.checkbox.uto = setTimeout($1.proxy(this._undetermined, this), 50);
            }
            return obj;
        };
        /**
		 * show the node checkbox icons
		 * @name show_checkboxes()
		 * @plugin checkbox
		 */ this.show_checkboxes = function() {
            this._data.core.themes.checkboxes = true;
            this.get_container_ul().removeClass("jstree-no-checkboxes");
        };
        /**
		 * hide the node checkbox icons
		 * @name hide_checkboxes()
		 * @plugin checkbox
		 */ this.hide_checkboxes = function() {
            this._data.core.themes.checkboxes = false;
            this.get_container_ul().addClass("jstree-no-checkboxes");
        };
        /**
		 * toggle the node icons
		 * @name toggle_checkboxes()
		 * @plugin checkbox
		 */ this.toggle_checkboxes = function() {
            if (this._data.core.themes.checkboxes) this.hide_checkboxes();
            else this.show_checkboxes();
        };
        /**
		 * checks if a node is in an undetermined state
		 * @name is_undetermined(obj)
		 * @param  {mixed} obj
		 * @return {Boolean}
		 */ this.is_undetermined = function(obj) {
            obj = this.get_node(obj);
            var s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[t ? 'core' : 'checkbox'].selected, m = this._model.data;
            if (!obj || obj.state[t ? 'selected' : 'checked'] === true || s.indexOf('undetermined') === -1 || s.indexOf('down') === -1 && s.indexOf('up') === -1) return false;
            if (!obj.state.loaded && obj.original.state.undetermined === true) return true;
            for(i = 0, j = obj.children_d.length; i < j; i++){
                if ($1.inArray(obj.children_d[i], d) !== -1 || !m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined) return true;
            }
            return false;
        };
        /**
		 * disable a node's checkbox
		 * @name disable_checkbox(obj)
		 * @param {mixed} obj an array can be used too
		 * @trigger disable_checkbox.jstree
		 * @plugin checkbox
		 */ this.disable_checkbox = function(obj) {
            var t1, t2, dom;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.disable_checkbox(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (!obj.state.checkbox_disabled) {
                obj.state.checkbox_disabled = true;
                if (dom && dom.length) dom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');
                /**
				 * triggered when an node's checkbox is disabled
				 * @event
				 * @name disable_checkbox.jstree
				 * @param {Object} node
				 * @plugin checkbox
				 */ this.trigger('disable_checkbox', {
                    'node': obj
                });
            }
        };
        /**
		 * enable a node's checkbox
		 * @name enable_checkbox(obj)
		 * @param {mixed} obj an array can be used too
		 * @trigger enable_checkbox.jstree
		 * @plugin checkbox
		 */ this.enable_checkbox = function(obj) {
            var t1, t2, dom;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.enable_checkbox(obj[t1]);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (obj.state.checkbox_disabled) {
                obj.state.checkbox_disabled = false;
                if (dom && dom.length) dom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');
                /**
				 * triggered when an node's checkbox is enabled
				 * @event
				 * @name enable_checkbox.jstree
				 * @param {Object} node
				 * @plugin checkbox
				 */ this.trigger('enable_checkbox', {
                    'node': obj
                });
            }
        };
        this.activate_node = function(obj, e) {
            if ($1(e.target).hasClass('jstree-checkbox-disabled')) return false;
            if (this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $1(e.target).hasClass('jstree-checkbox'))) e.ctrlKey = true;
            if (this.settings.checkbox.tie_selection || !this.settings.checkbox.whole_node && !$1(e.target).hasClass('jstree-checkbox')) return parent.activate_node.call(this, obj, e);
            if (this.is_disabled(obj)) return false;
            if (this.is_checked(obj)) this.uncheck_node(obj, e);
            else this.check_node(obj, e);
            this.trigger('activate_node', {
                'node': this.get_node(obj)
            });
        };
        /**
		 * Cascades checked state to a node and all its descendants. This function does NOT affect hidden and disabled nodes (or their descendants).
		 * However if these unaffected nodes are already selected their ids will be included in the returned array.
		 * @private
		 * @param {string} id the node ID
		 * @param {bool} checkedState should the nodes be checked or not
		 * @returns {Array} Array of all node id's (in this tree branch) that are checked.
		 */ this._cascade_new_checked_state = function(id, checkedState) {
            var self = this;
            var t = this.settings.checkbox.tie_selection;
            var node = this._model.data[id];
            var selectedNodeIds = [];
            var selectedChildrenIds = [], i, j, selectedChildIds;
            if ((this.settings.checkbox.cascade_to_disabled || !node.state.disabled) && (this.settings.checkbox.cascade_to_hidden || !node.state.hidden)) {
                //First try and check/uncheck the children
                if (node.children) for(i = 0, j = node.children.length; i < j; i++){
                    var childId = node.children[i];
                    selectedChildIds = self._cascade_new_checked_state(childId, checkedState);
                    selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
                    if (selectedChildIds.indexOf(childId) > -1) selectedChildrenIds.push(childId);
                }
                var dom = self.get_node(node, true);
                //A node's state is undetermined if some but not all of it's children are checked/selected .
                var undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;
                if (node.original && node.original.state && node.original.state.undetermined) node.original.state.undetermined = undetermined;
                //If a node is undetermined then remove selected class
                if (undetermined) {
                    node.state[t ? 'selected' : 'checked'] = false;
                    dom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                } else if (checkedState && selectedChildrenIds.length === node.children.length) {
                    node.state[t ? 'selected' : 'checked'] = checkedState;
                    selectedNodeIds.push(node.id);
                    dom.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
                } else {
                    node.state[t ? 'selected' : 'checked'] = false;
                    dom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                }
            } else {
                selectedChildIds = this.get_checked_descendants(id);
                if (node.state[t ? 'selected' : 'checked']) selectedChildIds.push(node.id);
                selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
            }
            return selectedNodeIds;
        };
        /**
		 * Gets ids of nodes selected in branch (of tree) specified by id (does not include the node specified by id)
		 * @name get_checked_descendants(obj)
		 * @param {string} id the node ID
		 * @return {Array} array of IDs
		 * @plugin checkbox
		 */ this.get_checked_descendants = function(id) {
            var self = this;
            var t = self.settings.checkbox.tie_selection;
            var node = self._model.data[id];
            return $1.vakata.array_filter(node.children_d, function(_id) {
                return self._model.data[_id].state[t ? 'selected' : 'checked'];
            });
        };
        /**
		 * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)
		 * @name check_node(obj)
		 * @param {mixed} obj an array can be used to check multiple nodes
		 * @trigger check_node.jstree
		 * @plugin checkbox
		 */ this.check_node = function(obj, e) {
            if (this.settings.checkbox.tie_selection) return this.select_node(obj, false, true, e);
            var dom, t1, t2, th;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.check_node(obj[t1], e);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (!obj.state.checked) {
                obj.state.checked = true;
                this._data.checkbox.selected.push(obj.id);
                if (dom && dom.length) dom.children('.jstree-anchor').addClass('jstree-checked');
                /**
				 * triggered when an node is checked (only if tie_selection in checkbox settings is false)
				 * @event
				 * @name check_node.jstree
				 * @param {Object} node
				 * @param {Array} selected the current selection
				 * @param {Object} event the event (if any) that triggered this check_node
				 * @plugin checkbox
				 */ this.trigger('check_node', {
                    'node': obj,
                    'selected': this._data.checkbox.selected,
                    'event': e
                });
            }
        };
        /**
		 * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)
		 * @name uncheck_node(obj)
		 * @param {mixed} obj an array can be used to uncheck multiple nodes
		 * @trigger uncheck_node.jstree
		 * @plugin checkbox
		 */ this.uncheck_node = function(obj, e) {
            if (this.settings.checkbox.tie_selection) return this.deselect_node(obj, false, e);
            var t1, t2, dom;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.uncheck_node(obj[t1], e);
                return true;
            }
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            dom = this.get_node(obj, true);
            if (obj.state.checked) {
                obj.state.checked = false;
                this._data.checkbox.selected = $1.vakata.array_remove_item(this._data.checkbox.selected, obj.id);
                if (dom.length) dom.children('.jstree-anchor').removeClass('jstree-checked');
                /**
				 * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)
				 * @event
				 * @name uncheck_node.jstree
				 * @param {Object} node
				 * @param {Array} selected the current selection
				 * @param {Object} event the event (if any) that triggered this uncheck_node
				 * @plugin checkbox
				 */ this.trigger('uncheck_node', {
                    'node': obj,
                    'selected': this._data.checkbox.selected,
                    'event': e
                });
            }
        };
        /**
		 * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)
		 * @name check_all()
		 * @trigger check_all.jstree, changed.jstree
		 * @plugin checkbox
		 */ this.check_all = function() {
            if (this.settings.checkbox.tie_selection) return this.select_all();
            var tmp = this._data.checkbox.selected.concat([]), i, j;
            this._data.checkbox.selected = this._model.data[$1.jstree.root].children_d.concat();
            for(i = 0, j = this._data.checkbox.selected.length; i < j; i++)if (this._model.data[this._data.checkbox.selected[i]]) this._model.data[this._data.checkbox.selected[i]].state.checked = true;
            this.redraw(true);
            /**
			 * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)
			 * @event
			 * @name check_all.jstree
			 * @param {Array} selected the current selection
			 * @plugin checkbox
			 */ this.trigger('check_all', {
                'selected': this._data.checkbox.selected
            });
        };
        /**
		 * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)
		 * @name uncheck_all()
		 * @trigger uncheck_all.jstree
		 * @plugin checkbox
		 */ this.uncheck_all = function() {
            if (this.settings.checkbox.tie_selection) return this.deselect_all();
            var tmp = this._data.checkbox.selected.concat([]), i, j;
            for(i = 0, j = this._data.checkbox.selected.length; i < j; i++)if (this._model.data[this._data.checkbox.selected[i]]) this._model.data[this._data.checkbox.selected[i]].state.checked = false;
            this._data.checkbox.selected = [];
            this.element.find('.jstree-checked').removeClass('jstree-checked');
            /**
			 * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)
			 * @event
			 * @name uncheck_all.jstree
			 * @param {Object} node the previous selection
			 * @param {Array} selected the current selection
			 * @plugin checkbox
			 */ this.trigger('uncheck_all', {
                'selected': this._data.checkbox.selected,
                'node': tmp
            });
        };
        /**
		 * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)
		 * @name is_checked(obj)
		 * @param  {mixed}  obj
		 * @return {Boolean}
		 * @plugin checkbox
		 */ this.is_checked = function(obj) {
            if (this.settings.checkbox.tie_selection) return this.is_selected(obj);
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            return obj.state.checked;
        };
        /**
		 * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)
		 * @name get_checked([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 * @plugin checkbox
		 */ this.get_checked = function(full) {
            if (this.settings.checkbox.tie_selection) return this.get_selected(full);
            return full ? $1.map(this._data.checkbox.selected, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : this._data.checkbox.selected.slice();
        };
        /**
		 * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)
		 * @name get_top_checked([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 * @plugin checkbox
		 */ this.get_top_checked = function(full) {
            if (this.settings.checkbox.tie_selection) return this.get_top_selected(full);
            var tmp = this.get_checked(true), obj = {
            }, i6, j, k, l;
            for(i6 = 0, j = tmp.length; i6 < j; i6++)obj[tmp[i6].id] = tmp[i6];
            for(i6 = 0, j = tmp.length; i6 < j; i6++){
                for(k = 0, l = tmp[i6].children_d.length; k < l; k++)if (obj[tmp[i6].children_d[k]]) delete obj[tmp[i6].children_d[k]];
            }
            tmp = [];
            for(i6 in obj)if (obj.hasOwnProperty(i6)) tmp.push(i6);
            return full ? $1.map(tmp, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : tmp;
        };
        /**
		 * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)
		 * @name get_bottom_checked([full])
		 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
		 * @return {Array}
		 * @plugin checkbox
		 */ this.get_bottom_checked = function(full) {
            if (this.settings.checkbox.tie_selection) return this.get_bottom_selected(full);
            var tmp = this.get_checked(true), obj = [], i7, j;
            for(i7 = 0, j = tmp.length; i7 < j; i7++)if (!tmp[i7].children.length) obj.push(tmp[i7].id);
            return full ? $1.map(obj, $1.proxy(function(i) {
                return this.get_node(i);
            }, this)) : obj;
        };
        this.load_node = function(obj, callback) {
            var k, l, i, j, c, tmp;
            if (!$1.isArray(obj) && !this.settings.checkbox.tie_selection) {
                tmp = this.get_node(obj);
                if (tmp && tmp.state.loaded) {
                    for(k = 0, l = tmp.children_d.length; k < l; k++)if (this._model.data[tmp.children_d[k]].state.checked) {
                        c = true;
                        this._data.checkbox.selected = $1.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);
                    }
                }
            }
            return parent.load_node.apply(this, arguments);
        };
        this.get_state = function() {
            var state = parent.get_state.apply(this, arguments);
            if (this.settings.checkbox.tie_selection) return state;
            state.checkbox = this._data.checkbox.selected.slice();
            return state;
        };
        this.set_state = function(state, callback) {
            var res = parent.set_state.apply(this, arguments);
            if (res && state.checkbox) {
                if (!this.settings.checkbox.tie_selection) {
                    this.uncheck_all();
                    var _this = this;
                    $1.each(state.checkbox, function(i, v) {
                        _this.check_node(v);
                    });
                }
                delete state.checkbox;
                this.set_state(state, callback);
                return false;
            }
            return res;
        };
        this.refresh = function(skip_loading, forget_state) {
            if (this.settings.checkbox.tie_selection) this._data.checkbox.selected = [];
            return parent.refresh.apply(this, arguments);
        };
    };
    // include the checkbox plugin by default
    // $.jstree.defaults.plugins.push("checkbox");
    /**
 * ### Conditionalselect plugin
 *
 * This plugin allows defining a callback to allow or deny node selection by user input (activate node method).
 */ /**
	 * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.
	 * @name $.jstree.defaults.checkbox.visible
	 * @plugin checkbox
	 */ $1.jstree.defaults.conditionalselect = function() {
        return true;
    };
    $1.jstree.plugins.conditionalselect = function(options, parent) {
        // own function
        this.activate_node = function(obj, e) {
            if (this.settings.conditionalselect.call(this, this.get_node(obj), e)) return parent.activate_node.call(this, obj, e);
        };
    };
    /**
 * ### Contextmenu plugin
 *
 * Shows a context menu when a node is right-clicked.
 */ /**
	 * stores all defaults for the contextmenu plugin
	 * @name $.jstree.defaults.contextmenu
	 * @plugin contextmenu
	 */ $1.jstree.defaults.contextmenu = {
        /**
		 * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.
		 * @name $.jstree.defaults.contextmenu.select_node
		 * @plugin contextmenu
		 */ select_node: true,
        /**
		 * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.
		 * @name $.jstree.defaults.contextmenu.show_at_node
		 * @plugin contextmenu
		 */ show_at_node: true,
        /**
		 * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).
		 *
		 * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.
		 *
		 * * `separator_before` - a boolean indicating if there should be a separator before this item
		 * * `separator_after` - a boolean indicating if there should be a separator after this item
		 * * `_disabled` - a boolean indicating if this action should be disabled
		 * * `label` - a string - the name of the action (could be a function returning a string)
		 * * `title` - a string - an optional tooltip for the item
		 * * `action` - a function to be executed if this item is chosen, the function will receive 
		 * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
		 * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)
		 * * `shortcut_label` - shortcut label (like for example `F2` for rename)
		 * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered
		 *
		 * @name $.jstree.defaults.contextmenu.items
		 * @plugin contextmenu
		 */ items: function items(o, cb) {
            return {
                "create": {
                    "separator_before": false,
                    "separator_after": true,
                    "_disabled": false,
                    "label": "Create",
                    "action": function(data) {
                        var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                        inst.create_node(obj, {
                        }, "last", function(new_node) {
                            try {
                                inst.edit(new_node);
                            } catch (ex) {
                                setTimeout(function() {
                                    inst.edit(new_node);
                                }, 0);
                            }
                        });
                    }
                },
                "rename": {
                    "separator_before": false,
                    "separator_after": false,
                    "_disabled": false,
                    "label": "Rename",
                    /*!
					"shortcut"			: 113,
					"shortcut_label"	: 'F2',
					"icon"				: "glyphicon glyphicon-leaf",
					*/ "action": function(data) {
                        var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                        inst.edit(obj);
                    }
                },
                "remove": {
                    "separator_before": false,
                    "icon": false,
                    "separator_after": false,
                    "_disabled": false,
                    "label": "Delete",
                    "action": function(data) {
                        var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                        if (inst.is_selected(obj)) inst.delete_node(inst.get_selected());
                        else inst.delete_node(obj);
                    }
                },
                "ccp": {
                    "separator_before": true,
                    "icon": false,
                    "separator_after": false,
                    "label": "Edit",
                    "action": false,
                    "submenu": {
                        "cut": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Cut",
                            "action": function(data) {
                                var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                                if (inst.is_selected(obj)) inst.cut(inst.get_top_selected());
                                else inst.cut(obj);
                            }
                        },
                        "copy": {
                            "separator_before": false,
                            "icon": false,
                            "separator_after": false,
                            "label": "Copy",
                            "action": function(data) {
                                var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                                if (inst.is_selected(obj)) inst.copy(inst.get_top_selected());
                                else inst.copy(obj);
                            }
                        },
                        "paste": {
                            "separator_before": false,
                            "icon": false,
                            "_disabled": function(data) {
                                return !$1.jstree.reference(data.reference).can_paste();
                            },
                            "separator_after": false,
                            "label": "Paste",
                            "action": function(data) {
                                var inst = $1.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                                inst.paste(obj);
                            }
                        }
                    }
                }
            };
        }
    };
    $1.jstree.plugins.contextmenu = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            var last_ts = 0, cto = null, ex, ey;
            this.element.on("init.jstree loading.jstree ready.jstree", $1.proxy(function() {
                this.get_container_ul().addClass('jstree-contextmenu');
            }, this)).on("contextmenu.jstree", ".jstree-anchor", $1.proxy(function(e, data) {
                if (e.target.tagName.toLowerCase() === 'input') return;
                e.preventDefault();
                last_ts = e.ctrlKey ? +new Date() : 0;
                if (data || cto) last_ts = +new Date() + 10000;
                if (cto) clearTimeout(cto);
                if (!this.is_loading(e.currentTarget)) this.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);
            }, this)).on("click.jstree", ".jstree-anchor", $1.proxy(function(e) {
                if (this._data.contextmenu.visible && (!last_ts || +new Date() - last_ts > 250)) $1.vakata.context.hide();
                last_ts = 0;
            }, this)).on("touchstart.jstree", ".jstree-anchor", function(e) {
                if (!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) return;
                ex = e.originalEvent.changedTouches[0].clientX;
                ey = e.originalEvent.changedTouches[0].clientY;
                cto = setTimeout(function() {
                    $1(e.currentTarget).trigger('contextmenu', true);
                }, 750);
            }).on('touchmove.vakata.jstree', function(e) {
                if (cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {
                    clearTimeout(cto);
                    $1.vakata.context.hide();
                }
            }).on('touchend.vakata.jstree', function(e) {
                if (cto) clearTimeout(cto);
            });
            /*!
			if(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {
				var el = null, tm = null;
				this.element
					.on("touchstart", ".jstree-anchor", function (e) {
						el = e.currentTarget;
						tm = +new Date();
						$(document).one("touchend", function (e) {
							e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);
							e.currentTarget = e.target;
							tm = ((+(new Date())) - tm);
							if(e.target === el && tm > 600 && tm < 1000) {
								e.preventDefault();
								$(el).trigger('contextmenu', e);
							}
							el = null;
							tm = null;
						});
					});
			}
			*/ $1(document).on("context_hide.vakata.jstree", $1.proxy(function(e, data) {
                this._data.contextmenu.visible = false;
                $1(data.reference).removeClass('jstree-context');
            }, this));
        };
        this.teardown = function() {
            if (this._data.contextmenu.visible) $1.vakata.context.hide();
            parent.teardown.call(this);
        };
        /**
		 * prepare and show the context menu for a node
		 * @name show_contextmenu(obj [, x, y])
		 * @param {mixed} obj the node
		 * @param {Number} x the x-coordinate relative to the document to show the menu at
		 * @param {Number} y the y-coordinate relative to the document to show the menu at
		 * @param {Object} e the event if available that triggered the contextmenu
		 * @plugin contextmenu
		 * @trigger show_contextmenu.jstree
		 */ this.show_contextmenu = function(obj, x, y, e) {
            obj = this.get_node(obj);
            if (!obj || obj.id === $1.jstree.root) return false;
            var s = this.settings.contextmenu, d = this.get_node(obj, true), a = d.children(".jstree-anchor"), o = false, i8 = false;
            if (s.show_at_node || x === undefined1 || y === undefined1) {
                o = a.offset();
                x = o.left;
                y = o.top + this._data.core.li_height;
            }
            if (this.settings.contextmenu.select_node && !this.is_selected(obj)) this.activate_node(obj, e);
            i8 = s.items;
            if ($1.isFunction(i8)) i8 = i8.call(this, obj, $1.proxy(function(i) {
                this._show_contextmenu(obj, x, y, i);
            }, this));
            if ($1.isPlainObject(i8)) this._show_contextmenu(obj, x, y, i8);
        };
        /**
		 * show the prepared context menu for a node
		 * @name _show_contextmenu(obj, x, y, i)
		 * @param {mixed} obj the node
		 * @param {Number} x the x-coordinate relative to the document to show the menu at
		 * @param {Number} y the y-coordinate relative to the document to show the menu at
		 * @param {Number} i the object of items to show
		 * @plugin contextmenu
		 * @trigger show_contextmenu.jstree
		 * @private
		 */ this._show_contextmenu = function(obj, x, y, i) {
            var d = this.get_node(obj, true), a = d.children(".jstree-anchor");
            $1(document).one("context_show.vakata.jstree", $1.proxy(function(e, data) {
                var cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';
                $1(data.element).addClass(cls);
                a.addClass('jstree-context');
            }, this));
            this._data.contextmenu.visible = true;
            $1.vakata.context.show(a, {
                'x': x,
                'y': y
            }, i);
            /**
			 * triggered when the contextmenu is shown for a node
			 * @event
			 * @name show_contextmenu.jstree
			 * @param {Object} node the node
			 * @param {Number} x the x-coordinate of the menu relative to the document
			 * @param {Number} y the y-coordinate of the menu relative to the document
			 * @plugin contextmenu
			 */ this.trigger('show_contextmenu', {
                "node": obj,
                "x": x,
                "y": y
            });
        };
    };
    (function($) {
        var right_to_left = false, vakata_context = {
            element: false,
            reference: false,
            position_x: 0,
            position_y: 0,
            items: [],
            html: "",
            is_visible: false
        };
        $.vakata.context = {
            settings: {
                hide_onmouseleave: 0,
                icons: true
            },
            _trigger: function _trigger(event_name) {
                $(document).triggerHandler("context_" + event_name + ".vakata", {
                    "reference": vakata_context.reference,
                    "element": vakata_context.element,
                    "position": {
                        "x": vakata_context.position_x,
                        "y": vakata_context.position_y
                    }
                });
            },
            _execute: function _execute(i) {
                i = vakata_context.items[i];
                return i && (!i._disabled || $.isFunction(i._disabled) && !i._disabled({
                    "item": i,
                    "reference": vakata_context.reference,
                    "element": vakata_context.element
                })) && i.action ? i.action.call(null, {
                    "item": i,
                    "reference": vakata_context.reference,
                    "element": vakata_context.element,
                    "position": {
                        "x": vakata_context.position_x,
                        "y": vakata_context.position_y
                    }
                }) : false;
            },
            _parse: function _parse(o, is_callback) {
                if (!o) return false;
                if (!is_callback) {
                    vakata_context.html = "";
                    vakata_context.items = [];
                }
                var str = "", sep = false, tmp;
                if (is_callback) str += "<ul>";
                $.each(o, function(i, val) {
                    if (!val) return true;
                    vakata_context.items.push(val);
                    if (!sep && val.separator_before) str += "<li class='vakata-context-separator'><a href='#' " + ($.vakata.context.settings.icons ? '' : 'style="margin-left:0px;"') + ">&#160;<" + "/a><" + "/li>";
                    sep = false;
                    str += "<li class='" + (val._class || "") + (val._disabled === true || $.isFunction(val._disabled) && val._disabled({
                        "item": val,
                        "reference": vakata_context.reference,
                        "element": vakata_context.element
                    }) ? " vakata-contextmenu-disabled " : "") + "' " + (val.shortcut ? " data-shortcut='" + val.shortcut + "' " : '') + ">";
                    str += "<a href='#' rel='" + (vakata_context.items.length - 1) + "' " + (val.title ? "title='" + val.title + "'" : "") + ">";
                    if ($.vakata.context.settings.icons) {
                        str += "<i ";
                        if (val.icon) {
                            if (val.icon.indexOf("/") !== -1 || val.icon.indexOf(".") !== -1) str += " style='background:url(\"" + val.icon + "\") center center no-repeat' ";
                            else str += " class='" + val.icon + "' ";
                        }
                        str += "></i><span class='vakata-contextmenu-sep'>&#160;</span>";
                    }
                    str += ($.isFunction(val.label) ? val.label({
                        "item": i,
                        "reference": vakata_context.reference,
                        "element": vakata_context.element
                    }) : val.label) + (val.shortcut ? ' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-' + val.shortcut + '">' + (val.shortcut_label || '') + '</span>' : '') + "<" + "/a>";
                    if (val.submenu) {
                        tmp = $.vakata.context._parse(val.submenu, true);
                        if (tmp) str += tmp;
                    }
                    str += "</li>";
                    if (val.separator_after) {
                        str += "<li class='vakata-context-separator'><a href='#' " + ($.vakata.context.settings.icons ? '' : 'style="margin-left:0px;"') + ">&#160;<" + "/a><" + "/li>";
                        sep = true;
                    }
                });
                str = str.replace(/<li class\='vakata-context-separator'\><\/li\>$/, "");
                if (is_callback) str += "</ul>";
                /**
				 * triggered on the document when the contextmenu is parsed (HTML is built)
				 * @event
				 * @plugin contextmenu
				 * @name context_parse.vakata
				 * @param {jQuery} reference the element that was right clicked
				 * @param {jQuery} element the DOM element of the menu itself
				 * @param {Object} position the x & y coordinates of the menu
				 */ if (!is_callback) {
                    vakata_context.html = str;
                    $.vakata.context._trigger("parse");
                }
                return str.length > 10 ? str : false;
            },
            _show_submenu: function _show_submenu(o) {
                o = $(o);
                if (!o.length || !o.children("ul").length) return;
                var e = o.children("ul"), xl = o.offset().left, x = xl + o.outerWidth(), y = o.offset().top, w = e.width(), h = e.height(), dw = $(window).width() + $(window).scrollLeft(), dh = $(window).height() + $(window).scrollTop();
                // може да се спести е една проверка - дали няма някой от класовете вече нагоре
                if (right_to_left) o[x - (w + 10 + o.outerWidth()) < 0 ? "addClass" : "removeClass"]("vakata-context-left");
                else o[x + w > dw && xl > dw - x ? "addClass" : "removeClass"]("vakata-context-right");
                if (y + h + 10 > dh) e.css("bottom", "-1px");
                //if does not fit - stick it to the side
                if (o.hasClass('vakata-context-right')) {
                    if (xl < w) e.css("margin-right", xl - w);
                } else if (dw - x < w) e.css("margin-left", dw - x - w);
                e.show();
            },
            show: function show(reference, position, data) {
                var o, e, x, y, w, h, dw, dh, cond = true;
                if (vakata_context.element && vakata_context.element.length) vakata_context.element.width('');
                switch(cond){
                    case !position && !reference:
                        return false;
                    case !!position && !!reference:
                        vakata_context.reference = reference;
                        vakata_context.position_x = position.x;
                        vakata_context.position_y = position.y;
                        break;
                    case !position && !!reference:
                        vakata_context.reference = reference;
                        o = reference.offset();
                        vakata_context.position_x = o.left + reference.outerHeight();
                        vakata_context.position_y = o.top;
                        break;
                    case !!position && !reference:
                        vakata_context.position_x = position.x;
                        vakata_context.position_y = position.y;
                        break;
                }
                if (!!reference && !data && $(reference).data('vakata_contextmenu')) data = $(reference).data('vakata_contextmenu');
                if ($.vakata.context._parse(data)) vakata_context.element.html(vakata_context.html);
                if (vakata_context.items.length) {
                    vakata_context.element.appendTo(document.body);
                    e = vakata_context.element;
                    x = vakata_context.position_x;
                    y = vakata_context.position_y;
                    w = e.width();
                    h = e.height();
                    dw = $(window).width() + $(window).scrollLeft();
                    dh = $(window).height() + $(window).scrollTop();
                    if (right_to_left) {
                        x -= e.outerWidth() - $(reference).outerWidth();
                        if (x < $(window).scrollLeft() + 20) x = $(window).scrollLeft() + 20;
                    }
                    if (x + w + 20 > dw) x = dw - (w + 20);
                    if (y + h + 20 > dh) y = dh - (h + 20);
                    vakata_context.element.css({
                        "left": x,
                        "top": y
                    }).show().find('a').first().focus().parent().addClass("vakata-context-hover");
                    vakata_context.is_visible = true;
                    /**
					 * triggered on the document when the contextmenu is shown
					 * @event
					 * @plugin contextmenu
					 * @name context_show.vakata
					 * @param {jQuery} reference the element that was right clicked
					 * @param {jQuery} element the DOM element of the menu itself
					 * @param {Object} position the x & y coordinates of the menu
					 */ $.vakata.context._trigger("show");
                }
            },
            hide: function hide() {
                if (vakata_context.is_visible) {
                    vakata_context.element.hide().find("ul").hide().end().find(':focus').blur().end().detach();
                    vakata_context.is_visible = false;
                    /**
					 * triggered on the document when the contextmenu is hidden
					 * @event
					 * @plugin contextmenu
					 * @name context_hide.vakata
					 * @param {jQuery} reference the element that was right clicked
					 * @param {jQuery} element the DOM element of the menu itself
					 * @param {Object} position the x & y coordinates of the menu
					 */ $.vakata.context._trigger("hide");
                }
            }
        };
        $(function() {
            right_to_left = $(document.body).css("direction") === "rtl";
            var to = false;
            vakata_context.element = $("<ul class='vakata-context'></ul>");
            vakata_context.element.on("mouseenter", "li", function(e) {
                e.stopImmediatePropagation();
                if ($.contains(this, e.relatedTarget)) // премахнато заради delegate mouseleave по-долу
                // $(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
                return;
                if (to) clearTimeout(to);
                vakata_context.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end();
                $(this).siblings().find("ul").hide().end().end().parentsUntil(".vakata-context", "li").addBack().addClass("vakata-context-hover");
                $.vakata.context._show_submenu(this);
            })// тестово - дали не натоварва?
            .on("mouseleave", "li", function(e) {
                if ($.contains(this, e.relatedTarget)) return;
                $(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover");
            }).on("mouseleave", function(e) {
                $(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
                if ($.vakata.context.settings.hide_onmouseleave) to = setTimeout(function(t) {
                    return function() {
                        $.vakata.context.hide();
                    };
                }(this), $.vakata.context.settings.hide_onmouseleave);
            }).on("click", "a", function(e) {
                e.preventDefault();
                //})
                //.on("mouseup", "a", function (e) {
                if (!$(this).blur().parent().hasClass("vakata-context-disabled") && $.vakata.context._execute($(this).attr("rel")) !== false) $.vakata.context.hide();
            }).on('keydown', 'a', function(e) {
                var o = null;
                switch(e.which){
                    case 13:
                    case 32:
                        e.type = "click";
                        e.preventDefault();
                        $(e.currentTarget).trigger(e);
                        break;
                    case 37:
                        if (vakata_context.is_visible) {
                            vakata_context.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children('a').focus();
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                        break;
                    case 38:
                        if (vakata_context.is_visible) {
                            o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first();
                            if (!o.length) o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last();
                            o.addClass("vakata-context-hover").children('a').focus();
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                        break;
                    case 39:
                        if (vakata_context.is_visible) {
                            vakata_context.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children('a').focus();
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                        break;
                    case 40:
                        if (vakata_context.is_visible) {
                            o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first();
                            if (!o.length) o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first();
                            o.addClass("vakata-context-hover").children('a').focus();
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                        break;
                    case 27:
                        $.vakata.context.hide();
                        e.preventDefault();
                        break;
                    default:
                        break;
                }
            }).on('keydown', function(e) {
                e.preventDefault();
                var a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();
                if (a.parent().not('.vakata-context-disabled')) a.click();
            });
            $(document).on("mousedown.vakata.jstree", function(e) {
                if (vakata_context.is_visible && vakata_context.element[0] !== e.target && !$.contains(vakata_context.element[0], e.target)) $.vakata.context.hide();
            }).on("context_show.vakata.jstree", function(e, data) {
                vakata_context.element.find("li:has(ul)").children("a").addClass("vakata-context-parent");
                if (right_to_left) vakata_context.element.addClass("vakata-context-rtl").css("direction", "rtl");
                // also apply a RTL class?
                vakata_context.element.find("ul").hide().end();
            });
        });
    })($1);
    // $.jstree.defaults.plugins.push("contextmenu");
    /**
 * ### Drag'n'drop plugin
 *
 * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.
 */ /**
	 * stores all defaults for the drag'n'drop plugin
	 * @name $.jstree.defaults.dnd
	 * @plugin dnd
	 */ $1.jstree.defaults.dnd = {
        /**
		 * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.
		 * @name $.jstree.defaults.dnd.copy
		 * @plugin dnd
		 */ copy: true,
        /**
		 * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.
		 * @name $.jstree.defaults.dnd.open_timeout
		 * @plugin dnd
		 */ open_timeout: 500,
        /**
		 * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging
		 * @name $.jstree.defaults.dnd.is_draggable
		 * @plugin dnd
		 */ is_draggable: true,
        /**
		 * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`
		 * @name $.jstree.defaults.dnd.check_while_dragging
		 * @plugin dnd
		 */ check_while_dragging: true,
        /**
		 * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`
		 * @name $.jstree.defaults.dnd.always_copy
		 * @plugin dnd
		 */ always_copy: false,
        /**
		 * when dropping a node "inside", this setting indicates the position the node should go to - it can be an integer or a string: "first" (same as 0) or "last", default is `0`
		 * @name $.jstree.defaults.dnd.inside_pos
		 * @plugin dnd
		 */ inside_pos: 0,
        /**
		 * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node
		 * @name $.jstree.defaults.dnd.drag_selection
		 * @plugin dnd
		 */ drag_selection: true,
        /**
		 * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string "selected" which means only selected nodes can be dragged on touch devices.
		 * @name $.jstree.defaults.dnd.touch
		 * @plugin dnd
		 */ touch: true,
        /**
		 * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.
		 * @name $.jstree.defaults.dnd.large_drop_target
		 * @plugin dnd
		 */ large_drop_target: false,
        /**
		 * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to "selected".
		 * @name $.jstree.defaults.dnd.large_drag_target
		 * @plugin dnd
		 */ large_drag_target: false,
        /**
		 * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.
		 * @reference http://caniuse.com/#feat=dragndrop
		 * @name $.jstree.defaults.dnd.use_html5
		 * @plugin dnd
		 */ use_html5: false
    };
    var drg, elm;
    // TODO: now check works by checking for each node individually, how about max_children, unique, etc?
    $1.jstree.plugins.dnd = function(options1, parent) {
        this.init = function(el, options) {
            parent.init.call(this, el, options);
            this.settings.dnd.use_html5 = this.settings.dnd.use_html5 && 'draggable' in document.createElement('span');
        };
        this.bind = function() {
            parent.bind.call(this);
            this.element.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $1.proxy(function(e) {
                if (this.settings.dnd.large_drag_target && $1(e.target).closest('.jstree-node')[0] !== e.currentTarget) return true;
                if (e.type === "touchstart" && (!this.settings.dnd.touch || this.settings.dnd.touch === 'selected' && !$1(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked'))) return true;
                var obj = this.get_node(e.target), mlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1, txt = mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget);
                if (this.settings.core.force_text) txt = $1.vakata.html.escape(txt);
                if (obj && obj.id && obj.id !== $1.jstree.root && (e.which === 1 || e.type === "touchstart" || e.type === "dragstart") && (this.settings.dnd.is_draggable === true || $1.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, mlt > 1 ? this.get_top_selected(true) : [
                    obj
                ], e))) {
                    drg = {
                        'jstree': true,
                        'origin': this,
                        'obj': this.get_node(obj, true),
                        'nodes': mlt > 1 ? this.get_top_selected() : [
                            obj.id
                        ]
                    };
                    elm = e.currentTarget;
                    if (this.settings.dnd.use_html5) $1.vakata.dnd._trigger('start', e, {
                        'helper': $1(),
                        'element': elm,
                        'data': drg
                    });
                    else {
                        this.element.trigger('mousedown.jstree');
                        return $1.vakata.dnd.start(e, drg, '<div id="jstree-dnd" class="jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + (this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '') + '"><i class="jstree-icon jstree-er"></i>' + txt + '<ins class="jstree-copy" style="display:none;">+</ins></div>');
                    }
                }
            }, this));
            if (this.settings.dnd.use_html5) this.element.on('dragover.jstree', function(e) {
                e.preventDefault();
                $1.vakata.dnd._trigger('move', e, {
                    'helper': $1(),
                    'element': elm,
                    'data': drg
                });
                return false;
            })//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {
            //		e.preventDefault();
            //		$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
            //		return false;
            //	}, this))
            .on('drop.jstree', $1.proxy(function(e) {
                e.preventDefault();
                $1.vakata.dnd._trigger('stop', e, {
                    'helper': $1(),
                    'element': elm,
                    'data': drg
                });
                return false;
            }, this));
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
            obj = parent.redraw_node.apply(this, arguments);
            if (obj && this.settings.dnd.use_html5) {
                if (this.settings.dnd.large_drag_target) obj.setAttribute('draggable', true);
                else {
                    var i, j, tmp = null;
                    for(i = 0, j = obj.childNodes.length; i < j; i++)if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                        tmp = obj.childNodes[i];
                        break;
                    }
                    if (tmp) tmp.setAttribute('draggable', true);
                }
            }
            return obj;
        };
    };
    $1(function() {
        // bind only once for all instances
        var lastmv = false, laster = false, lastev = false, opento = false, marker = $1('<div id="jstree-marker">&#160;</div>').hide(); //.appendTo('body');
        $1(document).on('dragover.vakata.jstree', function(e) {
            if (elm) $1.vakata.dnd._trigger('move', e, {
                'helper': $1(),
                'element': elm,
                'data': drg
            });
        }).on('drop.vakata.jstree', function(e) {
            if (elm) {
                $1.vakata.dnd._trigger('stop', e, {
                    'helper': $1(),
                    'element': elm,
                    'data': drg
                });
                elm = null;
                drg = null;
            }
        }).on('dnd_start.vakata.jstree', function(e, data) {
            lastmv = false;
            lastev = false;
            if (!data || !data.data || !data.data.jstree) return;
            marker.appendTo(document.body); //.show();
        }).on('dnd_move.vakata.jstree', function(e, data) {
            var isDifferentNode = data.event.target !== lastev.target;
            if (opento) {
                if (!data.event || data.event.type !== 'dragover' || isDifferentNode) clearTimeout(opento);
            }
            if (!data || !data.data || !data.data.jstree) return;
            // if we are hovering the marker image do nothing (can happen on "inside" drags)
            if (data.event.target.id && data.event.target.id === 'jstree-marker') return;
            lastev = data.event;
            var ins = $1.jstree.reference(data.event.target), ref = false, off = false, rel = false, tmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn, c;
            // if we are over an instance
            if (ins && ins._data && ins._data.dnd) {
                marker.attr('class', 'jstree-' + ins.get_theme() + (ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : ''));
                is_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey));
                data.helper.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + (ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '')).find('.jstree-copy').first()[is_copy ? 'show' : 'hide']();
                // if are hovering the container itself add a new root node
                //console.log(data.event);
                if ((data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {
                    ok = true;
                    for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++){
                        ok = ok && ins.check(data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? "copy_node" : "move_node", data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], $1.jstree.root, 'last', {
                            'dnd': true,
                            'ref': ins.get_node($1.jstree.root),
                            'pos': 'i',
                            'origin': data.data.origin,
                            'is_multi': data.data.origin && data.data.origin !== ins,
                            'is_foreign': !data.data.origin
                        });
                        if (!ok) break;
                    }
                    if (ok) {
                        lastmv = {
                            'ins': ins,
                            'par': $1.jstree.root,
                            'pos': 'last'
                        };
                        marker.hide();
                        data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
                        if (data.event.originalEvent && data.event.originalEvent.dataTransfer) data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
                        return;
                    }
                } else {
                    // if we are hovering a tree node
                    ref = ins.settings.dnd.large_drop_target ? $1(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $1(data.event.target).closest('.jstree-anchor');
                    if (ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {
                        off = ref.offset();
                        rel = (data.event.pageY !== undefined1 ? data.event.pageY : data.event.originalEvent.pageY) - off.top;
                        h = ref.outerHeight();
                        if (rel < h / 3) o = [
                            'b',
                            'i',
                            'a'
                        ];
                        else if (rel > h - h / 3) o = [
                            'a',
                            'i',
                            'b'
                        ];
                        else o = rel > h / 2 ? [
                            'i',
                            'a',
                            'b'
                        ] : [
                            'i',
                            'b',
                            'a'
                        ];
                        $1.each(o, function(j, v) {
                            switch(v){
                                case 'b':
                                    l = off.left - 6;
                                    t = off.top;
                                    p = ins.get_parent(ref);
                                    i = ref.parent().index();
                                    c = 'jstree-below';
                                    break;
                                case 'i':
                                    ip = ins.settings.dnd.inside_pos;
                                    tm = ins.get_node(ref.parent());
                                    l = off.left - 2;
                                    t = off.top + h / 2 + 1;
                                    p = tm.id;
                                    i = ip === 'first' ? 0 : ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length);
                                    c = 'jstree-inside';
                                    break;
                                case 'a':
                                    l = off.left - 6;
                                    t = off.top + h;
                                    p = ins.get_parent(ref);
                                    i = ref.parent().index() + 1;
                                    c = 'jstree-above';
                                    break;
                            }
                            ok = true;
                            for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++){
                                op = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? "copy_node" : "move_node";
                                ps = i;
                                if (op === "move_node" && v === 'a' && data.data.origin && data.data.origin === ins && p === ins.get_parent(data.data.nodes[t1])) {
                                    pr = ins.get_node(p);
                                    if (ps > $1.inArray(data.data.nodes[t1], pr.children)) ps -= 1;
                                }
                                ok = ok && (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false || ins.check(op, data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], p, ps, {
                                    'dnd': true,
                                    'ref': ins.get_node(ref.parent()),
                                    'pos': v,
                                    'origin': data.data.origin,
                                    'is_multi': data.data.origin && data.data.origin !== ins,
                                    'is_foreign': !data.data.origin
                                }));
                                if (!ok) {
                                    if (ins && ins.last_error) laster = ins.last_error();
                                    break;
                                }
                            }
                            if (v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {
                                if (!data.event || data.event.type !== 'dragover' || isDifferentNode) {
                                    if (opento) clearTimeout(opento);
                                    opento = setTimeout(function(x, z) {
                                        return function() {
                                            x.open_node(z);
                                        };
                                    }(ins, ref), ins.settings.dnd.open_timeout);
                                }
                            }
                            if (ok) {
                                pn = ins.get_node(p, true);
                                if (!pn.hasClass('.jstree-dnd-parent')) {
                                    $1('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
                                    pn.addClass('jstree-dnd-parent');
                                }
                                lastmv = {
                                    'ins': ins,
                                    'par': p,
                                    'pos': v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i
                                };
                                marker.css({
                                    'left': l + 'px',
                                    'top': t + 'px'
                                }).show();
                                marker.removeClass('jstree-above jstree-inside jstree-below').addClass(c);
                                data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
                                if (data.event.originalEvent && data.event.originalEvent.dataTransfer) data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
                                laster = {
                                };
                                o = true;
                                return false;
                            }
                        });
                        if (o === true) return;
                    }
                }
            }
            $1('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
            lastmv = false;
            data.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');
            data.event.originalEvent && data.event.originalEvent.dataTransfer;
            marker.hide();
        }).on('dnd_scroll.vakata.jstree', function(e, data) {
            if (!data || !data.data || !data.data.jstree) return;
            marker.hide();
            lastmv = false;
            lastev = false;
            data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
        }).on('dnd_stop.vakata.jstree', function(e, data) {
            $1('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
            if (opento) clearTimeout(opento);
            if (!data || !data.data || !data.data.jstree) return;
            marker.hide().detach();
            var i, j, nodes = [];
            if (lastmv) {
                for(i = 0, j = data.data.nodes.length; i < j; i++)nodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];
                lastmv.ins[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? 'copy_node' : 'move_node'](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);
            } else {
                i = $1(data.event.target).closest('.jstree');
                if (i.length && laster && laster.error && laster.error === 'check') {
                    i = i.jstree(true);
                    if (i) i.settings.core.error.call(this, laster);
                }
            }
            lastev = false;
            lastmv = false;
        }).on('keyup.jstree keydown.jstree', function(e, data) {
            data = $1.vakata.dnd._get();
            if (data && data.data && data.data.jstree) {
                if (e.type === "keyup" && e.which === 27) {
                    if (opento) clearTimeout(opento);
                    lastmv = false;
                    laster = false;
                    lastev = false;
                    opento = false;
                    marker.hide().detach();
                    $1.vakata.dnd._clean();
                } else {
                    data.helper.find('.jstree-copy').first()[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey)) ? 'show' : 'hide']();
                    if (lastev) {
                        lastev.metaKey = e.metaKey;
                        lastev.ctrlKey = e.ctrlKey;
                        $1.vakata.dnd._trigger('move', lastev);
                    }
                }
            }
        });
    });
    (function($) {
        $.vakata.html = {
            div: $('<div></div>'),
            escape: function escape(str) {
                return $.vakata.html.div.text(str).html();
            },
            strip: function strip(str) {
                return $.vakata.html.div.empty().append($.parseHTML(str)).text();
            }
        };
        // private variable
        var vakata_dnd = {
            element: false,
            target: false,
            is_down: false,
            is_drag: false,
            helper: false,
            helper_w: 0,
            data: false,
            init_x: 0,
            init_y: 0,
            scroll_l: 0,
            scroll_t: 0,
            scroll_e: false,
            scroll_i: false,
            is_touch: false
        };
        $.vakata.dnd = {
            settings: {
                scroll_speed: 10,
                scroll_proximity: 20,
                helper_left: 5,
                helper_top: 10,
                threshold: 5,
                threshold_touch: 10
            },
            _trigger: function _trigger(event_name, e, data) {
                if (data === undefined1) data = $.vakata.dnd._get();
                data.event = e;
                $(document).triggerHandler("dnd_" + event_name + ".vakata", data);
            },
            _get: function _get() {
                return {
                    "data": vakata_dnd.data,
                    "element": vakata_dnd.element,
                    "helper": vakata_dnd.helper
                };
            },
            _clean: function _clean() {
                if (vakata_dnd.helper) vakata_dnd.helper.remove();
                if (vakata_dnd.scroll_i) {
                    clearInterval(vakata_dnd.scroll_i);
                    vakata_dnd.scroll_i = false;
                }
                vakata_dnd = {
                    element: false,
                    target: false,
                    is_down: false,
                    is_drag: false,
                    helper: false,
                    helper_w: 0,
                    data: false,
                    init_x: 0,
                    init_y: 0,
                    scroll_l: 0,
                    scroll_t: 0,
                    scroll_e: false,
                    scroll_i: false,
                    is_touch: false
                };
                elm = null;
                $(document).off("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
                $(document).off("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
            },
            _scroll: function _scroll(init_only) {
                if (!vakata_dnd.scroll_e || !vakata_dnd.scroll_l && !vakata_dnd.scroll_t) {
                    if (vakata_dnd.scroll_i) {
                        clearInterval(vakata_dnd.scroll_i);
                        vakata_dnd.scroll_i = false;
                    }
                    return false;
                }
                if (!vakata_dnd.scroll_i) {
                    vakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);
                    return false;
                }
                if (init_only === true) return false;
                var i = vakata_dnd.scroll_e.scrollTop(), j = vakata_dnd.scroll_e.scrollLeft();
                vakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);
                vakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);
                if (i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) /**
					 * triggered on the document when a drag causes an element to scroll
					 * @event
					 * @plugin dnd
					 * @name dnd_scroll.vakata
					 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
					 * @param {DOM} element the DOM element being dragged
					 * @param {jQuery} helper the helper shown next to the mouse
					 * @param {jQuery} event the element that is scrolling
					 */ $.vakata.dnd._trigger("scroll", vakata_dnd.scroll_e);
            },
            start: function start(e, data, html) {
                if (e.type === "touchstart" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                    e.pageX = e.originalEvent.changedTouches[0].pageX;
                    e.pageY = e.originalEvent.changedTouches[0].pageY;
                    e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                }
                if (vakata_dnd.is_drag) $.vakata.dnd.stop({
                });
                try {
                    e.currentTarget.unselectable = "on";
                    e.currentTarget.onselectstart = function() {
                        return false;
                    };
                    if (e.currentTarget.style) {
                        e.currentTarget.style.touchAction = "none";
                        e.currentTarget.style.msTouchAction = "none";
                        e.currentTarget.style.MozUserSelect = "none";
                    }
                } catch (ignore) {
                }
                vakata_dnd.init_x = e.pageX;
                vakata_dnd.init_y = e.pageY;
                vakata_dnd.data = data;
                vakata_dnd.is_down = true;
                vakata_dnd.element = e.currentTarget;
                vakata_dnd.target = e.target;
                vakata_dnd.is_touch = e.type === "touchstart";
                if (html !== false) vakata_dnd.helper = $("<div id='vakata-dnd'></div>").html(html).css({
                    "display": "block",
                    "margin": "0",
                    "padding": "0",
                    "position": "absolute",
                    "top": "-2000px",
                    "lineHeight": "16px",
                    "zIndex": "10000"
                });
                $(document).on("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
                $(document).on("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
                return false;
            },
            drag: function drag(e) {
                if (e.type === "touchmove" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                    e.pageX = e.originalEvent.changedTouches[0].pageX;
                    e.pageY = e.originalEvent.changedTouches[0].pageY;
                    e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                }
                if (!vakata_dnd.is_down) return;
                if (!vakata_dnd.is_drag) {
                    if (Math.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) || Math.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)) {
                        if (vakata_dnd.helper) {
                            vakata_dnd.helper.appendTo(document.body);
                            vakata_dnd.helper_w = vakata_dnd.helper.outerWidth();
                        }
                        vakata_dnd.is_drag = true;
                        $(vakata_dnd.target).one('click.vakata', false);
                        /**
						 * triggered on the document when a drag starts
						 * @event
						 * @plugin dnd
						 * @name dnd_start.vakata
						 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
						 * @param {DOM} element the DOM element being dragged
						 * @param {jQuery} helper the helper shown next to the mouse
						 * @param {Object} event the event that caused the start (probably mousemove)
						 */ $.vakata.dnd._trigger("start", e);
                    } else return;
                }
                var d = false, w = false, dh = false, wh = false, dw = false, ww = false, dt = false, dl = false, ht = false, hl = false;
                vakata_dnd.scroll_t = 0;
                vakata_dnd.scroll_l = 0;
                vakata_dnd.scroll_e = false;
                $($(e.target).parentsUntil("body").addBack().get().reverse()).filter(function() {
                    return /^auto|scroll$/.test($(this).css("overflow")) && (this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);
                }).each(function() {
                    var t = $(this), o = t.offset();
                    if (this.scrollHeight > this.offsetHeight) {
                        if (o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_t = 1;
                        if (e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_t = -1;
                    }
                    if (this.scrollWidth > this.offsetWidth) {
                        if (o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_l = 1;
                        if (e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_l = -1;
                    }
                    if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
                        vakata_dnd.scroll_e = $(this);
                        return false;
                    }
                });
                if (!vakata_dnd.scroll_e) {
                    d = $(document);
                    w = $(window);
                    dh = d.height();
                    wh = w.height();
                    dw = d.width();
                    ww = w.width();
                    dt = d.scrollTop();
                    dl = d.scrollLeft();
                    if (dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_t = -1;
                    if (dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_t = 1;
                    if (dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_l = -1;
                    if (dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity) vakata_dnd.scroll_l = 1;
                    if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) vakata_dnd.scroll_e = d;
                }
                if (vakata_dnd.scroll_e) $.vakata.dnd._scroll(true);
                if (vakata_dnd.helper) {
                    ht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);
                    hl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);
                    if (dh && ht + 25 > dh) ht = dh - 50;
                    if (dw && hl + vakata_dnd.helper_w > dw) hl = dw - (vakata_dnd.helper_w + 2);
                    vakata_dnd.helper.css({
                        left: hl + "px",
                        top: ht + "px"
                    });
                }
                /**
				 * triggered on the document when a drag is in progress
				 * @event
				 * @plugin dnd
				 * @name dnd_move.vakata
				 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
				 * @param {DOM} element the DOM element being dragged
				 * @param {jQuery} helper the helper shown next to the mouse
				 * @param {Object} event the event that caused this to trigger (most likely mousemove)
				 */ $.vakata.dnd._trigger("move", e);
                return false;
            },
            stop: function stop(e) {
                if (e.type === "touchend" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                    e.pageX = e.originalEvent.changedTouches[0].pageX;
                    e.pageY = e.originalEvent.changedTouches[0].pageY;
                    e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                }
                if (vakata_dnd.is_drag) {
                    /**
					 * triggered on the document when a drag stops (the dragged element is dropped)
					 * @event
					 * @plugin dnd
					 * @name dnd_stop.vakata
					 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
					 * @param {DOM} element the DOM element being dragged
					 * @param {jQuery} helper the helper shown next to the mouse
					 * @param {Object} event the event that caused the stop
					 */ if (e.target !== vakata_dnd.target) $(vakata_dnd.target).off('click.vakata');
                    $.vakata.dnd._trigger("stop", e);
                } else if (e.type === "touchend" && e.target === vakata_dnd.target) {
                    var to = setTimeout(function() {
                        $(e.target).click();
                    }, 100);
                    $(e.target).one('click', function() {
                        if (to) clearTimeout(to);
                    });
                }
                $.vakata.dnd._clean();
                return false;
            }
        };
    })($1);
    // include the dnd plugin by default
    // $.jstree.defaults.plugins.push("dnd");
    /**
 * ### Massload plugin
 *
 * Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).
 */ /**
	 * massload configuration
	 *
	 * It is possible to set this to a standard jQuery-like AJAX config.
	 * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.
	 *
	 * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.
	 *
	 * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.
	 *
	 *	{
	 *		"id1" : [{ "text" : "Child of ID1", "id" : "c1" }, { "text" : "Another child of ID1", "id" : "c2" }],
	 *		"id2" : [{ "text" : "Child of ID2", "id" : "c3" }]
	 *	}
	 * 
	 * @name $.jstree.defaults.massload
	 * @plugin massload
	 */ $1.jstree.defaults.massload = null;
    $1.jstree.plugins.massload = function(options2, parent) {
        this.init = function(el, options) {
            this._data.massload = {
            };
            parent.init.call(this, el, options);
        };
        this._load_nodes = function(nodes, callback, is_callback, force_reload) {
            var s = this.settings.massload, toLoad = [], m = this._model.data, i9, j3, dom;
            if (!is_callback) {
                for(i9 = 0, j3 = nodes.length; i9 < j3; i9++)if (!m[nodes[i9]] || !m[nodes[i9]].state.loaded && !m[nodes[i9]].state.failed || force_reload) {
                    toLoad.push(nodes[i9]);
                    dom = this.get_node(nodes[i9], true);
                    if (dom && dom.length) dom.addClass("jstree-loading").attr('aria-busy', true);
                }
                this._data.massload = {
                };
                if (toLoad.length) {
                    if ($1.isFunction(s)) return s.call(this, toLoad, $1.proxy(function(data) {
                        var i, j;
                        if (data) {
                            for(i in data)if (data.hasOwnProperty(i)) this._data.massload[i] = data[i];
                        }
                        for(i = 0, j = nodes.length; i < j; i++){
                            dom = this.get_node(nodes[i], true);
                            if (dom && dom.length) dom.removeClass("jstree-loading").attr('aria-busy', false);
                        }
                        parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                    }, this));
                    if (typeof s === 'object' && s && s.url) {
                        s = $1.extend(true, {
                        }, s);
                        if ($1.isFunction(s.url)) s.url = s.url.call(this, toLoad);
                        if ($1.isFunction(s.data)) s.data = s.data.call(this, toLoad);
                        return $1.ajax(s).done($1.proxy(function(data, t, x) {
                            var i, j;
                            if (data) {
                                for(i in data)if (data.hasOwnProperty(i)) this._data.massload[i] = data[i];
                            }
                            for(i = 0, j = nodes.length; i < j; i++){
                                dom = this.get_node(nodes[i], true);
                                if (dom && dom.length) dom.removeClass("jstree-loading").attr('aria-busy', false);
                            }
                            parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                        }, this)).fail($1.proxy(function(f) {
                            parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                        }, this));
                    }
                }
            }
            return parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
        };
        this._load_node = function(obj, callback) {
            var data = this._data.massload[obj.id], rslt = null, dom;
            if (data) {
                rslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof data === 'string' ? $1($1.parseHTML(data)).filter(function() {
                    return this.nodeType !== 3;
                }) : data, function(status) {
                    callback.call(this, status);
                });
                dom = this.get_node(obj.id, true);
                if (dom && dom.length) dom.removeClass("jstree-loading").attr('aria-busy', false);
                delete this._data.massload[obj.id];
                return rslt;
            }
            return parent._load_node.call(this, obj, callback);
        };
    };
    /**
 * ### Search plugin
 *
 * Adds search functionality to jsTree.
 */ /**
	 * stores all defaults for the search plugin
	 * @name $.jstree.defaults.search
	 * @plugin search
	 */ $1.jstree.defaults.search = {
        /**
		 * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.
		 *
		 * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.
		 * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to
		 * @name $.jstree.defaults.search.ajax
		 * @plugin search
		 */ ajax: false,
        /**
		 * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.
		 * @name $.jstree.defaults.search.fuzzy
		 * @plugin search
		 */ fuzzy: false,
        /**
		 * Indicates if the search should be case sensitive. Default is `false`.
		 * @name $.jstree.defaults.search.case_sensitive
		 * @plugin search
		 */ case_sensitive: false,
        /**
		 * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).
		 * This setting can be changed at runtime when calling the search method. Default is `false`.
		 * @name $.jstree.defaults.search.show_only_matches
		 * @plugin search
		 */ show_only_matches: false,
        /**
		 * Indicates if the children of matched element are shown (when show_only_matches is true)
		 * This setting can be changed at runtime when calling the search method. Default is `false`.
		 * @name $.jstree.defaults.search.show_only_matches_children
		 * @plugin search
		 */ show_only_matches_children: false,
        /**
		 * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.
		 * @name $.jstree.defaults.search.close_opened_onclear
		 * @plugin search
		 */ close_opened_onclear: true,
        /**
		 * Indicates if only leaf nodes should be included in search results. Default is `false`.
		 * @name $.jstree.defaults.search.search_leaves_only
		 * @plugin search
		 */ search_leaves_only: false,
        /**
		 * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).
		 * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.
		 * @name $.jstree.defaults.search.search_callback
		 * @plugin search
		 */ search_callback: false
    };
    $1.jstree.plugins.search = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            this._data.search.str = "";
            this._data.search.dom = $1();
            this._data.search.res = [];
            this._data.search.opn = [];
            this._data.search.som = false;
            this._data.search.smc = false;
            this._data.search.hdn = [];
            this.element.on("search.jstree", $1.proxy(function(e, data) {
                if (this._data.search.som && data.res.length) {
                    var m = this._model.data, i, j, p = [], k, l;
                    for(i = 0, j = data.res.length; i < j; i++)if (m[data.res[i]] && !m[data.res[i]].state.hidden) {
                        p.push(data.res[i]);
                        p = p.concat(m[data.res[i]].parents);
                        if (this._data.search.smc) {
                            for(k = 0, l = m[data.res[i]].children_d.length; k < l; k++)if (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) p.push(m[data.res[i]].children_d[k]);
                        }
                    }
                    p = $1.vakata.array_remove_item($1.vakata.array_unique(p), $1.jstree.root);
                    this._data.search.hdn = this.hide_all(true);
                    this.show_node(p, true);
                    this.redraw(true);
                }
            }, this)).on("clear_search.jstree", $1.proxy(function(e, data) {
                if (this._data.search.som && data.res.length) {
                    this.show_node(this._data.search.hdn, true);
                    this.redraw(true);
                }
            }, this));
        };
        /**
		 * used to search the tree nodes for a given string
		 * @name search(str [, skip_async])
		 * @param {String} str the search string
		 * @param {Boolean} skip_async if set to true server will not be queried even if configured
		 * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)
		 * @param {mixed} inside an optional node to whose children to limit the search
		 * @param {Boolean} append if set to true the results of this search are appended to the previous search
		 * @plugin search
		 * @trigger search.jstree
		 */ this.search = function(str, skip_async, show_only_matches, inside, append, show_only_matches_children) {
            if (str === false || $1.vakata.trim(str.toString()) === "") return this.clear_search();
            inside = this.get_node(inside);
            inside = inside && inside.id ? inside.id : null;
            str = str.toString();
            var s = this.settings.search, a = s.ajax ? s.ajax : false, m = this._model.data, f = null, r = [], p = [], i10, j;
            if (this._data.search.res.length && !append) this.clear_search();
            if (show_only_matches === undefined1) show_only_matches = s.show_only_matches;
            if (show_only_matches_children === undefined1) show_only_matches_children = s.show_only_matches_children;
            if (!skip_async && a !== false) {
                if ($1.isFunction(a)) return a.call(this, str, $1.proxy(function(d) {
                    if (d && d.d) d = d.d;
                    this._load_nodes(!$1.isArray(d) ? [] : $1.vakata.array_unique(d), function() {
                        this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                    });
                }, this), inside);
                else {
                    a = $1.extend({
                    }, a);
                    if (!a.data) a.data = {
                    };
                    a.data.str = str;
                    if (inside) a.data.inside = inside;
                    if (this._data.search.lastRequest) this._data.search.lastRequest.abort();
                    this._data.search.lastRequest = $1.ajax(a).fail($1.proxy(function() {
                        this._data.core.last_error = {
                            'error': 'ajax',
                            'plugin': 'search',
                            'id': 'search_01',
                            'reason': 'Could not load search parents',
                            'data': JSON.stringify(a)
                        };
                        this.settings.core.error.call(this, this._data.core.last_error);
                    }, this)).done($1.proxy(function(d) {
                        if (d && d.d) d = d.d;
                        this._load_nodes(!$1.isArray(d) ? [] : $1.vakata.array_unique(d), function() {
                            this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                        });
                    }, this));
                    return this._data.search.lastRequest;
                }
            }
            if (!append) {
                this._data.search.str = str;
                this._data.search.dom = $1();
                this._data.search.res = [];
                this._data.search.opn = [];
                this._data.search.som = show_only_matches;
                this._data.search.smc = show_only_matches_children;
            }
            f = new $1.vakata.search(str, true, {
                caseSensitive: s.case_sensitive,
                fuzzy: s.fuzzy
            });
            $1.each(m[inside ? inside : $1.jstree.root].children_d, function(ii, i) {
                var v = m[i];
                if (v.text && !v.state.hidden && (!s.search_leaves_only || v.state.loaded && v.children.length === 0) && (s.search_callback && s.search_callback.call(this, str, v) || !s.search_callback && f.search(v.text).isMatch)) {
                    r.push(i);
                    p = p.concat(v.parents);
                }
            });
            if (r.length) {
                p = $1.vakata.array_unique(p);
                for(i10 = 0, j = p.length; i10 < j; i10++)if (p[i10] !== $1.jstree.root && m[p[i10]] && this.open_node(p[i10], null, 0) === true) this._data.search.opn.push(p[i10]);
                if (!append) {
                    this._data.search.dom = $1(this.element[0].querySelectorAll('#' + $1.map(r, function(v) {
                        return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($1.jstree.idregex, '\\$&') : v.replace($1.jstree.idregex, '\\$&');
                    }).join(', #')));
                    this._data.search.res = r;
                } else {
                    this._data.search.dom = this._data.search.dom.add($1(this.element[0].querySelectorAll('#' + $1.map(r, function(v) {
                        return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($1.jstree.idregex, '\\$&') : v.replace($1.jstree.idregex, '\\$&');
                    }).join(', #'))));
                    this._data.search.res = $1.vakata.array_unique(this._data.search.res.concat(r));
                }
                this._data.search.dom.children(".jstree-anchor").addClass('jstree-search');
            }
            /**
			 * triggered after search is complete
			 * @event
			 * @name search.jstree
			 * @param {jQuery} nodes a jQuery collection of matching nodes
			 * @param {String} str the search string
			 * @param {Array} res a collection of objects represeing the matching nodes
			 * @plugin search
			 */ this.trigger('search', {
                nodes: this._data.search.dom,
                str: str,
                res: this._data.search.res,
                show_only_matches: show_only_matches
            });
        };
        /**
		 * used to clear the last search (removes classes and shows all nodes if filtering is on)
		 * @name clear_search()
		 * @plugin search
		 * @trigger clear_search.jstree
		 */ this.clear_search = function() {
            if (this.settings.search.close_opened_onclear) this.close_node(this._data.search.opn, 0);
            /**
			 * triggered after search is complete
			 * @event
			 * @name clear_search.jstree
			 * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)
			 * @param {String} str the search string (the last search string)
			 * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)
			 * @plugin search
			 */ this.trigger('clear_search', {
                'nodes': this._data.search.dom,
                str: this._data.search.str,
                res: this._data.search.res
            });
            if (this._data.search.res.length) {
                this._data.search.dom = $1(this.element[0].querySelectorAll('#' + $1.map(this._data.search.res, function(v) {
                    return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($1.jstree.idregex, '\\$&') : v.replace($1.jstree.idregex, '\\$&');
                }).join(', #')));
                this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search");
            }
            this._data.search.str = "";
            this._data.search.res = [];
            this._data.search.opn = [];
            this._data.search.dom = $1();
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
            obj = parent.redraw_node.apply(this, arguments);
            if (obj) {
                if ($1.inArray(obj.id, this._data.search.res) !== -1) {
                    var i, j, tmp = null;
                    for(i = 0, j = obj.childNodes.length; i < j; i++)if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                        tmp = obj.childNodes[i];
                        break;
                    }
                    if (tmp) tmp.className += ' jstree-search';
                }
            }
            return obj;
        };
    };
    (function($) {
        // from http://kiro.me/projects/fuse.html
        $.vakata.search = function(pattern, txt, options) {
            options = options || {
            };
            options = $.extend({
            }, $.vakata.search.defaults, options);
            if (options.fuzzy !== false) options.fuzzy = true;
            pattern = options.caseSensitive ? pattern : pattern.toLowerCase();
            var MATCH_LOCATION = options.location, MATCH_DISTANCE = options.distance, MATCH_THRESHOLD = options.threshold, patternLen = pattern.length, matchmask, pattern_alphabet, match_bitapScore, search;
            if (patternLen > 32) options.fuzzy = false;
            if (options.fuzzy) {
                matchmask = 1 << patternLen - 1;
                pattern_alphabet = (function() {
                    var mask = {
                    }, i = 0;
                    for(i = 0; i < patternLen; i++)mask[pattern.charAt(i)] = 0;
                    for(i = 0; i < patternLen; i++)mask[pattern.charAt(i)] |= 1 << patternLen - i - 1;
                    return mask;
                })();
                match_bitapScore = function match_bitapScore(e, x) {
                    var accuracy = e / patternLen, proximity = Math.abs(MATCH_LOCATION - x);
                    if (!MATCH_DISTANCE) return proximity ? 1 : accuracy;
                    return accuracy + proximity / MATCH_DISTANCE;
                };
            }
            search = function search(text) {
                text = options.caseSensitive ? text : text.toLowerCase();
                if (pattern === text || text.indexOf(pattern) !== -1) return {
                    isMatch: true,
                    score: 0
                };
                if (!options.fuzzy) return {
                    isMatch: false,
                    score: 1
                };
                var i, j, textLen = text.length, scoreThreshold = MATCH_THRESHOLD, bestLoc = text.indexOf(pattern, MATCH_LOCATION), binMin, binMid, binMax = patternLen + textLen, lastRd, start, finish, rd, charMatch, score = 1, locations = [];
                if (bestLoc !== -1) {
                    scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
                    bestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);
                    if (bestLoc !== -1) scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
                }
                bestLoc = -1;
                for(i = 0; i < patternLen; i++){
                    binMin = 0;
                    binMid = binMax;
                    while(binMin < binMid){
                        if (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) binMin = binMid;
                        else binMax = binMid;
                        binMid = Math.floor((binMax - binMin) / 2 + binMin);
                    }
                    binMax = binMid;
                    start = Math.max(1, MATCH_LOCATION - binMid + 1);
                    finish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;
                    rd = new Array(finish + 2);
                    rd[finish + 1] = (1 << i) - 1;
                    for(j = finish; j >= start; j--){
                        charMatch = pattern_alphabet[text.charAt(j - 1)];
                        if (i === 0) rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
                        else rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];
                        if (rd[j] & matchmask) {
                            score = match_bitapScore(i, j - 1);
                            if (score <= scoreThreshold) {
                                scoreThreshold = score;
                                bestLoc = j - 1;
                                locations.push(bestLoc);
                                if (bestLoc > MATCH_LOCATION) start = Math.max(1, 2 * MATCH_LOCATION - bestLoc);
                                else break;
                            }
                        }
                    }
                    if (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) break;
                    lastRd = rd;
                }
                return {
                    isMatch: bestLoc >= 0,
                    score: score
                };
            };
            return txt === true ? {
                'search': search
            } : search(txt);
        };
        $.vakata.search.defaults = {
            location: 0,
            distance: 100,
            threshold: 0.6,
            fuzzy: false,
            caseSensitive: false
        };
    })($1);
    // include the search plugin by default
    // $.jstree.defaults.plugins.push("search");
    /**
 * ### Sort plugin
 *
 * Automatically sorts all siblings in the tree according to a sorting function.
 */ /**
	 * the settings function used to sort the nodes.
	 * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.
	 * @name $.jstree.defaults.sort
	 * @plugin sort
	 */ $1.jstree.defaults.sort = function(a, b) {
        //return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);
        return this.get_text(a) > this.get_text(b) ? 1 : -1;
    };
    $1.jstree.plugins.sort = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            this.element.on("model.jstree", $1.proxy(function(e, data) {
                this.sort(data.parent, true);
            }, this)).on("rename_node.jstree create_node.jstree", $1.proxy(function(e, data) {
                this.sort(data.parent || data.node.parent, false);
                this.redraw_node(data.parent || data.node.parent, true);
            }, this)).on("move_node.jstree copy_node.jstree", $1.proxy(function(e, data) {
                this.sort(data.parent, false);
                this.redraw_node(data.parent, true);
            }, this));
        };
        /**
		 * used to sort a node's children
		 * @private
		 * @name sort(obj [, deep])
		 * @param  {mixed} obj the node
		 * @param {Boolean} deep if set to `true` nodes are sorted recursively.
		 * @plugin sort
		 * @trigger search.jstree
		 */ this.sort = function(obj, deep) {
            var i, j;
            obj = this.get_node(obj);
            if (obj && obj.children && obj.children.length) {
                obj.children.sort($1.proxy(this.settings.sort, this));
                if (deep) for(i = 0, j = obj.children_d.length; i < j; i++)this.sort(obj.children_d[i], false);
            }
        };
    };
    // include the sort plugin by default
    // $.jstree.defaults.plugins.push("sort");
    /**
 * ### State plugin
 *
 * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)
 */ var to1 = false;
    /**
	 * stores all defaults for the state plugin
	 * @name $.jstree.defaults.state
	 * @plugin state
	 */ $1.jstree.defaults.state = {
        /**
		 * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.
		 * @name $.jstree.defaults.state.key
		 * @plugin state
		 */ key: 'jstree',
        /**
		 * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.
		 * @name $.jstree.defaults.state.events
		 * @plugin state
		 */ events: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',
        /**
		 * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.
		 * @name $.jstree.defaults.state.ttl
		 * @plugin state
		 */ ttl: false,
        /**
		 * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.
		 * @name $.jstree.defaults.state.filter
		 * @plugin state
		 */ filter: false,
        /**
		 * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`
		 * @name $.jstree.defaults.state.preserve_loaded
		 * @plugin state
		 */ preserve_loaded: false
    };
    $1.jstree.plugins.state = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            var bind = $1.proxy(function() {
                this.element.on(this.settings.state.events, $1.proxy(function() {
                    if (to1) clearTimeout(to1);
                    to1 = setTimeout($1.proxy(function() {
                        this.save_state();
                    }, this), 100);
                }, this));
                /**
				 * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).
				 * @event
				 * @name state_ready.jstree
				 * @plugin state
				 */ this.trigger('state_ready');
            }, this);
            this.element.on("ready.jstree", $1.proxy(function(e, data) {
                this.element.one("restore_state.jstree", bind);
                if (!this.restore_state()) bind();
            }, this));
        };
        /**
		 * save the state
		 * @name save_state()
		 * @plugin state
		 */ this.save_state = function() {
            var tm = this.get_state();
            if (!this.settings.state.preserve_loaded) delete tm.core.loaded;
            var st = {
                'state': tm,
                'ttl': this.settings.state.ttl,
                'sec': +new Date()
            };
            $1.vakata.storage.set(this.settings.state.key, JSON.stringify(st));
        };
        /**
		 * restore the state from the user's computer
		 * @name restore_state()
		 * @plugin state
		 */ this.restore_state = function() {
            var k = $1.vakata.storage.get(this.settings.state.key);
            if (!!k) try {
                k = JSON.parse(k);
            } catch (ex) {
                return false;
            }
            if (!!k && k.ttl && k.sec && +new Date() - k.sec > k.ttl) return false;
            if (!!k && k.state) k = k.state;
            if (!!k && $1.isFunction(this.settings.state.filter)) k = this.settings.state.filter.call(this, k);
            if (!!k) {
                if (!this.settings.state.preserve_loaded) delete k.core.loaded;
                this.element.one("set_state.jstree", function(e, data) {
                    data.instance.trigger('restore_state', {
                        'state': $1.extend(true, {
                        }, k)
                    });
                });
                this.set_state(k);
                return true;
            }
            return false;
        };
        /**
		 * clear the state on the user's computer
		 * @name clear_state()
		 * @plugin state
		 */ this.clear_state = function() {
            return $1.vakata.storage.del(this.settings.state.key);
        };
    };
    (function($, undefined) {
        $.vakata.storage = {
            // simply specifying the functions in FF throws an error
            set: function set(key, val) {
                return window.localStorage.setItem(key, val);
            },
            get: function get(key) {
                return window.localStorage.getItem(key);
            },
            del: function del(key) {
                return window.localStorage.removeItem(key);
            }
        };
    })($1);
    // include the state plugin by default
    // $.jstree.defaults.plugins.push("state");
    /**
 * ### Types plugin
 *
 * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.
 */ /**
	 * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).
	 *
	 * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.
	 * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.
	 * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.
	 * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.
	 * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)
	 * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)
	 *
	 * There are two predefined types:
	 *
	 * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.
	 * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.
	 *
	 * @name $.jstree.defaults.types
	 * @plugin types
	 */ $1.jstree.defaults.types = {
        'default': {
        }
    };
    $1.jstree.defaults.types[$1.jstree.root] = {
    };
    $1.jstree.plugins.types = function(options3, parent) {
        this.init = function(el, options) {
            var i, j;
            if (options && options.types && options.types['default']) {
                for(i in options.types)if (i !== "default" && i !== $1.jstree.root && options.types.hasOwnProperty(i)) {
                    for(j in options.types['default'])if (options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined1) options.types[i][j] = options.types['default'][j];
                }
            }
            parent.init.call(this, el, options);
            this._model.data[$1.jstree.root].type = $1.jstree.root;
        };
        this.refresh = function(skip_loading, forget_state) {
            parent.refresh.call(this, skip_loading, forget_state);
            this._model.data[$1.jstree.root].type = $1.jstree.root;
        };
        this.bind = function() {
            this.element.on('model.jstree', $1.proxy(function(e, data) {
                var m = this._model.data, dpc = data.nodes, t = this.settings.types, i, j, c = 'default', k;
                for(i = 0, j = dpc.length; i < j; i++){
                    c = 'default';
                    if (m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) c = m[dpc[i]].original.type;
                    if (m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) c = m[dpc[i]].data.jstree.type;
                    m[dpc[i]].type = c;
                    if (m[dpc[i]].icon === true && t[c].icon !== undefined1) m[dpc[i]].icon = t[c].icon;
                    if (t[c].li_attr !== undefined1 && typeof t[c].li_attr === 'object') {
                        for(k in t[c].li_attr)if (t[c].li_attr.hasOwnProperty(k)) {
                            if (k === 'id') continue;
                            else if (m[dpc[i]].li_attr[k] === undefined1) m[dpc[i]].li_attr[k] = t[c].li_attr[k];
                            else if (k === 'class') m[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];
                        }
                    }
                    if (t[c].a_attr !== undefined1 && typeof t[c].a_attr === 'object') {
                        for(k in t[c].a_attr)if (t[c].a_attr.hasOwnProperty(k)) {
                            if (k === 'id') continue;
                            else if (m[dpc[i]].a_attr[k] === undefined1) m[dpc[i]].a_attr[k] = t[c].a_attr[k];
                            else if (k === 'href' && m[dpc[i]].a_attr[k] === '#') m[dpc[i]].a_attr['href'] = t[c].a_attr['href'];
                            else if (k === 'class') m[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];
                        }
                    }
                }
                m[$1.jstree.root].type = $1.jstree.root;
            }, this));
            parent.bind.call(this);
        };
        this.get_json = function(obj, options, flat) {
            var i, j, m = this._model.data, opt = options ? $1.extend(true, {
            }, options, {
                no_id: false
            }) : {
            }, tmp = parent.get_json.call(this, obj, opt, flat);
            if (tmp === false) return false;
            if ($1.isArray(tmp)) for(i = 0, j = tmp.length; i < j; i++){
                tmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : "default";
                if (options && options.no_id) {
                    delete tmp[i].id;
                    if (tmp[i].li_attr && tmp[i].li_attr.id) delete tmp[i].li_attr.id;
                    if (tmp[i].a_attr && tmp[i].a_attr.id) delete tmp[i].a_attr.id;
                }
            }
            else {
                tmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : "default";
                if (options && options.no_id) tmp = this._delete_ids(tmp);
            }
            return tmp;
        };
        this._delete_ids = function(tmp) {
            if ($1.isArray(tmp)) {
                for(var i = 0, j = tmp.length; i < j; i++)tmp[i] = this._delete_ids(tmp[i]);
                return tmp;
            }
            delete tmp.id;
            if (tmp.li_attr && tmp.li_attr.id) delete tmp.li_attr.id;
            if (tmp.a_attr && tmp.a_attr.id) delete tmp.a_attr.id;
            if (tmp.children && $1.isArray(tmp.children)) tmp.children = this._delete_ids(tmp.children);
            return tmp;
        };
        this.check = function(chk, obj, par, pos, more) {
            if (parent.check.call(this, chk, obj, par, pos, more) === false) return false;
            obj = obj && obj.id ? obj : this.get_node(obj);
            par = par && par.id ? par : this.get_node(par);
            var m = obj && obj.id ? more && more.origin ? more.origin : $1.jstree.reference(obj.id) : null, tmp, d, i, j;
            m = m && m._model && m._model.data ? m._model.data : null;
            switch(chk){
                case "create_node":
                case "move_node":
                case "copy_node":
                    if (chk !== 'move_node' || $1.inArray(obj.id, par.children) === -1) {
                        tmp = this.get_rules(par);
                        if (tmp.max_children !== undefined1 && tmp.max_children !== -1 && tmp.max_children === par.children.length) {
                            this._data.core.last_error = {
                                'error': 'check',
                                'plugin': 'types',
                                'id': 'types_01',
                                'reason': 'max_children prevents function: ' + chk,
                                'data': JSON.stringify({
                                    'chk': chk,
                                    'pos': pos,
                                    'obj': obj && obj.id ? obj.id : false,
                                    'par': par && par.id ? par.id : false
                                })
                            };
                            return false;
                        }
                        if (tmp.valid_children !== undefined1 && tmp.valid_children !== -1 && $1.inArray(obj.type || 'default', tmp.valid_children) === -1) {
                            this._data.core.last_error = {
                                'error': 'check',
                                'plugin': 'types',
                                'id': 'types_02',
                                'reason': 'valid_children prevents function: ' + chk,
                                'data': JSON.stringify({
                                    'chk': chk,
                                    'pos': pos,
                                    'obj': obj && obj.id ? obj.id : false,
                                    'par': par && par.id ? par.id : false
                                })
                            };
                            return false;
                        }
                        if (m && obj.children_d && obj.parents) {
                            d = 0;
                            for(i = 0, j = obj.children_d.length; i < j; i++)d = Math.max(d, m[obj.children_d[i]].parents.length);
                            d = d - obj.parents.length + 1;
                        }
                        if (d <= 0 || d === undefined1) d = 1;
                        do {
                            if (tmp.max_depth !== undefined1 && tmp.max_depth !== -1 && tmp.max_depth < d) {
                                this._data.core.last_error = {
                                    'error': 'check',
                                    'plugin': 'types',
                                    'id': 'types_03',
                                    'reason': 'max_depth prevents function: ' + chk,
                                    'data': JSON.stringify({
                                        'chk': chk,
                                        'pos': pos,
                                        'obj': obj && obj.id ? obj.id : false,
                                        'par': par && par.id ? par.id : false
                                    })
                                };
                                return false;
                            }
                            par = this.get_node(par.parent);
                            tmp = this.get_rules(par);
                            d++;
                        }while (par)
                    }
                    break;
            }
            return true;
        };
        /**
		 * used to retrieve the type settings object for a node
		 * @name get_rules(obj)
		 * @param {mixed} obj the node to find the rules for
		 * @return {Object}
		 * @plugin types
		 */ this.get_rules = function(obj) {
            obj = this.get_node(obj);
            if (!obj) return false;
            var tmp = this.get_type(obj, true);
            if (tmp.max_depth === undefined1) tmp.max_depth = -1;
            if (tmp.max_children === undefined1) tmp.max_children = -1;
            if (tmp.valid_children === undefined1) tmp.valid_children = -1;
            return tmp;
        };
        /**
		 * used to retrieve the type string or settings object for a node
		 * @name get_type(obj [, rules])
		 * @param {mixed} obj the node to find the rules for
		 * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned
		 * @return {String|Object}
		 * @plugin types
		 */ this.get_type = function(obj, rules) {
            obj = this.get_node(obj);
            return !obj ? false : rules ? $1.extend({
                'type': obj.type
            }, this.settings.types[obj.type]) : obj.type;
        };
        /**
		 * used to change a node's type
		 * @name set_type(obj, type)
		 * @param {mixed} obj the node to change
		 * @param {String} type the new type
		 * @plugin types
		 */ this.set_type = function(obj, type) {
            var m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;
            if ($1.isArray(obj)) {
                obj = obj.slice();
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++)this.set_type(obj[t1], type);
                return true;
            }
            t = this.settings.types;
            obj = this.get_node(obj);
            if (!t[type] || !obj) return false;
            d = this.get_node(obj, true);
            if (d && d.length) a = d.children('.jstree-anchor');
            old_type = obj.type;
            old_icon = this.get_icon(obj);
            obj.type = type;
            if (old_icon === true || !t[old_type] || t[old_type].icon !== undefined1 && old_icon === t[old_type].icon) this.set_icon(obj, t[type].icon !== undefined1 ? t[type].icon : true);
            // remove old type props
            if (t[old_type] && t[old_type].li_attr !== undefined1 && typeof t[old_type].li_attr === 'object') {
                for(k in t[old_type].li_attr)if (t[old_type].li_attr.hasOwnProperty(k)) {
                    if (k === 'id') continue;
                    else if (k === 'class') {
                        m[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');
                        if (d) d.removeClass(t[old_type].li_attr[k]);
                    } else if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {
                        m[obj.id].li_attr[k] = null;
                        if (d) d.removeAttr(k);
                    }
                }
            }
            if (t[old_type] && t[old_type].a_attr !== undefined1 && typeof t[old_type].a_attr === 'object') {
                for(k in t[old_type].a_attr)if (t[old_type].a_attr.hasOwnProperty(k)) {
                    if (k === 'id') continue;
                    else if (k === 'class') {
                        m[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');
                        if (a) a.removeClass(t[old_type].a_attr[k]);
                    } else if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {
                        if (k === 'href') {
                            m[obj.id].a_attr[k] = '#';
                            if (a) a.attr('href', '#');
                        } else {
                            delete m[obj.id].a_attr[k];
                            if (a) a.removeAttr(k);
                        }
                    }
                }
            }
            // add new props
            if (t[type].li_attr !== undefined1 && typeof t[type].li_attr === 'object') {
                for(k in t[type].li_attr)if (t[type].li_attr.hasOwnProperty(k)) {
                    if (k === 'id') continue;
                    else if (m[obj.id].li_attr[k] === undefined1) {
                        m[obj.id].li_attr[k] = t[type].li_attr[k];
                        if (d) {
                            if (k === 'class') d.addClass(t[type].li_attr[k]);
                            else d.attr(k, t[type].li_attr[k]);
                        }
                    } else if (k === 'class') {
                        m[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];
                        if (d) d.addClass(t[type].li_attr[k]);
                    }
                }
            }
            if (t[type].a_attr !== undefined1 && typeof t[type].a_attr === 'object') {
                for(k in t[type].a_attr)if (t[type].a_attr.hasOwnProperty(k)) {
                    if (k === 'id') continue;
                    else if (m[obj.id].a_attr[k] === undefined1) {
                        m[obj.id].a_attr[k] = t[type].a_attr[k];
                        if (a) {
                            if (k === 'class') a.addClass(t[type].a_attr[k]);
                            else a.attr(k, t[type].a_attr[k]);
                        }
                    } else if (k === 'href' && m[obj.id].a_attr[k] === '#') {
                        m[obj.id].a_attr['href'] = t[type].a_attr['href'];
                        if (a) a.attr('href', t[type].a_attr['href']);
                    } else if (k === 'class') {
                        m[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];
                        if (a) a.addClass(t[type].a_attr[k]);
                    }
                }
            }
            return true;
        };
    };
    // include the types plugin by default
    // $.jstree.defaults.plugins.push("types");
    /**
 * ### Unique plugin
 *
 * Enforces that no nodes with the same name can coexist as siblings.
 */ /**
	 * stores all defaults for the unique plugin
	 * @name $.jstree.defaults.unique
	 * @plugin unique
	 */ $1.jstree.defaults.unique = {
        /**
		 * Indicates if the comparison should be case sensitive. Default is `false`.
		 * @name $.jstree.defaults.unique.case_sensitive
		 * @plugin unique
		 */ case_sensitive: false,
        /**
		 * Indicates if white space should be trimmed before the comparison. Default is `false`.
		 * @name $.jstree.defaults.unique.trim_whitespace
		 * @plugin unique
		 */ trim_whitespace: false,
        /**
		 * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.
		 * @name $.jstree.defaults.unique.duplicate
		 * @plugin unique
		 */ duplicate: function duplicate(name, counter) {
            return name + ' (' + counter + ')';
        }
    };
    $1.jstree.plugins.unique = function(options, parent) {
        this.check = function(chk, obj, par, pos, more) {
            if (parent.check.call(this, chk, obj, par, pos, more) === false) return false;
            obj = obj && obj.id ? obj : this.get_node(obj);
            par = par && par.id ? par : this.get_node(par);
            if (!par || !par.children) return true;
            var n = chk === "rename_node" ? pos : obj.text, c = [], s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, m = this._model.data, i, j, t;
            for(i = 0, j = par.children.length; i < j; i++){
                t = m[par.children[i]].text;
                if (!s) t = t.toLowerCase();
                if (w) t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                c.push(t);
            }
            if (!s) n = n.toLowerCase();
            if (w) n = n.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
            switch(chk){
                case "delete_node":
                    return true;
                case "rename_node":
                    t = obj.text || '';
                    if (!s) t = t.toLowerCase();
                    if (w) t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                    i = $1.inArray(n, c) === -1 || obj.text && t === n;
                    if (!i) this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'unique',
                        'id': 'unique_01',
                        'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return i;
                case "create_node":
                    i = $1.inArray(n, c) === -1;
                    if (!i) this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'unique',
                        'id': 'unique_04',
                        'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return i;
                case "copy_node":
                    i = $1.inArray(n, c) === -1;
                    if (!i) this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'unique',
                        'id': 'unique_02',
                        'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return i;
                case "move_node":
                    i = obj.parent === par.id && (!more || !more.is_multi) || $1.inArray(n, c) === -1;
                    if (!i) this._data.core.last_error = {
                        'error': 'check',
                        'plugin': 'unique',
                        'id': 'unique_03',
                        'reason': 'Child with name ' + n + ' already exists. Preventing: ' + chk,
                        'data': JSON.stringify({
                            'chk': chk,
                            'pos': pos,
                            'obj': obj && obj.id ? obj.id : false,
                            'par': par && par.id ? par.id : false
                        })
                    };
                    return i;
            }
            return true;
        };
        this.create_node = function(par, node, pos, callback, is_loaded) {
            if (!node || node.text === undefined1) {
                if (par === null) par = $1.jstree.root;
                par = this.get_node(par);
                if (!par) return parent.create_node.call(this, par, node, pos, callback, is_loaded);
                pos = pos === undefined1 ? "last" : pos;
                if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) return parent.create_node.call(this, par, node, pos, callback, is_loaded);
                if (!node) node = {
                };
                var tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;
                n = tmp = this.get_string('New node');
                dpc = [];
                for(i = 0, j = par.children.length; i < j; i++){
                    t = m[par.children[i]].text;
                    if (!s) t = t.toLowerCase();
                    if (w) t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                    dpc.push(t);
                }
                i = 1;
                t = n;
                if (!s) t = t.toLowerCase();
                if (w) t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                while($1.inArray(t, dpc) !== -1){
                    n = cb.call(this, tmp, ++i).toString();
                    t = n;
                    if (!s) t = t.toLowerCase();
                    if (w) t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                }
                node.text = n;
            }
            return parent.create_node.call(this, par, node, pos, callback, is_loaded);
        };
    };
    // include the unique plugin by default
    // $.jstree.defaults.plugins.push("unique");
    /**
 * ### Wholerow plugin
 *
 * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.
 */ var div = document.createElement('DIV');
    div.setAttribute('unselectable', 'on');
    div.setAttribute('role', 'presentation');
    div.className = 'jstree-wholerow';
    div.innerHTML = '&#160;';
    $1.jstree.plugins.wholerow = function(options, parent) {
        this.bind = function() {
            parent.bind.call(this);
            this.element.on('ready.jstree set_state.jstree', $1.proxy(function() {
                this.hide_dots();
            }, this)).on("init.jstree loading.jstree ready.jstree", $1.proxy(function() {
                //div.style.height = this._data.core.li_height + 'px';
                this.get_container_ul().addClass('jstree-wholerow-ul');
            }, this)).on("deselect_all.jstree", $1.proxy(function(e, data) {
                this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
            }, this)).on("changed.jstree", $1.proxy(function(e, data) {
                this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
                var tmp = false, i, j;
                for(i = 0, j = data.selected.length; i < j; i++){
                    tmp = this.get_node(data.selected[i], true);
                    if (tmp && tmp.length) tmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
                }
            }, this)).on("open_node.jstree", $1.proxy(function(e, data) {
                this.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
            }, this)).on("hover_node.jstree dehover_node.jstree", $1.proxy(function(e, data) {
                if (e.type === "hover_node" && this.is_disabled(data.node)) return;
                this.get_node(data.node, true).children('.jstree-wholerow')[e.type === "hover_node" ? "addClass" : "removeClass"]('jstree-wholerow-hovered');
            }, this)).on("contextmenu.jstree", ".jstree-wholerow", $1.proxy(function(e) {
                if (this._data.contextmenu) {
                    e.preventDefault();
                    var tmp = $1.Event('contextmenu', {
                        metaKey: e.metaKey,
                        ctrlKey: e.ctrlKey,
                        altKey: e.altKey,
                        shiftKey: e.shiftKey,
                        pageX: e.pageX,
                        pageY: e.pageY
                    });
                    $1(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp);
                }
            }, this))/*!
				.on("mousedown.jstree touchstart.jstree", ".jstree-wholerow", function (e) {
						if(e.target === e.currentTarget) {
							var a = $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor");
							e.target = a[0];
							a.trigger(e);
						}
					})
				*/ .on("click.jstree", ".jstree-wholerow", function(e) {
                e.stopImmediatePropagation();
                var tmp = $1.Event('click', {
                    metaKey: e.metaKey,
                    ctrlKey: e.ctrlKey,
                    altKey: e.altKey,
                    shiftKey: e.shiftKey
                });
                $1(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
            }).on("dblclick.jstree", ".jstree-wholerow", function(e) {
                e.stopImmediatePropagation();
                var tmp = $1.Event('dblclick', {
                    metaKey: e.metaKey,
                    ctrlKey: e.ctrlKey,
                    altKey: e.altKey,
                    shiftKey: e.shiftKey
                });
                $1(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
            }).on("click.jstree", ".jstree-leaf > .jstree-ocl", $1.proxy(function(e) {
                e.stopImmediatePropagation();
                var tmp = $1.Event('click', {
                    metaKey: e.metaKey,
                    ctrlKey: e.ctrlKey,
                    altKey: e.altKey,
                    shiftKey: e.shiftKey
                });
                $1(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
            }, this)).on("mouseover.jstree", ".jstree-wholerow, .jstree-icon", $1.proxy(function(e) {
                e.stopImmediatePropagation();
                if (!this.is_disabled(e.currentTarget)) this.hover_node(e.currentTarget);
                return false;
            }, this)).on("mouseleave.jstree", ".jstree-node", $1.proxy(function(e) {
                this.dehover_node(e.currentTarget);
            }, this));
        };
        this.teardown = function() {
            if (this.settings.wholerow) this.element.find(".jstree-wholerow").remove();
            parent.teardown.call(this);
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
            obj = parent.redraw_node.apply(this, arguments);
            if (obj) {
                var tmp = div.cloneNode(true);
                //tmp.style.height = this._data.core.li_height + 'px';
                if ($1.inArray(obj.id, this._data.core.selected) !== -1) tmp.className += ' jstree-wholerow-clicked';
                if (this._data.core.focused && this._data.core.focused === obj.id) tmp.className += ' jstree-wholerow-hovered';
                obj.insertBefore(tmp, obj.childNodes[0]);
            }
            return obj;
        };
    };
    // include the wholerow plugin by default
    // $.jstree.defaults.plugins.push("wholerow");
    if (window.customElements && Object && Object.create) {
        var proto = Object.create(HTMLElement.prototype);
        proto.createdCallback = function() {
            var c = {
                core: {
                },
                plugins: []
            }, i;
            for(i in $1.jstree.plugins)if ($1.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {
                c.plugins.push(i);
                if (this.getAttribute(i) && JSON.parse(this.getAttribute(i))) c[i] = JSON.parse(this.getAttribute(i));
            }
            for(i in $1.jstree.defaults.core)if ($1.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) c.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);
            $1(this).jstree(c);
        };
        // proto.attributeChangedCallback = function (name, previous, value) { };
        try {
            window.customElements.define("vakata-jstree", function() {
            }, {
                prototype: proto
            });
        } catch (ignore) {
        }
    }
});

},{"jquery":"gmnaE"}],"5I2UN":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$e2b4 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e2b4.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonFoldAll;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _jquery = require("jquery");
var _jqueryDefault = parcelHelpers.interopDefault(_jquery);
var _jstree = require("jstree");
var _jstreeDefault = parcelHelpers.interopDefault(_jstree);
var ButtonFoldAll = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonFoldAll, _Component);
    var _super = _helpers.createSuper(ButtonFoldAll);
    function ButtonFoldAll(props) {
        _helpers.classCallCheck(this, ButtonFoldAll);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonFoldAll, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-secondary btn-sm rounded-0",
                    onClick: function(e) {
                        _jqueryDefault.default("#jstree_root").jstree("close_all");
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-chevron-right"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonFoldAll/index.jsx",
                            lineNumber: 22,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: "Fold All"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonFoldAll/index.jsx",
                            lineNumber: 23,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonFoldAll/index.jsx",
                    lineNumber: 16,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonFoldAll;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$e2b4.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","jquery":"gmnaE","jstree":"2xYlB","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"c8l6Y":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$fb36 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$fb36.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ButtonDelete;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _indexJs = require("../../../api/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _alertsJs = require("../../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var ButtonDelete = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ButtonDelete, _Component);
    var _super = _helpers.createSuper(ButtonDelete);
    function ButtonDelete(props) {
        _helpers.classCallCheck(this, ButtonDelete);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ButtonDelete, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
            }
        },
        {
            key: "render",
            value: function render() {
                var _props = this.props, selected_count = _props.selected_count, loadFilesFunc = _props.loadFilesFunc, selected_data = _props.selected_data;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                    className: "btn btn-danger btn-sm rounded-0",
                    style: {
                        display: selected_count !== 0 ? "inline-block" : "none"
                    },
                    onClick: function(e) {
                        //   loadFilesFunc();
                        _alertsJsDefault.default.ShowDeletionConfirmationAlert(selected_count).then(function(result) {
                            console.log(result);
                            if (result.isConfirmed) {
                                console.log(selected_data);
                                _indexJsDefault.default.deleteBatch(selected_data).then(function(response) {
                                    console.log(response);
                                    loadFilesFunc();
                                    _alertsJsDefault.default.ToastAlert("warning", "Objects deleted.");
                                }, function(reason) {
                                    console.log(reason);
                                });
                            } else _alertsJsDefault.default.ToastAlert("info", "No action taken");
                        });
                    },
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "jstree-icon-size fas fa-trash-alt"
                        }, void 0, false, {
                            fileName: "src_react/shared/buttons/ButtonDelete/index.jsx",
                            lineNumber: 46,
                            columnNumber: 9
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                            className: "msfp-button-font-size",
                            children: [
                                "Delete ( ",
                                selected_count,
                                " )"
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/buttons/ButtonDelete/index.jsx",
                            lineNumber: 47,
                            columnNumber: 9
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/buttons/ButtonDelete/index.jsx",
                    lineNumber: 17,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ButtonDelete;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$fb36.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../../api/index.js":"fmHLW","../../../helpers/alerts.js":"HdCa2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"BpgP6":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$06e6 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$06e6.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return UploadModal;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _customFileDropzone = require("../../CustomFileDropzone");
var _customFileDropzoneDefault = parcelHelpers.interopDefault(_customFileDropzone);
var UploadModal = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(UploadModal, _Component);
    var _super = _helpers.createSuper(UploadModal);
    function UploadModal(props) {
        _helpers.classCallCheck(this, UploadModal);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(UploadModal, [
        {
            key: "render",
            value: function render() {
                var _this = this;
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "custom-mfsp-overlay",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "container mt-5",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "row",
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                    className: "col-md-12 text-center",
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                        className: "btn btn-sm rounded-0 my-5",
                                        onClick: function(e) {
                                            console.log("*Exit uploading panel");
                                            _this.props.hideAllModals();
                                            _this.props.loadFiles();
                                        },
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                className: "fas fa-times"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/UploadModal/index.jsx",
                                                lineNumber: 25,
                                                columnNumber: 17
                                            }, this),
                                            "\xa0Exit uploading panel"
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/UploadModal/index.jsx",
                                        lineNumber: 17,
                                        columnNumber: 15
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/UploadModal/index.jsx",
                                    lineNumber: 16,
                                    columnNumber: 13
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                    className: "col-md-12",
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_customFileDropzoneDefault.default, {
                                    }, void 0, false, {
                                        fileName: "src_react/shared/modals/UploadModal/index.jsx",
                                        lineNumber: 30,
                                        columnNumber: 15
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/UploadModal/index.jsx",
                                    lineNumber: 29,
                                    columnNumber: 13
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/modals/UploadModal/index.jsx",
                            lineNumber: 15,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/UploadModal/index.jsx",
                        lineNumber: 14,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/shared/modals/UploadModal/index.jsx",
                    lineNumber: 13,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return UploadModal;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$06e6.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../CustomFileDropzone":"dEEaI","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"hGvB5":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$a945 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$a945.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _formik = require("formik");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactBootstrap = require("react-bootstrap");
var _reactDatepicker = require("react-datepicker");
var _reactDatepickerDefault = parcelHelpers.interopDefault(_reactDatepicker);
var _reactDatepickerCss = require("react-datepicker/dist/react-datepicker.css");
var _yup = require("yup");
var _api = require("../../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _alertsJs = require("../../../helpers/alerts.js");
var _alertsJsDefault = parcelHelpers.interopDefault(_alertsJs);
var _this = undefined;
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$();
var CreateUserButton = function(param1) {
    var callbackRefreshData = param1.callbackRefreshData, shareObj = param1.shareObj;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Add new user"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm btn-icon btn-success",
            style: {
                borderRadius: "50%",
                height: "2rem",
                width: "2rem"
            },
            onClick: function(e) {
                _alertsJsDefault.default.ShowInputAlert("Add Sharing User", "text", "Enter user email:", "email@example.com").then(function(email) {
                    console.log(email);
                    if (email) {
                        console.log(email);
                        _apiDefault.default.createSharingUser(shareObj.id, email).then(function(param) {
                            var data = param.data;
                            console.log(data);
                            if (data.success) callbackRefreshData();
                            else _alertsJsDefault.default.ToastAlert("warning", data.msg);
                        });
                    } else _alertsJsDefault.default.ToastAlert("info", "No action taken. Email wasn't provided");
                });
            },
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "fas fa-plus fs-6"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 48,
                columnNumber: 9
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 16,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 12,
        columnNumber: 5
    }, _this));
};
_c = CreateUserButton;
var DeleteUserButton = function(param2) {
    var callbackRefreshData = param2.callbackRefreshData, shareObj = param2.shareObj, userObj = param2.userObj;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Delete this user"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm btn-icon btn-danger rounded-0",
            style: {
                marginRight: "0.1rem"
            },
            onClick: function(e) {
                _alertsJsDefault.default.ShowDeletionConfirmationAlert(1).then(function(result) {
                    console.log(result);
                    if (result.isConfirmed) _apiDefault.default.deleteSharingUser(shareObj.id, userObj.id).then(function(param) {
                        var data = param.data;
                        console.log(data);
                        callbackRefreshData();
                    });
                    else _alertsJsDefault.default.ToastAlert("info", "No action taken");
                });
            },
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "far fa-trash-alt fs-4"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 79,
                columnNumber: 9
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 60,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 56,
        columnNumber: 5
    }, _this));
};
_c1 = DeleteUserButton;
var FollowSharingLinkButton = function(param) {
    var callbackRefreshData = param.callbackRefreshData, shareObj = param.shareObj, userObj = param.userObj;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Follow sharing link in new tab"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("a", {
            className: "btn btn-sm btn-icon btn-secondary rounded-0",
            style: {
                marginRight: "0.1rem"
            },
            href: "/mfsp-code/".concat(userObj.secret),
            target: "_blank",
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "far fa-eye fs-4"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 103,
                columnNumber: 9
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 97,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 91,
        columnNumber: 5
    }, _this));
};
_c2 = FollowSharingLinkButton;
var ToggleSharingButton = function(param3) {
    var callbackRefreshData = param3.callbackRefreshData, shareObj = param3.shareObj, userObj = param3.userObj;
    _s();
    var ref = _helpers.slicedToArray(_react.useState(false), 2), isLoading = ref[0], setIsLoading = ref[1];
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Toggle sharing for this user"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm btn-icon btn-primary rounded-0",
            style: {
                marginRight: "0.1rem"
            },
            disabled: isLoading,
            onClick: function(e) {
                setIsLoading(true);
                _apiDefault.default.actionSharingUserToggleSharing(shareObj.id, userObj.id).then(function(param) {
                    var data = param.data;
                    console.log(data);
                    setIsLoading(false);
                    callbackRefreshData();
                });
            },
            children: isLoading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "fas fa-spinner fa-pulse"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 134,
                columnNumber: 11
            }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "fas fa-share-alt-square fs-4"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 136,
                columnNumber: 11
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 118,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 112,
        columnNumber: 5
    }, _this));
};
_s(ToggleSharingButton, "EmvgwIb3cHpoFpeP+WmEDbjx4y4=");
_c3 = ToggleSharingButton;
var SendSingleEmailButton = function(param4) {
    var callbackRefreshData = param4.callbackRefreshData, shareObj = param4.shareObj, userObj = param4.userObj;
    _s1();
    var ref = _helpers.slicedToArray(_react.useState(false), 2), isLoading = ref[0], setIsLoading = ref[1];
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Send sharing link to this user"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm btn-icon btn-info rounded-0 mr-2",
            style: {
                marginRight: "0.1rem"
            },
            disabled: isLoading,
            onClick: function(e) {
                setIsLoading(true);
                _apiDefault.default.actionSharingUserSendEmail(shareObj.id, userObj.id).then(function(param) {
                    var data = param.data;
                    console.log(data);
                    if (data.success) _alertsJsDefault.default.ToastAlert("success", data.msg);
                    else _alertsJsDefault.default.ToastAlert("danger", data.msg);
                    setIsLoading(false);
                    callbackRefreshData();
                });
            },
            children: isLoading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "fas fa-spinner fa-pulse"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 173,
                columnNumber: 11
            }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                className: "far fa-envelope fs-4"
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 175,
                columnNumber: 11
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 152,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 146,
        columnNumber: 5
    }, _this));
};
_s1(SendSingleEmailButton, "EmvgwIb3cHpoFpeP+WmEDbjx4y4=");
_c4 = SendSingleEmailButton;
var RefreshButton = function(param) {
    var callbackRefreshData = param.callbackRefreshData;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Refresh users"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm",
            onClick: function() {
                callbackRefreshData();
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "fas fa-sync-alt fs-4"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 194,
                    columnNumber: 9
                }, _this),
                "Refresh"
            ]
        }, void 0, true, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 188,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 184,
        columnNumber: 5
    }, _this));
};
_c5 = RefreshButton;
var SendBulkEmailsButton = function(param5) {
    var callbackRefreshData = param5.callbackRefreshData, shareObj = param5.shareObj;
    _s2();
    var ref = _helpers.slicedToArray(_react.useState(false), 2), isLoading = ref[0], setIsLoading = ref[1];
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Send email with sharing URL to all users"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm",
            disabled: isLoading,
            onClick: function() {
                setIsLoading(true);
                _alertsJsDefault.default.ShowBulkEmailConfirmationAlert().then(function(result) {
                    if (result.isConfirmed) _apiDefault.default.sharingSendBulkEmails(shareObj.id).then(function(param) {
                        var data = param.data;
                        console.log(data);
                        _alertsJsDefault.default.BulkEmailSummary(data.success, data.failure, function() {
                            callbackRefreshData();
                            setIsLoading(false);
                        });
                    });
                    else {
                        _alertsJsDefault.default.ToastAlert("info", "No action taken");
                        setIsLoading(false);
                    }
                });
            },
            children: [
                isLoading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "fas fa-spinner fa-pulse"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 234,
                    columnNumber: 11
                }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "far fa-envelope fs-4"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 236,
                    columnNumber: 11
                }, _this),
                "Send Bulk Emails"
            ]
        }, void 0, true, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 212,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 204,
        columnNumber: 5
    }, _this));
};
_s2(SendBulkEmailsButton, "EmvgwIb3cHpoFpeP+WmEDbjx4y4=");
_c6 = SendBulkEmailsButton;
var DeleteSharingButton = function(param6) {
    var callbackRefreshData = param6.callbackRefreshData, shareObj = param6.shareObj, hideAllModals = param6.hideAllModals;
    _s3();
    var ref = _helpers.slicedToArray(_react.useState(false), 2), isLoading = ref[0], setIsLoading = ref[1];
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.OverlayTrigger, {
        placement: "top",
        overlay: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactBootstrap.Tooltip, {
            id: "tooltip-top",
            children: "Delete this sharing and all users"
        }, void 0, false, void 0, void 0),
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
            className: "btn btn-sm text-danger",
            disabled: isLoading,
            onClick: function() {
                setIsLoading(true);
                _alertsJsDefault.default.ShowDeletionSharingConfirmationAlert().then(function(result) {
                    if (result.isConfirmed) _apiDefault.default.sharingDeleteProcedure(shareObj.id).then(function(param) {
                        var data = param.data;
                        console.log(data);
                        setIsLoading(false);
                        _alertsJsDefault.default.ToastAlert("success", "Sharing deleted");
                        _alertsJsDefault.default.SimpleCallback("Sharing deleted", "Sharing object and all its users have been deleted", "warning", hideAllModals);
                    });
                    else {
                        _alertsJsDefault.default.ToastAlert("info", "No action taken");
                        setIsLoading(false);
                    }
                });
            },
            children: [
                isLoading ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "fas fa-spinner fa-pulse text-danger"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 284,
                    columnNumber: 11
                }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "fas fa-times fs-4 text-danger"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 286,
                    columnNumber: 11
                }, _this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                    children: "Delete sharing"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 288,
                    columnNumber: 9
                }, _this)
            ]
        }, void 0, true, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 257,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 251,
        columnNumber: 5
    }, _this));
};
_s3(DeleteSharingButton, "EmvgwIb3cHpoFpeP+WmEDbjx4y4=");
_c7 = DeleteSharingButton;
var LeftPanel = function(param7) {
    var callbackRefreshData = param7.callbackRefreshData, shareObj = param7.shareObj, isLoadingLeftPanel = param7.isLoadingLeftPanel;
    var _this1 = _this;
    _s4();
    var validation_schema = _yup.object().shape({
        max_num_of_downloads: _yup.number().required("required"),
        is_sharing: _yup.bool(),
        passphrase: _yup.string(),
        email_text: _yup.string().required("required")
    });
    function toDBDatestring(date) {
        var year = date.toISOString().split("-")[0];
        var month = date.toISOString().split("-")[1];
        var day = date.toISOString().split("-")[2].split("T")[0];
        var time = date.toISOString().split("T")[1].split(".")[0];
        var ret = "".concat(year, "-").concat(month, "-").concat(day, " ").concat(time);
        return ret;
    }
    var ref = _helpers.slicedToArray(_react.useState(shareObj.expires ? true : false), 2), showExpireDate = ref[0], setShowExpireDate = ref[1];
    var ref1 = _helpers.slicedToArray(_react.useState(shareObj.expires ? new Date(shareObj.expires) : new Date()), 2), startDate = ref1[0], setStartDate = ref1[1];
    var ref2 = _helpers.slicedToArray(_react.useState(shareObj.expires ? shareObj.expires : toDBDatestring(new Date())), 2), startDateStr = ref2[0], setStartDateStr = ref2[1];
    var ExampleCustomTimeInput = function(param) {
        var date = param.date, value = param.value, onChange = param.onChange;
        /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("input", {
            value: value,
            onChange: function(e) {
                return onChange(e.target.value);
            },
            style: {
                border: "solid 1px pink"
            }
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 322,
            columnNumber: 5
        }, _this1);
    };
    var initialValues = {
        max_num_of_downloads: shareObj.max_num_of_downloads,
        is_sharing: shareObj.is_sharing,
        passphrase: shareObj.passphrase,
        email_text: shareObj.text
    };
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
        className: "card shadow-sm ",
        style: {
            maxWidth: "1000px"
        },
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-header",
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
                    className: "card-title",
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: "fas fa-cog",
                            style: {
                                fontSize: "1.5rem"
                            }
                        }, void 0, false, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 340,
                            columnNumber: 11
                        }, _this),
                        "\xa0Sharing configuration (ID=",
                        shareObj.id,
                        ")"
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 339,
                    columnNumber: 9
                }, _this)
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 338,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-body",
                children: [
                    showExpireDate ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "mb-5",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactDatepickerDefault.default, {
                                selected: startDate,
                                onChange: function(date) {
                                    console.log("DatePicker onChange");
                                    setStartDate(date);
                                    setStartDateStr(toDBDatestring(date));
                                    _apiDefault.default.actionSetExpireSharing(shareObj.id, toDBDatestring(date)).then(function(param) {
                                        var data = param.data;
                                        console.log(data);
                                        callbackRefreshData();
                                    });
                                },
                                timeFormat: "HH:mm",
                                dateFormat: "yyyy/MM/dd HH:mm",
                                showTimeSelect: true,
                                timeIntervals: 10
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 347,
                                columnNumber: 13
                            }, _this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("a", {
                                className: "btn btn-link btn-color-danger btn-active-color-primary",
                                onClick: function(e) {
                                    _alertsJsDefault.default.ShowCustomTextDeletionConfirmationAlert("Are you sure you want to clear expiration date?", "Clear expiration", "Cancel").then(function(result) {
                                        console.log(result);
                                        if (result.isConfirmed) {
                                            _apiDefault.default.actionUnsetExpireSharing(shareObj.id).then(function(param) {
                                                var data = param.data;
                                                console.log(data);
                                            });
                                            _alertsJsDefault.default.ToastAlert("success", "Expiration date cleared");
                                            setStartDate(new Date());
                                            setStartDateStr(toDBDatestring(new Date()));
                                            setShowExpireDate(false);
                                            callbackRefreshData();
                                        } else _alertsJsDefault.default.ToastAlert("info", "No action taken");
                                    });
                                },
                                children: "Clear expiration"
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 365,
                                columnNumber: 13
                            }, _this)
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 346,
                        columnNumber: 11
                    }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "text-center",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                            className: "btn btn-secondary",
                            type: "submit",
                            onClick: function() {
                                setShowExpireDate(true);
                                _apiDefault.default.actionSetExpireSharing(shareObj.id, toDBDatestring(new Date())).then(function(param) {
                                    var data = param.data;
                                    console.log(data);
                                });
                            },
                            children: [
                                "Set Expiration Date\xa0",
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                    className: "far fa-clock"
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                    lineNumber: 414,
                                    columnNumber: 15
                                }, _this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 398,
                            columnNumber: 13
                        }, _this)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 397,
                        columnNumber: 11
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "separator border-3 my-6"
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 419,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formik.Formik, {
                        validationSchema: validation_schema,
                        initialValues: initialValues,
                        validate: function(values) {
                        },
                        onSubmit: function(values, param8) {
                            var setSubmitting = param8.setSubmitting;
                            var is_sharing = values.is_sharing, max_num_of_downloads = values.max_num_of_downloads, passphrase = values.passphrase, email_text = values.email_text;
                            console.log(is_sharing);
                            console.log(max_num_of_downloads);
                            console.log(passphrase);
                            console.log(email_text);
                            setTimeout(function() {
                                _apiDefault.default.updateSharing(shareObj.id, is_sharing, max_num_of_downloads, passphrase, email_text).then(function(param) {
                                    var data = param.data;
                                    setSubmitting(false);
                                    callbackRefreshData();
                                    _alertsJsDefault.default.ToastAlert("success", "Saved sharing configuration");
                                });
                            }, 700);
                        },
                        children: function(param) {
                            var values = param.values, errors = param.errors, touched = param.touched, handleChange = param.handleChange, handleBlur = param.handleBlur, handleSubmit = param.handleSubmit, isSubmitting = param.isSubmitting;
                            /*#__PURE__*/ return _jsxDevRuntime.jsxDEV("form", {
                                onSubmit: handleSubmit,
                                children: [
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "mb-5",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("label", {
                                                children: [
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formik.Field, {
                                                        type: "checkbox",
                                                        name: "is_sharing"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                        lineNumber: 462,
                                                        columnNumber: 19
                                                    }, _this1),
                                                    "Global sharing for this object is: ",
                                                    values.is_sharing ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                        className: "fs-5 text-success",
                                                        children: "ON"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                        lineNumber: 465,
                                                        columnNumber: 21
                                                    }, _this1) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                                                        className: "fs-5 text-danger",
                                                        children: "OFF"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                        lineNumber: 467,
                                                        columnNumber: 21
                                                    }, _this1)
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 461,
                                                columnNumber: 17
                                            }, _this1),
                                            errors.is_sharing && touched.is_sharing && errors.is_sharing
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 460,
                                        columnNumber: 15
                                    }, _this1),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "mb-5",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("label", {
                                                htmlFor: "max_num_of_downloads",
                                                children: "Number of downloads ( default: 0 = Infinite )"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 473,
                                                columnNumber: 17
                                            }, _this1),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formik.Field, {
                                                className: "form-control",
                                                type: "number",
                                                id: "max_num_of_downloads",
                                                name: "max_num_of_downloads"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 476,
                                                columnNumber: 17
                                            }, _this1),
                                            errors.max_num_of_downloads && touched.max_num_of_downloads && errors.max_num_of_downloads
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 472,
                                        columnNumber: 15
                                    }, _this1),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "mb-5",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("label", {
                                                htmlFor: "passphrase",
                                                children: [
                                                    "Passphrase\xa0",
                                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                        className: "fas fa-key"
                                                    }, void 0, false, {
                                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                        lineNumber: 488,
                                                        columnNumber: 35
                                                    }, _this1)
                                                ]
                                            }, void 0, true, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 487,
                                                columnNumber: 17
                                            }, _this1),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formik.Field, {
                                                className: "form-control",
                                                type: "text",
                                                id: "passphrase",
                                                name: "passphrase"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 490,
                                                columnNumber: 17
                                            }, _this1),
                                            errors.passphrase && touched.passphrase && errors.passphrase
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 486,
                                        columnNumber: 15
                                    }, _this1),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "mb-5",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("label", {
                                                htmlFor: "email_text",
                                                children: "Email Text"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 500,
                                                columnNumber: 17
                                            }, _this1),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formik.Field, {
                                                className: "form-control",
                                                type: "text",
                                                as: "textarea",
                                                id: "email_text",
                                                name: "email_text"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 501,
                                                columnNumber: 17
                                            }, _this1),
                                            errors.email_text && touched.email_text && errors.email_text
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 499,
                                        columnNumber: 15
                                    }, _this1),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                        className: "text-center",
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                                            className: "btn ".concat(isSubmitting ? "btn-secondary" : "btn-primary"),
                                            type: "submit",
                                            disabled: isSubmitting,
                                            children: [
                                                isSubmitting ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                    className: "fas fa-spinner fa-pulse"
                                                }, void 0, false, {
                                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                    lineNumber: 520,
                                                    columnNumber: 21
                                                }, _this1) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                                    className: "fas fa-save"
                                                }, void 0, false, {
                                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                    lineNumber: 522,
                                                    columnNumber: 21
                                                }, _this1),
                                                isSubmitting ? "Saving ..." : "Save"
                                            ]
                                        }, void 0, true, {
                                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                            lineNumber: 512,
                                            columnNumber: 17
                                        }, _this1)
                                    }, void 0, false, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 511,
                                        columnNumber: 15
                                    }, _this1)
                                ]
                            }, void 0, true, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 459,
                                columnNumber: 13
                            }, _this1);
                        }
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 421,
                        columnNumber: 9
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 344,
                columnNumber: 7
            }, _this)
        ]
    }, void 0, true, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 337,
        columnNumber: 5
    }, _this));
};
_s4(LeftPanel, "m6ApI2Ztl63bmsSQeKeOaoLcHKU=");
_c8 = LeftPanel;
var UserItem = function(param) {
    var callbackRefreshData = param.callbackRefreshData, shareObj = param.shareObj, user = param.user;
    var id = user.id, email = user.email, num_of_downloads = user.num_of_downloads, num_of_sended = user.num_of_sended, is_sharing = user.is_sharing;
    var max_num_of_downloads = shareObj.max_num_of_downloads;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("b", {
                    children: email
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 541,
                    columnNumber: 9
                }, _this)
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 540,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                children: num_of_sended == 0 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "far fa-times-circle fs-4 text-danger"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 545,
                    columnNumber: 11
                }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "far fa-check-circle fs-4 text-success"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 547,
                    columnNumber: 11
                }, _this)
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 543,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                children: is_sharing ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "far fa-check-circle fs-4 text-success"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 552,
                    columnNumber: 11
                }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                    className: "far fa-times-circle fs-4 text-danger"
                }, void 0, false, {
                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                    lineNumber: 554,
                    columnNumber: 11
                }, _this)
            }, void 0, false, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 550,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                        className: "m-0",
                        children: max_num_of_downloads == 0 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                            children: "Downloads: unlimited"
                        }, void 0, false) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                            children: [
                                "Downloads: ",
                                num_of_downloads,
                                " / ",
                                max_num_of_downloads,
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("span", {
                                    className: "text-danger",
                                    children: [
                                        " ",
                                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("small", {
                                            children: num_of_downloads >= max_num_of_downloads ? "(Exhausted)" : ""
                                        }, void 0, false, {
                                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                            lineNumber: 566,
                                            columnNumber: 17
                                        }, _this)
                                    ]
                                }, void 0, true, {
                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                    lineNumber: 564,
                                    columnNumber: 15
                                }, _this)
                            ]
                        }, void 0, true)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 558,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                        className: "m-0",
                        children: [
                            "Sended emails: ",
                            num_of_sended
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 575,
                        columnNumber: 9
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 557,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("td", {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(ToggleSharingButton, {
                        callbackRefreshData: callbackRefreshData,
                        shareObj: shareObj,
                        userObj: user
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 578,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(SendSingleEmailButton, {
                        callbackRefreshData: callbackRefreshData,
                        shareObj: shareObj,
                        userObj: user
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 583,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(DeleteUserButton, {
                        callbackRefreshData: callbackRefreshData,
                        shareObj: shareObj,
                        userObj: user
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 588,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(FollowSharingLinkButton, {
                        callbackRefreshData: callbackRefreshData,
                        shareObj: shareObj,
                        userObj: user
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 593,
                        columnNumber: 9
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 577,
                columnNumber: 7
            }, _this)
        ]
    }, void 0, true, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 539,
        columnNumber: 5
    }, _this));
};
_c9 = UserItem;
var RightPanel = function(param) {
    var callbackRefreshData = param.callbackRefreshData, shareObj = param.shareObj, shareUsers = param.shareUsers, isLoadingRightPanel = param.isLoadingRightPanel, hideAllModals = param.hideAllModals;
    var _this2 = _this;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
        className: "card shadow-sm ",
        style: {
            maxWidth: "1000px"
        },
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-header",
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
                        className: "card-title",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                className: "fas fa-users",
                                style: {
                                    fontSize: "1.5rem"
                                }
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 614,
                                columnNumber: 11
                            }, _this),
                            "\xa0Sharing users"
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 613,
                        columnNumber: 9
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "d-flex",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(RefreshButton, {
                                callbackRefreshData: callbackRefreshData
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 618,
                                columnNumber: 11
                            }, _this),
                            shareUsers.length !== 0 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(SendBulkEmailsButton, {
                                callbackRefreshData: callbackRefreshData,
                                shareObj: shareObj
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 620,
                                columnNumber: 13
                            }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                            }, void 0, false),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(DeleteSharingButton, {
                                callbackRefreshData: callbackRefreshData,
                                shareObj: shareObj,
                                hideAllModals: hideAllModals
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 627,
                                columnNumber: 11
                            }, _this)
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 617,
                        columnNumber: 9
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 612,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-body",
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h5", {
                        className: "m-0",
                        children: [
                            "Users:\xa0",
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(CreateUserButton, {
                                callbackRefreshData: callbackRefreshData,
                                shareObj: shareObj
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 637,
                                columnNumber: 11
                            }, _this)
                        ]
                    }, void 0, true, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 635,
                        columnNumber: 9
                    }, _this),
                    shareUsers.length !== 0 ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "table-responsive",
                        children: !isLoadingRightPanel ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV("table", {
                            className: "table",
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("thead", {
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tr", {
                                        className: "fw-bolder fs-6 text-gray-800",
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                children: "E-mail"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 649,
                                                columnNumber: 21
                                            }, _this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                children: "Sended"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 650,
                                                columnNumber: 21
                                            }, _this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                children: "Sharing"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 651,
                                                columnNumber: 21
                                            }, _this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                children: "Info"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 652,
                                                columnNumber: 21
                                            }, _this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("th", {
                                                children: "Actions"
                                            }, void 0, false, {
                                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                                lineNumber: 653,
                                                columnNumber: 21
                                            }, _this)
                                        ]
                                    }, void 0, true, {
                                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                        lineNumber: 648,
                                        columnNumber: 19
                                    }, _this)
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                    lineNumber: 647,
                                    columnNumber: 17
                                }, _this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("tbody", {
                                    children: shareUsers.map(function(user, idx) {
                                        /*#__PURE__*/ return _jsxDevRuntime.jsxDEV(UserItem, {
                                            callbackRefreshData: callbackRefreshData,
                                            shareObj: shareObj,
                                            user: user
                                        }, "user-".concat(idx), false, {
                                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                            lineNumber: 658,
                                            columnNumber: 21
                                        }, _this2);
                                    })
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                    lineNumber: 656,
                                    columnNumber: 17
                                }, _this)
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 646,
                            columnNumber: 15
                        }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "text-center",
                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                className: "fas fa-spinner fa-pulse fs-3x"
                            }, void 0, false, {
                                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                lineNumber: 669,
                                columnNumber: 17
                            }, _this)
                        }, void 0, false, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 668,
                            columnNumber: 15
                        }, _this)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 644,
                        columnNumber: 11
                    }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                        children: "No users"
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 674,
                        columnNumber: 11
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 634,
                columnNumber: 7
            }, _this)
        ]
    }, void 0, true, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 611,
        columnNumber: 5
    }, _this));
};
_c10 = RightPanel;
var ShareModal = function(param9) {
    var hideAllModals = param9.hideAllModals, fsObjectId = param9.fsObjectId;
    _s5();
    var ref = _helpers.slicedToArray(_react.useState(null), 2), shareObj = ref[0], setShareObj = ref[1];
    var ref3 = _helpers.slicedToArray(_react.useState([]), 2), shareUsers = ref3[0], setShareUsers = ref3[1];
    var ref4 = _helpers.slicedToArray(_react.useState(false), 2), isLoadingLeftPanel = ref4[0], setIsLoadingLeftPanel = ref4[1];
    var ref5 = _helpers.slicedToArray(_react.useState(false), 2), isLoadingRightPanel = ref5[0], setIsLoadingRightPanel = ref5[1];
    var refreshData = function() {
        setIsLoadingLeftPanel(true);
        setIsLoadingRightPanel(true);
        _apiDefault.default.getSharing(fsObjectId).then(function(param) {
            var data = param.data;
            console.log(data);
            setShareObj(data);
            setIsLoadingLeftPanel(false);
        });
        _apiDefault.default.listSharingUsers(fsObjectId).then(function(param) {
            var data = param.data;
            console.log(data);
            setShareUsers(data);
            setIsLoadingRightPanel(false);
        });
    };
    var callbackRefreshData = _react.useCallback(function() {
        refreshData();
    }, [
        refreshData
    ]);
    _react.useEffect(function() {
        refreshData();
    }, []);
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
        className: "custom-mfsp-overlay bg-light",
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
            className: "container mt-0",
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "row",
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "col-sm-12 col-md-12 text-center",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("button", {
                            className: "btn btn-sm rounded-0 my-5",
                            onClick: function(e) {
                                hideAllModals();
                            },
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                                    className: "fas fa-times"
                                }, void 0, false, {
                                    fileName: "src_react/shared/modals/ShareModal/index.jsx",
                                    lineNumber: 721,
                                    columnNumber: 15
                                }, _this),
                                "\xa0Exit sharing panel"
                            ]
                        }, void 0, true, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 715,
                            columnNumber: 13
                        }, _this)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 714,
                        columnNumber: 11
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "col-md-12 col-lg-5",
                        children: shareObj ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(LeftPanel, {
                            callbackRefreshData: callbackRefreshData,
                            shareObj: shareObj,
                            isLoadingLeftPanel: isLoadingLeftPanel
                        }, void 0, false, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 727,
                            columnNumber: 15
                        }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                        }, void 0, false)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 725,
                        columnNumber: 11
                    }, _this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "col-md-12 col-lg-7",
                        children: shareObj ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(RightPanel, {
                            callbackRefreshData: callbackRefreshData,
                            shareObj: shareObj,
                            shareUsers: shareUsers,
                            isLoadingRightPanel: isLoadingRightPanel,
                            hideAllModals: hideAllModals
                        }, void 0, false, {
                            fileName: "src_react/shared/modals/ShareModal/index.jsx",
                            lineNumber: 738,
                            columnNumber: 15
                        }, _this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
                        }, void 0, false)
                    }, void 0, false, {
                        fileName: "src_react/shared/modals/ShareModal/index.jsx",
                        lineNumber: 736,
                        columnNumber: 11
                    }, _this)
                ]
            }, void 0, true, {
                fileName: "src_react/shared/modals/ShareModal/index.jsx",
                lineNumber: 713,
                columnNumber: 9
            }, _this)
        }, void 0, false, {
            fileName: "src_react/shared/modals/ShareModal/index.jsx",
            lineNumber: 712,
            columnNumber: 7
        }, _this)
    }, void 0, false, {
        fileName: "src_react/shared/modals/ShareModal/index.jsx",
        lineNumber: 711,
        columnNumber: 5
    }, _this));
};
_s5(ShareModal, "NPg36zcPV3W+wbocNzXWZHJzO0A=");
_c11 = ShareModal;
exports.default = ShareModal;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;
$RefreshReg$(_c, "CreateUserButton");
$RefreshReg$(_c1, "DeleteUserButton");
$RefreshReg$(_c2, "FollowSharingLinkButton");
$RefreshReg$(_c3, "ToggleSharingButton");
$RefreshReg$(_c4, "SendSingleEmailButton");
$RefreshReg$(_c5, "RefreshButton");
$RefreshReg$(_c6, "SendBulkEmailsButton");
$RefreshReg$(_c7, "DeleteSharingButton");
$RefreshReg$(_c8, "LeftPanel");
$RefreshReg$(_c9, "UserItem");
$RefreshReg$(_c10, "RightPanel");
$RefreshReg$(_c11, "ShareModal");

  $parcel$ReactRefreshHelpers$a945.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q","../../../api":"fmHLW","@swc/helpers":"cawJ1","formik":"hRgz4","react-datepicker":"3aiVZ","yup":"erhge","react-datepicker/dist/react-datepicker.css":"kDqtZ","../../../helpers/alerts.js":"HdCa2","react-bootstrap":"bYq7b"}],"hRgz4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ErrorMessage", function() {
    return ErrorMessage;
});
parcelHelpers.export(exports, "FastField", function() {
    return FastField;
});
parcelHelpers.export(exports, "Field", function() {
    return Field;
});
parcelHelpers.export(exports, "FieldArray", function() {
    return FieldArray;
});
parcelHelpers.export(exports, "Form", function() {
    return Form;
});
parcelHelpers.export(exports, "Formik", function() {
    return Formik;
});
parcelHelpers.export(exports, "FormikConsumer", function() {
    return FormikConsumer;
});
parcelHelpers.export(exports, "FormikContext", function() {
    return FormikContext;
});
parcelHelpers.export(exports, "FormikProvider", function() {
    return FormikProvider;
});
parcelHelpers.export(exports, "connect", function() {
    return connect;
});
parcelHelpers.export(exports, "getActiveElement", function() {
    return getActiveElement;
});
parcelHelpers.export(exports, "getIn", function() {
    return getIn;
});
parcelHelpers.export(exports, "insert", function() {
    return insert;
});
parcelHelpers.export(exports, "isEmptyArray", function() {
    return isEmptyArray;
});
parcelHelpers.export(exports, "isEmptyChildren", function() {
    return isEmptyChildren;
});
parcelHelpers.export(exports, "isFunction", function() {
    return isFunction;
});
parcelHelpers.export(exports, "isInputEvent", function() {
    return isInputEvent;
});
parcelHelpers.export(exports, "isInteger", function() {
    return isInteger;
});
parcelHelpers.export(exports, "isNaN", function() {
    return isNaN$1;
});
parcelHelpers.export(exports, "isObject", function() {
    return isObject;
});
parcelHelpers.export(exports, "isPromise", function() {
    return isPromise;
});
parcelHelpers.export(exports, "isString", function() {
    return isString;
});
parcelHelpers.export(exports, "move", function() {
    return move;
});
parcelHelpers.export(exports, "prepareDataForValidation", function() {
    return prepareDataForValidation;
});
parcelHelpers.export(exports, "replace", function() {
    return replace;
});
parcelHelpers.export(exports, "setIn", function() {
    return setIn;
});
parcelHelpers.export(exports, "setNestedObjectValues", function() {
    return setNestedObjectValues;
});
parcelHelpers.export(exports, "swap", function() {
    return swap;
});
parcelHelpers.export(exports, "useField", function() {
    return useField;
});
parcelHelpers.export(exports, "useFormik", function() {
    return useFormik;
});
parcelHelpers.export(exports, "useFormikContext", function() {
    return useFormikContext;
});
parcelHelpers.export(exports, "validateYupSchema", function() {
    return validateYupSchema;
});
parcelHelpers.export(exports, "withFormik", function() {
    return withFormik;
});
parcelHelpers.export(exports, "yupToFormErrors", function() {
    return yupToFormErrors;
});
var _react = require("react");
var _reactFastCompare = require("react-fast-compare");
var _reactFastCompareDefault = parcelHelpers.interopDefault(_reactFastCompare);
var _deepmerge = require("deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _isPlainObject = require("lodash-es/isPlainObject");
var _isPlainObjectDefault = parcelHelpers.interopDefault(_isPlainObject);
var _clone = require("lodash-es/clone");
var _cloneDefault = parcelHelpers.interopDefault(_clone);
var _toPath = require("lodash-es/toPath");
var _toPathDefault = parcelHelpers.interopDefault(_toPath);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
var _cloneDeep = require("lodash-es/cloneDeep");
var _cloneDeepDefault = parcelHelpers.interopDefault(_cloneDeep);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
/** @private is the value an empty array? */ var isEmptyArray = function isEmptyArray(value) {
    return Array.isArray(value) && value.length === 0;
};
/** @private is the given object a Function? */ var isFunction = function isFunction(obj) {
    return typeof obj === 'function';
};
/** @private is the given object an Object? */ var isObject = function isObject(obj) {
    return obj !== null && typeof obj === 'object';
};
/** @private is the given object an integer? */ var isInteger = function isInteger(obj) {
    return String(Math.floor(Number(obj))) === obj;
};
/** @private is the given object a string? */ var isString = function isString(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
};
/** @private is the given object a NaN? */ // eslint-disable-next-line no-self-compare
var isNaN$1 = function isNaN(obj) {
    return obj !== obj;
};
/** @private Does a React component have exactly 0 children? */ var isEmptyChildren = function isEmptyChildren(children) {
    return _react.Children.count(children) === 0;
};
/** @private is the given object/value a promise? */ var isPromise = function isPromise(value) {
    return isObject(value) && isFunction(value.then);
};
/** @private is the given object/value a type of synthetic event? */ var isInputEvent = function isInputEvent(value) {
    return value && isObject(value) && isObject(value.target);
};
/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?Document} doc Defaults to current document.
 * @return {Element | null}
 * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js
 */ function getActiveElement(doc) {
    doc = doc || (typeof document !== 'undefined' ? document : undefined);
    if (typeof doc === 'undefined') return null;
    try {
        return doc.activeElement || doc.body;
    } catch (e) {
        return doc.body;
    }
}
/**
 * Deeply get a value from an object via its path.
 */ function getIn(obj, key, def, p) {
    if (p === void 0) p = 0;
    var path = _toPathDefault.default(key);
    while(obj && p < path.length)obj = obj[path[p++]];
    return obj === undefined ? def : obj;
}
/**
 * Deeply set a value from in object via it's path. If the value at `path`
 * has changed, return a shallow copy of obj with `value` set at `path`.
 * If `value` has not changed, return the original `obj`.
 *
 * Existing objects / arrays along `path` are also shallow copied. Sibling
 * objects along path retain the same internal js reference. Since new
 * objects / arrays are only created along `path`, we can test if anything
 * changed in a nested structure by comparing the object's reference in
 * the old and new object, similar to how russian doll cache invalidation
 * works.
 *
 * In earlier versions of this function, which used cloneDeep, there were
 * issues whereby settings a nested value would mutate the parent
 * instead of creating a new object. `clone` avoids that bug making a
 * shallow copy of the objects along the update path
 * so no object is mutated in place.
 *
 * Before changing this function, please read through the following
 * discussions.
 *
 * @see https://github.com/developit/linkstate
 * @see https://github.com/jaredpalmer/formik/pull/123
 */ function setIn(obj, path, value) {
    var res = _cloneDefault.default(obj); // this keeps inheritance when obj is a class
    var resVal = res;
    var i = 0;
    var pathArray = _toPathDefault.default(path);
    for(; i < pathArray.length - 1; i++){
        var currentPath = pathArray[i];
        var currentObj = getIn(obj, pathArray.slice(0, i + 1));
        if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) resVal = resVal[currentPath] = _cloneDefault.default(currentObj);
        else {
            var nextPath = pathArray[i + 1];
            resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {
            };
        }
    } // Return original object if new value is the same as current
    if ((i === 0 ? obj : resVal)[pathArray[i]] === value) return obj;
    if (value === undefined) delete resVal[pathArray[i]];
    else resVal[pathArray[i]] = value;
     // If the path array has a single element, the loop did not run.
    // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.
    if (i === 0 && value === undefined) delete res[pathArray[i]];
    return res;
}
/**
 * Recursively a set the same value for all keys and arrays nested object, cloning
 * @param object
 * @param value
 * @param visited
 * @param response
 */ function setNestedObjectValues(object, value, visited, response) {
    if (visited === void 0) visited = new WeakMap();
    if (response === void 0) response = {
    };
    for(var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++){
        var k = _Object$keys[_i];
        var val = object[k];
        if (isObject(val)) {
            if (!visited.get(val)) {
                visited.set(val, true); // In order to keep array values consistent for both dot path  and
                // bracket syntax, we need to check if this is an array so that
                // this will output  { friends: [true] } and not { friends: { "0": true } }
                response[k] = Array.isArray(val) ? [] : {
                };
                setNestedObjectValues(val, value, visited, response[k]);
            }
        } else response[k] = value;
    }
    return response;
}
var FormikContext = /*#__PURE__*/ _react.createContext(undefined);
FormikContext.displayName = 'FormikContext';
var FormikProvider = FormikContext.Provider;
var FormikConsumer = FormikContext.Consumer;
function useFormikContext() {
    var formik = _react.useContext(FormikContext);
    !!!formik && _tinyWarningDefault.default(false, "Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.");
    return formik;
}
function formikReducer(state, msg) {
    switch(msg.type){
        case 'SET_VALUES':
            return _extends({
            }, state, {
                values: msg.payload
            });
        case 'SET_TOUCHED':
            return _extends({
            }, state, {
                touched: msg.payload
            });
        case 'SET_ERRORS':
            if (_reactFastCompareDefault.default(state.errors, msg.payload)) return state;
            return _extends({
            }, state, {
                errors: msg.payload
            });
        case 'SET_STATUS':
            return _extends({
            }, state, {
                status: msg.payload
            });
        case 'SET_ISSUBMITTING':
            return _extends({
            }, state, {
                isSubmitting: msg.payload
            });
        case 'SET_ISVALIDATING':
            return _extends({
            }, state, {
                isValidating: msg.payload
            });
        case 'SET_FIELD_VALUE':
            return _extends({
            }, state, {
                values: setIn(state.values, msg.payload.field, msg.payload.value)
            });
        case 'SET_FIELD_TOUCHED':
            return _extends({
            }, state, {
                touched: setIn(state.touched, msg.payload.field, msg.payload.value)
            });
        case 'SET_FIELD_ERROR':
            return _extends({
            }, state, {
                errors: setIn(state.errors, msg.payload.field, msg.payload.value)
            });
        case 'RESET_FORM':
            return _extends({
            }, state, msg.payload);
        case 'SET_FORMIK_STATE':
            return msg.payload(state);
        case 'SUBMIT_ATTEMPT':
            return _extends({
            }, state, {
                touched: setNestedObjectValues(state.values, true),
                isSubmitting: true,
                submitCount: state.submitCount + 1
            });
        case 'SUBMIT_FAILURE':
            return _extends({
            }, state, {
                isSubmitting: false
            });
        case 'SUBMIT_SUCCESS':
            return _extends({
            }, state, {
                isSubmitting: false
            });
        default:
            return state;
    }
} // Initial empty states // objects
var emptyErrors = {
};
var emptyTouched = {
};
function useFormik(_ref) {
    var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose(_ref, [
        "validateOnChange",
        "validateOnBlur",
        "validateOnMount",
        "isInitialValid",
        "enableReinitialize",
        "onSubmit"
    ]);
    var props = _extends({
        validateOnChange: validateOnChange,
        validateOnBlur: validateOnBlur,
        validateOnMount: validateOnMount,
        onSubmit: onSubmit
    }, rest);
    var initialValues = _react.useRef(props.initialValues);
    var initialErrors = _react.useRef(props.initialErrors || emptyErrors);
    var initialTouched = _react.useRef(props.initialTouched || emptyTouched);
    var initialStatus = _react.useRef(props.initialStatus);
    var isMounted = _react.useRef(false);
    var fieldRegistry = _react.useRef({
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(function() {
        !(typeof isInitialValid === 'undefined') && _tinyWarningDefault.default(false, 'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'); // eslint-disable-next-line
    }, []);
    _react.useEffect(function() {
        isMounted.current = true;
        return function() {
            isMounted.current = false;
        };
    }, []);
    var _React$useReducer = _react.useReducer(formikReducer, {
        values: props.initialValues,
        errors: props.initialErrors || emptyErrors,
        touched: props.initialTouched || emptyTouched,
        status: props.initialStatus,
        isSubmitting: false,
        isValidating: false,
        submitCount: 0
    }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
    var runValidateHandler = _react.useCallback(function(values, field) {
        return new Promise(function(resolve, reject) {
            var maybePromisedErrors = props.validate(values, field);
            if (maybePromisedErrors == null) // use loose null check here on purpose
            resolve(emptyErrors);
            else if (isPromise(maybePromisedErrors)) maybePromisedErrors.then(function(errors) {
                resolve(errors || emptyErrors);
            }, function(actualException) {
                console.warn("Warning: An unhandled error was caught during validation in <Formik validate />", actualException);
                reject(actualException);
            });
            else resolve(maybePromisedErrors);
        });
    }, [
        props.validate
    ]);
    /**
   * Run validation against a Yup schema and optionally run a function if successful
   */ var runValidationSchema = _react.useCallback(function(values, field) {
        var validationSchema = props.validationSchema;
        var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;
        var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
        return new Promise(function(resolve, reject) {
            promise.then(function() {
                resolve(emptyErrors);
            }, function(err) {
                // Yup will throw a validation error if validation fails. We catch those and
                // resolve them into Formik errors. We can sniff if something is a Yup error
                // by checking error.name.
                // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string
                if (err.name === 'ValidationError') resolve(yupToFormErrors(err));
                else {
                    console.warn("Warning: An unhandled error was caught during validation in <Formik validationSchema />", err);
                    reject(err);
                }
            });
        });
    }, [
        props.validationSchema
    ]);
    var runSingleFieldLevelValidation = _react.useCallback(function(field, value) {
        return new Promise(function(resolve) {
            return resolve(fieldRegistry.current[field].validate(value));
        });
    }, []);
    var runFieldLevelValidations = _react.useCallback(function(values) {
        var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f) {
            return isFunction(fieldRegistry.current[f].validate);
        }); // Construct an array with all of the field validation functions
        var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f) {
            return runSingleFieldLevelValidation(f, getIn(values, f));
        }) : [
            Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')
        ]; // use special case ;)
        return Promise.all(fieldValidations).then(function(fieldErrorsList) {
            return fieldErrorsList.reduce(function(prev, curr, index) {
                if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') return prev;
                if (curr) prev = setIn(prev, fieldKeysWithValidation[index], curr);
                return prev;
            }, {
            });
        });
    }, [
        runSingleFieldLevelValidation
    ]); // Run all validations and return the result
    var runAllValidations = _react.useCallback(function(values) {
        return Promise.all([
            runFieldLevelValidations(values),
            props.validationSchema ? runValidationSchema(values) : {
            },
            props.validate ? runValidateHandler(values) : {
            }
        ]).then(function(_ref2) {
            var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
            var combinedErrors = _deepmergeDefault.default.all([
                fieldErrors,
                schemaErrors,
                validateErrors
            ], {
                arrayMerge: arrayMerge
            });
            return combinedErrors;
        });
    }, [
        props.validate,
        props.validationSchema,
        runFieldLevelValidations,
        runValidateHandler,
        runValidationSchema
    ]); // Run all validations methods and update state accordingly
    var validateFormWithHighPriority = useEventCallback(function(values) {
        if (values === void 0) values = state.values;
        dispatch({
            type: 'SET_ISVALIDATING',
            payload: true
        });
        return runAllValidations(values).then(function(combinedErrors) {
            if (!!isMounted.current) {
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: false
                });
                dispatch({
                    type: 'SET_ERRORS',
                    payload: combinedErrors
                });
            }
            return combinedErrors;
        });
    });
    _react.useEffect(function() {
        if (validateOnMount && isMounted.current === true && _reactFastCompareDefault.default(initialValues.current, props.initialValues)) validateFormWithHighPriority(initialValues.current);
    }, [
        validateOnMount,
        validateFormWithHighPriority
    ]);
    var resetForm = _react.useCallback(function(nextState) {
        var values = nextState && nextState.values ? nextState.values : initialValues.current;
        var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {
        };
        var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {
        };
        var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
        initialValues.current = values;
        initialErrors.current = errors;
        initialTouched.current = touched;
        initialStatus.current = status;
        var dispatchFn = function dispatchFn() {
            dispatch({
                type: 'RESET_FORM',
                payload: {
                    isSubmitting: !!nextState && !!nextState.isSubmitting,
                    errors: errors,
                    touched: touched,
                    status: status,
                    values: values,
                    isValidating: !!nextState && !!nextState.isValidating,
                    submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0
                }
            });
        };
        if (props.onReset) {
            var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
            if (isPromise(maybePromisedOnReset)) maybePromisedOnReset.then(dispatchFn);
            else dispatchFn();
        } else dispatchFn();
    }, [
        props.initialErrors,
        props.initialStatus,
        props.initialTouched
    ]);
    _react.useEffect(function() {
        if (isMounted.current === true && !_reactFastCompareDefault.default(initialValues.current, props.initialValues)) {
            if (enableReinitialize) {
                initialValues.current = props.initialValues;
                resetForm();
            }
            if (validateOnMount) validateFormWithHighPriority(initialValues.current);
        }
    }, [
        enableReinitialize,
        props.initialValues,
        resetForm,
        validateOnMount,
        validateFormWithHighPriority
    ]);
    _react.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !_reactFastCompareDefault.default(initialErrors.current, props.initialErrors)) {
            initialErrors.current = props.initialErrors || emptyErrors;
            dispatch({
                type: 'SET_ERRORS',
                payload: props.initialErrors || emptyErrors
            });
        }
    }, [
        enableReinitialize,
        props.initialErrors
    ]);
    _react.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !_reactFastCompareDefault.default(initialTouched.current, props.initialTouched)) {
            initialTouched.current = props.initialTouched || emptyTouched;
            dispatch({
                type: 'SET_TOUCHED',
                payload: props.initialTouched || emptyTouched
            });
        }
    }, [
        enableReinitialize,
        props.initialTouched
    ]);
    _react.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !_reactFastCompareDefault.default(initialStatus.current, props.initialStatus)) {
            initialStatus.current = props.initialStatus;
            dispatch({
                type: 'SET_STATUS',
                payload: props.initialStatus
            });
        }
    }, [
        enableReinitialize,
        props.initialStatus,
        props.initialTouched
    ]);
    var validateField = useEventCallback(function(name) {
        // This will efficiently validate a single field by avoiding state
        // changes if the validation function is synchronous. It's different from
        // what is called when using validateForm.
        if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
            var value = getIn(state.values, name);
            var maybePromise = fieldRegistry.current[name].validate(value);
            if (isPromise(maybePromise)) {
                // Only flip isValidating if the function is async.
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: true
                });
                return maybePromise.then(function(x) {
                    return x;
                }).then(function(error) {
                    dispatch({
                        type: 'SET_FIELD_ERROR',
                        payload: {
                            field: name,
                            value: error
                        }
                    });
                    dispatch({
                        type: 'SET_ISVALIDATING',
                        payload: false
                    });
                });
            } else {
                dispatch({
                    type: 'SET_FIELD_ERROR',
                    payload: {
                        field: name,
                        value: maybePromise
                    }
                });
                return Promise.resolve(maybePromise);
            }
        } else if (props.validationSchema) {
            dispatch({
                type: 'SET_ISVALIDATING',
                payload: true
            });
            return runValidationSchema(state.values, name).then(function(x) {
                return x;
            }).then(function(error) {
                dispatch({
                    type: 'SET_FIELD_ERROR',
                    payload: {
                        field: name,
                        value: error[name]
                    }
                });
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: false
                });
            });
        }
        return Promise.resolve();
    });
    var registerField = _react.useCallback(function(name, _ref3) {
        var validate = _ref3.validate;
        fieldRegistry.current[name] = {
            validate: validate
        };
    }, []);
    var unregisterField = _react.useCallback(function(name) {
        delete fieldRegistry.current[name];
    }, []);
    var setTouched = useEventCallback(function(touched, shouldValidate) {
        dispatch({
            type: 'SET_TOUCHED',
            payload: touched
        });
        var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
    });
    var setErrors = _react.useCallback(function(errors) {
        dispatch({
            type: 'SET_ERRORS',
            payload: errors
        });
    }, []);
    var setValues = useEventCallback(function(values, shouldValidate) {
        var resolvedValues = isFunction(values) ? values(state.values) : values;
        dispatch({
            type: 'SET_VALUES',
            payload: resolvedValues
        });
        var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
    });
    var setFieldError = _react.useCallback(function(field, value) {
        dispatch({
            type: 'SET_FIELD_ERROR',
            payload: {
                field: field,
                value: value
            }
        });
    }, []);
    var setFieldValue = useEventCallback(function(field, value, shouldValidate) {
        dispatch({
            type: 'SET_FIELD_VALUE',
            payload: {
                field: field,
                value: value
            }
        });
        var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
    });
    var executeChange = _react.useCallback(function(eventOrTextValue, maybePath) {
        // By default, assume that the first argument is a string. This allows us to use
        // handleChange with React Native and React Native Web's onChangeText prop which
        // provides just the value of the input.
        var field = maybePath;
        var val = eventOrTextValue;
        var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),
        // so we handle like we would a normal HTML change event.
        if (!isString(eventOrTextValue)) {
            // If we can, persist the event
            // @see https://reactjs.org/docs/events.html#event-pooling
            if (eventOrTextValue.persist) eventOrTextValue.persist();
            var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
            var type = target.type, name = target.name, id = target.id, value = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
            field = maybePath ? maybePath : name ? name : id;
            if (!field && true) warnAboutMissingIdentifier({
                htmlContent: outerHTML,
                documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',
                handlerName: 'handleChange'
            });
            val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes
             ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple // <select multiple>
             ? getSelectedValues(options) : value;
        }
        if (field) // Set form fields by name
        setFieldValue(field, val);
    }, [
        setFieldValue,
        state.values
    ]);
    var handleChange = useEventCallback(function(eventOrPath) {
        if (isString(eventOrPath)) return function(event) {
            return executeChange(event, eventOrPath);
        };
        else executeChange(eventOrPath);
    });
    var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
        if (touched === void 0) touched = true;
        dispatch({
            type: 'SET_FIELD_TOUCHED',
            payload: {
                field: field,
                value: touched
            }
        });
        var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
    });
    var executeBlur = _react.useCallback(function(e, path) {
        if (e.persist) e.persist();
        var _e$target = e.target, name = _e$target.name, id = _e$target.id, outerHTML = _e$target.outerHTML;
        var field = path ? path : name ? name : id;
        if (!field && true) warnAboutMissingIdentifier({
            htmlContent: outerHTML,
            documentationAnchorLink: 'handleblur-e-any--void',
            handlerName: 'handleBlur'
        });
        setFieldTouched(field, true);
    }, [
        setFieldTouched
    ]);
    var handleBlur = useEventCallback(function(eventOrString) {
        if (isString(eventOrString)) return function(event) {
            return executeBlur(event, eventOrString);
        };
        else executeBlur(eventOrString);
    });
    var setFormikState = _react.useCallback(function(stateOrCb) {
        if (isFunction(stateOrCb)) dispatch({
            type: 'SET_FORMIK_STATE',
            payload: stateOrCb
        });
        else dispatch({
            type: 'SET_FORMIK_STATE',
            payload: function payload() {
                return stateOrCb;
            }
        });
    }, []);
    var setStatus = _react.useCallback(function(status) {
        dispatch({
            type: 'SET_STATUS',
            payload: status
        });
    }, []);
    var setSubmitting = _react.useCallback(function(isSubmitting) {
        dispatch({
            type: 'SET_ISSUBMITTING',
            payload: isSubmitting
        });
    }, []);
    var submitForm = useEventCallback(function() {
        dispatch({
            type: 'SUBMIT_ATTEMPT'
        });
        return validateFormWithHighPriority().then(function(combinedErrors) {
            // In case an error was thrown and passed to the resolved Promise,
            // `combinedErrors` can be an instance of an Error. We need to check
            // that and abort the submit.
            // If we don't do that, calling `Object.keys(new Error())` yields an
            // empty array, which causes the validation to pass and the form
            // to be submitted.
            var isInstanceOfError = combinedErrors instanceof Error;
            var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
            if (isActuallyValid) {
                // Proceed with submit...
                //
                // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and
                // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.
                // This would be fine in simple cases, but make it impossible to disable submit
                // buttons where people use callbacks or promises as side effects (which is basically
                // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,
                //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.
                // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle
                // cleanup of isSubmitting on behalf of the consumer.
                var promiseOrUndefined;
                try {
                    promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up
                    // via setSubmitting(false)
                    if (promiseOrUndefined === undefined) return;
                } catch (error) {
                    throw error;
                }
                return Promise.resolve(promiseOrUndefined).then(function(result) {
                    if (!!isMounted.current) dispatch({
                        type: 'SUBMIT_SUCCESS'
                    });
                    return result;
                })["catch"](function(_errors) {
                    if (!!isMounted.current) {
                        dispatch({
                            type: 'SUBMIT_FAILURE'
                        }); // This is a legit error rejected by the onSubmit fn
                        // so we don't want to break the promise chain
                        throw _errors;
                    }
                });
            } else if (!!isMounted.current) {
                // ^^^ Make sure Formik is still mounted before updating state
                dispatch({
                    type: 'SUBMIT_FAILURE'
                }); // throw combinedErrors;
                if (isInstanceOfError) throw combinedErrors;
            }
            return;
        });
    });
    var handleSubmit = useEventCallback(function(e) {
        if (e && e.preventDefault && isFunction(e.preventDefault)) e.preventDefault();
        if (e && e.stopPropagation && isFunction(e.stopPropagation)) e.stopPropagation();
         // Warn if form submission is triggered by a <button> without a
        // specified `type` attribute during development. This mitigates
        // a common gotcha in forms with both reset and submit buttons,
        // where the dev forgets to add type="button" to the reset button.
        if (typeof document !== 'undefined') {
            // Safely get the active element (works with IE)
            var activeElement = getActiveElement();
            if (activeElement !== null && activeElement instanceof HTMLButtonElement) !(activeElement.attributes && activeElement.attributes.getNamedItem('type')) && _tinyWarningDefault.default(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type="submit"`. If this is not a submit button, please add `type="button"`.');
        }
        submitForm()["catch"](function(reason) {
            console.warn("Warning: An unhandled error was caught from submitForm()", reason);
        });
    });
    var imperativeMethods = {
        resetForm: resetForm,
        validateForm: validateFormWithHighPriority,
        validateField: validateField,
        setErrors: setErrors,
        setFieldError: setFieldError,
        setFieldTouched: setFieldTouched,
        setFieldValue: setFieldValue,
        setStatus: setStatus,
        setSubmitting: setSubmitting,
        setTouched: setTouched,
        setValues: setValues,
        setFormikState: setFormikState,
        submitForm: submitForm
    };
    var executeSubmit = useEventCallback(function() {
        return onSubmit(state.values, imperativeMethods);
    });
    var handleReset = useEventCallback(function(e) {
        if (e && e.preventDefault && isFunction(e.preventDefault)) e.preventDefault();
        if (e && e.stopPropagation && isFunction(e.stopPropagation)) e.stopPropagation();
        resetForm();
    });
    var getFieldMeta = _react.useCallback(function(name) {
        return {
            value: getIn(state.values, name),
            error: getIn(state.errors, name),
            touched: !!getIn(state.touched, name),
            initialValue: getIn(initialValues.current, name),
            initialTouched: !!getIn(initialTouched.current, name),
            initialError: getIn(initialErrors.current, name)
        };
    }, [
        state.errors,
        state.touched,
        state.values
    ]);
    var getFieldHelpers = _react.useCallback(function(name) {
        return {
            setValue: function setValue(value, shouldValidate) {
                return setFieldValue(name, value, shouldValidate);
            },
            setTouched: function setTouched(value, shouldValidate) {
                return setFieldTouched(name, value, shouldValidate);
            },
            setError: function setError(value) {
                return setFieldError(name, value);
            }
        };
    }, [
        setFieldValue,
        setFieldTouched,
        setFieldError
    ]);
    var getFieldProps = _react.useCallback(function(nameOrOptions) {
        var isAnObject = isObject(nameOrOptions);
        var name = isAnObject ? nameOrOptions.name : nameOrOptions;
        var valueState = getIn(state.values, name);
        var field = {
            name: name,
            value: valueState,
            onChange: handleChange,
            onBlur: handleBlur
        };
        if (isAnObject) {
            var type = nameOrOptions.type, valueProp = nameOrOptions.value, is = nameOrOptions.as, multiple = nameOrOptions.multiple;
            if (type === 'checkbox') {
                if (valueProp === undefined) field.checked = !!valueState;
                else {
                    field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
                    field.value = valueProp;
                }
            } else if (type === 'radio') {
                field.checked = valueState === valueProp;
                field.value = valueProp;
            } else if (is === 'select' && multiple) {
                field.value = field.value || [];
                field.multiple = true;
            }
        }
        return field;
    }, [
        handleBlur,
        handleChange,
        state.values
    ]);
    var dirty = _react.useMemo(function() {
        return !_reactFastCompareDefault.default(initialValues.current, state.values);
    }, [
        initialValues.current,
        state.values
    ]);
    var isValid = _react.useMemo(function() {
        return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
    }, [
        isInitialValid,
        dirty,
        state.errors,
        props
    ]);
    var ctx = _extends({
    }, state, {
        initialValues: initialValues.current,
        initialErrors: initialErrors.current,
        initialTouched: initialTouched.current,
        initialStatus: initialStatus.current,
        handleBlur: handleBlur,
        handleChange: handleChange,
        handleReset: handleReset,
        handleSubmit: handleSubmit,
        resetForm: resetForm,
        setErrors: setErrors,
        setFormikState: setFormikState,
        setFieldTouched: setFieldTouched,
        setFieldValue: setFieldValue,
        setFieldError: setFieldError,
        setStatus: setStatus,
        setSubmitting: setSubmitting,
        setTouched: setTouched,
        setValues: setValues,
        submitForm: submitForm,
        validateForm: validateFormWithHighPriority,
        validateField: validateField,
        isValid: isValid,
        dirty: dirty,
        unregisterField: unregisterField,
        registerField: registerField,
        getFieldProps: getFieldProps,
        getFieldMeta: getFieldMeta,
        getFieldHelpers: getFieldHelpers,
        validateOnBlur: validateOnBlur,
        validateOnChange: validateOnChange,
        validateOnMount: validateOnMount
    });
    return ctx;
}
function Formik(props) {
    var formikbag = useFormik(props);
    var component = props.component, children = props.children, render = props.render, innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />
    _react.useImperativeHandle(innerRef, function() {
        return formikbag;
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(function() {
        !!props.render && _tinyWarningDefault.default(false, "<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>"); // eslint-disable-next-line
    }, []);
    return _react.createElement(FormikProvider, {
        value: formikbag
    }, component ? _react.createElement(component, formikbag) : render ? render(formikbag) : children // children come last, always called
     ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? _react.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
    var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
    console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
/**
 * Transform Yup ValidationError to a more usable object
 */ function yupToFormErrors(yupError) {
    var errors = {
    };
    if (yupError.inner) {
        if (yupError.inner.length === 0) return setIn(errors, yupError.path, yupError.message);
        for(var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
            var _ref5;
            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref5 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref5 = _i.value;
            }
            var err = _ref5;
            if (!getIn(errors, err.path)) errors = setIn(errors, err.path, err.message);
        }
    }
    return errors;
}
/**
 * Validate a yup schema.
 */ function validateYupSchema(values, schema, sync, context) {
    if (sync === void 0) sync = false;
    if (context === void 0) context = {
    };
    var validateData = prepareDataForValidation(values);
    return schema[sync ? 'validateSync' : 'validate'](validateData, {
        abortEarly: false,
        context: context
    });
}
/**
 * Recursively prepare values.
 */ function prepareDataForValidation(values) {
    var data = Array.isArray(values) ? [] : {
    };
    for(var k in values)if (Object.prototype.hasOwnProperty.call(values, k)) {
        var key = String(k);
        if (Array.isArray(values[key]) === true) data[key] = values[key].map(function(value) {
            if (Array.isArray(value) === true || _isPlainObjectDefault.default(value)) return prepareDataForValidation(value);
            else return value !== '' ? value : undefined;
        });
        else if (_isPlainObjectDefault.default(values[key])) data[key] = prepareDataForValidation(values[key]);
        else data[key] = values[key] !== '' ? values[key] : undefined;
    }
    return data;
}
/**
 * deepmerge array merging algorithm
 * https://github.com/KyleAMathews/deepmerge#combine-array
 */ function arrayMerge(target, source, options) {
    var destination = target.slice();
    source.forEach(function merge(e, i) {
        if (typeof destination[i] === 'undefined') {
            var cloneRequested = options.clone !== false;
            var shouldClone = cloneRequested && options.isMergeableObject(e);
            destination[i] = shouldClone ? _deepmergeDefault.default(Array.isArray(e) ? [] : {
            }, e, options) : e;
        } else if (options.isMergeableObject(e)) destination[i] = _deepmergeDefault.default(target[i], e, options);
        else if (target.indexOf(e) === -1) destination.push(e);
    });
    return destination;
}
/** Return multi select values based on an array of options */ function getSelectedValues(options) {
    return Array.from(options).filter(function(el) {
        return el.selected;
    }).map(function(el) {
        return el.value;
    });
}
/** Return the next value for a checkbox */ function getValueForCheckbox(currentValue, checked, valueProp) {
    // If the current value was a boolean, return a boolean
    if (typeof currentValue === 'boolean') return Boolean(checked);
     // If the currentValue was not a boolean we want to return an array
    var currentArrayOfValues = [];
    var isValueInArray = false;
    var index = -1;
    if (!Array.isArray(currentValue)) {
        // eslint-disable-next-line eqeqeq
        if (!valueProp || valueProp == 'true' || valueProp == 'false') return Boolean(checked);
    } else {
        // If the current value is already an array, use it
        currentArrayOfValues = currentValue;
        index = currentValue.indexOf(valueProp);
        isValueInArray = index >= 0;
    } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values
    if (checked && valueProp && !isValueInArray) return currentArrayOfValues.concat(valueProp);
     // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values
    if (!isValueInArray) return currentArrayOfValues;
     // If the checkbox was unchecked and the value is in the array, remove the value and return the array
    return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
} // React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser.
// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;
function useEventCallback(fn) {
    var ref = _react.useRef(fn); // we copy a ref to the callback scoped to the current state/props on each render
    useIsomorphicLayoutEffect(function() {
        ref.current = fn;
    });
    return _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return ref.current.apply(void 0, args);
    }, []);
}
function useField(propsOrFieldName) {
    var formik = useFormikContext();
    var getFieldProps = formik.getFieldProps, getFieldMeta = formik.getFieldMeta, getFieldHelpers = formik.getFieldHelpers, registerField = formik.registerField, unregisterField = formik.unregisterField;
    var isAnObject = isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>
    var props = isAnObject ? propsOrFieldName : {
        name: propsOrFieldName
    };
    var fieldName = props.name, validateFn = props.validate;
    _react.useEffect(function() {
        if (fieldName) registerField(fieldName, {
            validate: validateFn
        });
        return function() {
            if (fieldName) unregisterField(fieldName);
        };
    }, [
        registerField,
        unregisterField,
        fieldName,
        validateFn
    ]);
    !formik && _tinyWarningDefault.default(false, 'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component');
    !fieldName && _tinyWarningDefault.default(false, 'Invalid field name. Either pass `useField` a string or an object containing a `name` key.');
    return [
        getFieldProps(props),
        getFieldMeta(fieldName),
        getFieldHelpers(fieldName)
    ];
}
function Field(_ref) {
    var validate = _ref.validate, name = _ref.name, render = _ref.render, children = _ref.children, is = _ref.as, component = _ref.component, props = _objectWithoutPropertiesLoose(_ref, [
        "validate",
        "name",
        "render",
        "children",
        "as",
        "component"
    ]);
    var _useFormikContext = useFormikContext(), formik = _objectWithoutPropertiesLoose(_useFormikContext, [
        "validate",
        "validationSchema"
    ]);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(function() {
        !!render && _tinyWarningDefault.default(false, "<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"" + name + "\" render={({field, form}) => ...} /> with <Field name=\"" + name + "\">{({field, form, meta}) => ...}</Field>");
        !!(is && children && isFunction(children)) && _tinyWarningDefault.default(false, 'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.');
        !!(component && children && isFunction(children)) && _tinyWarningDefault.default(false, 'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.');
        !!(render && children && !isEmptyChildren(children)) && _tinyWarningDefault.default(false, 'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'); // eslint-disable-next-line
    }, []);
    var registerField = formik.registerField, unregisterField = formik.unregisterField;
    _react.useEffect(function() {
        registerField(name, {
            validate: validate
        });
        return function() {
            unregisterField(name);
        };
    }, [
        registerField,
        unregisterField,
        name,
        validate
    ]);
    var field = formik.getFieldProps(_extends({
        name: name
    }, props));
    var meta = formik.getFieldMeta(name);
    var legacyBag = {
        field: field,
        form: formik
    };
    if (render) return render(_extends({
    }, legacyBag, {
        meta: meta
    }));
    if (isFunction(children)) return children(_extends({
    }, legacyBag, {
        meta: meta
    }));
    if (component) {
        // This behavior is backwards compat with earlier Formik 0.9 to 1.x
        if (typeof component === 'string') {
            var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose(props, [
                "innerRef"
            ]);
            return _react.createElement(component, _extends({
                ref: innerRef
            }, field, rest), children);
        } // We don't pass `meta` for backwards compat
        return _react.createElement(component, _extends({
            field: field,
            form: formik
        }, props), children);
    } // default to input here so we can check for both `as` and `children` above
    var asElement = is || 'input';
    if (typeof asElement === 'string') {
        var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose(props, [
            "innerRef"
        ]);
        return _react.createElement(asElement, _extends({
            ref: _innerRef
        }, field, _rest), children);
    }
    return _react.createElement(asElement, _extends({
    }, field, props), children);
}
var Form = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    // iOS needs an "action" attribute for nice input: https://stackoverflow.com/a/39485162/406725
    // We default the action to "#" in case the preventDefault fails (just updates the URL hash)
    var action = props.action, rest = _objectWithoutPropertiesLoose(props, [
        "action"
    ]);
    var _action = action != null ? action : '#';
    var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
    return _react.createElement("form", Object.assign({
        onSubmit: handleSubmit,
        ref: ref,
        onReset: handleReset,
        action: _action
    }, rest));
});
Form.displayName = 'Form';
/**
 * A public higher-order component to access the imperative API
 */ function withFormik(_ref) {
    var _ref$mapPropsToValues = _ref.mapPropsToValues, mapPropsToValues = _ref$mapPropsToValues === void 0 ? function mapPropsToValues(vanillaProps) {
        var val = {
        };
        for(var k in vanillaProps)if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') // @todo TypeScript fix
        val[k] = vanillaProps[k];
        return val;
    } : _ref$mapPropsToValues, config = _objectWithoutPropertiesLoose(_ref, [
        "mapPropsToValues"
    ]);
    return function createFormik(Component$1) {
        var componentDisplayName = Component$1.displayName || Component$1.name || Component$1.constructor && Component$1.constructor.name || 'Component';
        /**
     * We need to use closures here for to provide the wrapped component's props to
     * the respective withFormik config methods.
     */ var C1 = /*#__PURE__*/ function(_React$Component) {
            _inheritsLoose(C, _React$Component);
            function C() {
                var _this;
                _this = _React$Component.apply(this, arguments) || this;
                _this.validate = function(values) {
                    return config.validate(values, _this.props);
                };
                _this.validationSchema = function() {
                    return isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;
                };
                _this.handleSubmit = function(values, actions) {
                    return config.handleSubmit(values, _extends({
                    }, actions, {
                        props: _this.props
                    }));
                };
                /**
         * Just avoiding a render callback for perf here
         */ _this.renderFormComponent = function(formikProps) {
                    return _react.createElement(Component$1, Object.assign({
                    }, _this.props, formikProps));
                };
                return _this;
            }
            var _proto = C.prototype;
            _proto.render = function render() {
                var _this$props = this.props, props = _objectWithoutPropertiesLoose(_this$props, [
                    "children"
                ]);
                return _react.createElement(Formik, Object.assign({
                }, props, config, {
                    validate: config.validate && this.validate,
                    validationSchema: config.validationSchema && this.validationSchema,
                    initialValues: mapPropsToValues(this.props),
                    initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),
                    initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),
                    initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),
                    onSubmit: this.handleSubmit,
                    children: this.renderFormComponent
                }));
            };
            return C;
        }(_react.Component);
        C1.displayName = "WithFormik(" + componentDisplayName + ")";
        return _hoistNonReactStaticsDefault.default(C1, Component$1 // cast type to ComponentClass (even if SFC)
        );
    };
}
/**
 * Connect any component to Formik context, and inject as a prop called `formik`;
 * @param Comp React Component
 */ function connect(Comp) {
    var C = function C(props) {
        return _react.createElement(FormikConsumer, null, function(formik) {
            !!!formik && _tinyWarningDefault.default(false, "Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: " + Comp.name);
            return _react.createElement(Comp, Object.assign({
            }, props, {
                formik: formik
            }));
        });
    };
    var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests
    // For example, <Field.WrappedComponent /> gets us <FieldInner/>
    C.WrappedComponent = Comp;
    C.displayName = "FormikConnect(" + componentDisplayName + ")";
    return _hoistNonReactStaticsDefault.default(C, Comp // cast type to ComponentClass (even if SFC)
    );
}
/**
 * Some array helpers!
 */ var move = function move(array, from, to) {
    var copy = copyArrayLike(array);
    var value = copy[from];
    copy.splice(from, 1);
    copy.splice(to, 0, value);
    return copy;
};
var swap = function swap(arrayLike, indexA, indexB) {
    var copy = copyArrayLike(arrayLike);
    var a = copy[indexA];
    copy[indexA] = copy[indexB];
    copy[indexB] = a;
    return copy;
};
var insert = function insert(arrayLike, index, value) {
    var copy = copyArrayLike(arrayLike);
    copy.splice(index, 0, value);
    return copy;
};
var replace = function replace(arrayLike, index, value) {
    var copy = copyArrayLike(arrayLike);
    copy[index] = value;
    return copy;
};
var copyArrayLike = function copyArrayLike(arrayLike) {
    if (!arrayLike) return [];
    else if (Array.isArray(arrayLike)) return [].concat(arrayLike);
    else {
        var maxIndex = Object.keys(arrayLike).map(function(key) {
            return parseInt(key);
        }).reduce(function(max, el) {
            return el > max ? el : max;
        }, 0);
        return Array.from(_extends({
        }, arrayLike, {
            length: maxIndex + 1
        }));
    }
};
var FieldArrayInner = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(FieldArrayInner1, _React$Component);
    function FieldArrayInner1(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.updateArrayField = function(fn, alterTouched, alterErrors) {
            var _this$props = _this.props, name = _this$props.name, setFormikState = _this$props.formik.setFormikState;
            setFormikState(function(prevState) {
                var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;
                var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn; // values fn should be executed before updateErrors and updateTouched,
                // otherwise it causes an error with unshift.
                var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));
                var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;
                var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;
                if (isEmptyArray(fieldError)) fieldError = undefined;
                if (isEmptyArray(fieldTouched)) fieldTouched = undefined;
                return _extends({
                }, prevState, {
                    values: values,
                    errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,
                    touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched
                });
            });
        };
        _this.push = function(value) {
            return _this.updateArrayField(function(arrayLike) {
                return [].concat(copyArrayLike(arrayLike), [
                    _cloneDeepDefault.default(value)
                ]);
            }, false, false);
        };
        _this.handlePush = function(value) {
            return function() {
                return _this.push(value);
            };
        };
        _this.swap = function(indexA, indexB) {
            return _this.updateArrayField(function(array) {
                return swap(array, indexA, indexB);
            }, true, true);
        };
        _this.handleSwap = function(indexA, indexB) {
            return function() {
                return _this.swap(indexA, indexB);
            };
        };
        _this.move = function(from, to) {
            return _this.updateArrayField(function(array) {
                return move(array, from, to);
            }, true, true);
        };
        _this.handleMove = function(from, to) {
            return function() {
                return _this.move(from, to);
            };
        };
        _this.insert = function(index, value) {
            return _this.updateArrayField(function(array) {
                return insert(array, index, value);
            }, function(array) {
                return insert(array, index, null);
            }, function(array) {
                return insert(array, index, null);
            });
        };
        _this.handleInsert = function(index, value) {
            return function() {
                return _this.insert(index, value);
            };
        };
        _this.replace = function(index, value) {
            return _this.updateArrayField(function(array) {
                return replace(array, index, value);
            }, false, false);
        };
        _this.handleReplace = function(index, value) {
            return function() {
                return _this.replace(index, value);
            };
        };
        _this.unshift = function(value) {
            var length = -1;
            _this.updateArrayField(function(array) {
                var arr = array ? [
                    value
                ].concat(array) : [
                    value
                ];
                if (length < 0) length = arr.length;
                return arr;
            }, function(array) {
                var arr = array ? [
                    null
                ].concat(array) : [
                    null
                ];
                if (length < 0) length = arr.length;
                return arr;
            }, function(array) {
                var arr = array ? [
                    null
                ].concat(array) : [
                    null
                ];
                if (length < 0) length = arr.length;
                return arr;
            });
            return length;
        };
        _this.handleUnshift = function(value) {
            return function() {
                return _this.unshift(value);
            };
        };
        _this.handleRemove = function(index) {
            return function() {
                return _this.remove(index);
            };
        };
        _this.handlePop = function() {
            return function() {
                return _this.pop();
            };
        }; // We need TypeScript generics on these, so we'll bind them in the constructor
        // @todo Fix TS 3.2.1
        _this.remove = _this.remove.bind(_assertThisInitialized(_this));
        _this.pop = _this.pop.bind(_assertThisInitialized(_this));
        return _this;
    }
    var _proto = FieldArrayInner1.prototype;
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.validateOnChange && this.props.formik.validateOnChange && !_reactFastCompareDefault.default(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name))) this.props.formik.validateForm(this.props.formik.values);
    };
    _proto.remove = function remove(index) {
        // We need to make sure we also remove relevant pieces of `touched` and `errors`
        var result;
        this.updateArrayField(function(array) {
            var copy = array ? copyArrayLike(array) : [];
            if (!result) result = copy[index];
            if (isFunction(copy.splice)) copy.splice(index, 1);
            return copy;
        }, true, true);
        return result;
    };
    _proto.pop = function pop() {
        // Remove relevant pieces of `touched` and `errors` too!
        var result;
        this.updateArrayField(function(array) {
            var tmp = array;
            if (!result) result = tmp && tmp.pop && tmp.pop();
            return tmp;
        }, true, true);
        return result;
    };
    _proto.render = function render() {
        var arrayHelpers = {
            push: this.push,
            pop: this.pop,
            swap: this.swap,
            move: this.move,
            insert: this.insert,
            replace: this.replace,
            unshift: this.unshift,
            remove: this.remove,
            handlePush: this.handlePush,
            handlePop: this.handlePop,
            handleSwap: this.handleSwap,
            handleMove: this.handleMove,
            handleInsert: this.handleInsert,
            handleReplace: this.handleReplace,
            handleUnshift: this.handleUnshift,
            handleRemove: this.handleRemove
        };
        var _this$props2 = this.props, component = _this$props2.component, render = _this$props2.render, children = _this$props2.children, name = _this$props2.name, _this$props2$formik = _this$props2.formik, restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [
            "validate",
            "validationSchema"
        ]);
        var props = _extends({
        }, arrayHelpers, {
            form: restOfFormik,
            name: name
        });
        return component ? _react.createElement(component, props) : render ? render(props) : children // children come last, always called
         ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? _react.Children.only(children) : null : null;
    };
    return FieldArrayInner1;
}(_react.Component);
FieldArrayInner.defaultProps = {
    validateOnChange: true
};
var FieldArray = /*#__PURE__*/ connect(FieldArrayInner);
var ErrorMessageImpl = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(ErrorMessageImpl1, _React$Component);
    function ErrorMessageImpl1() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = ErrorMessageImpl1.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
        if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) return true;
        else return false;
    };
    _proto.render = function render() {
        var _this$props = this.props, component = _this$props.component, formik = _this$props.formik, render = _this$props.render, children = _this$props.children, name = _this$props.name, rest = _objectWithoutPropertiesLoose(_this$props, [
            "component",
            "formik",
            "render",
            "children",
            "name"
        ]);
        var touch = getIn(formik.touched, name);
        var error = getIn(formik.errors, name);
        return !!touch && !!error ? render ? isFunction(render) ? render(error) : null : children ? isFunction(children) ? children(error) : null : component ? _react.createElement(component, rest, error) : error : null;
    };
    return ErrorMessageImpl1;
}(_react.Component);
var ErrorMessage = /*#__PURE__*/ connect(ErrorMessageImpl);
/**
 * Custom Field component for quickly hooking into Formik
 * context and wiring up forms.
 */ var FastFieldInner = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(FastFieldInner1, _React$Component);
    function FastFieldInner1(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        var render = props.render, children = props.children, component = props.component, is = props.as, name = props.name;
        !!render && _tinyWarningDefault.default(false, "<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={" + name + "}>{props => ...}</FastField> instead.");
        !!(component && render) && _tinyWarningDefault.default(false, 'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored');
        !!(is && children && isFunction(children)) && _tinyWarningDefault.default(false, 'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.');
        !!(component && children && isFunction(children)) && _tinyWarningDefault.default(false, 'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.');
        !!(render && children && !isEmptyChildren(children)) && _tinyWarningDefault.default(false, 'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored');
        return _this;
    }
    var _proto = FastFieldInner1.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
        if (this.props.shouldUpdate) return this.props.shouldUpdate(props, this.props);
        else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) return true;
        else return false;
    };
    _proto.componentDidMount = function componentDidMount() {
        // Register the Field with the parent Formik. Parent will cycle through
        // registered Field's validate fns right prior to submit
        this.props.formik.registerField(this.props.name, {
            validate: this.props.validate
        });
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.name !== prevProps.name) {
            this.props.formik.unregisterField(prevProps.name);
            this.props.formik.registerField(this.props.name, {
                validate: this.props.validate
            });
        }
        if (this.props.validate !== prevProps.validate) this.props.formik.registerField(this.props.name, {
            validate: this.props.validate
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.props.formik.unregisterField(this.props.name);
    };
    _proto.render = function render() {
        var _this$props = this.props, name = _this$props.name, render = _this$props.render, is = _this$props.as, children = _this$props.children, component = _this$props.component, formik = _this$props.formik, props = _objectWithoutPropertiesLoose(_this$props, [
            "validate",
            "name",
            "render",
            "as",
            "children",
            "component",
            "shouldUpdate",
            "formik"
        ]);
        var restOfFormik = _objectWithoutPropertiesLoose(formik, [
            "validate",
            "validationSchema"
        ]);
        var field = formik.getFieldProps(_extends({
            name: name
        }, props));
        var meta = {
            value: getIn(formik.values, name),
            error: getIn(formik.errors, name),
            touched: !!getIn(formik.touched, name),
            initialValue: getIn(formik.initialValues, name),
            initialTouched: !!getIn(formik.initialTouched, name),
            initialError: getIn(formik.initialErrors, name)
        };
        var bag = {
            field: field,
            meta: meta,
            form: restOfFormik
        };
        if (render) return render(bag);
        if (isFunction(children)) return children(bag);
        if (component) {
            // This behavior is backwards compat with earlier Formik 0.9 to 1.x
            if (typeof component === 'string') {
                var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose(props, [
                    "innerRef"
                ]);
                return _react.createElement(component, _extends({
                    ref: innerRef
                }, field, rest), children);
            } // We don't pass `meta` for backwards compat
            return _react.createElement(component, _extends({
                field: field,
                form: formik
            }, props), children);
        } // default to input here so we can check for both `as` and `children` above
        var asElement = is || 'input';
        if (typeof asElement === 'string') {
            var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose(props, [
                "innerRef"
            ]);
            return _react.createElement(asElement, _extends({
                ref: _innerRef
            }, field, _rest), children);
        }
        return _react.createElement(asElement, _extends({
        }, field, props), children);
    };
    return FastFieldInner1;
}(_react.Component);
var FastField = /*#__PURE__*/ connect(FastFieldInner);

},{"react":"kEcQC","react-fast-compare":"kxT5W","deepmerge":"f75q7","lodash-es/isPlainObject":"fsd9c","lodash-es/clone":"lgvED","lodash-es/toPath":"10ZRA","tiny-warning":"8LQDN","hoist-non-react-statics":"lir0q","lodash-es/cloneDeep":"5aKOx","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kxT5W":[function(require,module,exports) {
'use strict';
var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';
function equal(a, b) {
    // fast-deep-equal index.js 2.0.1
    if (a === b) return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        var arrA = isArray(a), arrB = isArray(b), i, length, key;
        if (arrA && arrB) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (arrA != arrB) return false;
        var dateA = a instanceof Date, dateB = b instanceof Date;
        if (dateA != dateB) return false;
        if (dateA && dateB) return a.getTime() == b.getTime();
        var regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;
        if (regexpA != regexpB) return false;
        if (regexpA && regexpB) return a.toString() == b.toString();
        var keys = keyList(a);
        length = keys.length;
        if (length !== keyList(b).length) return false;
        for(i = length; (i--) !== 0;)if (!hasProp.call(b, keys[i])) return false;
        // end fast-deep-equal
        // start react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element && b instanceof Element) return a === b;
        // custom handling for React
        for(i = length; (i--) !== 0;){
            key = keys[i];
            if (key === '_owner' && a.$$typeof) continue;
            else {
                // all other properties should be traversed as usual
                if (!equal(a[key], b[key])) return false;
            }
        }
        // end react-fast-compare
        // fast-deep-equal index.js 2.0.1
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
module.exports = function exportedEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};

},{}],"f75q7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isMergeableObject = function isMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
    return !!value && typeof value === 'object';
}
function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 60103;
function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {
    };
}
function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
    });
}
function mergeObject(target, source, options) {
    var destination = {
    };
    if (options.isMergeableObject(target)) Object.keys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
    Object.keys(source).forEach(function(key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        else destination[key] = deepmerge(target[key], source[key], options);
    });
    return destination;
}
function deepmerge(target, source, options) {
    options = options || {
    };
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
    else if (sourceIsArray) return options.arrayMerge(target, source, options);
    else return mergeObject(target, source, options);
}
deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) throw new Error('first argument should be an array');
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
    }, {
    });
};
var deepmerge_1 = deepmerge;
exports.default = deepmerge_1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fsd9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var objectTag = '[object Object]';
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!_isObjectLikeJsDefault.default(value) || _baseGetTagJsDefault.default(value) != objectTag) return false;
    var proto = _getPrototypeJsDefault.default(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
exports.default = isPlainObject;

},{"./_baseGetTag.js":"X39MR","./_getPrototype.js":"8ox7i","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"X39MR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _getRawTagJs = require("./_getRawTag.js");
var _getRawTagJsDefault = parcelHelpers.interopDefault(_getRawTagJs);
var _objectToStringJs = require("./_objectToString.js");
var _objectToStringJsDefault = parcelHelpers.interopDefault(_objectToStringJs);
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = _symbolJsDefault.default ? _symbolJsDefault.default.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? _getRawTagJsDefault.default(value) : _objectToStringJsDefault.default(value);
}
exports.default = baseGetTag;

},{"./_Symbol.js":"6XOuV","./_getRawTag.js":"h0PgV","./_objectToString.js":"ktFQj","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6XOuV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Built-in value references. */ var Symbol = _rootJsDefault.default.Symbol;
exports.default = Symbol;

},{"./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eUVXi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _freeGlobalJs = require("./_freeGlobal.js");
var _freeGlobalJsDefault = parcelHelpers.interopDefault(_freeGlobalJs);
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = _freeGlobalJsDefault.default || freeSelf || Function('return this')();
exports.default = root;

},{"./_freeGlobal.js":"kuBHj","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kuBHj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
exports.default = freeGlobal;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h0PgV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = _symbolJsDefault.default ? _symbolJsDefault.default.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
exports.default = getRawTag;

},{"./_Symbol.js":"6XOuV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ktFQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
exports.default = objectToString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8ox7i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overArgJs = require("./_overArg.js");
var _overArgJsDefault = parcelHelpers.interopDefault(_overArgJs);
/** Built-in value references. */ var getPrototype = _overArgJsDefault.default(Object.getPrototypeOf, Object);
exports.default = getPrototype;

},{"./_overArg.js":"2RXMy","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2RXMy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
exports.default = overArg;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"doSRe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
exports.default = isObjectLike;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lgvED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return _baseCloneJsDefault.default(value, CLONE_SYMBOLS_FLAG);
}
exports.default = clone;

},{"./_baseClone.js":"FQsQW","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"FQsQW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./_Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _baseAssignJs = require("./_baseAssign.js");
var _baseAssignJsDefault = parcelHelpers.interopDefault(_baseAssignJs);
var _baseAssignInJs = require("./_baseAssignIn.js");
var _baseAssignInJsDefault = parcelHelpers.interopDefault(_baseAssignInJs);
var _cloneBufferJs = require("./_cloneBuffer.js");
var _cloneBufferJsDefault = parcelHelpers.interopDefault(_cloneBufferJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _copySymbolsJs = require("./_copySymbols.js");
var _copySymbolsJsDefault = parcelHelpers.interopDefault(_copySymbolsJs);
var _copySymbolsInJs = require("./_copySymbolsIn.js");
var _copySymbolsInJsDefault = parcelHelpers.interopDefault(_copySymbolsInJs);
var _getAllKeysJs = require("./_getAllKeys.js");
var _getAllKeysJsDefault = parcelHelpers.interopDefault(_getAllKeysJs);
var _getAllKeysInJs = require("./_getAllKeysIn.js");
var _getAllKeysInJsDefault = parcelHelpers.interopDefault(_getAllKeysInJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _initCloneArrayJs = require("./_initCloneArray.js");
var _initCloneArrayJsDefault = parcelHelpers.interopDefault(_initCloneArrayJs);
var _initCloneByTagJs = require("./_initCloneByTag.js");
var _initCloneByTagJsDefault = parcelHelpers.interopDefault(_initCloneByTagJs);
var _initCloneObjectJs = require("./_initCloneObject.js");
var _initCloneObjectJsDefault = parcelHelpers.interopDefault(_initCloneObjectJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isMapJs = require("./isMap.js");
var _isMapJsDefault = parcelHelpers.interopDefault(_isMapJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isSetJs = require("./isSet.js");
var _isSetJsDefault = parcelHelpers.interopDefault(_isSetJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key1, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key1, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!_isObjectJsDefault.default(value)) return value;
    var isArr = _isArrayJsDefault.default(value);
    if (isArr) {
        result = _initCloneArrayJsDefault.default(value);
        if (!isDeep) return _copyArrayJsDefault.default(value, result);
    } else {
        var tag = _getTagJsDefault.default(value), isFunc = tag == funcTag || tag == genTag;
        if (_isBufferJsDefault.default(value)) return _cloneBufferJsDefault.default(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {
            } : _initCloneObjectJsDefault.default(value);
            if (!isDeep) return isFlat ? _copySymbolsInJsDefault.default(value, _baseAssignInJsDefault.default(result, value)) : _copySymbolsJsDefault.default(value, _baseAssignJsDefault.default(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {
            };
            result = _initCloneByTagJsDefault.default(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _stackJsDefault.default);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (_isSetJsDefault.default(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (_isMapJsDefault.default(value)) value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    var keysFunc = isFull ? isFlat ? _getAllKeysInJsDefault.default : _getAllKeysJsDefault.default : isFlat ? _keysInJsDefault.default : _keysJsDefault.default;
    var props = isArr ? undefined : keysFunc(value);
    _arrayEachJsDefault.default(props || value, function(subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        _assignValueJsDefault.default(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
exports.default = baseClone;

},{"./_Stack.js":"DltuV","./_arrayEach.js":"giweB","./_assignValue.js":"gkK5b","./_baseAssign.js":"cYdt6","./_baseAssignIn.js":"gCzOn","./_cloneBuffer.js":"fBiNF","./_copyArray.js":"6QMyQ","./_copySymbols.js":"k8eD3","./_copySymbolsIn.js":"Up8Ur","./_getAllKeys.js":"62Eu9","./_getAllKeysIn.js":"5N7P8","./_getTag.js":"bP6hR","./_initCloneArray.js":"cLnPu","./_initCloneByTag.js":"jHQhT","./_initCloneObject.js":"hlFZe","./isArray.js":"17dG8","./isBuffer.js":"gzbW0","./isMap.js":"9pO1h","./isObject.js":"ipSLL","./isSet.js":"ehWG8","./keys.js":"aVHTp","./keysIn.js":"9WdsH","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"DltuV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _stackClearJs = require("./_stackClear.js");
var _stackClearJsDefault = parcelHelpers.interopDefault(_stackClearJs);
var _stackDeleteJs = require("./_stackDelete.js");
var _stackDeleteJsDefault = parcelHelpers.interopDefault(_stackDeleteJs);
var _stackGetJs = require("./_stackGet.js");
var _stackGetJsDefault = parcelHelpers.interopDefault(_stackGetJs);
var _stackHasJs = require("./_stackHas.js");
var _stackHasJsDefault = parcelHelpers.interopDefault(_stackHasJs);
var _stackSetJs = require("./_stackSet.js");
var _stackSetJsDefault = parcelHelpers.interopDefault(_stackSetJs);
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new _listCacheJsDefault.default(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = _stackClearJsDefault.default;
Stack.prototype['delete'] = _stackDeleteJsDefault.default;
Stack.prototype.get = _stackGetJsDefault.default;
Stack.prototype.has = _stackHasJsDefault.default;
Stack.prototype.set = _stackSetJsDefault.default;
exports.default = Stack;

},{"./_ListCache.js":"6EuGo","./_stackClear.js":"25rMD","./_stackDelete.js":"clucj","./_stackGet.js":"lhS1h","./_stackHas.js":"ijQaw","./_stackSet.js":"1LuD0","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6EuGo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheClearJs = require("./_listCacheClear.js");
var _listCacheClearJsDefault = parcelHelpers.interopDefault(_listCacheClearJs);
var _listCacheDeleteJs = require("./_listCacheDelete.js");
var _listCacheDeleteJsDefault = parcelHelpers.interopDefault(_listCacheDeleteJs);
var _listCacheGetJs = require("./_listCacheGet.js");
var _listCacheGetJsDefault = parcelHelpers.interopDefault(_listCacheGetJs);
var _listCacheHasJs = require("./_listCacheHas.js");
var _listCacheHasJsDefault = parcelHelpers.interopDefault(_listCacheHasJs);
var _listCacheSetJs = require("./_listCacheSet.js");
var _listCacheSetJsDefault = parcelHelpers.interopDefault(_listCacheSetJs);
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClearJsDefault.default;
ListCache.prototype['delete'] = _listCacheDeleteJsDefault.default;
ListCache.prototype.get = _listCacheGetJsDefault.default;
ListCache.prototype.has = _listCacheHasJsDefault.default;
ListCache.prototype.set = _listCacheSetJsDefault.default;
exports.default = ListCache;

},{"./_listCacheClear.js":"4mP1s","./_listCacheDelete.js":"8iQgj","./_listCacheGet.js":"55qL9","./_listCacheHas.js":"dhSdL","./_listCacheSet.js":"ccjDq","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4mP1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
exports.default = listCacheClear;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8iQgj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
exports.default = listCacheDelete;

},{"./_assocIndexOf.js":"3ohds","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3ohds":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (_eqJsDefault.default(array[length][0], key)) return length;
    }
    return -1;
}
exports.default = assocIndexOf;

},{"./eq.js":"5SrkY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5SrkY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
exports.default = eq;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"55qL9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    return index < 0 ? undefined : data[index][1];
}
exports.default = listCacheGet;

},{"./_assocIndexOf.js":"3ohds","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dhSdL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return _assocIndexOfJsDefault.default(this.__data__, key) > -1;
}
exports.default = listCacheHas;

},{"./_assocIndexOf.js":"3ohds","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ccjDq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
exports.default = listCacheSet;

},{"./_assocIndexOf.js":"3ohds","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"25rMD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new _listCacheJsDefault.default;
    this.size = 0;
}
exports.default = stackClear;

},{"./_ListCache.js":"6EuGo","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"clucj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
exports.default = stackDelete;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lhS1h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
exports.default = stackGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ijQaw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
exports.default = stackHas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1LuD0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _mapCacheJs = require("./_MapCache.js");
var _mapCacheJsDefault = parcelHelpers.interopDefault(_mapCacheJs);
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _listCacheJsDefault.default) {
        var pairs = data.__data__;
        if (!_mapJsDefault.default || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new _mapCacheJsDefault.default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
exports.default = stackSet;

},{"./_ListCache.js":"6EuGo","./_Map.js":"2C5wO","./_MapCache.js":"bHbiV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2C5wO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Map = _getNativeJsDefault.default(_rootJsDefault.default, 'Map');
exports.default = Map;

},{"./_getNative.js":"kMSAW","./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kMSAW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsNativeJs = require("./_baseIsNative.js");
var _baseIsNativeJsDefault = parcelHelpers.interopDefault(_baseIsNativeJs);
var _getValueJs = require("./_getValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = _getValueJsDefault.default(object, key);
    return _baseIsNativeJsDefault.default(value) ? value : undefined;
}
exports.default = getNative;

},{"./_baseIsNative.js":"i1zHg","./_getValue.js":"fDekM","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i1zHg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isMaskedJs = require("./_isMasked.js");
var _isMaskedJsDefault = parcelHelpers.interopDefault(_isMaskedJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _toSourceJs = require("./_toSource.js");
var _toSourceJsDefault = parcelHelpers.interopDefault(_toSourceJs);
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!_isObjectJsDefault.default(value) || _isMaskedJsDefault.default(value)) return false;
    var pattern = _isFunctionJsDefault.default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSourceJsDefault.default(value));
}
exports.default = baseIsNative;

},{"./isFunction.js":"hresY","./_isMasked.js":"9pebr","./isObject.js":"ipSLL","./_toSource.js":"jjjOx","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hresY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!_isObjectJsDefault.default(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTagJsDefault.default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
exports.default = isFunction;

},{"./_baseGetTag.js":"X39MR","./isObject.js":"ipSLL","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ipSLL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    return value != null && (type == 'object' || type == 'function');
}
exports.default = isObject;

},{"@swc/helpers":"cawJ1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9pebr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coreJsDataJs = require("./_coreJsData.js");
var _coreJsDataJsDefault = parcelHelpers.interopDefault(_coreJsDataJs);
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(_coreJsDataJsDefault.default && _coreJsDataJsDefault.default.keys && _coreJsDataJsDefault.default.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
exports.default = isMasked;

},{"./_coreJsData.js":"gYkC9","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gYkC9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Used to detect overreaching core-js shims. */ var coreJsData = _rootJsDefault.default['__core-js_shared__'];
exports.default = coreJsData;

},{"./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jjjOx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e1) {
        }
    }
    return '';
}
exports.default = toSource;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fDekM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
exports.default = getValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bHbiV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapCacheClearJs = require("./_mapCacheClear.js");
var _mapCacheClearJsDefault = parcelHelpers.interopDefault(_mapCacheClearJs);
var _mapCacheDeleteJs = require("./_mapCacheDelete.js");
var _mapCacheDeleteJsDefault = parcelHelpers.interopDefault(_mapCacheDeleteJs);
var _mapCacheGetJs = require("./_mapCacheGet.js");
var _mapCacheGetJsDefault = parcelHelpers.interopDefault(_mapCacheGetJs);
var _mapCacheHasJs = require("./_mapCacheHas.js");
var _mapCacheHasJsDefault = parcelHelpers.interopDefault(_mapCacheHasJs);
var _mapCacheSetJs = require("./_mapCacheSet.js");
var _mapCacheSetJsDefault = parcelHelpers.interopDefault(_mapCacheSetJs);
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClearJsDefault.default;
MapCache.prototype['delete'] = _mapCacheDeleteJsDefault.default;
MapCache.prototype.get = _mapCacheGetJsDefault.default;
MapCache.prototype.has = _mapCacheHasJsDefault.default;
MapCache.prototype.set = _mapCacheSetJsDefault.default;
exports.default = MapCache;

},{"./_mapCacheClear.js":"7I5i1","./_mapCacheDelete.js":"4IG4y","./_mapCacheGet.js":"lBNlY","./_mapCacheHas.js":"3gFl5","./_mapCacheSet.js":"bs1ZO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7I5i1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hashJs = require("./_Hash.js");
var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new _hashJsDefault.default,
        'map': new (_mapJsDefault.default || _listCacheJsDefault.default),
        'string': new _hashJsDefault.default
    };
}
exports.default = mapCacheClear;

},{"./_Hash.js":"9Vqme","./_ListCache.js":"6EuGo","./_Map.js":"2C5wO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9Vqme":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hashClearJs = require("./_hashClear.js");
var _hashClearJsDefault = parcelHelpers.interopDefault(_hashClearJs);
var _hashDeleteJs = require("./_hashDelete.js");
var _hashDeleteJsDefault = parcelHelpers.interopDefault(_hashDeleteJs);
var _hashGetJs = require("./_hashGet.js");
var _hashGetJsDefault = parcelHelpers.interopDefault(_hashGetJs);
var _hashHasJs = require("./_hashHas.js");
var _hashHasJsDefault = parcelHelpers.interopDefault(_hashHasJs);
var _hashSetJs = require("./_hashSet.js");
var _hashSetJsDefault = parcelHelpers.interopDefault(_hashSetJs);
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = _hashClearJsDefault.default;
Hash.prototype['delete'] = _hashDeleteJsDefault.default;
Hash.prototype.get = _hashGetJsDefault.default;
Hash.prototype.has = _hashHasJsDefault.default;
Hash.prototype.set = _hashSetJsDefault.default;
exports.default = Hash;

},{"./_hashClear.js":"fD6oP","./_hashDelete.js":"6BQIs","./_hashGet.js":"j5hvX","./_hashHas.js":"dBFif","./_hashSet.js":"gHWov","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fD6oP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = _nativeCreateJsDefault.default ? _nativeCreateJsDefault.default(null) : {
    };
    this.size = 0;
}
exports.default = hashClear;

},{"./_nativeCreate.js":"ShjDb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ShjDb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
/* Built-in method references that are verified to be native. */ var nativeCreate = _getNativeJsDefault.default(Object, 'create');
exports.default = nativeCreate;

},{"./_getNative.js":"kMSAW","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6BQIs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
exports.default = hashDelete;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j5hvX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreateJsDefault.default) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
exports.default = hashGet;

},{"./_nativeCreate.js":"ShjDb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dBFif":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return _nativeCreateJsDefault.default ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
exports.default = hashHas;

},{"./_nativeCreate.js":"ShjDb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gHWov":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = _nativeCreateJsDefault.default && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
exports.default = hashSet;

},{"./_nativeCreate.js":"ShjDb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4IG4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = _getMapDataJsDefault.default(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
exports.default = mapCacheDelete;

},{"./_getMapData.js":"dvzd2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dvzd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isKeyableJs = require("./_isKeyable.js");
var _isKeyableJsDefault = parcelHelpers.interopDefault(_isKeyableJs);
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyableJsDefault.default(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
exports.default = getMapData;

},{"./_isKeyable.js":"kNBG1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kNBG1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
exports.default = isKeyable;

},{"@swc/helpers":"cawJ1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lBNlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return _getMapDataJsDefault.default(this, key).get(key);
}
exports.default = mapCacheGet;

},{"./_getMapData.js":"dvzd2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3gFl5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return _getMapDataJsDefault.default(this, key).has(key);
}
exports.default = mapCacheHas;

},{"./_getMapData.js":"dvzd2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bs1ZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = _getMapDataJsDefault.default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
exports.default = mapCacheSet;

},{"./_getMapData.js":"dvzd2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"giweB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
exports.default = arrayEach;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gkK5b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && _eqJsDefault.default(objValue, value)) || value === undefined && !(key in object)) _baseAssignValueJsDefault.default(object, key, value);
}
exports.default = assignValue;

},{"./_baseAssignValue.js":"b0Syy","./eq.js":"5SrkY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"b0Syy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _definePropertyJs = require("./_defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _definePropertyJsDefault.default) _definePropertyJsDefault.default(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
exports.default = baseAssignValue;

},{"./_defineProperty.js":"dxY9o","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dxY9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var defineProperty = function() {
    try {
        var func = _getNativeJsDefault.default(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
exports.default = defineProperty;

},{"./_getNative.js":"kMSAW","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cYdt6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && _copyObjectJsDefault.default(source, _keysJsDefault.default(source), object);
}
exports.default = baseAssign;

},{"./_copyObject.js":"9VgmY","./keys.js":"aVHTp","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9VgmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {
    });
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) _baseAssignValueJsDefault.default(object, key, newValue);
        else _assignValueJsDefault.default(object, key, newValue);
    }
    return object;
}
exports.default = copyObject;

},{"./_assignValue.js":"gkK5b","./_baseAssignValue.js":"b0Syy","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aVHTp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeKeysJs = require("./_arrayLikeKeys.js");
var _arrayLikeKeysJsDefault = parcelHelpers.interopDefault(_arrayLikeKeysJs);
var _baseKeysJs = require("./_baseKeys.js");
var _baseKeysJsDefault = parcelHelpers.interopDefault(_baseKeysJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return _isArrayLikeJsDefault.default(object) ? _arrayLikeKeysJsDefault.default(object) : _baseKeysJsDefault.default(object);
}
exports.default = keys;

},{"./_arrayLikeKeys.js":"8rQrZ","./_baseKeys.js":"bD83K","./isArrayLike.js":"h8TDC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8rQrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseTimesJs = require("./_baseTimes.js");
var _baseTimesJsDefault = parcelHelpers.interopDefault(_baseTimesJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = _isArrayJsDefault.default(value), isArg = !isArr && _isArgumentsJsDefault.default(value), isBuff = !isArr && !isArg && _isBufferJsDefault.default(value), isType = !isArr && !isArg && !isBuff && _isTypedArrayJsDefault.default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? _baseTimesJsDefault.default(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    _isIndexJsDefault.default(key, length)))) result.push(key);
    return result;
}
exports.default = arrayLikeKeys;

},{"./_baseTimes.js":"eeg3v","./isArguments.js":"dcbFu","./isArray.js":"17dG8","./isBuffer.js":"gzbW0","./_isIndex.js":"lLJwb","./isTypedArray.js":"7QKbO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eeg3v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
exports.default = baseTimes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dcbFu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsArgumentsJs = require("./_baseIsArguments.js");
var _baseIsArgumentsJsDefault = parcelHelpers.interopDefault(_baseIsArgumentsJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = _baseIsArgumentsJsDefault.default(function() {
    return arguments;
}()) ? _baseIsArgumentsJsDefault.default : function isArguments(value) {
    return _isObjectLikeJsDefault.default(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
exports.default = isArguments;

},{"./_baseIsArguments.js":"dIwUo","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dIwUo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == argsTag;
}
exports.default = baseIsArguments;

},{"./_baseGetTag.js":"X39MR","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"17dG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
exports.default = isArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gzbW0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? _rootJsDefault.default.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || _stubFalseJsDefault.default;
exports.default = isBuffer;

},{"./_root.js":"eUVXi","./stubFalse.js":"36f0N","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"36f0N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
exports.default = stubFalse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lLJwb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
exports.default = isIndex;

},{"@swc/helpers":"cawJ1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7QKbO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsTypedArrayJs = require("./_baseIsTypedArray.js");
var _baseIsTypedArrayJsDefault = parcelHelpers.interopDefault(_baseIsTypedArrayJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsTypedArray = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? _baseUnaryJsDefault.default(nodeIsTypedArray) : _baseIsTypedArrayJsDefault.default;
exports.default = isTypedArray;

},{"./_baseIsTypedArray.js":"fsJnh","./_baseUnary.js":"ldNEX","./_nodeUtil.js":"fRohB","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fsJnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return _isObjectLikeJsDefault.default(value) && _isLengthJsDefault.default(value.length) && !!typedArrayTags[_baseGetTagJsDefault.default(value)];
}
exports.default = baseIsTypedArray;

},{"./_baseGetTag.js":"X39MR","./isLength.js":"7yTf5","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7yTf5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
exports.default = isLength;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ldNEX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
exports.default = baseUnary;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fRohB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _freeGlobalJs = require("./_freeGlobal.js");
var _freeGlobalJsDefault = parcelHelpers.interopDefault(_freeGlobalJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && _freeGlobalJsDefault.default.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
exports.default = nodeUtil;

},{"./_freeGlobal.js":"kuBHj","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bD83K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _nativeKeysJs = require("./_nativeKeys.js");
var _nativeKeysJsDefault = parcelHelpers.interopDefault(_nativeKeysJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!_isPrototypeJsDefault.default(object)) return _nativeKeysJsDefault.default(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
exports.default = baseKeys;

},{"./_isPrototype.js":"dGJv5","./_nativeKeys.js":"21gRt","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dGJv5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
exports.default = isPrototype;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"21gRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overArgJs = require("./_overArg.js");
var _overArgJsDefault = parcelHelpers.interopDefault(_overArgJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = _overArgJsDefault.default(Object.keys, Object);
exports.default = nativeKeys;

},{"./_overArg.js":"2RXMy","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h8TDC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && _isLengthJsDefault.default(value.length) && !_isFunctionJsDefault.default(value);
}
exports.default = isArrayLike;

},{"./isFunction.js":"hresY","./isLength.js":"7yTf5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gCzOn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && _copyObjectJsDefault.default(source, _keysInJsDefault.default(source), object);
}
exports.default = baseAssignIn;

},{"./_copyObject.js":"9VgmY","./keysIn.js":"9WdsH","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9WdsH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeKeysJs = require("./_arrayLikeKeys.js");
var _arrayLikeKeysJsDefault = parcelHelpers.interopDefault(_arrayLikeKeysJs);
var _baseKeysInJs = require("./_baseKeysIn.js");
var _baseKeysInJsDefault = parcelHelpers.interopDefault(_baseKeysInJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return _isArrayLikeJsDefault.default(object) ? _arrayLikeKeysJsDefault.default(object, true) : _baseKeysInJsDefault.default(object);
}
exports.default = keysIn;

},{"./_arrayLikeKeys.js":"8rQrZ","./_baseKeysIn.js":"gldka","./isArrayLike.js":"h8TDC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gldka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _nativeKeysInJs = require("./_nativeKeysIn.js");
var _nativeKeysInJsDefault = parcelHelpers.interopDefault(_nativeKeysInJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!_isObjectJsDefault.default(object)) return _nativeKeysInJsDefault.default(object);
    var isProto = _isPrototypeJsDefault.default(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
exports.default = baseKeysIn;

},{"./isObject.js":"ipSLL","./_isPrototype.js":"dGJv5","./_nativeKeysIn.js":"jSwb4","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jSwb4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
exports.default = nativeKeysIn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fBiNF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? _rootJsDefault.default.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
exports.default = cloneBuffer;

},{"./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6QMyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
exports.default = copyArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"k8eD3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return _copyObjectJsDefault.default(source, _getSymbolsJsDefault.default(source), object);
}
exports.default = copySymbols;

},{"./_copyObject.js":"9VgmY","./_getSymbols.js":"aWl2p","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aWl2p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? _stubArrayJsDefault.default : function getSymbols(object) {
    if (object == null) return [];
    object = Object(object);
    return _arrayFilterJsDefault.default(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
exports.default = getSymbols;

},{"./_arrayFilter.js":"j6Hg4","./stubArray.js":"8Znxo","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j6Hg4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
exports.default = arrayFilter;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8Znxo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
exports.default = stubArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"Up8Ur":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _getSymbolsInJs = require("./_getSymbolsIn.js");
var _getSymbolsInJsDefault = parcelHelpers.interopDefault(_getSymbolsInJs);
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return _copyObjectJsDefault.default(source, _getSymbolsInJsDefault.default(source), object);
}
exports.default = copySymbolsIn;

},{"./_copyObject.js":"9VgmY","./_getSymbolsIn.js":"gfT0F","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gfT0F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? _stubArrayJsDefault.default : function getSymbolsIn(object) {
    var result = [];
    while(object){
        _arrayPushJsDefault.default(result, _getSymbolsJsDefault.default(object));
        object = _getPrototypeJsDefault.default(object);
    }
    return result;
};
exports.default = getSymbolsIn;

},{"./_arrayPush.js":"9lq8z","./_getPrototype.js":"8ox7i","./_getSymbols.js":"aWl2p","./stubArray.js":"8Znxo","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9lq8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
exports.default = arrayPush;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"62Eu9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetAllKeysJs = require("./_baseGetAllKeys.js");
var _baseGetAllKeysJsDefault = parcelHelpers.interopDefault(_baseGetAllKeysJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return _baseGetAllKeysJsDefault.default(object, _keysJsDefault.default, _getSymbolsJsDefault.default);
}
exports.default = getAllKeys;

},{"./_baseGetAllKeys.js":"4Qfes","./_getSymbols.js":"aWl2p","./keys.js":"aVHTp","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4Qfes":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return _isArrayJsDefault.default(object) ? result : _arrayPushJsDefault.default(result, symbolsFunc(object));
}
exports.default = baseGetAllKeys;

},{"./_arrayPush.js":"9lq8z","./isArray.js":"17dG8","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5N7P8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetAllKeysJs = require("./_baseGetAllKeys.js");
var _baseGetAllKeysJsDefault = parcelHelpers.interopDefault(_baseGetAllKeysJs);
var _getSymbolsInJs = require("./_getSymbolsIn.js");
var _getSymbolsInJsDefault = parcelHelpers.interopDefault(_getSymbolsInJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return _baseGetAllKeysJsDefault.default(object, _keysInJsDefault.default, _getSymbolsInJsDefault.default);
}
exports.default = getAllKeysIn;

},{"./_baseGetAllKeys.js":"4Qfes","./_getSymbolsIn.js":"gfT0F","./keysIn.js":"9WdsH","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bP6hR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataViewJs = require("./_DataView.js");
var _dataViewJsDefault = parcelHelpers.interopDefault(_dataViewJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _promiseJs = require("./_Promise.js");
var _promiseJsDefault = parcelHelpers.interopDefault(_promiseJs);
var _setJs = require("./_Set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _weakMapJs = require("./_WeakMap.js");
var _weakMapJsDefault = parcelHelpers.interopDefault(_weakMapJs);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _toSourceJs = require("./_toSource.js");
var _toSourceJsDefault = parcelHelpers.interopDefault(_toSourceJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = _toSourceJsDefault.default(_dataViewJsDefault.default), mapCtorString = _toSourceJsDefault.default(_mapJsDefault.default), promiseCtorString = _toSourceJsDefault.default(_promiseJsDefault.default), setCtorString = _toSourceJsDefault.default(_setJsDefault.default), weakMapCtorString = _toSourceJsDefault.default(_weakMapJsDefault.default);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = _baseGetTagJsDefault.default;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (_dataViewJsDefault.default && getTag(new _dataViewJsDefault.default(new ArrayBuffer(1))) != dataViewTag || _mapJsDefault.default && getTag(new _mapJsDefault.default) != mapTag || _promiseJsDefault.default && getTag(_promiseJsDefault.default.resolve()) != promiseTag || _setJsDefault.default && getTag(new _setJsDefault.default) != setTag || _weakMapJsDefault.default && getTag(new _weakMapJsDefault.default) != weakMapTag) getTag = function getTag(value) {
    var result = _baseGetTagJsDefault.default(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? _toSourceJsDefault.default(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
exports.default = getTag;

},{"./_DataView.js":"a6PNT","./_Map.js":"2C5wO","./_Promise.js":"7OOun","./_Set.js":"5HDfq","./_WeakMap.js":"5ynK9","./_baseGetTag.js":"X39MR","./_toSource.js":"jjjOx","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a6PNT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var DataView = _getNativeJsDefault.default(_rootJsDefault.default, 'DataView');
exports.default = DataView;

},{"./_getNative.js":"kMSAW","./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7OOun":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Promise = _getNativeJsDefault.default(_rootJsDefault.default, 'Promise');
exports.default = Promise;

},{"./_getNative.js":"kMSAW","./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5HDfq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Set = _getNativeJsDefault.default(_rootJsDefault.default, 'Set');
exports.default = Set;

},{"./_getNative.js":"kMSAW","./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5ynK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var WeakMap = _getNativeJsDefault.default(_rootJsDefault.default, 'WeakMap');
exports.default = WeakMap;

},{"./_getNative.js":"kMSAW","./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cLnPu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
exports.default = initCloneArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jHQhT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
var _cloneDataViewJs = require("./_cloneDataView.js");
var _cloneDataViewJsDefault = parcelHelpers.interopDefault(_cloneDataViewJs);
var _cloneRegExpJs = require("./_cloneRegExp.js");
var _cloneRegExpJsDefault = parcelHelpers.interopDefault(_cloneRegExpJs);
var _cloneSymbolJs = require("./_cloneSymbol.js");
var _cloneSymbolJsDefault = parcelHelpers.interopDefault(_cloneSymbolJs);
var _cloneTypedArrayJs = require("./_cloneTypedArray.js");
var _cloneTypedArrayJsDefault = parcelHelpers.interopDefault(_cloneTypedArrayJs);
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return _cloneArrayBufferJsDefault.default(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return _cloneDataViewJsDefault.default(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return _cloneTypedArrayJsDefault.default(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return _cloneRegExpJsDefault.default(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return _cloneSymbolJsDefault.default(object);
    }
}
exports.default = initCloneByTag;

},{"./_cloneArrayBuffer.js":"5JY0r","./_cloneDataView.js":"itP7l","./_cloneRegExp.js":"g2FvX","./_cloneSymbol.js":"4KIQf","./_cloneTypedArray.js":"koVkY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5JY0r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _uint8ArrayJs = require("./_Uint8Array.js");
var _uint8ArrayJsDefault = parcelHelpers.interopDefault(_uint8ArrayJs);
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _uint8ArrayJsDefault.default(result).set(new _uint8ArrayJsDefault.default(arrayBuffer));
    return result;
}
exports.default = cloneArrayBuffer;

},{"./_Uint8Array.js":"doTbW","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"doTbW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Built-in value references. */ var Uint8Array = _rootJsDefault.default.Uint8Array;
exports.default = Uint8Array;

},{"./_root.js":"eUVXi","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"itP7l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBufferJsDefault.default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
exports.default = cloneDataView;

},{"./_cloneArrayBuffer.js":"5JY0r","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g2FvX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
exports.default = cloneRegExp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4KIQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
/** Used to convert symbols to primitives and strings. */ var symbolProto = _symbolJsDefault.default ? _symbolJsDefault.default.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
    };
}
exports.default = cloneSymbol;

},{"./_Symbol.js":"6XOuV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"koVkY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBufferJsDefault.default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
exports.default = cloneTypedArray;

},{"./_cloneArrayBuffer.js":"5JY0r","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hlFZe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == 'function' && !_isPrototypeJsDefault.default(object) ? _baseCreateJsDefault.default(_getPrototypeJsDefault.default(object)) : {
    };
}
exports.default = initCloneObject;

},{"./_baseCreate.js":"edMbI","./_getPrototype.js":"8ox7i","./_isPrototype.js":"dGJv5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"edMbI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {
    }
    return function(proto) {
        if (!_isObjectJsDefault.default(proto)) return {
        };
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
exports.default = baseCreate;

},{"./isObject.js":"ipSLL","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9pO1h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsMapJs = require("./_baseIsMap.js");
var _baseIsMapJsDefault = parcelHelpers.interopDefault(_baseIsMapJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsMap = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? _baseUnaryJsDefault.default(nodeIsMap) : _baseIsMapJsDefault.default;
exports.default = isMap;

},{"./_baseIsMap.js":"86NbV","./_baseUnary.js":"ldNEX","./_nodeUtil.js":"fRohB","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"86NbV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return _isObjectLikeJsDefault.default(value) && _getTagJsDefault.default(value) == mapTag;
}
exports.default = baseIsMap;

},{"./_getTag.js":"bP6hR","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ehWG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsSetJs = require("./_baseIsSet.js");
var _baseIsSetJsDefault = parcelHelpers.interopDefault(_baseIsSetJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsSet = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? _baseUnaryJsDefault.default(nodeIsSet) : _baseIsSetJsDefault.default;
exports.default = isSet;

},{"./_baseIsSet.js":"6shqs","./_baseUnary.js":"ldNEX","./_nodeUtil.js":"fRohB","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6shqs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return _isObjectLikeJsDefault.default(value) && _getTagJsDefault.default(value) == setTag;
}
exports.default = baseIsSet;

},{"./_getTag.js":"bP6hR","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"10ZRA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
var _stringToPathJs = require("./_stringToPath.js");
var _stringToPathJsDefault = parcelHelpers.interopDefault(_stringToPathJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */ function toPath(value) {
    if (_isArrayJsDefault.default(value)) return _arrayMapJsDefault.default(value, _toKeyJsDefault.default);
    return _isSymbolJsDefault.default(value) ? [
        value
    ] : _copyArrayJsDefault.default(_stringToPathJsDefault.default(_toStringJsDefault.default(value)));
}
exports.default = toPath;

},{"./_arrayMap.js":"dXQnH","./_copyArray.js":"6QMyQ","./isArray.js":"17dG8","./isSymbol.js":"7s0AZ","./_stringToPath.js":"kyrLl","./_toKey.js":"cmjp8","./toString.js":"lftGK","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dXQnH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
exports.default = arrayMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7s0AZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return (typeof value === "undefined" ? "undefined" : _helpers.typeOf(value)) == 'symbol' || _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == symbolTag;
}
exports.default = isSymbol;

},{"@swc/helpers":"cawJ1","./_baseGetTag.js":"X39MR","./isObjectLike.js":"doSRe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kyrLl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoizeCappedJs = require("./_memoizeCapped.js");
var _memoizeCappedJsDefault = parcelHelpers.interopDefault(_memoizeCappedJs);
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = _memoizeCappedJsDefault.default(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
});
exports.default = stringToPath;

},{"./_memoizeCapped.js":"5mGB5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5mGB5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = _memoizeJsDefault.default(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
exports.default = memoizeCapped;

},{"./memoize.js":"sKyOC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"sKyOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapCacheJs = require("./_MapCache.js");
var _mapCacheJsDefault = parcelHelpers.interopDefault(_mapCacheJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || _mapCacheJsDefault.default);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = _mapCacheJsDefault.default;
exports.default = memoize;

},{"./_MapCache.js":"bHbiV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cmjp8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || _isSymbolJsDefault.default(value)) return value;
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
exports.default = toKey;

},{"./isSymbol.js":"7s0AZ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lftGK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : _baseToStringJsDefault.default(value);
}
exports.default = toString;

},{"./_baseToString.js":"jIz4a","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jIz4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = _symbolJsDefault.default ? _symbolJsDefault.default.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') return value;
    if (_isArrayJsDefault.default(value)) // Recursively convert values (susceptible to call stack limits).
    return _arrayMapJsDefault.default(value, baseToString) + '';
    if (_isSymbolJsDefault.default(value)) return symbolToString ? symbolToString.call(value) : '';
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
exports.default = baseToString;

},{"./_Symbol.js":"6XOuV","./_arrayMap.js":"dXQnH","./isArray.js":"17dG8","./isSymbol.js":"7s0AZ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8LQDN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isProduction = false;
function warning(condition, message) {
    if (!isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== 'undefined') console.warn(text);
        try {
            throw Error(text);
        } catch (x) {
        }
    }
}
exports.default = warning;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lir0q":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"4rqId"}],"5aKOx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */ function cloneDeep(value) {
    return _baseCloneJsDefault.default(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}
exports.default = cloneDeep;

},{"./_baseClone.js":"FQsQW","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3aiVZ":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var global = arguments[3];
!function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports, require("react"), require("prop-types"), require("classnames"), require("date-fns/isDate"), require("date-fns/isValid"), require("date-fns/format"), require("date-fns/addMinutes"), require("date-fns/addHours"), require("date-fns/addDays"), require("date-fns/addWeeks"), require("date-fns/addMonths"), require("date-fns/addYears"), require("date-fns/subMinutes"), require("date-fns/subHours"), require("date-fns/subDays"), require("date-fns/subWeeks"), require("date-fns/subMonths"), require("date-fns/subYears"), require("date-fns/getSeconds"), require("date-fns/getMinutes"), require("date-fns/getHours"), require("date-fns/getDay"), require("date-fns/getDate"), require("date-fns/getISOWeek"), require("date-fns/getMonth"), require("date-fns/getQuarter"), require("date-fns/getYear"), require("date-fns/getTime"), require("date-fns/setSeconds"), require("date-fns/setMinutes"), require("date-fns/setHours"), require("date-fns/setMonth"), require("date-fns/setQuarter"), require("date-fns/setYear"), require("date-fns/min"), require("date-fns/max"), require("date-fns/differenceInCalendarDays"), require("date-fns/differenceInCalendarMonths"), require("date-fns/differenceInCalendarWeeks"), require("date-fns/differenceInCalendarYears"), require("date-fns/startOfDay"), require("date-fns/startOfWeek"), require("date-fns/startOfMonth"), require("date-fns/startOfQuarter"), require("date-fns/startOfYear"), require("date-fns/endOfDay"), require("date-fns/endOfWeek"), require("date-fns/endOfMonth"), require("date-fns/isEqual"), require("date-fns/isSameDay"), require("date-fns/isSameMonth"), require("date-fns/isSameYear"), require("date-fns/isSameQuarter"), require("date-fns/isAfter"), require("date-fns/isBefore"), require("date-fns/isWithinInterval"), require("date-fns/toDate"), require("date-fns/parse"), require("date-fns/parseISO"), require("react-onclickoutside"), require("react-dom"), require("react-popper")) : "function" == typeof define && define.amd ? define([
        "exports",
        "react",
        "prop-types",
        "classnames",
        "date-fns/isDate",
        "date-fns/isValid",
        "date-fns/format",
        "date-fns/addMinutes",
        "date-fns/addHours",
        "date-fns/addDays",
        "date-fns/addWeeks",
        "date-fns/addMonths",
        "date-fns/addYears",
        "date-fns/subMinutes",
        "date-fns/subHours",
        "date-fns/subDays",
        "date-fns/subWeeks",
        "date-fns/subMonths",
        "date-fns/subYears",
        "date-fns/getSeconds",
        "date-fns/getMinutes",
        "date-fns/getHours",
        "date-fns/getDay",
        "date-fns/getDate",
        "date-fns/getISOWeek",
        "date-fns/getMonth",
        "date-fns/getQuarter",
        "date-fns/getYear",
        "date-fns/getTime",
        "date-fns/setSeconds",
        "date-fns/setMinutes",
        "date-fns/setHours",
        "date-fns/setMonth",
        "date-fns/setQuarter",
        "date-fns/setYear",
        "date-fns/min",
        "date-fns/max",
        "date-fns/differenceInCalendarDays",
        "date-fns/differenceInCalendarMonths",
        "date-fns/differenceInCalendarWeeks",
        "date-fns/differenceInCalendarYears",
        "date-fns/startOfDay",
        "date-fns/startOfWeek",
        "date-fns/startOfMonth",
        "date-fns/startOfQuarter",
        "date-fns/startOfYear",
        "date-fns/endOfDay",
        "date-fns/endOfWeek",
        "date-fns/endOfMonth",
        "date-fns/isEqual",
        "date-fns/isSameDay",
        "date-fns/isSameMonth",
        "date-fns/isSameYear",
        "date-fns/isSameQuarter",
        "date-fns/isAfter",
        "date-fns/isBefore",
        "date-fns/isWithinInterval",
        "date-fns/toDate",
        "date-fns/parse",
        "date-fns/parseISO",
        "react-onclickoutside",
        "react-dom",
        "react-popper"
    ], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).DatePicker = {
    }, e.React, e.PropTypes, e.classNames, e.isDate, e.isValidDate, e.format, e.addMinutes, e.addHours, e.addDays, e.addWeeks, e.addMonths, e.addYears, null, null, e.subDays, e.subWeeks, e.subMonths, e.subYears, e.getSeconds, e.getMinutes, e.getHours, e.getDay, e.getDate, e.getISOWeek, e.getMonth, e.getQuarter, e.getYear, e.getTime, e.setSeconds, e.setMinutes, e.setHours, e.setMonth, e.setQuarter, e.setYear, e.min, e.max, e.differenceInCalendarDays, e.differenceInCalendarMonths, null, e.differenceInCalendarYears, e.startOfDay, e.startOfWeek, e.startOfMonth, e.startOfQuarter, e.startOfYear, e.endOfDay, null, null, e.dfIsEqual, e.dfIsSameDay, e.dfIsSameMonth, e.dfIsSameYear, e.dfIsSameQuarter, e.isAfter, e.isBefore, e.isWithinInterval, e.toDate, e.parse, e.parseISO, e.onClickOutside, e.ReactDOM, e.ReactPopper);
}(undefined, function(e1, t1, r1, a1, n1, o1, s1, i1, p1, l1, d1, c1, u1, f1, h1, m1, y, v, D, w, g, k, b, S, C, _, M, P, E, N, O, Y, x, I, T, L, R, F, A, q, W, B, K, H, j, Q, V, U, $, z, G, J, X, Z, ee, te, re, ae, ne, oe, se, ie, pe) {
    "use strict";
    function le(e) {
        return e && "object" == typeof e && "default" in e ? e : {
            default: e
        };
    }
    var de = le(t1), ce = le(a1), ue = le(n1), fe = le(o1), he = le(s1), me = le(i1), ye = le(p1), ve = le(l1), De = le(d1), we = le(c1), ge = le(u1), ke = le(m1), be = le(y), Se = le(v), Ce = le(D), _e = le(w), Me = le(g), Pe = le(k), Ee = le(b), Ne = le(S), Oe = le(C), Ye = le(_), xe = le(M), Ie = le(P), Te = le(E), Le = le(N), Re = le(O), Fe = le(Y), Ae = le(x), qe = le(I), We = le(T), Be = le(L), Ke = le(R), He = le(F), je = le(A), Qe = le(W), Ve = le(B), Ue = le(K), $e = le(H), ze = le(j), Ge = le(Q), Je = le(V), Xe = le(z), Ze = le(G), et = le(J), tt = le(X), rt = le(Z), at = le(ee), nt = le(te), ot = le(re), st = le(ae), it = le(ne), pt = le(oe), lt = le(se), dt = le(ie);
    function ct(e, t2) {
        var r = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t2 && (a = a.filter(function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })), r.push.apply(r, a);
        }
        return r;
    }
    function ut(e) {
        var _arguments = arguments, _loop = function(t3) {
            var r = null != _arguments[t3] ? _arguments[t3] : {
            };
            t3 % 2 ? ct(Object(r), !0).forEach(function(t) {
                vt(e, t, r[t]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : ct(Object(r)).forEach(function(t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
            });
        };
        for(var t3 = 1; t3 < arguments.length; t3++)_loop(t3);
        return e;
    }
    function ft(e2) {
        return (ft = "function" == typeof Symbol && "symbol" == _helpers.typeOf(Symbol.iterator) ? function ft(e) {
            return typeof e === "undefined" ? "undefined" : _helpers.typeOf(e);
        } : function(e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _helpers.typeOf(e);
        })(e2);
    }
    function ht(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }
    function mt(e, t) {
        for(var r = 0; r < t.length; r++){
            var a = t[r];
            a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);
        }
    }
    function yt(e, t, r) {
        return t && mt(e.prototype, t), r && mt(e, r), Object.defineProperty(e, "prototype", {
            writable: !1
        }), e;
    }
    function vt(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = r, e;
    }
    function Dt() {
        return (Dt = Object.assign || function(e) {
            for(var t = 1; t < arguments.length; t++){
                var r = arguments[t];
                for(var a in r)Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a]);
            }
            return e;
        }).apply(this, arguments);
    }
    function wt(e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
        Object.defineProperty(e, "prototype", {
            value: Object.create(t && t.prototype, {
                constructor: {
                    value: e,
                    writable: !0,
                    configurable: !0
                }
            }),
            writable: !1
        }), t && kt(e, t);
    }
    function gt(e3) {
        return (gt = Object.setPrototypeOf ? Object.getPrototypeOf : function gt(e) {
            return e.__proto__ || Object.getPrototypeOf(e);
        })(e3);
    }
    function kt(e4, t5) {
        return (kt = Object.setPrototypeOf || function(e, t) {
            return e.__proto__ = t, e;
        })(e4, t5);
    }
    function bt(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
    }
    function St(e, t) {
        if (t && ("object" == typeof t || "function" == typeof t)) return t;
        if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
        return bt(e);
    }
    function Ct(e) {
        var t = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), !0;
            } catch (e) {
                return !1;
            }
        }();
        return function() {
            var r, a = gt(e);
            if (t) {
                var n = gt(this).constructor;
                r = Reflect.construct(a, arguments, n);
            } else r = a.apply(this, arguments);
            return St(this, r);
        };
    }
    function _t(e5) {
        return (function(e) {
            if (Array.isArray(e)) return Mt(e);
        })(e5) || (function(e) {
            if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
        })(e5) || (function(e, t) {
            if (!e) return;
            if ("string" == typeof e) return Mt(e, t);
            var r = Object.prototype.toString.call(e).slice(8, -1);
            "Object" === r && e.constructor && (r = e.constructor.name);
            if ("Map" === r || "Set" === r) return Array.from(e);
            if ("Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)) return Mt(e, t);
        })(e5) || (function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        })();
    }
    function Mt(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for(var r = 0, a = new Array(t); r < t; r++)a[r] = e[r];
        return a;
    }
    function Pt(e, t) {
        switch(e){
            case "P":
                return t.date({
                    width: "short"
                });
            case "PP":
                return t.date({
                    width: "medium"
                });
            case "PPP":
                return t.date({
                    width: "long"
                });
            case "PPPP":
            default:
                return t.date({
                    width: "full"
                });
        }
    }
    function Et(e, t) {
        switch(e){
            case "p":
                return t.time({
                    width: "short"
                });
            case "pp":
                return t.time({
                    width: "medium"
                });
            case "ppp":
                return t.time({
                    width: "long"
                });
            case "pppp":
            default:
                return t.time({
                    width: "full"
                });
        }
    }
    var Nt = {
        p: Et,
        P: function P(e, t) {
            var r, a = e.match(/(P+)(p+)?/) || [], n = a[1], o = a[2];
            if (!o) return Pt(e, t);
            switch(n){
                case "P":
                    r = t.dateTime({
                        width: "short"
                    });
                    break;
                case "PP":
                    r = t.dateTime({
                        width: "medium"
                    });
                    break;
                case "PPP":
                    r = t.dateTime({
                        width: "long"
                    });
                    break;
                case "PPPP":
                default:
                    r = t.dateTime({
                        width: "full"
                    });
            }
            return r.replace("{{date}}", Pt(n, t)).replace("{{time}}", Et(o, t));
        }
    }, Ot = 12, Yt = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    function xt(e) {
        var t = e ? "string" == typeof e || e instanceof String ? pt.default(e) : st.default(e) : new Date;
        return Tt(t) ? t : null;
    }
    function It(e6, t6, r2, a, n) {
        var o = null, s = Xt(r2) || Xt(Jt()), i = !0;
        return Array.isArray(t6) ? (t6.forEach(function(t) {
            var r = it.default(e6, t, new Date, {
                locale: s
            });
            a && (i = Tt(r, n) && e6 === he.default(r, t, {
                awareOfUnicodeTokens: !0
            })), Tt(r, n) && i && (o = r);
        }), o) : (o = it.default(e6, t6, new Date, {
            locale: s
        }), a ? i = Tt(o) && e6 === he.default(o, t6, {
            awareOfUnicodeTokens: !0
        }) : Tt(o) || (t6 = t6.match(Yt).map(function(e) {
            var t = e[0];
            return "p" === t || "P" === t ? s ? (0, Nt[t])(e, s.formatLong) : t : e;
        }).join(""), e6.length > 0 && (o = it.default(e6, t6.slice(0, e6.length), new Date)), Tt(o) || (o = new Date(e6))), Tt(o) && i ? o : null);
    }
    function Tt(e, t) {
        return t = t || new Date("1/1/1000"), fe.default(e) && !nt.default(e, t);
    }
    function Lt(e, t, r) {
        if ("en" === r) return he.default(e, t, {
            awareOfUnicodeTokens: !0
        });
        var a = Xt(r);
        return r && !a && console.warn('A locale object was not found for the provided string ["'.concat(r, '"].')), !a && Jt() && Xt(Jt()) && (a = Xt(Jt())), he.default(e, t, {
            locale: a || null,
            awareOfUnicodeTokens: !0
        });
    }
    function Rt(e, t) {
        var r = t.dateFormat, a = t.locale;
        return e && Lt(e, Array.isArray(r) ? r[0] : r, a) || "";
    }
    function Ft(e, t) {
        var r = t.hour, a = void 0 === r ? 0 : r, n = t.minute, o = void 0 === n ? 0 : n, s = t.second, i = void 0 === s ? 0 : s;
        return Fe.default(Re.default(Le.default(e, i), o), a);
    }
    function At(e, t) {
        var r = t && Xt(t) || Jt() && Xt(Jt());
        return Oe.default(e, r ? {
            locale: r
        } : null);
    }
    function qt(e, t) {
        return Lt(e, "ddd", t);
    }
    function Wt(e) {
        return Ve.default(e);
    }
    function Bt(e, t, r) {
        var a = Xt(t || Jt());
        return Ue.default(e, {
            locale: a,
            weekStartsOn: r
        });
    }
    function Kt(e) {
        return $e.default(e);
    }
    function Ht(e) {
        return Ge.default(e);
    }
    function jt(e) {
        return ze.default(e);
    }
    function Qt(e, t) {
        return e && t ? tt.default(e, t) : !e && !t;
    }
    function Vt(e, t) {
        return e && t ? et.default(e, t) : !e && !t;
    }
    function Ut(e, t) {
        return e && t ? rt.default(e, t) : !e && !t;
    }
    function $t(e, t) {
        return e && t ? Ze.default(e, t) : !e && !t;
    }
    function zt(e, t) {
        return e && t ? Xe.default(e, t) : !e && !t;
    }
    function Gt(e, t, r) {
        var a, n = Ve.default(t), o = Je.default(r);
        try {
            a = ot.default(e, {
                start: n,
                end: o
            });
        } catch (e7) {
            a = !1;
        }
        return a;
    }
    function Jt() {
        return ("undefined" != typeof window ? window : global).__localeId__;
    }
    function Xt(e) {
        if ("string" == typeof e) {
            var t = "undefined" != typeof window ? window : global;
            return t.__localeData__ ? t.__localeData__[e] : null;
        }
        return e;
    }
    function Zt(e, t) {
        return Lt(Ae.default(xt(), e), "LLLL", t);
    }
    function er(e, t) {
        return Lt(Ae.default(xt(), e), "LLL", t);
    }
    function tr(e, t) {
        return Lt(qe.default(xt(), e), "QQQ", t);
    }
    function rr(e) {
        var t7 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r3 = t7.minDate, a2 = t7.maxDate, n = t7.excludeDates, o = t7.excludeDateIntervals, s = t7.includeDates, i = t7.includeDateIntervals, p = t7.filterDate;
        return lr(e, {
            minDate: r3,
            maxDate: a2
        }) || n && n.some(function(t) {
            return $t(e, t);
        }) || o && o.some(function(t) {
            var r = t.start, a = t.end;
            return ot.default(e, {
                start: r,
                end: a
            });
        }) || s && !s.some(function(t) {
            return $t(e, t);
        }) || i && !i.some(function(t) {
            var r = t.start, a = t.end;
            return ot.default(e, {
                start: r,
                end: a
            });
        }) || p && !p(xt(e)) || !1;
    }
    function ar(e) {
        var t8 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r4 = t8.excludeDates, a3 = t8.excludeDateIntervals;
        return a3 && a3.length > 0 ? a3.some(function(t) {
            var r = t.start, a = t.end;
            return ot.default(e, {
                start: r,
                end: a
            });
        }) : r4 && r4.some(function(t) {
            return $t(e, t);
        }) || !1;
    }
    function nr(e) {
        var t9 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t9.minDate, a = t9.maxDate, n = t9.excludeDates, o = t9.includeDates, s = t9.filterDate;
        return lr(e, {
            minDate: r,
            maxDate: a
        }) || n && n.some(function(t) {
            return Vt(e, t);
        }) || o && !o.some(function(t) {
            return Vt(e, t);
        }) || s && !s(xt(e)) || !1;
    }
    function or(e, t, r, a) {
        var n = Ie.default(e), o = Ye.default(e), s = Ie.default(t), i = Ye.default(t), p = Ie.default(a);
        return n === s && n === p ? o <= r && r <= i : n < s ? p === n && o <= r || p === s && i >= r || p < s && p > n : void 0;
    }
    function sr(e) {
        var t10 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t10.minDate, a = t10.maxDate, n = t10.excludeDates, o = t10.includeDates, s = t10.filterDate;
        return lr(e, {
            minDate: r,
            maxDate: a
        }) || n && n.some(function(t) {
            return Ut(e, t);
        }) || o && !o.some(function(t) {
            return Ut(e, t);
        }) || s && !s(xt(e)) || !1;
    }
    function ir(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.minDate, a = t.maxDate, n = new Date(e, 0, 1);
        return lr(n, {
            minDate: r,
            maxDate: a
        }) || !1;
    }
    function pr(e, t, r, a) {
        var n = Ie.default(e), o = xe.default(e), s = Ie.default(t), i = xe.default(t), p = Ie.default(a);
        return n === s && n === p ? o <= r && r <= i : n < s ? p === n && o <= r || p === s && i >= r || p < s && p > n : void 0;
    }
    function lr(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.minDate, a = t.maxDate;
        return r && He.default(e, r) < 0 || a && He.default(e, a) > 0;
    }
    function dr(e, t11) {
        return t11.some(function(t) {
            return Pe.default(t) === Pe.default(e) && Me.default(t) === Me.default(e);
        });
    }
    function cr(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.excludeTimes, a = t.includeTimes, n = t.filterTime;
        return r && dr(e, r) || a && !dr(e, a) || n && !n(e) || !1;
    }
    function ur(e, t) {
        var r = t.minTime, a = t.maxTime;
        if (!r || !a) throw new Error("Both minTime and maxTime props required");
        var n, o = xt(), s = Fe.default(Re.default(o, Me.default(e)), Pe.default(e)), i = Fe.default(Re.default(o, Me.default(r)), Pe.default(r)), p = Fe.default(Re.default(o, Me.default(a)), Pe.default(a));
        try {
            n = !ot.default(s, {
                start: i,
                end: p
            });
        } catch (e8) {
            n = !1;
        }
        return n;
    }
    function fr(e9) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.minDate, a = t.includeDates, n = Se.default(e9, 1);
        return r && je.default(r, n) > 0 || a && a.every(function(e) {
            return je.default(e, n) > 0;
        }) || !1;
    }
    function hr(e10) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.maxDate, a = t.includeDates, n = we.default(e10, 1);
        return r && je.default(n, r) > 0 || a && a.every(function(e) {
            return je.default(n, e) > 0;
        }) || !1;
    }
    function mr(e11) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.minDate, a = t.includeDates, n = Ce.default(e11, 1);
        return r && Qe.default(r, n) > 0 || a && a.every(function(e) {
            return Qe.default(e, n) > 0;
        }) || !1;
    }
    function yr(e12) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        }, r = t.maxDate, a = t.includeDates, n = ge.default(e12, 1);
        return r && Qe.default(n, r) > 0 || a && a.every(function(e) {
            return Qe.default(n, e) > 0;
        }) || !1;
    }
    function vr(e13) {
        var t = e13.minDate, r = e13.includeDates;
        if (r && t) {
            var a = r.filter(function(e) {
                return He.default(e, t) >= 0;
            });
            return Be.default(a);
        }
        return r ? Be.default(r) : t;
    }
    function Dr(e14) {
        var t = e14.maxDate, r = e14.includeDates;
        if (r && t) {
            var a = r.filter(function(e) {
                return He.default(e, t) <= 0;
            });
            return Ke.default(a);
        }
        return r ? Ke.default(r) : t;
    }
    function wr() {
        for(var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--highlighted", r = new Map, a = 0, n = e.length; a < n; a++){
            var o = e[a];
            if (ue.default(o)) {
                var s = Lt(o, "MM.dd.yyyy"), i = r.get(s) || [];
                i.includes(t) || (i.push(t), r.set(s, i));
            } else if ("object" === ft(o)) {
                var p = Object.keys(o), l = p[0], d = o[p[0]];
                if ("string" == typeof l && d.constructor === Array) for(var c = 0, u = d.length; c < u; c++){
                    var f = Lt(d[c], "MM.dd.yyyy"), h = r.get(f) || [];
                    h.includes(l) || (h.push(l), r.set(f, h));
                }
            }
        }
        return r;
    }
    function gr(e, t, r, a, n) {
        for(var o = n.length, s = [], i = 0; i < o; i++){
            var p = me.default(ye.default(e, Pe.default(n[i])), Me.default(n[i])), l = me.default(e, (r + 1) * a);
            at.default(p, t) && nt.default(p, l) && s.push(n[i]);
        }
        return s;
    }
    function kr(e) {
        return e < 10 ? "0".concat(e) : "".concat(e);
    }
    function br(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ot, r = Math.ceil(Ie.default(e) / t) * t, a = r - (t - 1);
        return {
            startPeriod: a,
            endPeriod: r
        };
    }
    function Sr(e, t, r, a) {
        for(var n = [], o = 0; o < 2 * t + 1; o++){
            var s = e + t - o, i = !0;
            r && (i = Ie.default(r) <= s), a && i && (i = Ie.default(a) >= s), i && n.push(s);
        }
        return n;
    }
    var Cr = function(e15) {
        wt(a4, e15);
        var r5 = Ct(a4);
        function a4(e16) {
            var n;
            ht(this, a4), vt(bt(n = r5.call(this, e16)), "renderOptions", function() {
                var e17 = n.props.year, t12 = n.state.yearsList.map(function(t) {
                    return de.default.createElement("div", {
                        className: e17 === t ? "react-datepicker__year-option react-datepicker__year-option--selected_year" : "react-datepicker__year-option",
                        key: t,
                        onClick: n.onChange.bind(bt(n), t),
                        "aria-selected": e17 === t ? "true" : void 0
                    }, e17 === t ? de.default.createElement("span", {
                        className: "react-datepicker__year-option--selected"
                    }, "✓") : "", t);
                }), r = n.props.minDate ? Ie.default(n.props.minDate) : null, a = n.props.maxDate ? Ie.default(n.props.maxDate) : null;
                return a && n.state.yearsList.find(function(e) {
                    return e === a;
                }) || t12.unshift(de.default.createElement("div", {
                    className: "react-datepicker__year-option",
                    key: "upcoming",
                    onClick: n.incrementYears
                }, de.default.createElement("a", {
                    className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming"
                }))), r && n.state.yearsList.find(function(e) {
                    return e === r;
                }) || t12.push(de.default.createElement("div", {
                    className: "react-datepicker__year-option",
                    key: "previous",
                    onClick: n.decrementYears
                }, de.default.createElement("a", {
                    className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous"
                }))), t12;
            }), vt(bt(n), "onChange", function(e) {
                n.props.onChange(e);
            }), vt(bt(n), "handleClickOutside", function() {
                n.props.onCancel();
            }), vt(bt(n), "shiftYears", function(e) {
                var t13 = n.state.yearsList.map(function(t) {
                    return t + e;
                });
                n.setState({
                    yearsList: t13
                });
            }), vt(bt(n), "incrementYears", function() {
                return n.shiftYears(1);
            }), vt(bt(n), "decrementYears", function() {
                return n.shiftYears(-1);
            });
            var o = e16.yearDropdownItemNumber, s = e16.scrollableYearDropdown, i = o || (s ? 10 : 5);
            return n.state = {
                yearsList: Sr(n.props.year, i, n.props.minDate, n.props.maxDate)
            }, n.dropdownRef = t1.createRef(), n;
        }
        return yt(a4, [
            {
                key: "componentDidMount",
                value: function value() {
                    var e = this.dropdownRef.current;
                    e && (e.scrollTop = e.scrollHeight / 2 - e.clientHeight / 2);
                }
            },
            {
                key: "render",
                value: function value() {
                    var e = ce.default({
                        "react-datepicker__year-dropdown": !0,
                        "react-datepicker__year-dropdown--scrollable": this.props.scrollableYearDropdown
                    });
                    return de.default.createElement("div", {
                        className: e,
                        ref: this.dropdownRef
                    }, this.renderOptions());
                }
            }
        ]), a4;
    }(de.default.Component), _r = lt.default(Cr), Mr = function(e18) {
        wt(r6, e18);
        var t14 = Ct(r6);
        function r6() {
            var e;
            ht(this, r6);
            for(var a5 = arguments.length, n2 = new Array(a5), o = 0; o < a5; o++)n2[o] = arguments[o];
            return vt(bt(e = t14.call.apply(t14, [
                this
            ].concat(n2))), "state", {
                dropdownVisible: !1
            }), vt(bt(e), "renderSelectOptions", function() {
                for(var t = e.props.minDate ? Ie.default(e.props.minDate) : 1900, r = e.props.maxDate ? Ie.default(e.props.maxDate) : 2100, a = [], n = t; n <= r; n++)a.push(de.default.createElement("option", {
                    key: n,
                    value: n
                }, n));
                return a;
            }), vt(bt(e), "onSelectChange", function(t) {
                e.onChange(t.target.value);
            }), vt(bt(e), "renderSelectMode", function() {
                return de.default.createElement("select", {
                    value: e.props.year,
                    className: "react-datepicker__year-select",
                    onChange: e.onSelectChange
                }, e.renderSelectOptions());
            }), vt(bt(e), "renderReadView", function(t15) {
                return de.default.createElement("div", {
                    key: "read",
                    style: {
                        visibility: t15 ? "visible" : "hidden"
                    },
                    className: "react-datepicker__year-read-view",
                    onClick: function onClick(t) {
                        return e.toggleDropdown(t);
                    }
                }, de.default.createElement("span", {
                    className: "react-datepicker__year-read-view--down-arrow"
                }), de.default.createElement("span", {
                    className: "react-datepicker__year-read-view--selected-year"
                }, e.props.year));
            }), vt(bt(e), "renderDropdown", function() {
                return de.default.createElement(_r, {
                    key: "dropdown",
                    year: e.props.year,
                    onChange: e.onChange,
                    onCancel: e.toggleDropdown,
                    minDate: e.props.minDate,
                    maxDate: e.props.maxDate,
                    scrollableYearDropdown: e.props.scrollableYearDropdown,
                    yearDropdownItemNumber: e.props.yearDropdownItemNumber
                });
            }), vt(bt(e), "renderScrollMode", function() {
                var t = e.state.dropdownVisible, r = [
                    e.renderReadView(!t)
                ];
                return t && r.unshift(e.renderDropdown()), r;
            }), vt(bt(e), "onChange", function(t) {
                e.toggleDropdown(), t !== e.props.year && e.props.onChange(t);
            }), vt(bt(e), "toggleDropdown", function(t) {
                e.setState({
                    dropdownVisible: !e.state.dropdownVisible
                }, function() {
                    e.props.adjustDateOnChange && e.handleYearChange(e.props.date, t);
                });
            }), vt(bt(e), "handleYearChange", function(t, r) {
                e.onSelect(t, r), e.setOpen();
            }), vt(bt(e), "onSelect", function(t, r) {
                e.props.onSelect && e.props.onSelect(t, r);
            }), vt(bt(e), "setOpen", function() {
                e.props.setOpen && e.props.setOpen(!0);
            }), e;
        }
        return yt(r6, [
            {
                key: "render",
                value: function value() {
                    var e;
                    switch(this.props.dropdownMode){
                        case "scroll":
                            e = this.renderScrollMode();
                            break;
                        case "select":
                            e = this.renderSelectMode();
                    }
                    return de.default.createElement("div", {
                        className: "react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode)
                    }, e);
                }
            }
        ]), r6;
    }(de.default.Component), Pr = function(e19) {
        wt(r7, e19);
        var t16 = Ct(r7);
        function r7() {
            var e;
            ht(this, r7);
            for(var a = arguments.length, n = new Array(a), o = 0; o < a; o++)n[o] = arguments[o];
            return vt(bt(e = t16.call.apply(t16, [
                this
            ].concat(n))), "isSelectedMonth", function(t) {
                return e.props.month === t;
            }), vt(bt(e), "renderOptions", function() {
                return e.props.monthNames.map(function(t, r) {
                    return de.default.createElement("div", {
                        className: e.isSelectedMonth(r) ? "react-datepicker__month-option react-datepicker__month-option--selected_month" : "react-datepicker__month-option",
                        key: t,
                        onClick: e.onChange.bind(bt(e), r),
                        "aria-selected": e.isSelectedMonth(r) ? "true" : void 0
                    }, e.isSelectedMonth(r) ? de.default.createElement("span", {
                        className: "react-datepicker__month-option--selected"
                    }, "✓") : "", t);
                });
            }), vt(bt(e), "onChange", function(t) {
                return e.props.onChange(t);
            }), vt(bt(e), "handleClickOutside", function() {
                return e.props.onCancel();
            }), e;
        }
        return yt(r7, [
            {
                key: "render",
                value: function value() {
                    return de.default.createElement("div", {
                        className: "react-datepicker__month-dropdown"
                    }, this.renderOptions());
                }
            }
        ]), r7;
    }(de.default.Component), Er = lt.default(Pr), Nr = function(e20) {
        wt(r8, e20);
        var t17 = Ct(r8);
        function r8() {
            var e21;
            ht(this, r8);
            for(var a6 = arguments.length, n = new Array(a6), o = 0; o < a6; o++)n[o] = arguments[o];
            return vt(bt(e21 = t17.call.apply(t17, [
                this
            ].concat(n))), "state", {
                dropdownVisible: !1
            }), vt(bt(e21), "renderSelectOptions", function(e22) {
                return e22.map(function(e, t) {
                    return de.default.createElement("option", {
                        key: t,
                        value: t
                    }, e);
                });
            }), vt(bt(e21), "renderSelectMode", function(t18) {
                return de.default.createElement("select", {
                    value: e21.props.month,
                    className: "react-datepicker__month-select",
                    onChange: function onChange(t) {
                        return e21.onChange(t.target.value);
                    }
                }, e21.renderSelectOptions(t18));
            }), vt(bt(e21), "renderReadView", function(t, r) {
                return de.default.createElement("div", {
                    key: "read",
                    style: {
                        visibility: t ? "visible" : "hidden"
                    },
                    className: "react-datepicker__month-read-view",
                    onClick: e21.toggleDropdown
                }, de.default.createElement("span", {
                    className: "react-datepicker__month-read-view--down-arrow"
                }), de.default.createElement("span", {
                    className: "react-datepicker__month-read-view--selected-month"
                }, r[e21.props.month]));
            }), vt(bt(e21), "renderDropdown", function(t) {
                return de.default.createElement(Er, {
                    key: "dropdown",
                    month: e21.props.month,
                    monthNames: t,
                    onChange: e21.onChange,
                    onCancel: e21.toggleDropdown
                });
            }), vt(bt(e21), "renderScrollMode", function(t) {
                var r = e21.state.dropdownVisible, a = [
                    e21.renderReadView(!r, t)
                ];
                return r && a.unshift(e21.renderDropdown(t)), a;
            }), vt(bt(e21), "onChange", function(t) {
                e21.toggleDropdown(), t !== e21.props.month && e21.props.onChange(t);
            }), vt(bt(e21), "toggleDropdown", function() {
                return e21.setState({
                    dropdownVisible: !e21.state.dropdownVisible
                });
            }), e21;
        }
        return yt(r8, [
            {
                key: "render",
                value: function value() {
                    var e23, t = this, r = [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ].map(this.props.useShortMonthInDropdown ? function(e) {
                        return er(e, t.props.locale);
                    } : function(e) {
                        return Zt(e, t.props.locale);
                    });
                    switch(this.props.dropdownMode){
                        case "scroll":
                            e23 = this.renderScrollMode(r);
                            break;
                        case "select":
                            e23 = this.renderSelectMode(r);
                    }
                    return de.default.createElement("div", {
                        className: "react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode)
                    }, e23);
                }
            }
        ]), r8;
    }(de.default.Component);
    function Or(e, t) {
        for(var r = [], a = Kt(e), n = Kt(t); !at.default(a, n);)r.push(xt(a)), a = we.default(a, 1);
        return r;
    }
    var Yr = function(e24) {
        wt(r9, e24);
        var t19 = Ct(r9);
        function r9(e25) {
            var a;
            return ht(this, r9), vt(bt(a = t19.call(this, e25)), "renderOptions", function() {
                return a.state.monthYearsList.map(function(e) {
                    var t = Te.default(e), r = Qt(a.props.date, e) && Vt(a.props.date, e);
                    return de.default.createElement("div", {
                        className: r ? "react-datepicker__month-year-option--selected_month-year" : "react-datepicker__month-year-option",
                        key: t,
                        onClick: a.onChange.bind(bt(a), t),
                        "aria-selected": r ? "true" : void 0
                    }, r ? de.default.createElement("span", {
                        className: "react-datepicker__month-year-option--selected"
                    }, "✓") : "", Lt(e, a.props.dateFormat, a.props.locale));
                });
            }), vt(bt(a), "onChange", function(e) {
                return a.props.onChange(e);
            }), vt(bt(a), "handleClickOutside", function() {
                a.props.onCancel();
            }), a.state = {
                monthYearsList: Or(a.props.minDate, a.props.maxDate)
            }, a;
        }
        return yt(r9, [
            {
                key: "render",
                value: function value() {
                    var e = ce.default({
                        "react-datepicker__month-year-dropdown": !0,
                        "react-datepicker__month-year-dropdown--scrollable": this.props.scrollableMonthYearDropdown
                    });
                    return de.default.createElement("div", {
                        className: e
                    }, this.renderOptions());
                }
            }
        ]), r9;
    }(de.default.Component), xr = lt.default(Yr), Ir = function(e26) {
        wt(r10, e26);
        var t20 = Ct(r10);
        function r10() {
            var e;
            ht(this, r10);
            for(var a7 = arguments.length, n3 = new Array(a7), o = 0; o < a7; o++)n3[o] = arguments[o];
            return vt(bt(e = t20.call.apply(t20, [
                this
            ].concat(n3))), "state", {
                dropdownVisible: !1
            }), vt(bt(e), "renderSelectOptions", function() {
                for(var t = Kt(e.props.minDate), r = Kt(e.props.maxDate), a = []; !at.default(t, r);){
                    var n = Te.default(t);
                    a.push(de.default.createElement("option", {
                        key: n,
                        value: n
                    }, Lt(t, e.props.dateFormat, e.props.locale))), t = we.default(t, 1);
                }
                return a;
            }), vt(bt(e), "onSelectChange", function(t) {
                e.onChange(t.target.value);
            }), vt(bt(e), "renderSelectMode", function() {
                return de.default.createElement("select", {
                    value: Te.default(Kt(e.props.date)),
                    className: "react-datepicker__month-year-select",
                    onChange: e.onSelectChange
                }, e.renderSelectOptions());
            }), vt(bt(e), "renderReadView", function(t21) {
                var r = Lt(e.props.date, e.props.dateFormat, e.props.locale);
                return de.default.createElement("div", {
                    key: "read",
                    style: {
                        visibility: t21 ? "visible" : "hidden"
                    },
                    className: "react-datepicker__month-year-read-view",
                    onClick: function onClick(t) {
                        return e.toggleDropdown(t);
                    }
                }, de.default.createElement("span", {
                    className: "react-datepicker__month-year-read-view--down-arrow"
                }), de.default.createElement("span", {
                    className: "react-datepicker__month-year-read-view--selected-month-year"
                }, r));
            }), vt(bt(e), "renderDropdown", function() {
                return de.default.createElement(xr, {
                    key: "dropdown",
                    date: e.props.date,
                    dateFormat: e.props.dateFormat,
                    onChange: e.onChange,
                    onCancel: e.toggleDropdown,
                    minDate: e.props.minDate,
                    maxDate: e.props.maxDate,
                    scrollableMonthYearDropdown: e.props.scrollableMonthYearDropdown,
                    locale: e.props.locale
                });
            }), vt(bt(e), "renderScrollMode", function() {
                var t = e.state.dropdownVisible, r = [
                    e.renderReadView(!t)
                ];
                return t && r.unshift(e.renderDropdown()), r;
            }), vt(bt(e), "onChange", function(t) {
                e.toggleDropdown();
                var r = xt(parseInt(t));
                Qt(e.props.date, r) && Vt(e.props.date, r) || e.props.onChange(r);
            }), vt(bt(e), "toggleDropdown", function() {
                return e.setState({
                    dropdownVisible: !e.state.dropdownVisible
                });
            }), e;
        }
        return yt(r10, [
            {
                key: "render",
                value: function value() {
                    var e;
                    switch(this.props.dropdownMode){
                        case "scroll":
                            e = this.renderScrollMode();
                            break;
                        case "select":
                            e = this.renderSelectMode();
                    }
                    return de.default.createElement("div", {
                        className: "react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode)
                    }, e);
                }
            }
        ]), r10;
    }(de.default.Component), Tr = function(e27) {
        wt(r11, e27);
        var t22 = Ct(r11);
        function r11() {
            var e;
            ht(this, r11);
            for(var a8 = arguments.length, n4 = new Array(a8), o2 = 0; o2 < a8; o2++)n4[o2] = arguments[o2];
            return vt(bt(e = t22.call.apply(t22, [
                this
            ].concat(n4))), "dayEl", de.default.createRef()), vt(bt(e), "handleClick", function(t) {
                !e.isDisabled() && e.props.onClick && e.props.onClick(t);
            }), vt(bt(e), "handleMouseEnter", function(t) {
                !e.isDisabled() && e.props.onMouseEnter && e.props.onMouseEnter(t);
            }), vt(bt(e), "handleOnKeyDown", function(t) {
                " " === t.key && (t.preventDefault(), t.key = "Enter"), e.props.handleOnKeyDown(t);
            }), vt(bt(e), "isSameDay", function(t) {
                return $t(e.props.day, t);
            }), vt(bt(e), "isKeyboardSelected", function() {
                return !e.props.disabledKeyboardNavigation && !e.isSameDay(e.props.selected) && e.isSameDay(e.props.preSelection);
            }), vt(bt(e), "isDisabled", function() {
                return rr(e.props.day, e.props);
            }), vt(bt(e), "isExcluded", function() {
                return ar(e.props.day, e.props);
            }), vt(bt(e), "getHighLightedClass", function(t) {
                var r = e.props, a = r.day, n = r.highlightDates;
                if (!n) return !1;
                var o = Lt(a, "MM.dd.yyyy");
                return n.get(o);
            }), vt(bt(e), "isInRange", function() {
                var t = e.props, r = t.day, a = t.startDate, n = t.endDate;
                return !(!a || !n) && Gt(r, a, n);
            }), vt(bt(e), "isInSelectingRange", function() {
                var t, r = e.props, a = r.day, n = r.selectsStart, o = r.selectsEnd, s = r.selectsRange, i = r.selectsDisabledDaysInRange, p = r.startDate, l = r.endDate, d = null !== (t = e.props.selectingDate) && void 0 !== t ? t : e.props.preSelection;
                return !(!(n || o || s) || !d || !i && e.isDisabled()) && (n && l && (nt.default(d, l) || zt(d, l)) ? Gt(a, d, l) : (o && p && (at.default(d, p) || zt(d, p)) || !(!s || !p || l || !at.default(d, p) && !zt(d, p))) && Gt(a, p, d));
            }), vt(bt(e), "isSelectingRangeStart", function() {
                var t;
                if (!e.isInSelectingRange()) return !1;
                var r = e.props, a = r.day, n = r.startDate, o = r.selectsStart, s = null !== (t = e.props.selectingDate) && void 0 !== t ? t : e.props.preSelection;
                return $t(a, o ? s : n);
            }), vt(bt(e), "isSelectingRangeEnd", function() {
                var t;
                if (!e.isInSelectingRange()) return !1;
                var r = e.props, a = r.day, n = r.endDate, o = r.selectsEnd, s = null !== (t = e.props.selectingDate) && void 0 !== t ? t : e.props.preSelection;
                return $t(a, o ? s : n);
            }), vt(bt(e), "isRangeStart", function() {
                var t = e.props, r = t.day, a = t.startDate, n = t.endDate;
                return !(!a || !n) && $t(a, r);
            }), vt(bt(e), "isRangeEnd", function() {
                var t = e.props, r = t.day, a = t.startDate, n = t.endDate;
                return !(!a || !n) && $t(n, r);
            }), vt(bt(e), "isWeekend", function() {
                var t = Ee.default(e.props.day);
                return 0 === t || 6 === t;
            }), vt(bt(e), "isAfterMonth", function() {
                return void 0 !== e.props.month && (e.props.month + 1) % 12 === Ye.default(e.props.day);
            }), vt(bt(e), "isBeforeMonth", function() {
                return void 0 !== e.props.month && (Ye.default(e.props.day) + 1) % 12 === e.props.month;
            }), vt(bt(e), "isCurrentDay", function() {
                return e.isSameDay(xt());
            }), vt(bt(e), "isSelected", function() {
                return e.isSameDay(e.props.selected);
            }), vt(bt(e), "getClassNames", function(t) {
                var r = e.props.dayClassName ? e.props.dayClassName(t) : void 0;
                return ce.default("react-datepicker__day", r, "react-datepicker__day--" + qt(e.props.day), {
                    "react-datepicker__day--disabled": e.isDisabled(),
                    "react-datepicker__day--excluded": e.isExcluded(),
                    "react-datepicker__day--selected": e.isSelected(),
                    "react-datepicker__day--keyboard-selected": e.isKeyboardSelected(),
                    "react-datepicker__day--range-start": e.isRangeStart(),
                    "react-datepicker__day--range-end": e.isRangeEnd(),
                    "react-datepicker__day--in-range": e.isInRange(),
                    "react-datepicker__day--in-selecting-range": e.isInSelectingRange(),
                    "react-datepicker__day--selecting-range-start": e.isSelectingRangeStart(),
                    "react-datepicker__day--selecting-range-end": e.isSelectingRangeEnd(),
                    "react-datepicker__day--today": e.isCurrentDay(),
                    "react-datepicker__day--weekend": e.isWeekend(),
                    "react-datepicker__day--outside-month": e.isAfterMonth() || e.isBeforeMonth()
                }, e.getHighLightedClass("react-datepicker__day--highlighted"));
            }), vt(bt(e), "getAriaLabel", function() {
                var t = e.props, r = t.day, a = t.ariaLabelPrefixWhenEnabled, n = void 0 === a ? "Choose" : a, o = t.ariaLabelPrefixWhenDisabled, s = void 0 === o ? "Not available" : o, i = e.isDisabled() || e.isExcluded() ? s : n;
                return "".concat(i, " ").concat(Lt(r, "PPPP", e.props.locale));
            }), vt(bt(e), "getTabIndex", function(t, r) {
                var a = t || e.props.selected, n = r || e.props.preSelection;
                return e.isKeyboardSelected() || e.isSameDay(a) && $t(n, a) ? 0 : -1;
            }), vt(bt(e), "handleFocusDay", function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                }, r = !1;
                0 === e.getTabIndex() && !t.isInputFocused && e.isSameDay(e.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (r = !0), e.props.inline && !e.props.shouldFocusDayInline && (r = !1), e.props.containerRef && e.props.containerRef.current && e.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains("react-datepicker__day") && (r = !0)), r && e.dayEl.current.focus({
                    preventScroll: !0
                });
            }), vt(bt(e), "renderDayContents", function() {
                return e.props.monthShowsDuplicateDaysEnd && e.isAfterMonth() || e.props.monthShowsDuplicateDaysStart && e.isBeforeMonth() ? null : e.props.renderDayContents ? e.props.renderDayContents(Ne.default(e.props.day), e.props.day) : Ne.default(e.props.day);
            }), vt(bt(e), "render", function() {
                return de.default.createElement("div", {
                    ref: e.dayEl,
                    className: e.getClassNames(e.props.day),
                    onKeyDown: e.handleOnKeyDown,
                    onClick: e.handleClick,
                    onMouseEnter: e.handleMouseEnter,
                    tabIndex: e.getTabIndex(),
                    "aria-label": e.getAriaLabel(),
                    role: "button",
                    "aria-disabled": e.isDisabled(),
                    "aria-current": e.isCurrentDay() ? "date" : void 0,
                    "aria-selected": e.isSelected() ? "true" : void 0
                }, e.renderDayContents());
            }), e;
        }
        return yt(r11, [
            {
                key: "componentDidMount",
                value: function value() {
                    this.handleFocusDay();
                }
            },
            {
                key: "componentDidUpdate",
                value: function value(e) {
                    this.handleFocusDay(e);
                }
            }
        ]), r11;
    }(de.default.Component), Lr = function(e28) {
        wt(r12, e28);
        var t23 = Ct(r12);
        function r12() {
            var e;
            ht(this, r12);
            for(var a = arguments.length, n = new Array(a), o = 0; o < a; o++)n[o] = arguments[o];
            return vt(bt(e = t23.call.apply(t23, [
                this
            ].concat(n))), "handleClick", function(t) {
                e.props.onClick && e.props.onClick(t);
            }), e;
        }
        return yt(r12, [
            {
                key: "render",
                value: function value() {
                    var e = this.props, t = e.weekNumber, r = e.ariaLabelPrefix, a = void 0 === r ? "week " : r, n = {
                        "react-datepicker__week-number": !0,
                        "react-datepicker__week-number--clickable": !!e.onClick
                    };
                    return de.default.createElement("div", {
                        className: ce.default(n),
                        "aria-label": "".concat(a, " ").concat(this.props.weekNumber),
                        onClick: this.handleClick
                    }, t);
                }
            }
        ]), r12;
    }(de.default.Component), Rr = function(e29) {
        wt(r13, e29);
        var t24 = Ct(r13);
        function r13() {
            var e;
            ht(this, r13);
            for(var a9 = arguments.length, n5 = new Array(a9), o = 0; o < a9; o++)n5[o] = arguments[o];
            return vt(bt(e = t24.call.apply(t24, [
                this
            ].concat(n5))), "handleDayClick", function(t, r) {
                e.props.onDayClick && e.props.onDayClick(t, r);
            }), vt(bt(e), "handleDayMouseEnter", function(t) {
                e.props.onDayMouseEnter && e.props.onDayMouseEnter(t);
            }), vt(bt(e), "handleWeekClick", function(t, r, a) {
                "function" == typeof e.props.onWeekSelect && e.props.onWeekSelect(t, r, a), e.props.shouldCloseOnSelect && e.props.setOpen(!1);
            }), vt(bt(e), "formatWeekNumber", function(t) {
                return e.props.formatWeekNumber ? e.props.formatWeekNumber(t) : At(t);
            }), vt(bt(e), "renderDays", function() {
                var t = Bt(e.props.day, e.props.locale, e.props.calendarStartDay), r14 = [], a10 = e.formatWeekNumber(t);
                if (e.props.showWeekNumber) {
                    var n = e.props.onWeekSelect ? e.handleWeekClick.bind(bt(e), t, a10) : void 0;
                    r14.push(de.default.createElement(Lr, {
                        key: "W",
                        weekNumber: a10,
                        onClick: n,
                        ariaLabelPrefix: e.props.ariaLabelPrefix
                    }));
                }
                return r14.concat([
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ].map(function(r) {
                    var a = ve.default(t, r);
                    return de.default.createElement(Tr, {
                        ariaLabelPrefixWhenEnabled: e.props.chooseDayAriaLabelPrefix,
                        ariaLabelPrefixWhenDisabled: e.props.disabledDayAriaLabelPrefix,
                        key: a.valueOf(),
                        day: a,
                        month: e.props.month,
                        onClick: e.handleDayClick.bind(bt(e), a),
                        onMouseEnter: e.handleDayMouseEnter.bind(bt(e), a),
                        minDate: e.props.minDate,
                        maxDate: e.props.maxDate,
                        excludeDates: e.props.excludeDates,
                        excludeDateIntervals: e.props.excludeDateIntervals,
                        includeDates: e.props.includeDates,
                        includeDateIntervals: e.props.includeDateIntervals,
                        highlightDates: e.props.highlightDates,
                        selectingDate: e.props.selectingDate,
                        filterDate: e.props.filterDate,
                        preSelection: e.props.preSelection,
                        selected: e.props.selected,
                        selectsStart: e.props.selectsStart,
                        selectsEnd: e.props.selectsEnd,
                        selectsRange: e.props.selectsRange,
                        selectsDisabledDaysInRange: e.props.selectsDisabledDaysInRange,
                        startDate: e.props.startDate,
                        endDate: e.props.endDate,
                        dayClassName: e.props.dayClassName,
                        renderDayContents: e.props.renderDayContents,
                        disabledKeyboardNavigation: e.props.disabledKeyboardNavigation,
                        handleOnKeyDown: e.props.handleOnKeyDown,
                        isInputFocused: e.props.isInputFocused,
                        containerRef: e.props.containerRef,
                        inline: e.props.inline,
                        shouldFocusDayInline: e.props.shouldFocusDayInline,
                        monthShowsDuplicateDaysEnd: e.props.monthShowsDuplicateDaysEnd,
                        monthShowsDuplicateDaysStart: e.props.monthShowsDuplicateDaysStart,
                        locale: e.props.locale
                    });
                }));
            }), e;
        }
        return yt(r13, [
            {
                key: "render",
                value: function value() {
                    return de.default.createElement("div", {
                        className: "react-datepicker__week"
                    }, this.renderDays());
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        shouldCloseOnSelect: !0
                    };
                }
            }
        ]), r13;
    }(de.default.Component), Fr = function(e30) {
        wt(r15, e30);
        var t25 = Ct(r15);
        function r15() {
            var e31;
            ht(this, r15);
            for(var a11 = arguments.length, n6 = new Array(a11), o3 = 0; o3 < a11; o3++)n6[o3] = arguments[o3];
            return vt(bt(e31 = t25.call.apply(t25, [
                this
            ].concat(n6))), "MONTH_REFS", _t(Array(12)).map(function() {
                return de.default.createRef();
            })), vt(bt(e31), "isDisabled", function(t) {
                return rr(t, e31.props);
            }), vt(bt(e31), "isExcluded", function(t) {
                return ar(t, e31.props);
            }), vt(bt(e31), "handleDayClick", function(t, r) {
                e31.props.onDayClick && e31.props.onDayClick(t, r, e31.props.orderInDisplay);
            }), vt(bt(e31), "handleDayMouseEnter", function(t) {
                e31.props.onDayMouseEnter && e31.props.onDayMouseEnter(t);
            }), vt(bt(e31), "handleMouseLeave", function() {
                e31.props.onMouseLeave && e31.props.onMouseLeave();
            }), vt(bt(e31), "isRangeStartMonth", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate;
                return !(!n || !o) && Vt(Ae.default(a, t), n);
            }), vt(bt(e31), "isRangeStartQuarter", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate;
                return !(!n || !o) && Ut(qe.default(a, t), n);
            }), vt(bt(e31), "isRangeEndMonth", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate;
                return !(!n || !o) && Vt(Ae.default(a, t), o);
            }), vt(bt(e31), "isRangeEndQuarter", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate;
                return !(!n || !o) && Ut(qe.default(a, t), o);
            }), vt(bt(e31), "isWeekInMonth", function(t) {
                var r = e31.props.day, a = ve.default(t, 6);
                return Vt(t, r) || Vt(a, r);
            }), vt(bt(e31), "isCurrentMonth", function(e, t) {
                return Ie.default(e) === Ie.default(xt()) && t === Ye.default(xt());
            }), vt(bt(e31), "isSelectedMonth", function(e, t, r) {
                return Ye.default(e) === t && Ie.default(e) === Ie.default(r);
            }), vt(bt(e31), "isSelectedQuarter", function(e, t, r) {
                return xe.default(e) === t && Ie.default(e) === Ie.default(r);
            }), vt(bt(e31), "renderWeeks", function() {
                for(var t = [], r = e31.props.fixedHeight, a = 0, n = !1, o = Bt(Kt(e31.props.day), e31.props.locale, e31.props.calendarStartDay); t.push(de.default.createElement(Rr, {
                    ariaLabelPrefix: e31.props.weekAriaLabelPrefix,
                    chooseDayAriaLabelPrefix: e31.props.chooseDayAriaLabelPrefix,
                    disabledDayAriaLabelPrefix: e31.props.disabledDayAriaLabelPrefix,
                    key: a,
                    day: o,
                    month: Ye.default(e31.props.day),
                    onDayClick: e31.handleDayClick,
                    onDayMouseEnter: e31.handleDayMouseEnter,
                    onWeekSelect: e31.props.onWeekSelect,
                    formatWeekNumber: e31.props.formatWeekNumber,
                    locale: e31.props.locale,
                    minDate: e31.props.minDate,
                    maxDate: e31.props.maxDate,
                    excludeDates: e31.props.excludeDates,
                    excludeDateIntervals: e31.props.excludeDateIntervals,
                    includeDates: e31.props.includeDates,
                    includeDateIntervals: e31.props.includeDateIntervals,
                    inline: e31.props.inline,
                    shouldFocusDayInline: e31.props.shouldFocusDayInline,
                    highlightDates: e31.props.highlightDates,
                    selectingDate: e31.props.selectingDate,
                    filterDate: e31.props.filterDate,
                    preSelection: e31.props.preSelection,
                    selected: e31.props.selected,
                    selectsStart: e31.props.selectsStart,
                    selectsEnd: e31.props.selectsEnd,
                    selectsRange: e31.props.selectsRange,
                    selectsDisabledDaysInRange: e31.props.selectsDisabledDaysInRange,
                    showWeekNumber: e31.props.showWeekNumbers,
                    startDate: e31.props.startDate,
                    endDate: e31.props.endDate,
                    dayClassName: e31.props.dayClassName,
                    setOpen: e31.props.setOpen,
                    shouldCloseOnSelect: e31.props.shouldCloseOnSelect,
                    disabledKeyboardNavigation: e31.props.disabledKeyboardNavigation,
                    renderDayContents: e31.props.renderDayContents,
                    handleOnKeyDown: e31.props.handleOnKeyDown,
                    isInputFocused: e31.props.isInputFocused,
                    containerRef: e31.props.containerRef,
                    calendarStartDay: e31.props.calendarStartDay,
                    monthShowsDuplicateDaysEnd: e31.props.monthShowsDuplicateDaysEnd,
                    monthShowsDuplicateDaysStart: e31.props.monthShowsDuplicateDaysStart
                })), !n;){
                    a++, o = De.default(o, 1);
                    var s = r && a >= 6, i = !r && !e31.isWeekInMonth(o);
                    if (s || i) {
                        if (!e31.props.peekNextMonth) break;
                        n = !0;
                    }
                }
                return t;
            }), vt(bt(e31), "onMonthClick", function(t, r) {
                e31.handleDayClick(Kt(Ae.default(e31.props.day, r)), t);
            }), vt(bt(e31), "handleMonthNavigation", function(t, r) {
                e31.isDisabled(r) || e31.isExcluded(r) || (e31.props.setPreSelection(r), e31.MONTH_REFS[t].current && e31.MONTH_REFS[t].current.focus());
            }), vt(bt(e31), "onMonthKeyDown", function(t, r) {
                var a = t.key;
                if (!e31.props.disabledKeyboardNavigation) switch(a){
                    case "Enter":
                        e31.onMonthClick(t, r), e31.props.setPreSelection(e31.props.selected);
                        break;
                    case "ArrowRight":
                        e31.handleMonthNavigation(11 === r ? 0 : r + 1, we.default(e31.props.preSelection, 1));
                        break;
                    case "ArrowLeft":
                        e31.handleMonthNavigation(0 === r ? 11 : r - 1, Se.default(e31.props.preSelection, 1));
                }
            }), vt(bt(e31), "onQuarterClick", function(t, r) {
                e31.handleDayClick(jt(qe.default(e31.props.day, r)), t);
            }), vt(bt(e31), "getMonthClassNames", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate, s = r.selected, i = r.minDate, p = r.maxDate, l = r.preSelection, d = r.monthClassName, c = d ? d(a) : void 0;
                return ce.default("react-datepicker__month-text", "react-datepicker__month-".concat(t), c, {
                    "react-datepicker__month--disabled": (i || p) && nr(Ae.default(a, t), e31.props),
                    "react-datepicker__month--selected": e31.isSelectedMonth(a, t, s),
                    "react-datepicker__month-text--keyboard-selected": Ye.default(l) === t,
                    "react-datepicker__month--in-range": or(n, o, t, a),
                    "react-datepicker__month--range-start": e31.isRangeStartMonth(t),
                    "react-datepicker__month--range-end": e31.isRangeEndMonth(t),
                    "react-datepicker__month-text--today": e31.isCurrentMonth(a, t)
                });
            }), vt(bt(e31), "getTabIndex", function(t) {
                var r = Ye.default(e31.props.preSelection);
                return e31.props.disabledKeyboardNavigation || t !== r ? "-1" : "0";
            }), vt(bt(e31), "getAriaLabel", function(t) {
                var r = e31.props, a = r.ariaLabelPrefix, n = void 0 === a ? "Choose" : a, o = r.disabledDayAriaLabelPrefix, s = void 0 === o ? "Not available" : o, i = r.day, p = Ae.default(i, t), l = e31.isDisabled(p) || e31.isExcluded(p) ? s : n;
                return "".concat(l, " ").concat(Lt(p, "MMMM yyyy"));
            }), vt(bt(e31), "getQuarterClassNames", function(t) {
                var r = e31.props, a = r.day, n = r.startDate, o = r.endDate, s = r.selected, i = r.minDate, p = r.maxDate;
                return ce.default("react-datepicker__quarter-text", "react-datepicker__quarter-".concat(t), {
                    "react-datepicker__quarter--disabled": (i || p) && sr(qe.default(a, t), e31.props),
                    "react-datepicker__quarter--selected": e31.isSelectedQuarter(a, t, s),
                    "react-datepicker__quarter--in-range": pr(n, o, t, a),
                    "react-datepicker__quarter--range-start": e31.isRangeStartQuarter(t),
                    "react-datepicker__quarter--range-end": e31.isRangeEndQuarter(t)
                });
            }), vt(bt(e31), "renderMonths", function() {
                var t26 = e31.props, r16 = t26.showFullMonthYearPicker, a12 = t26.showTwoColumnMonthYearPicker, n = t26.showFourColumnMonthYearPicker, o = t26.locale, s = t26.day, i = t26.selected;
                return (n ? [
                    [
                        0,
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        8,
                        9,
                        10,
                        11
                    ]
                ] : a12 ? [
                    [
                        0,
                        1
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        10,
                        11
                    ]
                ] : [
                    [
                        0,
                        1,
                        2
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11
                    ]
                ]).map(function(t27, a13) {
                    return de.default.createElement("div", {
                        className: "react-datepicker__month-wrapper",
                        key: a13
                    }, t27.map(function(t, a) {
                        return de.default.createElement("div", {
                            ref: e31.MONTH_REFS[t],
                            key: a,
                            onClick: function onClick(r) {
                                e31.onMonthClick(r, t);
                            },
                            onKeyDown: function onKeyDown(r) {
                                e31.onMonthKeyDown(r, t);
                            },
                            tabIndex: e31.getTabIndex(t),
                            className: e31.getMonthClassNames(t),
                            role: "button",
                            "aria-label": e31.getAriaLabel(t),
                            "aria-current": e31.isCurrentMonth(s, t) ? "date" : void 0,
                            "aria-selected": e31.isSelectedMonth(s, t, i) ? "true" : void 0
                        }, r16 ? Zt(t, o) : er(t, o));
                    }));
                });
            }), vt(bt(e31), "renderQuarters", function() {
                var t28 = e31.props, r17 = t28.day, a = t28.selected;
                return de.default.createElement("div", {
                    className: "react-datepicker__quarter-wrapper"
                }, [
                    1,
                    2,
                    3,
                    4
                ].map(function(t, n) {
                    return de.default.createElement("div", {
                        key: n,
                        onClick: function onClick(r) {
                            e31.onQuarterClick(r, t);
                        },
                        className: e31.getQuarterClassNames(t),
                        "aria-selected": e31.isSelectedQuarter(r17, t, a) ? "true" : void 0
                    }, tr(t, e31.props.locale));
                }));
            }), vt(bt(e31), "getClassNames", function() {
                var t = e31.props;
                t.day;
                var r = t.selectingDate, a = t.selectsStart, n = t.selectsEnd, o = t.showMonthYearPicker, s = t.showQuarterYearPicker;
                return ce.default("react-datepicker__month", {
                    "react-datepicker__month--selecting-range": r && (a || n)
                }, {
                    "react-datepicker__monthPicker": o
                }, {
                    "react-datepicker__quarterPicker": s
                });
            }), e31;
        }
        return yt(r15, [
            {
                key: "render",
                value: function value() {
                    var e = this.props, t = e.showMonthYearPicker, r = e.showQuarterYearPicker, a = e.day, n = e.ariaLabelPrefix, o = void 0 === n ? "month " : n;
                    return de.default.createElement("div", {
                        className: this.getClassNames(),
                        onMouseLeave: this.handleMouseLeave,
                        "aria-label": "".concat(o, " ").concat(Lt(a, "yyyy-MM"))
                    }, t ? this.renderMonths() : r ? this.renderQuarters() : this.renderWeeks());
                }
            }
        ]), r15;
    }(de.default.Component), Ar = function(e32) {
        wt(r18, e32);
        var t29 = Ct(r18);
        function r18() {
            var e33;
            ht(this, r18);
            for(var a14 = arguments.length, n7 = new Array(a14), o4 = 0; o4 < a14; o4++)n7[o4] = arguments[o4];
            return vt(bt(e33 = t29.call.apply(t29, [
                this
            ].concat(n7))), "state", {
                height: null
            }), vt(bt(e33), "handleClick", function(t) {
                (e33.props.minTime || e33.props.maxTime) && ur(t, e33.props) || (e33.props.excludeTimes || e33.props.includeTimes || e33.props.filterTime) && cr(t, e33.props) || e33.props.onChange(t);
            }), vt(bt(e33), "isSelectedTime", function(t, r, a) {
                return e33.props.selected && r === Pe.default(t) && a === Me.default(t);
            }), vt(bt(e33), "liClasses", function(t, r, a) {
                var n = [
                    "react-datepicker__time-list-item",
                    e33.props.timeClassName ? e33.props.timeClassName(t, r, a) : void 0
                ];
                return e33.isSelectedTime(t, r, a) && n.push("react-datepicker__time-list-item--selected"), ((e33.props.minTime || e33.props.maxTime) && ur(t, e33.props) || (e33.props.excludeTimes || e33.props.includeTimes || e33.props.filterTime) && cr(t, e33.props)) && n.push("react-datepicker__time-list-item--disabled"), e33.props.injectTimes && (60 * Pe.default(t) + Me.default(t)) % e33.props.intervals != 0 && n.push("react-datepicker__time-list-item--injected"), n.join(" ");
            }), vt(bt(e33), "handleOnKeyDown", function(t, r) {
                " " === t.key && (t.preventDefault(), t.key = "Enter"), "Enter" === t.key && e33.handleClick(r), e33.props.handleOnKeyDown(t);
            }), vt(bt(e33), "renderTimes", function() {
                for(var t30 = [], r19 = e33.props.format ? e33.props.format : "p", a15 = e33.props.intervals, n = Wt(xt(e33.props.selected)), o = 1440 / a15, s = e33.props.injectTimes && e33.props.injectTimes.sort(function(e, t) {
                    return e - t;
                }), i = e33.props.selected || e33.props.openToDate || xt(), p = Pe.default(i), l = Me.default(i), d = Fe.default(Re.default(n, l), p), c = 0; c < o; c++){
                    var u = me.default(n, c * a15);
                    if (t30.push(u), s) {
                        var f = gr(n, u, c, a15, s);
                        t30 = t30.concat(f);
                    }
                }
                return t30.map(function(t, a) {
                    return de.default.createElement("li", {
                        key: a,
                        onClick: e33.handleClick.bind(bt(e33), t),
                        className: e33.liClasses(t, p, l),
                        ref: function ref(r) {
                            (nt.default(t, d) || zt(t, d)) && (e33.centerLi = r);
                        },
                        onKeyDown: function onKeyDown(r) {
                            e33.handleOnKeyDown(r, t);
                        },
                        tabIndex: "0",
                        "aria-selected": e33.isSelectedTime(t, p, l) ? "true" : void 0
                    }, Lt(t, r19, e33.props.locale));
                });
            }), e33;
        }
        return yt(r18, [
            {
                key: "componentDidMount",
                value: function value() {
                    this.list.scrollTop = r18.calcCenterPosition(this.props.monthRef ? this.props.monthRef.clientHeight - this.header.clientHeight : this.list.clientHeight, this.centerLi), this.props.monthRef && this.header && this.setState({
                        height: this.props.monthRef.clientHeight - this.header.clientHeight
                    });
                }
            },
            {
                key: "render",
                value: function value() {
                    var e = this, t31 = this.state.height;
                    return de.default.createElement("div", {
                        className: "react-datepicker__time-container ".concat(this.props.todayButton ? "react-datepicker__time-container--with-today-button" : "")
                    }, de.default.createElement("div", {
                        className: "react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly ? "react-datepicker__header--time--only" : ""),
                        ref: function ref(t) {
                            e.header = t;
                        }
                    }, de.default.createElement("div", {
                        className: "react-datepicker-time__header"
                    }, this.props.timeCaption)), de.default.createElement("div", {
                        className: "react-datepicker__time"
                    }, de.default.createElement("div", {
                        className: "react-datepicker__time-box"
                    }, de.default.createElement("ul", {
                        className: "react-datepicker__time-list",
                        ref: function ref(t) {
                            e.list = t;
                        },
                        style: t31 ? {
                            height: t31
                        } : {
                        },
                        tabIndex: "0"
                    }, this.renderTimes()))));
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        intervals: 30,
                        onTimeChange: function onTimeChange() {
                        },
                        todayButton: null,
                        timeCaption: "Time"
                    };
                }
            }
        ]), r18;
    }(de.default.Component);
    vt(Ar, "calcCenterPosition", function(e, t) {
        return t.offsetTop - (e / 2 - t.clientHeight / 2);
    });
    var qr = function(e34) {
        wt(r20, e34);
        var t32 = Ct(r20);
        function r20(e35) {
            var a;
            return ht(this, r20), vt(bt(a = t32.call(this, e35)), "YEAR_REFS", _t(Array(a.props.yearItemNumber)).map(function() {
                return de.default.createRef();
            })), vt(bt(a), "isDisabled", function(e) {
                return rr(e, a.props);
            }), vt(bt(a), "isExcluded", function(e) {
                return ar(e, a.props);
            }), vt(bt(a), "updateFocusOnPaginate", function(e) {
                var t = (function() {
                    this.YEAR_REFS[e].current.focus();
                }).bind(bt(a));
                window.requestAnimationFrame(t);
            }), vt(bt(a), "handleYearClick", function(e, t) {
                a.props.onDayClick && a.props.onDayClick(e, t);
            }), vt(bt(a), "handleYearNavigation", function(e, t) {
                var r = a.props, n = r.date, o = r.yearItemNumber, s = br(n, o).startPeriod;
                a.isDisabled(t) || a.isExcluded(t) || (a.props.setPreSelection(t), e - s == -1 ? a.updateFocusOnPaginate(o - 1) : e - s === o ? a.updateFocusOnPaginate(0) : a.YEAR_REFS[e - s].current.focus());
            }), vt(bt(a), "isSameDay", function(e, t) {
                return $t(e, t);
            }), vt(bt(a), "isCurrentYear", function(e) {
                return e === Ie.default(xt());
            }), vt(bt(a), "isKeyboardSelected", function(e) {
                var t = Ht(We.default(a.props.date, e));
                return !a.props.disabledKeyboardNavigation && !a.props.inline && !$t(t, Ht(a.props.selected)) && $t(t, Ht(a.props.preSelection));
            }), vt(bt(a), "onYearClick", function(e, t) {
                var r = a.props.date;
                a.handleYearClick(Ht(We.default(r, t)), e);
            }), vt(bt(a), "onYearKeyDown", function(e, t) {
                var r = e.key;
                if (!a.props.disabledKeyboardNavigation) switch(r){
                    case "Enter":
                        a.onYearClick(e, t), a.props.setPreSelection(a.props.selected);
                        break;
                    case "ArrowRight":
                        a.handleYearNavigation(t + 1, ge.default(a.props.preSelection, 1));
                        break;
                    case "ArrowLeft":
                        a.handleYearNavigation(t - 1, Ce.default(a.props.preSelection, 1));
                }
            }), vt(bt(a), "getYearClassNames", function(e) {
                var t = a.props, r = t.minDate, n = t.maxDate, o = t.selected;
                return ce.default("react-datepicker__year-text", {
                    "react-datepicker__year-text--selected": e === Ie.default(o),
                    "react-datepicker__year-text--disabled": (r || n) && ir(e, a.props),
                    "react-datepicker__year-text--keyboard-selected": a.isKeyboardSelected(e),
                    "react-datepicker__year-text--today": a.isCurrentYear(e)
                });
            }), vt(bt(a), "getYearTabIndex", function(e) {
                return a.props.disabledKeyboardNavigation ? "-1" : e === Ie.default(a.props.preSelection) ? "0" : "-1";
            }), a;
        }
        return yt(r20, [
            {
                key: "render",
                value: function value() {
                    for(var e = this, t33 = [], r21 = this.props, a = br(r21.date, r21.yearItemNumber), n = a.startPeriod, o = a.endPeriod, s = function s(r) {
                        t33.push(de.default.createElement("div", {
                            ref: e.YEAR_REFS[r - n],
                            onClick: function onClick(t) {
                                e.onYearClick(t, r);
                            },
                            onKeyDown: function onKeyDown(t) {
                                e.onYearKeyDown(t, r);
                            },
                            tabIndex: e.getYearTabIndex(r),
                            className: e.getYearClassNames(r),
                            key: r,
                            "aria-current": e.isCurrentYear(r) ? "date" : void 0
                        }, r));
                    }, i = n; i <= o; i++)s(i);
                    return de.default.createElement("div", {
                        className: "react-datepicker__year"
                    }, de.default.createElement("div", {
                        className: "react-datepicker__year-wrapper"
                    }, t33));
                }
            }
        ]), r20;
    }(de.default.Component), Wr = function(e36) {
        wt(r22, e36);
        var t34 = Ct(r22);
        function r22(e37) {
            var a;
            return ht(this, r22), vt(bt(a = t34.call(this, e37)), "onTimeChange", function(e) {
                a.setState({
                    time: e
                });
                var t = new Date;
                t.setHours(e.split(":")[0]), t.setMinutes(e.split(":")[1]), a.props.onChange(t);
            }), vt(bt(a), "renderTimeInput", function() {
                var e38 = a.state.time, t = a.props, r = t.date, n = t.timeString, o = t.customTimeInput;
                return o ? de.default.cloneElement(o, {
                    date: r,
                    value: e38,
                    onChange: a.onTimeChange
                }) : de.default.createElement("input", {
                    type: "time",
                    className: "react-datepicker-time__input",
                    placeholder: "Time",
                    name: "time-input",
                    required: !0,
                    value: e38,
                    onChange: function onChange(e) {
                        a.onTimeChange(e.target.value || n);
                    }
                });
            }), a.state = {
                time: a.props.timeString
            }, a;
        }
        return yt(r22, [
            {
                key: "render",
                value: function value() {
                    return de.default.createElement("div", {
                        className: "react-datepicker__input-time-container"
                    }, de.default.createElement("div", {
                        className: "react-datepicker-time__caption"
                    }, this.props.timeInputLabel), de.default.createElement("div", {
                        className: "react-datepicker-time__input-container"
                    }, de.default.createElement("div", {
                        className: "react-datepicker-time__input"
                    }, this.renderTimeInput())));
                }
            }
        ], [
            {
                key: "getDerivedStateFromProps",
                value: function value(e, t) {
                    return e.timeString !== t.time ? {
                        time: e.timeString
                    } : null;
                }
            }
        ]), r22;
    }(de.default.Component);
    function Br(e) {
        var t = e.className, r = e.children, a = e.showPopperArrow, n = e.arrowProps, o = void 0 === n ? {
        } : n;
        return de.default.createElement("div", {
            className: t
        }, a && de.default.createElement("div", Dt({
            className: "react-datepicker__triangle"
        }, o)), r);
    }
    var Kr = [
        "react-datepicker__year-select",
        "react-datepicker__month-select",
        "react-datepicker__month-year-select"
    ], Hr = function(e39) {
        wt(r23, e39);
        var t35 = Ct(r23);
        function r23(e40) {
            var a16;
            return ht(this, r23), vt(bt(a16 = t35.call(this, e40)), "handleClickOutside", function(e) {
                a16.props.onClickOutside(e);
            }), vt(bt(a16), "setClickOutsideRef", function() {
                return a16.containerRef.current;
            }), vt(bt(a16), "handleDropdownFocus", function(e41) {
                (function() {
                    var e = ((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    }).className || "").split(/\s+/);
                    return Kr.some(function(t) {
                        return e.indexOf(t) >= 0;
                    });
                })(e41.target) && a16.props.onDropdownFocus();
            }), vt(bt(a16), "getDateInView", function() {
                var e = a16.props, t = e.preSelection, r = e.selected, n = e.openToDate, o = vr(a16.props), s = Dr(a16.props), i = xt(), p = n || r || t;
                return p || (o && nt.default(i, o) ? o : s && at.default(i, s) ? s : i);
            }), vt(bt(a16), "increaseMonth", function() {
                a16.setState(function(e) {
                    var t = e.date;
                    return {
                        date: we.default(t, 1)
                    };
                }, function() {
                    return a16.handleMonthChange(a16.state.date);
                });
            }), vt(bt(a16), "decreaseMonth", function() {
                a16.setState(function(e) {
                    var t = e.date;
                    return {
                        date: Se.default(t, 1)
                    };
                }, function() {
                    return a16.handleMonthChange(a16.state.date);
                });
            }), vt(bt(a16), "handleDayClick", function(e, t, r) {
                a16.props.onSelect(e, t, r), a16.props.setPreSelection && a16.props.setPreSelection(e);
            }), vt(bt(a16), "handleDayMouseEnter", function(e) {
                a16.setState({
                    selectingDate: e
                }), a16.props.onDayMouseEnter && a16.props.onDayMouseEnter(e);
            }), vt(bt(a16), "handleMonthMouseLeave", function() {
                a16.setState({
                    selectingDate: null
                }), a16.props.onMonthMouseLeave && a16.props.onMonthMouseLeave();
            }), vt(bt(a16), "handleYearChange", function(e) {
                a16.props.onYearChange && a16.props.onYearChange(e), a16.props.adjustDateOnChange && (a16.props.onSelect && a16.props.onSelect(e), a16.props.setOpen && a16.props.setOpen(!0)), a16.props.setPreSelection && a16.props.setPreSelection(e);
            }), vt(bt(a16), "handleMonthChange", function(e) {
                a16.props.onMonthChange && a16.props.onMonthChange(e), a16.props.adjustDateOnChange && (a16.props.onSelect && a16.props.onSelect(e), a16.props.setOpen && a16.props.setOpen(!0)), a16.props.setPreSelection && a16.props.setPreSelection(e);
            }), vt(bt(a16), "handleMonthYearChange", function(e) {
                a16.handleYearChange(e), a16.handleMonthChange(e);
            }), vt(bt(a16), "changeYear", function(e) {
                a16.setState(function(t) {
                    var r = t.date;
                    return {
                        date: We.default(r, e)
                    };
                }, function() {
                    return a16.handleYearChange(a16.state.date);
                });
            }), vt(bt(a16), "changeMonth", function(e) {
                a16.setState(function(t) {
                    var r = t.date;
                    return {
                        date: Ae.default(r, e)
                    };
                }, function() {
                    return a16.handleMonthChange(a16.state.date);
                });
            }), vt(bt(a16), "changeMonthYear", function(e) {
                a16.setState(function(t) {
                    var r = t.date;
                    return {
                        date: We.default(Ae.default(r, Ye.default(e)), Ie.default(e))
                    };
                }, function() {
                    return a16.handleMonthYearChange(a16.state.date);
                });
            }), vt(bt(a16), "header", function() {
                var e42 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a16.state.date, t = Bt(e42, a16.props.locale, a16.props.calendarStartDay), r24 = [];
                return a16.props.showWeekNumbers && r24.push(de.default.createElement("div", {
                    key: "W",
                    className: "react-datepicker__day-name"
                }, a16.props.weekLabel || "#")), r24.concat([
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ].map(function(e) {
                    var r = ve.default(t, e), n = a16.formatWeekday(r, a16.props.locale), o = a16.props.weekDayClassName ? a16.props.weekDayClassName(r) : void 0;
                    return de.default.createElement("div", {
                        key: e,
                        className: ce.default("react-datepicker__day-name", o)
                    }, n);
                }));
            }), vt(bt(a16), "formatWeekday", function(e43, t36) {
                return a16.props.formatWeekDay ? (function(e, t, r) {
                    return t(Lt(e, "EEEE", r));
                })(e43, a16.props.formatWeekDay, t36) : a16.props.useWeekdaysShort ? (function(e, t) {
                    return Lt(e, "EEE", t);
                })(e43, t36) : (function(e, t) {
                    return Lt(e, "EEEEEE", t);
                })(e43, t36);
            }), vt(bt(a16), "decreaseYear", function() {
                a16.setState(function(e) {
                    var t = e.date;
                    return {
                        date: Ce.default(t, a16.props.showYearPicker ? a16.props.yearItemNumber : 1)
                    };
                }, function() {
                    return a16.handleYearChange(a16.state.date);
                });
            }), vt(bt(a16), "renderPreviousButton", function() {
                if (!a16.props.renderCustomHeader) {
                    var e44;
                    switch(!0){
                        case a16.props.showMonthYearPicker:
                            e44 = mr(a16.state.date, a16.props);
                            break;
                        case a16.props.showYearPicker:
                            e44 = (function(e) {
                                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                                }, r = t.minDate, a = t.yearItemNumber, n = void 0 === a ? Ot : a, o = br(Ht(Ce.default(e, n)), n).endPeriod, s = r && Ie.default(r);
                                return s && s > o || !1;
                            })(a16.state.date, a16.props);
                            break;
                        default:
                            e44 = fr(a16.state.date, a16.props);
                    }
                    if ((a16.props.forceShowMonthNavigation || a16.props.showDisabledMonthNavigation || !e44) && !a16.props.showTimeSelectOnly) {
                        var t37 = [
                            "react-datepicker__navigation",
                            "react-datepicker__navigation--previous"
                        ], r25 = a16.decreaseMonth;
                        (a16.props.showMonthYearPicker || a16.props.showQuarterYearPicker || a16.props.showYearPicker) && (r25 = a16.decreaseYear), e44 && a16.props.showDisabledMonthNavigation && (t37.push("react-datepicker__navigation--previous--disabled"), r25 = null);
                        var n8 = a16.props.showMonthYearPicker || a16.props.showQuarterYearPicker || a16.props.showYearPicker, o5 = a16.props, s2 = o5.previousMonthButtonLabel, i = o5.previousYearButtonLabel, p = a16.props, l = p.previousMonthAriaLabel, d = void 0 === l ? "string" == typeof s2 ? s2 : "Previous Month" : l, c = p.previousYearAriaLabel, u = void 0 === c ? "string" == typeof i ? i : "Previous Year" : c;
                        return de.default.createElement("button", {
                            type: "button",
                            className: t37.join(" "),
                            onClick: r25,
                            onKeyDown: a16.props.handleOnKeyDown,
                            "aria-label": n8 ? u : d
                        }, de.default.createElement("span", {
                            className: [
                                "react-datepicker__navigation-icon",
                                "react-datepicker__navigation-icon--previous"
                            ].join(" ")
                        }, n8 ? a16.props.previousYearButtonLabel : a16.props.previousMonthButtonLabel));
                    }
                }
            }), vt(bt(a16), "increaseYear", function() {
                a16.setState(function(e) {
                    var t = e.date;
                    return {
                        date: ge.default(t, a16.props.showYearPicker ? a16.props.yearItemNumber : 1)
                    };
                }, function() {
                    return a16.handleYearChange(a16.state.date);
                });
            }), vt(bt(a16), "renderNextButton", function() {
                if (!a16.props.renderCustomHeader) {
                    var e46;
                    switch(!0){
                        case a16.props.showMonthYearPicker:
                            e46 = yr(a16.state.date, a16.props);
                            break;
                        case a16.props.showYearPicker:
                            e46 = (function(e) {
                                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                                }, r = t.maxDate, a = t.yearItemNumber, n = void 0 === a ? Ot : a, o = br(ge.default(e, n), n).startPeriod, s = r && Ie.default(r);
                                return s && s < o || !1;
                            })(a16.state.date, a16.props);
                            break;
                        default:
                            e46 = hr(a16.state.date, a16.props);
                    }
                    if ((a16.props.forceShowMonthNavigation || a16.props.showDisabledMonthNavigation || !e46) && !a16.props.showTimeSelectOnly) {
                        var t39 = [
                            "react-datepicker__navigation",
                            "react-datepicker__navigation--next"
                        ];
                        a16.props.showTimeSelect && t39.push("react-datepicker__navigation--next--with-time"), a16.props.todayButton && t39.push("react-datepicker__navigation--next--with-today-button");
                        var r27 = a16.increaseMonth;
                        (a16.props.showMonthYearPicker || a16.props.showQuarterYearPicker || a16.props.showYearPicker) && (r27 = a16.increaseYear), e46 && a16.props.showDisabledMonthNavigation && (t39.push("react-datepicker__navigation--next--disabled"), r27 = null);
                        var n10 = a16.props.showMonthYearPicker || a16.props.showQuarterYearPicker || a16.props.showYearPicker, o7 = a16.props, s4 = o7.nextMonthButtonLabel, i = o7.nextYearButtonLabel, p = a16.props, l = p.nextMonthAriaLabel, d = void 0 === l ? "string" == typeof s4 ? s4 : "Next Month" : l, c = p.nextYearAriaLabel, u = void 0 === c ? "string" == typeof i ? i : "Next Year" : c;
                        return de.default.createElement("button", {
                            type: "button",
                            className: t39.join(" "),
                            onClick: r27,
                            onKeyDown: a16.props.handleOnKeyDown,
                            "aria-label": n10 ? u : d
                        }, de.default.createElement("span", {
                            className: [
                                "react-datepicker__navigation-icon",
                                "react-datepicker__navigation-icon--next"
                            ].join(" ")
                        }, n10 ? a16.props.nextYearButtonLabel : a16.props.nextMonthButtonLabel));
                    }
                }
            }), vt(bt(a16), "renderCurrentMonth", function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a16.state.date, t = [
                    "react-datepicker__current-month"
                ];
                return a16.props.showYearDropdown && t.push("react-datepicker__current-month--hasYearDropdown"), a16.props.showMonthDropdown && t.push("react-datepicker__current-month--hasMonthDropdown"), a16.props.showMonthYearDropdown && t.push("react-datepicker__current-month--hasMonthYearDropdown"), de.default.createElement("div", {
                    className: t.join(" ")
                }, Lt(e, a16.props.dateFormat, a16.props.locale));
            }), vt(bt(a16), "renderYearDropdown", function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (a16.props.showYearDropdown && !e) return de.default.createElement(Mr, {
                    adjustDateOnChange: a16.props.adjustDateOnChange,
                    date: a16.state.date,
                    onSelect: a16.props.onSelect,
                    setOpen: a16.props.setOpen,
                    dropdownMode: a16.props.dropdownMode,
                    onChange: a16.changeYear,
                    minDate: a16.props.minDate,
                    maxDate: a16.props.maxDate,
                    year: Ie.default(a16.state.date),
                    scrollableYearDropdown: a16.props.scrollableYearDropdown,
                    yearDropdownItemNumber: a16.props.yearDropdownItemNumber
                });
            }), vt(bt(a16), "renderMonthDropdown", function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (a16.props.showMonthDropdown && !e) return de.default.createElement(Nr, {
                    dropdownMode: a16.props.dropdownMode,
                    locale: a16.props.locale,
                    onChange: a16.changeMonth,
                    month: Ye.default(a16.state.date),
                    useShortMonthInDropdown: a16.props.useShortMonthInDropdown
                });
            }), vt(bt(a16), "renderMonthYearDropdown", function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (a16.props.showMonthYearDropdown && !e) return de.default.createElement(Ir, {
                    dropdownMode: a16.props.dropdownMode,
                    locale: a16.props.locale,
                    dateFormat: a16.props.dateFormat,
                    onChange: a16.changeMonthYear,
                    minDate: a16.props.minDate,
                    maxDate: a16.props.maxDate,
                    date: a16.state.date,
                    scrollableMonthYearDropdown: a16.props.scrollableMonthYearDropdown
                });
            }), vt(bt(a16), "renderTodayButton", function() {
                if (a16.props.todayButton && !a16.props.showTimeSelectOnly) return de.default.createElement("div", {
                    className: "react-datepicker__today-button",
                    onClick: function onClick(e) {
                        return a16.props.onSelect(Ve.default(xt()), e);
                    }
                }, a16.props.todayButton);
            }), vt(bt(a16), "renderDefaultHeader", function(e) {
                var t = e.monthDate, r = e.i;
                return de.default.createElement("div", {
                    className: "react-datepicker__header ".concat(a16.props.showTimeSelect ? "react-datepicker__header--has-time-select" : "")
                }, a16.renderCurrentMonth(t), de.default.createElement("div", {
                    className: "react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a16.props.dropdownMode),
                    onFocus: a16.handleDropdownFocus
                }, a16.renderMonthDropdown(0 !== r), a16.renderMonthYearDropdown(0 !== r), a16.renderYearDropdown(0 !== r)), de.default.createElement("div", {
                    className: "react-datepicker__day-names"
                }, a16.header(t)));
            }), vt(bt(a16), "renderCustomHeader", function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                }, t = e.monthDate, r = e.i;
                if (a16.props.showTimeSelect && !a16.state.monthContainer || a16.props.showTimeSelectOnly) return null;
                var n = fr(a16.state.date, a16.props), o = hr(a16.state.date, a16.props), s = mr(a16.state.date, a16.props), i = yr(a16.state.date, a16.props), p = !a16.props.showMonthYearPicker && !a16.props.showQuarterYearPicker && !a16.props.showYearPicker;
                return de.default.createElement("div", {
                    className: "react-datepicker__header react-datepicker__header--custom",
                    onFocus: a16.props.onDropdownFocus
                }, a16.props.renderCustomHeader(ut(ut({
                }, a16.state), {
                }, {
                    customHeaderCount: r,
                    monthDate: t,
                    changeMonth: a16.changeMonth,
                    changeYear: a16.changeYear,
                    decreaseMonth: a16.decreaseMonth,
                    increaseMonth: a16.increaseMonth,
                    decreaseYear: a16.decreaseYear,
                    increaseYear: a16.increaseYear,
                    prevMonthButtonDisabled: n,
                    nextMonthButtonDisabled: o,
                    prevYearButtonDisabled: s,
                    nextYearButtonDisabled: i
                })), p && de.default.createElement("div", {
                    className: "react-datepicker__day-names"
                }, a16.header(t)));
            }), vt(bt(a16), "renderYearHeader", function() {
                var e = a16.state.date, t = a16.props, r = t.showYearPicker, n = br(e, t.yearItemNumber), o = n.startPeriod, s = n.endPeriod;
                return de.default.createElement("div", {
                    className: "react-datepicker__header react-datepicker-year-header"
                }, r ? "".concat(o, " - ").concat(s) : Ie.default(e));
            }), vt(bt(a16), "renderHeader", function(e) {
                switch(!0){
                    case void 0 !== a16.props.renderCustomHeader:
                        return a16.renderCustomHeader(e);
                    case a16.props.showMonthYearPicker || a16.props.showQuarterYearPicker || a16.props.showYearPicker:
                        return a16.renderYearHeader(e);
                    default:
                        return a16.renderDefaultHeader(e);
                }
            }), vt(bt(a16), "renderMonths", function() {
                if (!a16.props.showTimeSelectOnly && !a16.props.showYearPicker) {
                    for(var e48 = [], t = a16.props.showPreviousMonths ? a16.props.monthsShown - 1 : 0, r = Se.default(a16.state.date, t), n = 0; n < a16.props.monthsShown; ++n){
                        var o = n - a16.props.monthSelectedIn, s = we.default(r, o), i = "month-".concat(n), p = n < a16.props.monthsShown - 1, l = n > 0;
                        e48.push(de.default.createElement("div", {
                            key: i,
                            ref: function ref(e) {
                                a16.monthContainer = e;
                            },
                            className: "react-datepicker__month-container"
                        }, a16.renderHeader({
                            monthDate: s,
                            i: n
                        }), de.default.createElement(Fr, {
                            chooseDayAriaLabelPrefix: a16.props.chooseDayAriaLabelPrefix,
                            disabledDayAriaLabelPrefix: a16.props.disabledDayAriaLabelPrefix,
                            weekAriaLabelPrefix: a16.props.weekAriaLabelPrefix,
                            onChange: a16.changeMonthYear,
                            day: s,
                            dayClassName: a16.props.dayClassName,
                            calendarStartDay: a16.props.calendarStartDay,
                            monthClassName: a16.props.monthClassName,
                            onDayClick: a16.handleDayClick,
                            handleOnKeyDown: a16.props.handleOnDayKeyDown,
                            onDayMouseEnter: a16.handleDayMouseEnter,
                            onMouseLeave: a16.handleMonthMouseLeave,
                            onWeekSelect: a16.props.onWeekSelect,
                            orderInDisplay: n,
                            formatWeekNumber: a16.props.formatWeekNumber,
                            locale: a16.props.locale,
                            minDate: a16.props.minDate,
                            maxDate: a16.props.maxDate,
                            excludeDates: a16.props.excludeDates,
                            excludeDateIntervals: a16.props.excludeDateIntervals,
                            highlightDates: a16.props.highlightDates,
                            selectingDate: a16.state.selectingDate,
                            includeDates: a16.props.includeDates,
                            includeDateIntervals: a16.props.includeDateIntervals,
                            inline: a16.props.inline,
                            shouldFocusDayInline: a16.props.shouldFocusDayInline,
                            fixedHeight: a16.props.fixedHeight,
                            filterDate: a16.props.filterDate,
                            preSelection: a16.props.preSelection,
                            setPreSelection: a16.props.setPreSelection,
                            selected: a16.props.selected,
                            selectsStart: a16.props.selectsStart,
                            selectsEnd: a16.props.selectsEnd,
                            selectsRange: a16.props.selectsRange,
                            selectsDisabledDaysInRange: a16.props.selectsDisabledDaysInRange,
                            showWeekNumbers: a16.props.showWeekNumbers,
                            startDate: a16.props.startDate,
                            endDate: a16.props.endDate,
                            peekNextMonth: a16.props.peekNextMonth,
                            setOpen: a16.props.setOpen,
                            shouldCloseOnSelect: a16.props.shouldCloseOnSelect,
                            renderDayContents: a16.props.renderDayContents,
                            disabledKeyboardNavigation: a16.props.disabledKeyboardNavigation,
                            showMonthYearPicker: a16.props.showMonthYearPicker,
                            showFullMonthYearPicker: a16.props.showFullMonthYearPicker,
                            showTwoColumnMonthYearPicker: a16.props.showTwoColumnMonthYearPicker,
                            showFourColumnMonthYearPicker: a16.props.showFourColumnMonthYearPicker,
                            showYearPicker: a16.props.showYearPicker,
                            showQuarterYearPicker: a16.props.showQuarterYearPicker,
                            isInputFocused: a16.props.isInputFocused,
                            containerRef: a16.containerRef,
                            monthShowsDuplicateDaysEnd: p,
                            monthShowsDuplicateDaysStart: l
                        })));
                    }
                    return e48;
                }
            }), vt(bt(a16), "renderYears", function() {
                if (!a16.props.showTimeSelectOnly) return a16.props.showYearPicker ? de.default.createElement("div", {
                    className: "react-datepicker__year--container"
                }, a16.renderHeader(), de.default.createElement(qr, Dt({
                    onDayClick: a16.handleDayClick,
                    date: a16.state.date
                }, a16.props))) : void 0;
            }), vt(bt(a16), "renderTimeSection", function() {
                if (a16.props.showTimeSelect && (a16.state.monthContainer || a16.props.showTimeSelectOnly)) return de.default.createElement(Ar, {
                    selected: a16.props.selected,
                    openToDate: a16.props.openToDate,
                    onChange: a16.props.onTimeChange,
                    timeClassName: a16.props.timeClassName,
                    format: a16.props.timeFormat,
                    includeTimes: a16.props.includeTimes,
                    intervals: a16.props.timeIntervals,
                    minTime: a16.props.minTime,
                    maxTime: a16.props.maxTime,
                    excludeTimes: a16.props.excludeTimes,
                    filterTime: a16.props.filterTime,
                    timeCaption: a16.props.timeCaption,
                    todayButton: a16.props.todayButton,
                    showMonthDropdown: a16.props.showMonthDropdown,
                    showMonthYearDropdown: a16.props.showMonthYearDropdown,
                    showYearDropdown: a16.props.showYearDropdown,
                    withPortal: a16.props.withPortal,
                    monthRef: a16.state.monthContainer,
                    injectTimes: a16.props.injectTimes,
                    locale: a16.props.locale,
                    handleOnKeyDown: a16.props.handleOnKeyDown,
                    showTimeSelectOnly: a16.props.showTimeSelectOnly
                });
            }), vt(bt(a16), "renderInputTimeSection", function() {
                var e = new Date(a16.props.selected), t = Tt(e) && Boolean(a16.props.selected) ? "".concat(kr(e.getHours()), ":").concat(kr(e.getMinutes())) : "";
                if (a16.props.showTimeInput) return de.default.createElement(Wr, {
                    date: e,
                    timeString: t,
                    timeInputLabel: a16.props.timeInputLabel,
                    onChange: a16.props.onTimeChange,
                    customTimeInput: a16.props.customTimeInput
                });
            }), a16.containerRef = de.default.createRef(), a16.state = {
                date: a16.getDateInView(),
                selectingDate: null,
                monthContainer: null
            }, a16;
        }
        return yt(r23, [
            {
                key: "componentDidMount",
                value: function value() {
                    var e = this;
                    this.props.showTimeSelect && (this.assignMonthContainer = void e.setState({
                        monthContainer: e.monthContainer
                    }));
                }
            },
            {
                key: "componentDidUpdate",
                value: function value(e) {
                    this.props.preSelection && !$t(this.props.preSelection, e.preSelection) ? this.setState({
                        date: this.props.preSelection
                    }) : this.props.openToDate && !$t(this.props.openToDate, e.openToDate) && this.setState({
                        date: this.props.openToDate
                    });
                }
            },
            {
                key: "render",
                value: function value() {
                    var e = this.props.container || Br;
                    return de.default.createElement("div", {
                        ref: this.containerRef
                    }, de.default.createElement(e, {
                        className: ce.default("react-datepicker", this.props.className, {
                            "react-datepicker--time-only": this.props.showTimeSelectOnly
                        }),
                        showPopperArrow: this.props.showPopperArrow,
                        arrowProps: this.props.arrowProps
                    }, this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.props.children));
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        onDropdownFocus: function onDropdownFocus() {
                        },
                        monthsShown: 1,
                        monthSelectedIn: 0,
                        forceShowMonthNavigation: !1,
                        timeCaption: "Time",
                        previousYearButtonLabel: "Previous Year",
                        nextYearButtonLabel: "Next Year",
                        previousMonthButtonLabel: "Previous Month",
                        nextMonthButtonLabel: "Next Month",
                        customTimeInput: null,
                        yearItemNumber: Ot
                    };
                }
            }
        ]), r23;
    }(de.default.Component), jr = function(e50) {
        wt(r, e50);
        var t = Ct(r);
        function r(e) {
            var a;
            return ht(this, r), (a = t.call(this, e)).el = document.createElement("div"), a;
        }
        return yt(r, [
            {
                key: "componentDidMount",
                value: function value() {
                    this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId), this.portalRoot || (this.portalRoot = document.createElement("div"), this.portalRoot.setAttribute("id", this.props.portalId), (this.props.portalHost || document.body).appendChild(this.portalRoot)), this.portalRoot.appendChild(this.el);
                }
            },
            {
                key: "componentWillUnmount",
                value: function value() {
                    this.portalRoot.removeChild(this.el);
                }
            },
            {
                key: "render",
                value: function value() {
                    return dt.default.createPortal(this.props.children, this.el);
                }
            }
        ]), r;
    }(de.default.Component), Qr = function Qr(e) {
        return !e.disabled && -1 !== e.tabIndex;
    }, Vr = function(e51) {
        wt(r, e51);
        var t41 = Ct(r);
        function r(e) {
            var a;
            return ht(this, r), vt(bt(a = t41.call(this, e)), "getTabChildren", function() {
                return Array.prototype.slice.call(a.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"), 1, -1).filter(Qr);
            }), vt(bt(a), "handleFocusStart", function(e) {
                var t = a.getTabChildren();
                t && t.length > 1 && t[t.length - 1].focus();
            }), vt(bt(a), "handleFocusEnd", function(e) {
                var t = a.getTabChildren();
                t && t.length > 1 && t[0].focus();
            }), a.tabLoopRef = de.default.createRef(), a;
        }
        return yt(r, [
            {
                key: "render",
                value: function value() {
                    return this.props.enableTabLoop ? de.default.createElement("div", {
                        className: "react-datepicker__tab-loop",
                        ref: this.tabLoopRef
                    }, de.default.createElement("div", {
                        className: "react-datepicker__tab-loop__start",
                        tabIndex: "0",
                        onFocus: this.handleFocusStart
                    }), this.props.children, de.default.createElement("div", {
                        className: "react-datepicker__tab-loop__end",
                        tabIndex: "0",
                        onFocus: this.handleFocusEnd
                    })) : this.props.children;
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        enableTabLoop: !0
                    };
                }
            }
        ]), r;
    }(de.default.Component), Ur = function(e52) {
        wt(r29, e52);
        var t42 = Ct(r29);
        function r29() {
            return ht(this, r29), t42.apply(this, arguments);
        }
        return yt(r29, [
            {
                key: "render",
                value: function value() {
                    var e53, t43 = this.props, r30 = t43.className, a17 = t43.wrapperClassName, n12 = t43.hidePopper, o = t43.popperComponent, s = t43.popperModifiers, i = t43.popperPlacement, p = t43.popperProps, l = t43.targetComponent, d = t43.enableTabLoop, c = t43.popperOnKeyDown, u = t43.portalId, f = t43.portalHost;
                    if (!n12) {
                        var h = ce.default("react-datepicker-popper", r30);
                        e53 = de.default.createElement(pe.Popper, Dt({
                            modifiers: s,
                            placement: i
                        }, p), function(e) {
                            var t = e.ref, r = e.style, a = e.placement, n = e.arrowProps;
                            return de.default.createElement(Vr, {
                                enableTabLoop: d
                            }, de.default.createElement("div", {
                                ref: t,
                                style: r,
                                className: h,
                                "data-placement": a,
                                onKeyDown: c
                            }, de.default.cloneElement(o, {
                                arrowProps: n
                            })));
                        });
                    }
                    this.props.popperContainer && (e53 = de.default.createElement(this.props.popperContainer, {
                    }, e53)), u && !n12 && (e53 = de.default.createElement(jr, {
                        portalId: u,
                        portalHost: f
                    }, e53));
                    var m = ce.default("react-datepicker-wrapper", a17);
                    return de.default.createElement(pe.Manager, {
                        className: "react-datepicker-manager"
                    }, de.default.createElement(pe.Reference, null, function(e) {
                        var t = e.ref;
                        return de.default.createElement("div", {
                            ref: t,
                            className: m
                        }, l);
                    }), e53);
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        hidePopper: !0,
                        popperModifiers: [],
                        popperProps: {
                        },
                        popperPlacement: "bottom-start"
                    };
                }
            }
        ]), r29;
    }(de.default.Component), $r = "react-datepicker-ignore-onclickoutside", zr = lt.default(Hr);
    var Gr = "Date input not valid.", Jr = function(e54) {
        wt(r31, e54);
        var t44 = Ct(r31);
        function r31(e55) {
            var a18;
            return ht(this, r31), vt(bt(a18 = t44.call(this, e55)), "getPreSelection", function() {
                return a18.props.openToDate ? a18.props.openToDate : a18.props.selectsEnd && a18.props.startDate ? a18.props.startDate : a18.props.selectsStart && a18.props.endDate ? a18.props.endDate : xt();
            }), vt(bt(a18), "calcInitialState", function() {
                var e, t = a18.getPreSelection(), r = vr(a18.props), n = Dr(a18.props), o = r && nt.default(t, Ve.default(r)) ? r : n && at.default(t, Je.default(n)) ? n : t;
                return {
                    open: a18.props.startOpen || !1,
                    preventFocus: !1,
                    preSelection: null !== (e = a18.props.selectsRange ? a18.props.startDate : a18.props.selected) && void 0 !== e ? e : o,
                    highlightDates: wr(a18.props.highlightDates),
                    focused: !1,
                    shouldFocusDayInline: !1
                };
            }), vt(bt(a18), "clearPreventFocusTimeout", function() {
                a18.preventFocusTimeout && clearTimeout(a18.preventFocusTimeout);
            }), vt(bt(a18), "setFocus", function() {
                a18.input && a18.input.focus && a18.input.focus({
                    preventScroll: !0
                });
            }), vt(bt(a18), "setBlur", function() {
                a18.input && a18.input.blur && a18.input.blur(), a18.cancelFocusInput();
            }), vt(bt(a18), "setOpen", function(e56) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                a18.setState({
                    open: e56,
                    preSelection: e56 && a18.state.open ? a18.state.preSelection : a18.calcInitialState().preSelection,
                    lastPreSelectChange: Zr
                }, function() {
                    e56 || a18.setState(function(e) {
                        return {
                            focused: !!t && e.focused
                        };
                    }, function() {
                        !t && a18.setBlur(), a18.setState({
                            inputValue: null
                        });
                    });
                });
            }), vt(bt(a18), "inputOk", function() {
                return ue.default(a18.state.preSelection);
            }), vt(bt(a18), "isCalendarOpen", function() {
                return void 0 === a18.props.open ? a18.state.open && !a18.props.disabled && !a18.props.readOnly : a18.props.open;
            }), vt(bt(a18), "handleFocus", function(e) {
                a18.state.preventFocus || (a18.props.onFocus(e), a18.props.preventOpenOnFocus || a18.props.readOnly || a18.setOpen(!0)), a18.setState({
                    focused: !0
                });
            }), vt(bt(a18), "cancelFocusInput", function() {
                clearTimeout(a18.inputFocusTimeout), a18.inputFocusTimeout = null;
            }), vt(bt(a18), "deferFocusInput", function() {
                a18.cancelFocusInput(), a18.inputFocusTimeout = setTimeout(function() {
                    return a18.setFocus();
                }, 1);
            }), vt(bt(a18), "handleDropdownFocus", function() {
                a18.cancelFocusInput();
            }), vt(bt(a18), "handleBlur", function(e) {
                (!a18.state.open || a18.props.withPortal || a18.props.showTimeInput) && a18.props.onBlur(e), a18.setState({
                    focused: !1
                });
            }), vt(bt(a18), "handleCalendarClickOutside", function(e) {
                a18.props.inline || a18.setOpen(!1), a18.props.onClickOutside(e), a18.props.withPortal && e.preventDefault();
            }), vt(bt(a18), "handleChange", function() {
                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                var n = t[0];
                if (!a18.props.onChangeRaw || (a18.props.onChangeRaw.apply(bt(a18), t), "function" == typeof n.isDefaultPrevented && !n.isDefaultPrevented())) {
                    a18.setState({
                        inputValue: n.target.value,
                        lastPreSelectChange: Xr
                    });
                    var o = It(n.target.value, a18.props.dateFormat, a18.props.locale, a18.props.strictParsing, a18.props.minDate);
                    !o && n.target.value || a18.setSelected(o, n, !0);
                }
            }), vt(bt(a18), "handleSelect", function(e, t, r) {
                if (a18.setState({
                    preventFocus: !0
                }, function() {
                    return a18.preventFocusTimeout = setTimeout(function() {
                        return a18.setState({
                            preventFocus: !1
                        });
                    }, 50), a18.preventFocusTimeout;
                }), a18.props.onChangeRaw && a18.props.onChangeRaw(t), a18.setSelected(e, t, !1, r), !a18.props.shouldCloseOnSelect || a18.props.showTimeSelect) a18.setPreSelection(e);
                else if (!a18.props.inline) {
                    a18.props.selectsRange || a18.setOpen(!1);
                    var n = a18.props, o = n.startDate, s = n.endDate;
                    !o || s || nt.default(e, o) || a18.setOpen(!1);
                }
            }), vt(bt(a18), "setSelected", function(e, t, r, n) {
                var o = e;
                if (null === o || !rr(o, a18.props)) {
                    var s = a18.props, i = s.onChange, p = s.selectsRange, l = s.startDate, d = s.endDate;
                    if (!zt(a18.props.selected, o) || a18.props.allowSameDay || p) {
                        if (null !== o && (!a18.props.selected || r && (a18.props.showTimeSelect || a18.props.showTimeSelectOnly || a18.props.showTimeInput) || (o = Ft(o, {
                            hour: Pe.default(a18.props.selected),
                            minute: Me.default(a18.props.selected),
                            second: _e.default(a18.props.selected)
                        })), a18.props.inline || a18.setState({
                            preSelection: o
                        }), a18.props.focusSelectedMonth || a18.setState({
                            monthSelectedIn: n
                        })), p) {
                            var c = l && !d, u = l && d;
                            !l && !d ? i([
                                o,
                                null
                            ], t) : c && (nt.default(o, l) ? i([
                                o,
                                null
                            ], t) : i([
                                l,
                                o
                            ], t)), u && i([
                                o,
                                null
                            ], t);
                        } else i(o, t);
                    }
                    r || (a18.props.onSelect(o, t), a18.setState({
                        inputValue: null
                    }));
                }
            }), vt(bt(a18), "setPreSelection", function(e) {
                var t = void 0 !== a18.props.minDate, r = void 0 !== a18.props.maxDate, n = !0;
                if (e) {
                    var o = Ve.default(e);
                    if (t && r) n = Gt(e, a18.props.minDate, a18.props.maxDate);
                    else if (t) {
                        var s = Ve.default(a18.props.minDate);
                        n = at.default(e, s) || zt(o, s);
                    } else if (r) {
                        var i = Je.default(a18.props.maxDate);
                        n = nt.default(e, i) || zt(o, i);
                    }
                }
                n && a18.setState({
                    preSelection: e
                });
            }), vt(bt(a18), "handleTimeChange", function(e) {
                var t = Ft(a18.props.selected ? a18.props.selected : a18.getPreSelection(), {
                    hour: Pe.default(e),
                    minute: Me.default(e)
                });
                a18.setState({
                    preSelection: t
                }), a18.props.onChange(t), a18.props.shouldCloseOnSelect && a18.setOpen(!1), a18.props.showTimeInput && a18.setOpen(!0), a18.setState({
                    inputValue: null
                });
            }), vt(bt(a18), "onInputClick", function() {
                a18.props.disabled || a18.props.readOnly || a18.setOpen(!0), a18.props.onInputClick();
            }), vt(bt(a18), "onInputKeyDown", function(e) {
                a18.props.onKeyDown(e);
                var t = e.key;
                if (a18.state.open || a18.props.inline || a18.props.preventOpenOnFocus) {
                    if (a18.state.open) {
                        if ("ArrowDown" === t || "ArrowUp" === t) {
                            e.preventDefault();
                            var r = a18.calendar.componentNode && a18.calendar.componentNode.querySelector('.react-datepicker__day[tabindex="0"]');
                            return void (r && r.focus({
                                preventScroll: !0
                            }));
                        }
                        var n = xt(a18.state.preSelection);
                        "Enter" === t ? (e.preventDefault(), a18.inputOk() && a18.state.lastPreSelectChange === Zr ? (a18.handleSelect(n, e), !a18.props.shouldCloseOnSelect && a18.setPreSelection(n)) : a18.setOpen(!1)) : "Escape" === t && (e.preventDefault(), a18.setOpen(!1)), a18.inputOk() || a18.props.onInputError({
                            code: 1,
                            msg: Gr
                        });
                    }
                } else "ArrowDown" !== t && "ArrowUp" !== t && "Enter" !== t || a18.onInputClick();
            }), vt(bt(a18), "onDayKeyDown", function(e) {
                a18.props.onKeyDown(e);
                var t = e.key, r = xt(a18.state.preSelection);
                if ("Enter" === t) e.preventDefault(), a18.handleSelect(r, e), !a18.props.shouldCloseOnSelect && a18.setPreSelection(r);
                else if ("Escape" === t) e.preventDefault(), a18.setOpen(!1), a18.inputOk() || a18.props.onInputError({
                    code: 1,
                    msg: Gr
                });
                else if (!a18.props.disabledKeyboardNavigation) {
                    var n;
                    switch(t){
                        case "ArrowLeft":
                            n = ke.default(r, 1);
                            break;
                        case "ArrowRight":
                            n = ve.default(r, 1);
                            break;
                        case "ArrowUp":
                            n = be.default(r, 1);
                            break;
                        case "ArrowDown":
                            n = De.default(r, 1);
                            break;
                        case "PageUp":
                            n = Se.default(r, 1);
                            break;
                        case "PageDown":
                            n = we.default(r, 1);
                            break;
                        case "Home":
                            n = Ce.default(r, 1);
                            break;
                        case "End":
                            n = ge.default(r, 1);
                    }
                    if (!n) return void (a18.props.onInputError && a18.props.onInputError({
                        code: 1,
                        msg: Gr
                    }));
                    if (e.preventDefault(), a18.setState({
                        lastPreSelectChange: Zr
                    }), a18.props.adjustDateOnChange && a18.setSelected(n), a18.setPreSelection(n), a18.props.inline) {
                        var o = Ye.default(r), s = Ye.default(n), i = Ie.default(r), p = Ie.default(n);
                        o !== s || i !== p ? a18.setState({
                            shouldFocusDayInline: !0
                        }) : a18.setState({
                            shouldFocusDayInline: !1
                        });
                    }
                }
            }), vt(bt(a18), "onPopperKeyDown", function(e) {
                "Escape" === e.key && (e.preventDefault(), a18.setState({
                    preventFocus: !0
                }, function() {
                    a18.setOpen(!1), setTimeout(function() {
                        a18.setFocus(), a18.setState({
                            preventFocus: !1
                        });
                    });
                }));
            }), vt(bt(a18), "onClearClick", function(e) {
                e && e.preventDefault && e.preventDefault(), a18.props.selectsRange ? a18.props.onChange([
                    null,
                    null
                ], e) : a18.props.onChange(null, e), a18.setState({
                    inputValue: null
                });
            }), vt(bt(a18), "clear", function() {
                a18.onClearClick();
            }), vt(bt(a18), "onScroll", function(e) {
                "boolean" == typeof a18.props.closeOnScroll && a18.props.closeOnScroll ? e.target !== document && e.target !== document.documentElement && e.target !== document.body || a18.setOpen(!1) : "function" == typeof a18.props.closeOnScroll && a18.props.closeOnScroll(e) && a18.setOpen(!1);
            }), vt(bt(a18), "renderCalendar", function() {
                return a18.props.inline || a18.isCalendarOpen() ? de.default.createElement(zr, {
                    ref: function ref(e) {
                        a18.calendar = e;
                    },
                    locale: a18.props.locale,
                    calendarStartDay: a18.props.calendarStartDay,
                    chooseDayAriaLabelPrefix: a18.props.chooseDayAriaLabelPrefix,
                    disabledDayAriaLabelPrefix: a18.props.disabledDayAriaLabelPrefix,
                    weekAriaLabelPrefix: a18.props.weekAriaLabelPrefix,
                    adjustDateOnChange: a18.props.adjustDateOnChange,
                    setOpen: a18.setOpen,
                    shouldCloseOnSelect: a18.props.shouldCloseOnSelect,
                    dateFormat: a18.props.dateFormatCalendar,
                    useWeekdaysShort: a18.props.useWeekdaysShort,
                    formatWeekDay: a18.props.formatWeekDay,
                    dropdownMode: a18.props.dropdownMode,
                    selected: a18.props.selected,
                    preSelection: a18.state.preSelection,
                    onSelect: a18.handleSelect,
                    onWeekSelect: a18.props.onWeekSelect,
                    openToDate: a18.props.openToDate,
                    minDate: a18.props.minDate,
                    maxDate: a18.props.maxDate,
                    selectsStart: a18.props.selectsStart,
                    selectsEnd: a18.props.selectsEnd,
                    selectsRange: a18.props.selectsRange,
                    startDate: a18.props.startDate,
                    endDate: a18.props.endDate,
                    excludeDates: a18.props.excludeDates,
                    excludeDateIntervals: a18.props.excludeDateIntervals,
                    filterDate: a18.props.filterDate,
                    onClickOutside: a18.handleCalendarClickOutside,
                    formatWeekNumber: a18.props.formatWeekNumber,
                    highlightDates: a18.state.highlightDates,
                    includeDates: a18.props.includeDates,
                    includeDateIntervals: a18.props.includeDateIntervals,
                    includeTimes: a18.props.includeTimes,
                    injectTimes: a18.props.injectTimes,
                    inline: a18.props.inline,
                    shouldFocusDayInline: a18.state.shouldFocusDayInline,
                    peekNextMonth: a18.props.peekNextMonth,
                    showMonthDropdown: a18.props.showMonthDropdown,
                    showPreviousMonths: a18.props.showPreviousMonths,
                    useShortMonthInDropdown: a18.props.useShortMonthInDropdown,
                    showMonthYearDropdown: a18.props.showMonthYearDropdown,
                    showWeekNumbers: a18.props.showWeekNumbers,
                    showYearDropdown: a18.props.showYearDropdown,
                    withPortal: a18.props.withPortal,
                    forceShowMonthNavigation: a18.props.forceShowMonthNavigation,
                    showDisabledMonthNavigation: a18.props.showDisabledMonthNavigation,
                    scrollableYearDropdown: a18.props.scrollableYearDropdown,
                    scrollableMonthYearDropdown: a18.props.scrollableMonthYearDropdown,
                    todayButton: a18.props.todayButton,
                    weekLabel: a18.props.weekLabel,
                    outsideClickIgnoreClass: $r,
                    fixedHeight: a18.props.fixedHeight,
                    monthsShown: a18.props.monthsShown,
                    monthSelectedIn: a18.state.monthSelectedIn,
                    onDropdownFocus: a18.handleDropdownFocus,
                    onMonthChange: a18.props.onMonthChange,
                    onYearChange: a18.props.onYearChange,
                    dayClassName: a18.props.dayClassName,
                    weekDayClassName: a18.props.weekDayClassName,
                    monthClassName: a18.props.monthClassName,
                    timeClassName: a18.props.timeClassName,
                    showTimeSelect: a18.props.showTimeSelect,
                    showTimeSelectOnly: a18.props.showTimeSelectOnly,
                    onTimeChange: a18.handleTimeChange,
                    timeFormat: a18.props.timeFormat,
                    timeIntervals: a18.props.timeIntervals,
                    minTime: a18.props.minTime,
                    maxTime: a18.props.maxTime,
                    excludeTimes: a18.props.excludeTimes,
                    filterTime: a18.props.filterTime,
                    timeCaption: a18.props.timeCaption,
                    className: a18.props.calendarClassName,
                    container: a18.props.calendarContainer,
                    yearItemNumber: a18.props.yearItemNumber,
                    yearDropdownItemNumber: a18.props.yearDropdownItemNumber,
                    previousMonthAriaLabel: a18.props.previousMonthAriaLabel,
                    previousMonthButtonLabel: a18.props.previousMonthButtonLabel,
                    nextMonthAriaLabel: a18.props.nextMonthAriaLabel,
                    nextMonthButtonLabel: a18.props.nextMonthButtonLabel,
                    previousYearAriaLabel: a18.props.previousYearAriaLabel,
                    previousYearButtonLabel: a18.props.previousYearButtonLabel,
                    nextYearAriaLabel: a18.props.nextYearAriaLabel,
                    nextYearButtonLabel: a18.props.nextYearButtonLabel,
                    timeInputLabel: a18.props.timeInputLabel,
                    disabledKeyboardNavigation: a18.props.disabledKeyboardNavigation,
                    renderCustomHeader: a18.props.renderCustomHeader,
                    popperProps: a18.props.popperProps,
                    renderDayContents: a18.props.renderDayContents,
                    onDayMouseEnter: a18.props.onDayMouseEnter,
                    onMonthMouseLeave: a18.props.onMonthMouseLeave,
                    selectsDisabledDaysInRange: a18.props.selectsDisabledDaysInRange,
                    showTimeInput: a18.props.showTimeInput,
                    showMonthYearPicker: a18.props.showMonthYearPicker,
                    showFullMonthYearPicker: a18.props.showFullMonthYearPicker,
                    showTwoColumnMonthYearPicker: a18.props.showTwoColumnMonthYearPicker,
                    showFourColumnMonthYearPicker: a18.props.showFourColumnMonthYearPicker,
                    showYearPicker: a18.props.showYearPicker,
                    showQuarterYearPicker: a18.props.showQuarterYearPicker,
                    showPopperArrow: a18.props.showPopperArrow,
                    excludeScrollbar: a18.props.excludeScrollbar,
                    handleOnKeyDown: a18.props.onKeyDown,
                    handleOnDayKeyDown: a18.onDayKeyDown,
                    isInputFocused: a18.state.focused,
                    customTimeInput: a18.props.customTimeInput,
                    setPreSelection: a18.setPreSelection
                }, a18.props.children) : null;
            }), vt(bt(a18), "renderDateInput", function() {
                var e57, t45 = ce.default(a18.props.className, vt({
                }, $r, a18.state.open)), r32 = a18.props.customInput || de.default.createElement("input", {
                    type: "text"
                }), n13 = a18.props.customInputRef || "ref", o = "string" == typeof a18.props.value ? a18.props.value : "string" == typeof a18.state.inputValue ? a18.state.inputValue : a18.props.selectsRange ? function(e, t, r) {
                    if (!e) return "";
                    var a = Rt(e, r), n = t ? Rt(t, r) : "";
                    return "".concat(a, " - ").concat(n);
                }(a18.props.startDate, a18.props.endDate, a18.props) : Rt(a18.props.selected, a18.props);
                return de.default.cloneElement(r32, (vt(e57 = {
                }, n13, function(e) {
                    a18.input = e;
                }), vt(e57, "value", o), vt(e57, "onBlur", a18.handleBlur), vt(e57, "onChange", a18.handleChange), vt(e57, "onClick", a18.onInputClick), vt(e57, "onFocus", a18.handleFocus), vt(e57, "onKeyDown", a18.onInputKeyDown), vt(e57, "id", a18.props.id), vt(e57, "name", a18.props.name), vt(e57, "autoFocus", a18.props.autoFocus), vt(e57, "placeholder", a18.props.placeholderText), vt(e57, "disabled", a18.props.disabled), vt(e57, "autoComplete", a18.props.autoComplete), vt(e57, "className", ce.default(r32.props.className, t45)), vt(e57, "title", a18.props.title), vt(e57, "readOnly", a18.props.readOnly), vt(e57, "required", a18.props.required), vt(e57, "tabIndex", a18.props.tabIndex), vt(e57, "aria-describedby", a18.props.ariaDescribedBy), vt(e57, "aria-invalid", a18.props.ariaInvalid), vt(e57, "aria-labelledby", a18.props.ariaLabelledBy), vt(e57, "aria-required", a18.props.ariaRequired), e57));
            }), vt(bt(a18), "renderClearButton", function() {
                var e = a18.props, t = e.isClearable, r = e.selected, n = e.startDate, o = e.endDate, s = e.clearButtonTitle, i = e.clearButtonClassName, p = void 0 === i ? "" : i, l = e.ariaLabelClose, d = void 0 === l ? "Close" : l;
                return !t || null == r && null == n && null == o ? null : de.default.createElement("button", {
                    type: "button",
                    className: "react-datepicker__close-icon ".concat(p).trim(),
                    "aria-label": d,
                    onClick: a18.onClearClick,
                    title: s,
                    tabIndex: -1
                });
            }), a18.state = a18.calcInitialState(), a18;
        }
        return yt(r31, [
            {
                key: "componentDidMount",
                value: function value() {
                    window.addEventListener("scroll", this.onScroll, !0);
                }
            },
            {
                key: "componentDidUpdate",
                value: function value(e, t) {
                    var r, a;
                    e.inline && (r = e.selected, a = this.props.selected, r && a ? Ye.default(r) !== Ye.default(a) || Ie.default(r) !== Ie.default(a) : r !== a) && this.setPreSelection(this.props.selected), void 0 !== this.state.monthSelectedIn && e.monthsShown !== this.props.monthsShown && this.setState({
                        monthSelectedIn: 0
                    }), e.highlightDates !== this.props.highlightDates && this.setState({
                        highlightDates: wr(this.props.highlightDates)
                    }), t.focused || zt(e.selected, this.props.selected) || this.setState({
                        inputValue: null
                    }), t.open !== this.state.open && (!1 === t.open && !0 === this.state.open && this.props.onCalendarOpen(), !0 === t.open && !1 === this.state.open && this.props.onCalendarClose());
                }
            },
            {
                key: "componentWillUnmount",
                value: function value() {
                    this.clearPreventFocusTimeout(), window.removeEventListener("scroll", this.onScroll, !0);
                }
            },
            {
                key: "renderInputContainer",
                value: function value() {
                    return de.default.createElement("div", {
                        className: "react-datepicker__input-container"
                    }, this.renderDateInput(), this.renderClearButton());
                }
            },
            {
                key: "render",
                value: function value() {
                    var e = this.renderCalendar();
                    if (this.props.inline) return e;
                    if (this.props.withPortal) {
                        var t = this.state.open ? de.default.createElement("div", {
                            className: "react-datepicker__portal"
                        }, e) : null;
                        return this.state.open && this.props.portalId && (t = de.default.createElement(jr, {
                            portalId: this.props.portalId,
                            portalHost: this.props.portalHost
                        }, t)), de.default.createElement("div", null, this.renderInputContainer(), t);
                    }
                    return de.default.createElement(Ur, {
                        className: this.props.popperClassName,
                        wrapperClassName: this.props.wrapperClassName,
                        hidePopper: !this.isCalendarOpen(),
                        portalId: this.props.portalId,
                        portalHost: this.props.portalHost,
                        popperModifiers: this.props.popperModifiers,
                        targetComponent: this.renderInputContainer(),
                        popperContainer: this.props.popperContainer,
                        popperComponent: e,
                        popperPlacement: this.props.popperPlacement,
                        popperProps: this.props.popperProps,
                        popperOnKeyDown: this.onPopperKeyDown,
                        enableTabLoop: this.props.enableTabLoop
                    });
                }
            }
        ], [
            {
                key: "defaultProps",
                get: function get() {
                    return {
                        allowSameDay: !1,
                        dateFormat: "MM/dd/yyyy",
                        dateFormatCalendar: "LLLL yyyy",
                        onChange: function onChange() {
                        },
                        disabled: !1,
                        disabledKeyboardNavigation: !1,
                        dropdownMode: "scroll",
                        onFocus: function onFocus() {
                        },
                        onBlur: function onBlur() {
                        },
                        onKeyDown: function onKeyDown() {
                        },
                        onInputClick: function onInputClick() {
                        },
                        onSelect: function onSelect() {
                        },
                        onClickOutside: function onClickOutside() {
                        },
                        onMonthChange: function onMonthChange() {
                        },
                        onCalendarOpen: function onCalendarOpen() {
                        },
                        onCalendarClose: function onCalendarClose() {
                        },
                        preventOpenOnFocus: !1,
                        onYearChange: function onYearChange() {
                        },
                        onInputError: function onInputError() {
                        },
                        monthsShown: 1,
                        readOnly: !1,
                        withPortal: !1,
                        selectsDisabledDaysInRange: !1,
                        shouldCloseOnSelect: !0,
                        showTimeSelect: !1,
                        showTimeInput: !1,
                        showPreviousMonths: !1,
                        showMonthYearPicker: !1,
                        showFullMonthYearPicker: !1,
                        showTwoColumnMonthYearPicker: !1,
                        showFourColumnMonthYearPicker: !1,
                        showYearPicker: !1,
                        showQuarterYearPicker: !1,
                        strictParsing: !1,
                        timeIntervals: 30,
                        timeCaption: "Time",
                        previousMonthAriaLabel: "Previous Month",
                        previousMonthButtonLabel: "Previous Month",
                        nextMonthAriaLabel: "Next Month",
                        nextMonthButtonLabel: "Next Month",
                        previousYearAriaLabel: "Previous Year",
                        previousYearButtonLabel: "Previous Year",
                        nextYearAriaLabel: "Next Year",
                        nextYearButtonLabel: "Next Year",
                        timeInputLabel: "Time",
                        enableTabLoop: !0,
                        yearItemNumber: Ot,
                        renderDayContents: function renderDayContents(e) {
                            return e;
                        },
                        focusSelectedMonth: !1,
                        showPopperArrow: !0,
                        excludeScrollbar: !0,
                        customTimeInput: null,
                        calendarStartDay: void 0
                    };
                }
            }
        ]), r31;
    }(de.default.Component), Xr = "input", Zr = "navigate";
    e1.CalendarContainer = Br, e1.default = Jr, e1.getDefaultLocale = Jt, e1.registerLocale = function(e, t) {
        var r = "undefined" != typeof window ? window : global;
        r.__localeData__ || (r.__localeData__ = {
        }), r.__localeData__[e] = t;
    }, e1.setDefaultLocale = function(e) {
        ("undefined" != typeof window ? window : global).__localeId__ = e;
    }, Object.defineProperty(e1, "__esModule", {
        value: !0
    });
});

},{"@swc/helpers":"cawJ1","react":"kEcQC","prop-types":"h9rZg","classnames":"eflpt","date-fns/isDate":"hegCM","date-fns/isValid":"fZHkW","date-fns/format":"6zsoR","date-fns/addMinutes":"8yBhV","date-fns/addHours":"ivgEd","date-fns/addDays":"4k6Fc","date-fns/addWeeks":"1eExK","date-fns/addMonths":"iIn3V","date-fns/addYears":"e86Sm","date-fns/subMinutes":"bw8Gr","date-fns/subHours":"8XHS0","date-fns/subDays":"9EUNb","date-fns/subWeeks":"aWik8","date-fns/subMonths":"a0AYO","date-fns/subYears":"2rTDP","date-fns/getSeconds":"hwyz1","date-fns/getMinutes":"7gIoh","date-fns/getHours":"hhqqr","date-fns/getDay":"jQ5sr","date-fns/getDate":"kldxt","date-fns/getISOWeek":"3wPQq","date-fns/getMonth":"RGjOm","date-fns/getQuarter":"9CZzP","date-fns/getYear":"3z7mP","date-fns/getTime":"1crYK","date-fns/setSeconds":"arfg8","date-fns/setMinutes":"j4hDT","date-fns/setHours":"h2N8z","date-fns/setMonth":"hgAZk","date-fns/setQuarter":"bXSV6","date-fns/setYear":"3rerI","date-fns/min":"2l3yQ","date-fns/max":"9kb61","date-fns/differenceInCalendarDays":"i6elA","date-fns/differenceInCalendarMonths":"2myCP","date-fns/differenceInCalendarWeeks":"92vDc","date-fns/differenceInCalendarYears":"i0HEO","date-fns/startOfDay":"alNgA","date-fns/startOfWeek":"ljiEj","date-fns/startOfMonth":"h1vcp","date-fns/startOfQuarter":"8Zh2i","date-fns/startOfYear":"f9j1f","date-fns/endOfDay":"8zdWF","date-fns/endOfWeek":"4Fi60","date-fns/endOfMonth":"jIdjS","date-fns/isEqual":"4Zke5","date-fns/isSameDay":"exDPN","date-fns/isSameMonth":"6y5M5","date-fns/isSameYear":"bdw9B","date-fns/isSameQuarter":"9raJq","date-fns/isAfter":"33Wv7","date-fns/isBefore":"5MyfX","date-fns/isWithinInterval":"61eKM","date-fns/toDate":"id6nD","date-fns/parse":"eVMKb","date-fns/parseISO":"ccLYc","react-onclickoutside":"cxhWW","react-dom":"6cUDX","react-popper":"eOkXa"}],"eflpt":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
(function() {
    var hasOwn = {
    }.hasOwnProperty;
    function classNames() {
        var classes = [];
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (!arg) continue;
            var argType = typeof arg === "undefined" ? "undefined" : _helpers.typeOf(arg);
            if (argType === 'string' || argType === 'number') classes.push(arg);
            else if (Array.isArray(arg)) {
                if (arg.length) {
                    var inner = classNames.apply(null, arg);
                    if (inner) classes.push(inner);
                }
            } else if (argType === 'object') {
                if (arg.toString === Object.prototype.toString) {
                    for(var key in arg)if (hasOwn.call(arg, key) && arg[key]) classes.push(key);
                } else classes.push(arg.toString());
            }
        }
        return classes.join(' ');
    }
    if (typeof module !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) // register as 'classnames', consistent with npm package name
    define('classnames', [], function() {
        return classNames;
    });
    else window.classNames = classNames;
})();

},{"@swc/helpers":"cawJ1"}],"hegCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/requiredArgs/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function isDate(value) {
    _indexJsDefault.default(1, arguments);
    return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}
exports.default = isDate;

},{"../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1Nemu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function requiredArgs(required, args) {
    if (args.length < required) throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
}
exports.default = requiredArgs;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fZHkW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../isDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function isValid(dirtyDate) {
    _indexJsDefault2.default(1, arguments);
    if (!_indexJsDefault.default(dirtyDate) && typeof dirtyDate !== 'number') return false;
    var date = _indexJsDefault1.default(dirtyDate);
    return !isNaN(Number(date));
}
exports.default = isValid;

},{"../isDate/index.js":"hegCM","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"id6nD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/requiredArgs/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function toDate(argument) {
    _indexJsDefault.default(1, arguments);
    var argStr = Object.prototype.toString.call(argument); // Clone the date
    if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
    else if (typeof argument === 'number' || argStr === '[object Number]') return new Date(argument);
    else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
            // eslint-disable-next-line no-console
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console
            console.warn(new Error().stack);
        }
        return new Date(NaN);
    }
}
exports.default = toDate;

},{"../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6zsoR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../isValid/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../locale/en-US/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../subMilliseconds/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../toDate/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../_lib/format/formatters/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
var _indexJs5 = require("../_lib/format/longFormatters/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs5);
var _indexJs6 = require("../_lib/getTimezoneOffsetInMilliseconds/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs6);
var _indexJs7 = require("../_lib/protectedTokens/index.js");
var _indexJs8 = require("../_lib/toInteger/index.js");
var _indexJsDefault7 = parcelHelpers.interopDefault(_indexJs8);
var _indexJs9 = require("../_lib/requiredArgs/index.js"); // This RegExp consists of three parts separated by `|`:
var _indexJsDefault8 = parcelHelpers.interopDefault(_indexJs9);
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
    _indexJsDefault8.default(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var options = dirtyOptions || {
    };
    var locale = options.locale || _indexJsDefault1.default;
    var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : _indexJsDefault7.default(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : _indexJsDefault7.default(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault7.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault7.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    if (!locale.localize) throw new RangeError('locale must contain localize property');
    if (!locale.formatLong) throw new RangeError('locale must contain formatLong property');
    var originalDate = _indexJsDefault3.default(dirtyDate);
    if (!_indexJsDefault.default(originalDate)) throw new RangeError('Invalid time value');
     // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
    var timezoneOffset = _indexJsDefault6.default(originalDate);
    var utcDate = _indexJsDefault2.default(originalDate, timezoneOffset);
    var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
            var longFormatter = _indexJsDefault5.default[firstCharacter];
            return longFormatter(substring, locale.formatLong, formatterOptions);
        }
        return substring;
    }).join('').match(formattingTokensRegExp).map(function(substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") return "'";
        var firstCharacter = substring[0];
        if (firstCharacter === "'") return cleanEscapedString(substring);
        var formatter = _indexJsDefault4.default[firstCharacter];
        if (formatter) {
            if (!options.useAdditionalWeekYearTokens && _indexJs7.isProtectedWeekYearToken(substring)) _indexJs7.throwProtectedError(substring, dirtyFormatStr, dirtyDate);
            if (!options.useAdditionalDayOfYearTokens && _indexJs7.isProtectedDayOfYearToken(substring)) _indexJs7.throwProtectedError(substring, dirtyFormatStr, dirtyDate);
            return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        return substring;
    }).join('');
    return result;
}
exports.default = format;
function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

},{"../isValid/index.js":"fZHkW","../locale/en-US/index.js":"ioz1D","../subMilliseconds/index.js":"OuyIA","../toDate/index.js":"id6nD","../_lib/format/formatters/index.js":"16ewq","../_lib/format/longFormatters/index.js":"g3Ylt","../_lib/getTimezoneOffsetInMilliseconds/index.js":"iw9bF","../_lib/protectedTokens/index.js":"7xq15","../_lib/toInteger/index.js":"att0s","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ioz1D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./_lib/formatDistance/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./_lib/formatLong/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("./_lib/formatRelative/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("./_lib/localize/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("./_lib/match/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */ var locale = {
    code: 'en-US',
    formatDistance: _indexJsDefault.default,
    formatLong: _indexJsDefault1.default,
    formatRelative: _indexJsDefault2.default,
    localize: _indexJsDefault3.default,
    match: _indexJsDefault4.default,
    options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
    }
};
exports.default = locale;

},{"./_lib/formatDistance/index.js":"iOHEt","./_lib/formatLong/index.js":"5mf07","./_lib/formatRelative/index.js":"c9nRX","./_lib/localize/index.js":"iASE5","./_lib/match/index.js":"eduhP","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iOHEt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var formatDistanceLocale = {
    lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
    },
    xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
    },
    halfAMinute: 'half a minute',
    lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
    },
    xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
    },
    aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
    },
    xHours: {
        one: '1 hour',
        other: '{{count}} hours'
    },
    xDays: {
        one: '1 day',
        other: '{{count}} days'
    },
    aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
    },
    xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
    },
    aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
    },
    xMonths: {
        one: '1 month',
        other: '{{count}} months'
    },
    aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
    },
    xYears: {
        one: '1 year',
        other: '{{count}} years'
    },
    overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
    },
    almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
    }
};
var formatDistance = function formatDistance(token, count, options) {
    var result;
    var tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === 'string') result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace('{{count}}', count.toString());
    if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) return 'in ' + result;
        else return result + ' ago';
    }
    return result;
};
exports.default = formatDistance;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5mf07":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../_lib/buildFormatLongFn/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var dateFormats = {
    full: 'EEEE, MMMM do, y',
    long: 'MMMM do, y',
    medium: 'MMM d, y',
    short: 'MM/dd/yyyy'
};
var timeFormats = {
    full: 'h:mm:ss a zzzz',
    long: 'h:mm:ss a z',
    medium: 'h:mm:ss a',
    short: 'h:mm a'
};
var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}'
};
var formatLong = {
    date: _indexJsDefault.default({
        formats: dateFormats,
        defaultWidth: 'full'
    }),
    time: _indexJsDefault.default({
        formats: timeFormats,
        defaultWidth: 'full'
    }),
    dateTime: _indexJsDefault.default({
        formats: dateTimeFormats,
        defaultWidth: 'full'
    })
};
exports.default = formatLong;

},{"../../../_lib/buildFormatLongFn/index.js":"4zz4G","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4zz4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function buildFormatLongFn(args) {
    return function() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        };
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
    };
}
exports.default = buildFormatLongFn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"c9nRX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
};
exports.default = formatRelative;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iASE5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../_lib/buildLocalizeFn/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var eraValues = {
    narrow: [
        'B',
        'A'
    ],
    abbreviated: [
        'BC',
        'AD'
    ],
    wide: [
        'Before Christ',
        'Anno Domini'
    ]
};
var quarterValues = {
    narrow: [
        '1',
        '2',
        '3',
        '4'
    ],
    abbreviated: [
        'Q1',
        'Q2',
        'Q3',
        'Q4'
    ],
    wide: [
        '1st quarter',
        '2nd quarter',
        '3rd quarter',
        '4th quarter'
    ]
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues = {
    narrow: [
        'J',
        'F',
        'M',
        'A',
        'M',
        'J',
        'J',
        'A',
        'S',
        'O',
        'N',
        'D'
    ],
    abbreviated: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
    ],
    wide: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ]
};
var dayValues = {
    narrow: [
        'S',
        'M',
        'T',
        'W',
        'T',
        'F',
        'S'
    ],
    short: [
        'Su',
        'Mo',
        'Tu',
        'We',
        'Th',
        'Fr',
        'Sa'
    ],
    abbreviated: [
        'Sun',
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat'
    ],
    wide: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
    ]
};
var dayPeriodValues = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    }
};
var formattingDayPeriodValues = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
    var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return number + 'st';
        case 2:
            return number + 'nd';
        case 3:
            return number + 'rd';
    }
    return number + 'th';
};
var localize = {
    ordinalNumber: ordinalNumber,
    era: _indexJsDefault.default({
        values: eraValues,
        defaultWidth: 'wide'
    }),
    quarter: _indexJsDefault.default({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
            return quarter - 1;
        }
    }),
    month: _indexJsDefault.default({
        values: monthValues,
        defaultWidth: 'wide'
    }),
    day: _indexJsDefault.default({
        values: dayValues,
        defaultWidth: 'wide'
    }),
    dayPeriod: _indexJsDefault.default({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
    })
};
exports.default = localize;

},{"../../../_lib/buildLocalizeFn/index.js":"8aGRl","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8aGRl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function buildLocalizeFn(args) {
    return function(dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {
        };
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
            var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
            var width = options.width ? String(options.width) : defaultWidth;
            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
            var _defaultWidth = args.defaultWidth;
            var _width = options.width ? String(options.width) : args.defaultWidth;
            valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
    };
}
exports.default = buildLocalizeFn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eduhP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../_lib/buildMatchFn/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../../../_lib/buildMatchPatternFn/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
    any: [
        /^b/i,
        /^(a|c)/i
    ]
};
var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
var match = {
    ordinalNumber: _indexJsDefault1.default({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
            return parseInt(value, 10);
        }
    }),
    era: _indexJsDefault.default({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
    }),
    quarter: _indexJsDefault.default({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
            return index + 1;
        }
    }),
    month: _indexJsDefault.default({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
    }),
    day: _indexJsDefault.default({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
    }),
    dayPeriod: _indexJsDefault.default({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
    })
};
exports.default = match;

},{"../../../_lib/buildMatchFn/index.js":"cLug6","../../../_lib/buildMatchPatternFn/index.js":"blWNe","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cLug6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function buildMatchFn(args) {
    return function(string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
        }) : findKey(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}
exports.default = buildMatchFn;
function findKey(object, predicate) {
    for(var key in object){
        if (object.hasOwnProperty(key) && predicate(object[key])) return key;
    }
    return undefined;
}
function findIndex(array, predicate) {
    for(var key = 0; key < array.length; key++){
        if (predicate(array[key])) return key;
    }
    return undefined;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"blWNe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function buildMatchPatternFn(args) {
    return function(string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}
exports.default = buildMatchPatternFn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"OuyIA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMilliseconds/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subMilliseconds(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subMilliseconds;

},{"../_lib/toInteger/index.js":"att0s","../addMilliseconds/index.js":"cPP7g","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"att0s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) return NaN;
    var number = Number(dirtyNumber);
    if (isNaN(number)) return number;
    return number < 0 ? Math.ceil(number) : Math.floor(number);
}
exports.default = toInteger;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cPP7g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function addMilliseconds(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var timestamp = _indexJsDefault1.default(dirtyDate).getTime();
    var amount = _indexJsDefault.default(dirtyAmount);
    return new Date(timestamp + amount);
}
exports.default = addMilliseconds;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"16ewq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../_lib/getUTCDayOfYear/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../../../_lib/getUTCISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../../../_lib/getUTCISOWeekYear/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../../../_lib/getUTCWeek/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../../../_lib/getUTCWeekYear/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
var _indexJs5 = require("../../addLeadingZeros/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs5);
var _indexJs6 = require("../lightFormatters/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs6);
var dayPeriodEnum = {
    am: 'am',
    pm: 'pm',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */ var formatters = {
    // Era
    G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch(token){
            // AD, BC
            case 'G':
            case 'GG':
            case 'GGG':
                return localize.era(era, {
                    width: 'abbreviated'
                });
            // A, B
            case 'GGGGG':
                return localize.era(era, {
                    width: 'narrow'
                });
            // Anno Domini, Before Christ
            case 'GGGG':
            default:
                return localize.era(era, {
                    width: 'wide'
                });
        }
    },
    // Year
    y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
            var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return localize.ordinalNumber(year, {
                unit: 'year'
            });
        }
        return _indexJsDefault6.default.y(date, token);
    },
    // Local week-numbering year
    Y: function Y(date, token, localize, options) {
        var signedWeekYear = _indexJsDefault4.default(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year
        if (token === 'YY') {
            var twoDigitYear = weekYear % 100;
            return _indexJsDefault5.default(twoDigitYear, 2);
        } // Ordinal number
        if (token === 'Yo') return localize.ordinalNumber(weekYear, {
            unit: 'year'
        });
         // Padding
        return _indexJsDefault5.default(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function R(date, token) {
        var isoWeekYear = _indexJsDefault2.default(date); // Padding
        return _indexJsDefault5.default(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function u(date, token) {
        var year = date.getUTCFullYear();
        return _indexJsDefault5.default(year, token.length);
    },
    // Quarter
    Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch(token){
            // 1, 2, 3, 4
            case 'Q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'QQ':
                return _indexJsDefault5.default(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'Qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'QQQ':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'QQQQQ':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // 1st quarter, 2nd quarter, ...
            case 'QQQQ':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone quarter
    q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch(token){
            // 1, 2, 3, 4
            case 'q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'qq':
                return _indexJsDefault5.default(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'qqq':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'qqqqq':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // 1st quarter, 2nd quarter, ...
            case 'qqqq':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Month
    M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch(token){
            case 'M':
            case 'MM':
                return _indexJsDefault6.default.M(date, token);
            // 1st, 2nd, ..., 12th
            case 'Mo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'MMM':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // J, F, ..., D
            case 'MMMMM':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // January, February, ..., December
            case 'MMMM':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone month
    L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch(token){
            // 1, 2, ..., 12
            case 'L':
                return String(month + 1);
            // 01, 02, ..., 12
            case 'LL':
                return _indexJsDefault5.default(month + 1, 2);
            // 1st, 2nd, ..., 12th
            case 'Lo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'LLL':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // J, F, ..., D
            case 'LLLLL':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // January, February, ..., December
            case 'LLLL':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Local week of year
    w: function w(date, token, localize, options) {
        var week = _indexJsDefault3.default(date, options);
        if (token === 'wo') return localize.ordinalNumber(week, {
            unit: 'week'
        });
        return _indexJsDefault5.default(week, token.length);
    },
    // ISO week of year
    I: function I(date, token, localize) {
        var isoWeek = _indexJsDefault1.default(date);
        if (token === 'Io') return localize.ordinalNumber(isoWeek, {
            unit: 'week'
        });
        return _indexJsDefault5.default(isoWeek, token.length);
    },
    // Day of the month
    d: function d(date, token, localize) {
        if (token === 'do') return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
        });
        return _indexJsDefault6.default.d(date, token);
    },
    // Day of year
    D: function D(date, token, localize) {
        var dayOfYear = _indexJsDefault.default(date);
        if (token === 'Do') return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
        });
        return _indexJsDefault5.default(dayOfYear, token.length);
    },
    // Day of week
    E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch(token){
            // Tue
            case 'E':
            case 'EE':
            case 'EEE':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'EEEEE':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'EEEEEE':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'EEEE':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Local day of week
    e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch(token){
            // Numerical value (Nth day of week with current locale or weekStartsOn)
            case 'e':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'ee':
                return _indexJsDefault5.default(localDayOfWeek, 2);
            // 1st, 2nd, ..., 7th
            case 'eo':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'eee':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'eeeee':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'eeeeee':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'eeee':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone local day of week
    c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch(token){
            // Numerical value (same as in `e`)
            case 'c':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'cc':
                return _indexJsDefault5.default(localDayOfWeek, token.length);
            // 1st, 2nd, ..., 7th
            case 'co':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'ccc':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // T
            case 'ccccc':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // Tu
            case 'cccccc':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'standalone'
                });
            // Tuesday
            case 'cccc':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // ISO day of week
    i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch(token){
            // 2
            case 'i':
                return String(isoDayOfWeek);
            // 02
            case 'ii':
                return _indexJsDefault5.default(isoDayOfWeek, token.length);
            // 2nd
            case 'io':
                return localize.ordinalNumber(isoDayOfWeek, {
                    unit: 'day'
                });
            // Tue
            case 'iii':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'iiiii':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'iiiiii':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'iiii':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM or PM
    a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch(token){
            case 'a':
            case 'aa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'aaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'aaaaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'aaaa':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM, PM, midnight, noon
    b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) dayPeriodEnumValue = dayPeriodEnum.noon;
        else if (hours === 0) dayPeriodEnumValue = dayPeriodEnum.midnight;
        else dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch(token){
            case 'b':
            case 'bb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'bbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'bbbbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'bbbb':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) dayPeriodEnumValue = dayPeriodEnum.evening;
        else if (hours >= 12) dayPeriodEnumValue = dayPeriodEnum.afternoon;
        else if (hours >= 4) dayPeriodEnumValue = dayPeriodEnum.morning;
        else dayPeriodEnumValue = dayPeriodEnum.night;
        switch(token){
            case 'B':
            case 'BB':
            case 'BBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'BBBBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'BBBB':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Hour [1-12]
    h: function h(date, token, localize) {
        if (token === 'ho') {
            var hours = date.getUTCHours() % 12;
            if (hours === 0) hours = 12;
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return _indexJsDefault6.default.h(date, token);
    },
    // Hour [0-23]
    H: function H(date, token, localize) {
        if (token === 'Ho') return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
        });
        return _indexJsDefault6.default.H(date, token);
    },
    // Hour [0-11]
    K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') return localize.ordinalNumber(hours, {
            unit: 'hour'
        });
        return _indexJsDefault5.default(hours, token.length);
    },
    // Hour [1-24]
    k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;
        if (token === 'ko') return localize.ordinalNumber(hours, {
            unit: 'hour'
        });
        return _indexJsDefault5.default(hours, token.length);
    },
    // Minute
    m: function m(date, token, localize) {
        if (token === 'mo') return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
        });
        return _indexJsDefault6.default.m(date, token);
    },
    // Second
    s: function s(date, token, localize) {
        if (token === 'so') return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
        });
        return _indexJsDefault6.default.s(date, token);
    },
    // Fraction of second
    S: function S(date, token) {
        return _indexJsDefault6.default.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) return 'Z';
        switch(token){
            // Hours and optional minutes
            case 'X':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XX`
            case 'XXXX':
            case 'XX':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XXX`
            case 'XXXXX':
            case 'XXX':
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch(token){
            // Hours and optional minutes
            case 'x':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xx`
            case 'xxxx':
            case 'xx':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xxx`
            case 'xxxxx':
            case 'xxx':
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (GMT)
    O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch(token){
            // Short
            case 'O':
            case 'OO':
            case 'OOO':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'OOOO':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (specific non-location)
    z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch(token){
            // Short
            case 'z':
            case 'zz':
            case 'zzz':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'zzzz':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Seconds timestamp
    t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return _indexJsDefault5.default(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return _indexJsDefault5.default(timestamp, token.length);
    }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;
    if (minutes === 0) return sign + String(hours);
    var delimiter = dirtyDelimiter || '';
    return sign + String(hours) + delimiter + _indexJsDefault5.default(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + _indexJsDefault5.default(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = _indexJsDefault5.default(Math.floor(absOffset / 60), 2);
    var minutes = _indexJsDefault5.default(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
}
exports.default = formatters;

},{"../../../_lib/getUTCDayOfYear/index.js":"cabVj","../../../_lib/getUTCISOWeek/index.js":"jg6eP","../../../_lib/getUTCISOWeekYear/index.js":"iGZbk","../../../_lib/getUTCWeek/index.js":"l4GkC","../../../_lib/getUTCWeekYear/index.js":"ktZve","../../addLeadingZeros/index.js":"k3Zol","../lightFormatters/index.js":"cjbN8","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cabVj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
function getUTCDayOfYear(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
exports.default = getUTCDayOfYear;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jg6eP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfUTCISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfUTCISOWeekYear/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../requiredArgs/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
function getUTCISOWeek(dirtyDate) {
    _indexJsDefault3.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var diff = _indexJsDefault1.default(date).getTime() - _indexJsDefault2.default(date).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
exports.default = getUTCISOWeek;

},{"../../toDate/index.js":"id6nD","../startOfUTCISOWeek/index.js":"5OaM6","../startOfUTCISOWeekYear/index.js":"12YVy","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5OaM6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfUTCISOWeek(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var weekStartsOn = 1;
    var date = _indexJsDefault.default(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfUTCISOWeek;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"12YVy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../getUTCISOWeekYear/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfUTCISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../requiredArgs/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function startOfUTCISOWeekYear(dirtyDate) {
    _indexJsDefault2.default(1, arguments);
    var year = _indexJsDefault.default(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = _indexJsDefault1.default(fourthOfJanuary);
    return date;
}
exports.default = startOfUTCISOWeekYear;

},{"../getUTCISOWeekYear/index.js":"iGZbk","../startOfUTCISOWeek/index.js":"5OaM6","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iGZbk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfUTCISOWeek/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function getUTCISOWeekYear(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = _indexJsDefault2.default(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = _indexJsDefault2.default(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) return year + 1;
    else if (date.getTime() >= startOfThisYear.getTime()) return year;
    else return year - 1;
}
exports.default = getUTCISOWeekYear;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","../startOfUTCISOWeek/index.js":"5OaM6","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"l4GkC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfUTCWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfUTCWeekYear/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../requiredArgs/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
function getUTCWeek(dirtyDate, options) {
    _indexJsDefault3.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var diff = _indexJsDefault1.default(date, options).getTime() - _indexJsDefault2.default(date, options).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
exports.default = getUTCWeek;

},{"../../toDate/index.js":"id6nD","../startOfUTCWeek/index.js":"cM5KI","../startOfUTCWeekYear/index.js":"1ED0Q","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cM5KI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../toInteger/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function startOfUTCWeek(dirtyDate, dirtyOptions) {
    _indexJsDefault1.default(1, arguments);
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault2.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault2.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    var date = _indexJsDefault.default(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfUTCWeek;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","../toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1ED0Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../getUTCWeekYear/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfUTCWeek/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../toInteger/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
    _indexJsDefault1.default(1, arguments);
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : _indexJsDefault3.default(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : _indexJsDefault3.default(options.firstWeekContainsDate);
    var year = _indexJsDefault.default(dirtyDate, dirtyOptions);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = _indexJsDefault2.default(firstWeek, dirtyOptions);
    return date;
}
exports.default = startOfUTCWeekYear;

},{"../getUTCWeekYear/index.js":"ktZve","../requiredArgs/index.js":"1Nemu","../startOfUTCWeek/index.js":"cM5KI","../toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ktZve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfUTCWeek/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../toInteger/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function getUTCWeekYear(dirtyDate, dirtyOptions) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var year = date.getUTCFullYear();
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : _indexJsDefault3.default(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : _indexJsDefault3.default(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = _indexJsDefault2.default(firstWeekOfNextYear, dirtyOptions);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = _indexJsDefault2.default(firstWeekOfThisYear, dirtyOptions);
    if (date.getTime() >= startOfNextYear.getTime()) return year + 1;
    else if (date.getTime() >= startOfThisYear.getTime()) return year;
    else return year - 1;
}
exports.default = getUTCWeekYear;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","../startOfUTCWeek/index.js":"cM5KI","../toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"k3Zol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? '-' : '';
    var output = Math.abs(number).toString();
    while(output.length < targetLength)output = '0' + output;
    return sign + output;
}
exports.default = addLeadingZeros;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cjbN8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../addLeadingZeros/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */ var formatters = {
    // Year
    y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return _indexJsDefault.default(token === 'yy' ? year % 100 : year, token.length);
    },
    // Month
    M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : _indexJsDefault.default(month + 1, 2);
    },
    // Day of the month
    d: function d(date, token) {
        return _indexJsDefault.default(date.getUTCDate(), token.length);
    },
    // AM or PM
    a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch(token){
            case 'a':
            case 'aa':
                return dayPeriodEnumValue.toUpperCase();
            case 'aaa':
                return dayPeriodEnumValue;
            case 'aaaaa':
                return dayPeriodEnumValue[0];
            case 'aaaa':
            default:
                return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
    },
    // Hour [1-12]
    h: function h(date, token) {
        return _indexJsDefault.default(date.getUTCHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H: function H(date, token) {
        return _indexJsDefault.default(date.getUTCHours(), token.length);
    },
    // Minute
    m: function m(date, token) {
        return _indexJsDefault.default(date.getUTCMinutes(), token.length);
    },
    // Second
    s: function s(date, token) {
        return _indexJsDefault.default(date.getUTCSeconds(), token.length);
    },
    // Fraction of second
    S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return _indexJsDefault.default(fractionalSeconds, token.length);
    }
};
exports.default = formatters;

},{"../../addLeadingZeros/index.js":"k3Zol","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g3Ylt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function dateLongFormatter(pattern, formatLong) {
    switch(pattern){
        case 'P':
            return formatLong.date({
                width: 'short'
            });
        case 'PP':
            return formatLong.date({
                width: 'medium'
            });
        case 'PPP':
            return formatLong.date({
                width: 'long'
            });
        case 'PPPP':
        default:
            return formatLong.date({
                width: 'full'
            });
    }
}
function timeLongFormatter(pattern, formatLong) {
    switch(pattern){
        case 'p':
            return formatLong.time({
                width: 'short'
            });
        case 'pp':
            return formatLong.time({
                width: 'medium'
            });
        case 'ppp':
            return formatLong.time({
                width: 'long'
            });
        case 'pppp':
        default:
            return formatLong.time({
                width: 'full'
            });
    }
}
function dateTimeLongFormatter(pattern, formatLong) {
    var matchResult = pattern.match(/(P+)(p+)?/) || [];
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];
    if (!timePattern) return dateLongFormatter(pattern, formatLong);
    var dateTimeFormat;
    switch(datePattern){
        case 'P':
            dateTimeFormat = formatLong.dateTime({
                width: 'short'
            });
            break;
        case 'PP':
            dateTimeFormat = formatLong.dateTime({
                width: 'medium'
            });
            break;
        case 'PPP':
            dateTimeFormat = formatLong.dateTime({
                width: 'long'
            });
            break;
        case 'PPPP':
        default:
            dateTimeFormat = formatLong.dateTime({
                width: 'full'
            });
            break;
    }
    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}
var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
};
exports.default = longFormatters;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iw9bF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getTimezoneOffsetInMilliseconds(date) {
    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    utcDate.setUTCFullYear(date.getFullYear());
    return date.getTime() - utcDate.getTime();
}
exports.default = getTimezoneOffsetInMilliseconds;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7xq15":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isProtectedDayOfYearToken", function() {
    return isProtectedDayOfYearToken;
});
parcelHelpers.export(exports, "isProtectedWeekYearToken", function() {
    return isProtectedWeekYearToken;
});
parcelHelpers.export(exports, "throwProtectedError", function() {
    return throwProtectedError;
});
var protectedDayOfYearTokens = [
    'D',
    'DD'
];
var protectedWeekYearTokens = [
    'YY',
    'YYYY'
];
function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
    if (token === 'YYYY') throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    else if (token === 'YY') throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    else if (token === 'D') throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    else if (token === 'DD') throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8yBhV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMilliseconds/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var MILLISECONDS_IN_MINUTE = 60000;
function addMinutes(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
exports.default = addMinutes;

},{"../_lib/toInteger/index.js":"att0s","../addMilliseconds/index.js":"cPP7g","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ivgEd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMilliseconds/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var MILLISECONDS_IN_HOUR = 3600000;
function addHours(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
exports.default = addHours;

},{"../_lib/toInteger/index.js":"att0s","../addMilliseconds/index.js":"cPP7g","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4k6Fc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function addDays(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var amount = _indexJsDefault.default(dirtyAmount);
    if (isNaN(amount)) return new Date(NaN);
    if (!amount) // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
    date.setDate(date.getDate() + amount);
    return date;
}
exports.default = addDays;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1eExK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addDays/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function addWeeks(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    var days = amount * 7;
    return _indexJsDefault1.default(dirtyDate, days);
}
exports.default = addWeeks;

},{"../_lib/toInteger/index.js":"att0s","../addDays/index.js":"4k6Fc","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iIn3V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function addMonths(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var amount = _indexJsDefault.default(dirtyAmount);
    if (isNaN(amount)) return new Date(NaN);
    if (!amount) // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
    var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
    // want except that dates will wrap around the end of a month, meaning that
    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
    // we'll default to the end of the desired month by adding 1 to the desired
    // month and using a date of 0 to back up one day to the end of the desired
    // month.
    var endOfDesiredMonth = new Date(date.getTime());
    endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
    var daysInMonth = endOfDesiredMonth.getDate();
    if (dayOfMonth >= daysInMonth) // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
    else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
    }
}
exports.default = addMonths;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e86Sm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMonths/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function addYears(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, amount * 12);
}
exports.default = addYears;

},{"../_lib/toInteger/index.js":"att0s","../addMonths/index.js":"iIn3V","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bw8Gr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMinutes/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subMinutes(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subMinutes;

},{"../_lib/toInteger/index.js":"att0s","../addMinutes/index.js":"8yBhV","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8XHS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addHours/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subHours(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subHours;

},{"../_lib/toInteger/index.js":"att0s","../addHours/index.js":"ivgEd","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9EUNb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addDays/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subDays(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subDays;

},{"../_lib/toInteger/index.js":"att0s","../addDays/index.js":"4k6Fc","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aWik8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addWeeks/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subWeeks(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subWeeks;

},{"../_lib/toInteger/index.js":"att0s","../addWeeks/index.js":"1eExK","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a0AYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addMonths/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subMonths(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subMonths;

},{"../_lib/toInteger/index.js":"att0s","../addMonths/index.js":"iIn3V","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2rTDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../addYears/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function subYears(dirtyDate, dirtyAmount) {
    _indexJsDefault2.default(2, arguments);
    var amount = _indexJsDefault.default(dirtyAmount);
    return _indexJsDefault1.default(dirtyDate, -amount);
}
exports.default = subYears;

},{"../_lib/toInteger/index.js":"att0s","../addYears/index.js":"e86Sm","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hwyz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getSeconds(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var seconds = date.getSeconds();
    return seconds;
}
exports.default = getSeconds;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7gIoh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getMinutes(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var minutes = date.getMinutes();
    return minutes;
}
exports.default = getMinutes;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hhqqr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getHours(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var hours = date.getHours();
    return hours;
}
exports.default = getHours;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jQ5sr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getDay(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var day = date.getDay();
    return day;
}
exports.default = getDay;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kldxt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getDate(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var dayOfMonth = date.getDate();
    return dayOfMonth;
}
exports.default = getDate;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3wPQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../startOfISOWeekYear/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var MILLISECONDS_IN_WEEK = 604800000;
function getISOWeek(dirtyDate) {
    _indexJsDefault3.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var diff = _indexJsDefault1.default(date).getTime() - _indexJsDefault2.default(date).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
exports.default = getISOWeek;

},{"../toDate/index.js":"id6nD","../startOfISOWeek/index.js":"covhz","../startOfISOWeekYear/index.js":"dwplw","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"covhz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../startOfWeek/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfISOWeek(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    return _indexJsDefault.default(dirtyDate, {
        weekStartsOn: 1
    });
}
exports.default = startOfISOWeek;

},{"../startOfWeek/index.js":"ljiEj","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ljiEj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/toInteger/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function startOfWeek(dirtyDate, dirtyOptions) {
    _indexJsDefault2.default(1, arguments);
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault1.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault1.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    var date = _indexJsDefault.default(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setDate(date.getDate() - diff);
    date.setHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfWeek;

},{"../toDate/index.js":"id6nD","../_lib/toInteger/index.js":"att0s","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dwplw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../getISOWeekYear/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function startOfISOWeekYear(dirtyDate) {
    _indexJsDefault2.default(1, arguments);
    var year = _indexJsDefault.default(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    var date = _indexJsDefault1.default(fourthOfJanuary);
    return date;
}
exports.default = startOfISOWeekYear;

},{"../getISOWeekYear/index.js":"1wCZZ","../startOfISOWeek/index.js":"covhz","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1wCZZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfISOWeek/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function getISOWeekYear(dirtyDate) {
    _indexJsDefault2.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var year = date.getFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = _indexJsDefault1.default(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = _indexJsDefault1.default(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) return year + 1;
    else if (date.getTime() >= startOfThisYear.getTime()) return year;
    else return year - 1;
}
exports.default = getISOWeekYear;

},{"../toDate/index.js":"id6nD","../startOfISOWeek/index.js":"covhz","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"RGjOm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getMonth(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var month = date.getMonth();
    return month;
}
exports.default = getMonth;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9CZzP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getQuarter(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var quarter = Math.floor(date.getMonth() / 3) + 1;
    return quarter;
}
exports.default = getQuarter;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3z7mP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getYear(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    return _indexJsDefault.default(dirtyDate).getFullYear();
}
exports.default = getYear;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1crYK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getTime(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var timestamp = date.getTime();
    return timestamp;
}
exports.default = getTime;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"arfg8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setSeconds(dirtyDate, dirtySeconds) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var seconds = _indexJsDefault.default(dirtySeconds);
    date.setSeconds(seconds);
    return date;
}
exports.default = setSeconds;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j4hDT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setMinutes(dirtyDate, dirtyMinutes) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var minutes = _indexJsDefault.default(dirtyMinutes);
    date.setMinutes(minutes);
    return date;
}
exports.default = setMinutes;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h2N8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setHours(dirtyDate, dirtyHours) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var hours = _indexJsDefault.default(dirtyHours);
    date.setHours(hours);
    return date;
}
exports.default = setHours;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hgAZk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../getDaysInMonth/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function setMonth(dirtyDate, dirtyMonth) {
    _indexJsDefault3.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var month = _indexJsDefault.default(dirtyMonth);
    var year = date.getFullYear();
    var day = date.getDate();
    var dateWithDesiredMonth = new Date(0);
    dateWithDesiredMonth.setFullYear(year, month, 15);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    var daysInMonth = _indexJsDefault2.default(dateWithDesiredMonth); // Set the last day of the new month
    // if the original date was the last day of the longer month
    date.setMonth(month, Math.min(day, daysInMonth));
    return date;
}
exports.default = setMonth;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../getDaysInMonth/index.js":"5ImwB","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5ImwB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function getDaysInMonth(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var year = date.getFullYear();
    var monthIndex = date.getMonth();
    var lastDayOfMonth = new Date(0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate();
}
exports.default = getDaysInMonth;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bXSV6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../setMonth/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function setQuarter(dirtyDate, dirtyQuarter) {
    _indexJsDefault3.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var quarter = _indexJsDefault.default(dirtyQuarter);
    var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
    var diff = quarter - oldQuarter;
    return _indexJsDefault2.default(date, date.getMonth() + diff * 3);
}
exports.default = setQuarter;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../setMonth/index.js":"hgAZk","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3rerI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setYear(dirtyDate, dirtyYear) {
    _indexJsDefault2.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var year = _indexJsDefault.default(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(date.getTime())) return new Date(NaN);
    date.setFullYear(year);
    return date;
}
exports.default = setYear;

},{"../_lib/toInteger/index.js":"att0s","../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2l3yQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function min(dirtyDatesArray) {
    _indexJsDefault1.default(1, arguments);
    var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.
    else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) datesArray = Array.prototype.slice.call(dirtyDatesArray);
    else // `dirtyDatesArray` is non-iterable, return Invalid Date
    return new Date(NaN);
    var result;
    datesArray.forEach(function(dirtyDate) {
        var currentDate = _indexJsDefault.default(dirtyDate);
        if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) result = currentDate;
    });
    return result || new Date(NaN);
}
exports.default = min;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9kb61":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function max(dirtyDatesArray) {
    _indexJsDefault1.default(1, arguments);
    var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.
    else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) datesArray = Array.prototype.slice.call(dirtyDatesArray);
    else // `dirtyDatesArray` is non-iterable, return Invalid Date
    return new Date(NaN);
    var result;
    datesArray.forEach(function(dirtyDate) {
        var currentDate = _indexJsDefault.default(dirtyDate);
        if (result === undefined || result < currentDate || isNaN(Number(currentDate))) result = currentDate;
    });
    return result || new Date(NaN);
}
exports.default = max;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i6elA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../_lib/getTimezoneOffsetInMilliseconds/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../startOfDay/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var MILLISECONDS_IN_DAY = 86400000;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault2.default(2, arguments);
    var startOfDayLeft = _indexJsDefault1.default(dirtyDateLeft);
    var startOfDayRight = _indexJsDefault1.default(dirtyDateRight);
    var timestampLeft = startOfDayLeft.getTime() - _indexJsDefault.default(startOfDayLeft);
    var timestampRight = startOfDayRight.getTime() - _indexJsDefault.default(startOfDayRight); // Round the number of days to the nearest integer
    // because the number of milliseconds in a day is not constant
    // (e.g. it's different in the day of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}
exports.default = differenceInCalendarDays;

},{"../_lib/getTimezoneOffsetInMilliseconds/index.js":"iw9bF","../startOfDay/index.js":"alNgA","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"alNgA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfDay(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    date.setHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfDay;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2myCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeft = _indexJsDefault.default(dirtyDateLeft);
    var dateRight = _indexJsDefault.default(dirtyDateRight);
    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
}
exports.default = differenceInCalendarMonths;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"92vDc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../startOfWeek/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/getTimezoneOffsetInMilliseconds/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var MILLISECONDS_IN_WEEK = 604800000;
function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
    _indexJsDefault2.default(2, arguments);
    var startOfWeekLeft = _indexJsDefault.default(dirtyDateLeft, dirtyOptions);
    var startOfWeekRight = _indexJsDefault.default(dirtyDateRight, dirtyOptions);
    var timestampLeft = startOfWeekLeft.getTime() - _indexJsDefault1.default(startOfWeekLeft);
    var timestampRight = startOfWeekRight.getTime() - _indexJsDefault1.default(startOfWeekRight); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
}
exports.default = differenceInCalendarWeeks;

},{"../startOfWeek/index.js":"ljiEj","../_lib/getTimezoneOffsetInMilliseconds/index.js":"iw9bF","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i0HEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeft = _indexJsDefault.default(dirtyDateLeft);
    var dateRight = _indexJsDefault.default(dirtyDateRight);
    return dateLeft.getFullYear() - dateRight.getFullYear();
}
exports.default = differenceInCalendarYears;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h1vcp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfMonth(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfMonth;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8Zh2i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfQuarter(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var currentMonth = date.getMonth();
    var month = currentMonth - currentMonth % 3;
    date.setMonth(month, 1);
    date.setHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfQuarter;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"f9j1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function startOfYear(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var cleanDate = _indexJsDefault.default(dirtyDate);
    var date = new Date(0);
    date.setFullYear(cleanDate.getFullYear(), 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
}
exports.default = startOfYear;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8zdWF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function endOfDay(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    date.setHours(23, 59, 59, 999);
    return date;
}
exports.default = endOfDay;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4Fi60":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/toInteger/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function endOfWeek(dirtyDate, dirtyOptions) {
    _indexJsDefault2.default(1, arguments);
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault1.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault1.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    var date = _indexJsDefault.default(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
    date.setDate(date.getDate() + diff);
    date.setHours(23, 59, 59, 999);
    return date;
}
exports.default = endOfWeek;

},{"../toDate/index.js":"id6nD","../_lib/toInteger/index.js":"att0s","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jIdjS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function endOfMonth(dirtyDate) {
    _indexJsDefault1.default(1, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date;
}
exports.default = endOfMonth;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4Zke5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isEqual(dirtyLeftDate, dirtyRightDate) {
    _indexJsDefault1.default(2, arguments);
    var dateLeft = _indexJsDefault.default(dirtyLeftDate);
    var dateRight = _indexJsDefault.default(dirtyRightDate);
    return dateLeft.getTime() === dateRight.getTime();
}
exports.default = isEqual;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"exDPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../startOfDay/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isSameDay(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeftStartOfDay = _indexJsDefault.default(dirtyDateLeft);
    var dateRightStartOfDay = _indexJsDefault.default(dirtyDateRight);
    return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
exports.default = isSameDay;

},{"../startOfDay/index.js":"alNgA","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6y5M5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeft = _indexJsDefault.default(dirtyDateLeft);
    var dateRight = _indexJsDefault.default(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}
exports.default = isSameMonth;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bdw9B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isSameYear(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeft = _indexJsDefault.default(dirtyDateLeft);
    var dateRight = _indexJsDefault.default(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear();
}
exports.default = isSameYear;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9raJq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../startOfQuarter/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
    _indexJsDefault1.default(2, arguments);
    var dateLeftStartOfQuarter = _indexJsDefault.default(dirtyDateLeft);
    var dateRightStartOfQuarter = _indexJsDefault.default(dirtyDateRight);
    return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}
exports.default = isSameQuarter;

},{"../startOfQuarter/index.js":"8Zh2i","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"33Wv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isAfter(dirtyDate, dirtyDateToCompare) {
    _indexJsDefault1.default(2, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var dateToCompare = _indexJsDefault.default(dirtyDateToCompare);
    return date.getTime() > dateToCompare.getTime();
}
exports.default = isAfter;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5MyfX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isBefore(dirtyDate, dirtyDateToCompare) {
    _indexJsDefault1.default(2, arguments);
    var date = _indexJsDefault.default(dirtyDate);
    var dateToCompare = _indexJsDefault.default(dirtyDateToCompare);
    return date.getTime() < dateToCompare.getTime();
}
exports.default = isBefore;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"61eKM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function isWithinInterval(dirtyDate, interval) {
    _indexJsDefault1.default(2, arguments);
    var time = _indexJsDefault.default(dirtyDate).getTime();
    var startTime = _indexJsDefault.default(interval.start).getTime();
    var endTime = _indexJsDefault.default(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`
    if (!(startTime <= endTime)) throw new RangeError('Invalid interval');
    return time >= startTime && time <= endTime;
}
exports.default = isWithinInterval;

},{"../toDate/index.js":"id6nD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eVMKb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../locale/en-US/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../subMilliseconds/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../toDate/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../_lib/assign/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../_lib/format/longFormatters/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
var _indexJs5 = require("../_lib/getTimezoneOffsetInMilliseconds/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs5);
var _indexJs6 = require("../_lib/protectedTokens/index.js");
var _indexJs7 = require("../_lib/toInteger/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs7);
var _indexJs8 = require("./_lib/parsers/index.js");
var _indexJsDefault7 = parcelHelpers.interopDefault(_indexJs8);
var _indexJs9 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault8 = parcelHelpers.interopDefault(_indexJs9);
var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
    _indexJsDefault8.default(3, arguments);
    var dateString = String(dirtyDateString);
    var formatString = String(dirtyFormatString);
    var options = dirtyOptions || {
    };
    var locale = options.locale || _indexJsDefault.default;
    if (!locale.match) throw new RangeError('locale must contain match property');
    var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : _indexJsDefault6.default(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : _indexJsDefault6.default(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault6.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault6.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    if (formatString === '') {
        if (dateString === '') return _indexJsDefault2.default(dirtyReferenceDate);
        else return new Date(NaN);
    }
    var subFnOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale
    }; // If timezone isn't specified, it will be set to the system timezone
    var setters = [
        {
            priority: TIMEZONE_UNIT_PRIORITY,
            subPriority: -1,
            set: dateToSystemTimezone,
            index: 0
        }
    ];
    var i;
    var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
            var longFormatter = _indexJsDefault4.default[firstCharacter];
            return longFormatter(substring, locale.formatLong, subFnOptions);
        }
        return substring;
    }).join('').match(formattingTokensRegExp);
    var usedTokens = [];
    for(i = 0; i < tokens.length; i++){
        var token = tokens[i];
        if (!options.useAdditionalWeekYearTokens && _indexJs6.isProtectedWeekYearToken(token)) _indexJs6.throwProtectedError(token, formatString, dirtyDateString);
        if (!options.useAdditionalDayOfYearTokens && _indexJs6.isProtectedDayOfYearToken(token)) _indexJs6.throwProtectedError(token, formatString, dirtyDateString);
        var firstCharacter1 = token[0];
        var parser = _indexJsDefault7.default[firstCharacter1];
        if (parser) {
            var incompatibleTokens = parser.incompatibleTokens;
            if (Array.isArray(incompatibleTokens)) {
                var incompatibleToken = void 0;
                for(var _i = 0; _i < usedTokens.length; _i++){
                    var usedToken = usedTokens[_i].token;
                    if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter1) {
                        incompatibleToken = usedTokens[_i];
                        break;
                    }
                }
                if (incompatibleToken) throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
            } else if (parser.incompatibleTokens === '*' && usedTokens.length) throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
            usedTokens.push({
                token: firstCharacter1,
                fullToken: token
            });
            var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);
            if (!parseResult) return new Date(NaN);
            setters.push({
                priority: parser.priority,
                subPriority: parser.subPriority || 0,
                set: parser.set,
                validate: parser.validate,
                value: parseResult.value,
                index: setters.length
            });
            dateString = parseResult.rest;
        } else {
            if (firstCharacter1.match(unescapedLatinCharacterRegExp)) throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter1 + '`');
             // Replace two single quote characters with one single quote character
            if (token === "''") token = "'";
            else if (firstCharacter1 === "'") token = cleanEscapedString(token);
             // Cut token from string, or, if string doesn't match the token, return Invalid Date
            if (dateString.indexOf(token) === 0) dateString = dateString.slice(token.length);
            else return new Date(NaN);
        }
    } // Check if the remaining input contains something other than whitespace
    if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) return new Date(NaN);
    var uniquePrioritySetters = setters.map(function(setter) {
        return setter.priority;
    }).sort(function(a, b) {
        return b - a;
    }).filter(function(priority, index, array) {
        return array.indexOf(priority) === index;
    }).map(function(priority) {
        return setters.filter(function(setter) {
            return setter.priority === priority;
        }).sort(function(a, b) {
            return b.subPriority - a.subPriority;
        });
    }).map(function(setterArray) {
        return setterArray[0];
    });
    var date = _indexJsDefault2.default(dirtyReferenceDate);
    if (isNaN(date)) return new Date(NaN);
     // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
    var utcDate = _indexJsDefault1.default(date, _indexJsDefault5.default(date));
    var flags = {
    };
    for(i = 0; i < uniquePrioritySetters.length; i++){
        var setter1 = uniquePrioritySetters[i];
        if (setter1.validate && !setter1.validate(utcDate, setter1.value, subFnOptions)) return new Date(NaN);
        var result = setter1.set(utcDate, flags, setter1.value, subFnOptions); // Result is tuple (date, flags)
        if (result[0]) {
            utcDate = result[0];
            _indexJsDefault3.default(flags, result[1]); // Result is date
        } else utcDate = result;
    }
    return utcDate;
}
exports.default = parse;
function dateToSystemTimezone(date, flags) {
    if (flags.timestampIsSet) return date;
    var convertedDate = new Date(0);
    convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
    return convertedDate;
}
function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

},{"../locale/en-US/index.js":"ioz1D","../subMilliseconds/index.js":"OuyIA","../toDate/index.js":"id6nD","../_lib/assign/index.js":"dV7bm","../_lib/format/longFormatters/index.js":"g3Ylt","../_lib/getTimezoneOffsetInMilliseconds/index.js":"iw9bF","../_lib/protectedTokens/index.js":"7xq15","../_lib/toInteger/index.js":"att0s","./_lib/parsers/index.js":"9UvoD","../_lib/requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dV7bm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function assign(target, dirtyObject) {
    if (target == null) throw new TypeError('assign requires that input parameter not be null or undefined');
    dirtyObject = dirtyObject || {
    };
    for(var property in dirtyObject)if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) target[property] = dirtyObject[property];
    return target;
}
exports.default = assign;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9UvoD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../_lib/getUTCWeekYear/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../../../_lib/setUTCDay/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../../../_lib/setUTCISODay/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../../../_lib/setUTCISOWeek/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../../../_lib/setUTCWeek/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
var _indexJs5 = require("../../../_lib/startOfUTCISOWeek/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs5);
var _indexJs6 = require("../../../_lib/startOfUTCWeek/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs6);
var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
    month: /^(1[0-2]|0?\d)/,
    // 0 to 12
    date: /^(3[0-1]|[0-2]?\d)/,
    // 0 to 31
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
    // 0 to 366
    week: /^(5[0-3]|[0-4]?\d)/,
    // 0 to 53
    hour23h: /^(2[0-3]|[0-1]?\d)/,
    // 0 to 23
    hour24h: /^(2[0-4]|[0-1]?\d)/,
    // 0 to 24
    hour11h: /^(1[0-1]|0?\d)/,
    // 0 to 11
    hour12h: /^(1[0-2]|0?\d)/,
    // 0 to 12
    minute: /^[0-5]?\d/,
    // 0 to 59
    second: /^[0-5]?\d/,
    // 0 to 59
    singleDigit: /^\d/,
    // 0 to 9
    twoDigits: /^\d{1,2}/,
    // 0 to 99
    threeDigits: /^\d{1,3}/,
    // 0 to 999
    fourDigits: /^\d{1,4}/,
    // 0 to 9999
    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/,
    // 0 to 9, -0 to -9
    twoDigitsSigned: /^-?\d{1,2}/,
    // 0 to 99, -0 to -99
    threeDigitsSigned: /^-?\d{1,3}/,
    // 0 to 999, -0 to -999
    fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function parseNumericPattern(pattern, string, valueCallback) {
    var matchResult = string.match(pattern);
    if (!matchResult) return null;
    var value = parseInt(matchResult[0], 10);
    return {
        value: valueCallback ? valueCallback(value) : value,
        rest: string.slice(matchResult[0].length)
    };
}
function parseTimezonePattern(pattern, string) {
    var matchResult = string.match(pattern);
    if (!matchResult) return null;
     // Input is 'Z'
    if (matchResult[0] === 'Z') return {
        value: 0,
        rest: string.slice(1)
    };
    var sign = matchResult[1] === '+' ? 1 : -1;
    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
    return {
        value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
        rest: string.slice(matchResult[0].length)
    };
}
function parseAnyDigitsSigned(string, valueCallback) {
    return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}
function parseNDigits(n, string, valueCallback) {
    switch(n){
        case 1:
            return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
        case 2:
            return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
        case 3:
            return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
        case 4:
            return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
        default:
            return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
    }
}
function parseNDigitsSigned(n, string, valueCallback) {
    switch(n){
        case 1:
            return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
        case 2:
            return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
        case 3:
            return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
        case 4:
            return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
        default:
            return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
    }
}
function dayPeriodEnumToHours(enumValue) {
    switch(enumValue){
        case 'morning':
            return 4;
        case 'evening':
            return 17;
        case 'pm':
        case 'noon':
        case 'afternoon':
            return 12;
        case 'am':
        case 'midnight':
        case 'night':
        default:
            return 0;
    }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    var isCommonEra = currentYear > 0; // Absolute number of the current year:
    // 1 -> 1 AC
    // 0 -> 1 BC
    // -1 -> 2 BC
    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
    var result;
    if (absCurrentYear <= 50) result = twoDigitYear || 100;
    else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }
    return isCommonEra ? result : 1 - result;
}
var DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
var DAYS_IN_MONTH_LEAP_YEAR = [
    31,
    29,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
]; // User for validation
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */ var parsers = {
    // Era
    G: {
        priority: 140,
        parse: function parse(string, token, match, _options) {
            switch(token){
                // AD, BC
                case 'G':
                case 'GG':
                case 'GGG':
                    return match.era(string, {
                        width: 'abbreviated'
                    }) || match.era(string, {
                        width: 'narrow'
                    });
                // A, B
                case 'GGGGG':
                    return match.era(string, {
                        width: 'narrow'
                    });
                // Anno Domini, Before Christ
                case 'GGGG':
                default:
                    return match.era(string, {
                        width: 'wide'
                    }) || match.era(string, {
                        width: 'abbreviated'
                    }) || match.era(string, {
                        width: 'narrow'
                    });
            }
        },
        set: function set(date, flags, value, _options) {
            flags.era = value;
            date.setUTCFullYear(value, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'R',
            'u',
            't',
            'T'
        ]
    },
    // Year
    y: {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        priority: 130,
        parse: function parse(string, token, match, _options) {
            var valueCallback = function valueCallback(year) {
                return {
                    year: year,
                    isTwoDigitYear: token === 'yy'
                };
            };
            switch(token){
                case 'y':
                    return parseNDigits(4, string, valueCallback);
                case 'yo':
                    return match.ordinalNumber(string, {
                        unit: 'year',
                        valueCallback: valueCallback
                    });
                default:
                    return parseNDigits(token.length, string, valueCallback);
            }
        },
        validate: function validate(_date, value, _options) {
            return value.isTwoDigitYear || value.year > 0;
        },
        set: function set(date, flags, value, _options) {
            var currentYear = date.getUTCFullYear();
            if (value.isTwoDigitYear) {
                var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
            var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
            date.setUTCFullYear(year, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'u',
            'w',
            'I',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Local week-numbering year
    Y: {
        priority: 130,
        parse: function parse(string, token, match, _options) {
            var valueCallback = function valueCallback(year) {
                return {
                    year: year,
                    isTwoDigitYear: token === 'YY'
                };
            };
            switch(token){
                case 'Y':
                    return parseNDigits(4, string, valueCallback);
                case 'Yo':
                    return match.ordinalNumber(string, {
                        unit: 'year',
                        valueCallback: valueCallback
                    });
                default:
                    return parseNDigits(token.length, string, valueCallback);
            }
        },
        validate: function validate(_date, value, _options) {
            return value.isTwoDigitYear || value.year > 0;
        },
        set: function set(date, flags, value, options) {
            var currentYear = _indexJsDefault.default(date, options);
            if (value.isTwoDigitYear) {
                var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
                date.setUTCHours(0, 0, 0, 0);
                return _indexJsDefault6.default(date, options);
            }
            var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
            date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
            date.setUTCHours(0, 0, 0, 0);
            return _indexJsDefault6.default(date, options);
        },
        incompatibleTokens: [
            'y',
            'R',
            'u',
            'Q',
            'q',
            'M',
            'L',
            'I',
            'd',
            'D',
            'i',
            't',
            'T'
        ]
    },
    // ISO week-numbering year
    R: {
        priority: 130,
        parse: function parse(string, token, _match, _options) {
            if (token === 'R') return parseNDigitsSigned(4, string);
            return parseNDigitsSigned(token.length, string);
        },
        set: function set(_date, _flags, value, _options) {
            var firstWeekOfYear = new Date(0);
            firstWeekOfYear.setUTCFullYear(value, 0, 4);
            firstWeekOfYear.setUTCHours(0, 0, 0, 0);
            return _indexJsDefault5.default(firstWeekOfYear);
        },
        incompatibleTokens: [
            'G',
            'y',
            'Y',
            'u',
            'Q',
            'q',
            'M',
            'L',
            'w',
            'd',
            'D',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Extended year
    u: {
        priority: 130,
        parse: function parse(string, token, _match, _options) {
            if (token === 'u') return parseNDigitsSigned(4, string);
            return parseNDigitsSigned(token.length, string);
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCFullYear(value, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'G',
            'y',
            'Y',
            'R',
            'w',
            'I',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Quarter
    Q: {
        priority: 120,
        parse: function parse(string, token, match, _options) {
            switch(token){
                // 1, 2, 3, 4
                case 'Q':
                case 'QQ':
                    // 01, 02, 03, 04
                    return parseNDigits(token.length, string);
                // 1st, 2nd, 3rd, 4th
                case 'Qo':
                    return match.ordinalNumber(string, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4
                case 'QQQ':
                    return match.quarter(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.quarter(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                case 'QQQQQ':
                    return match.quarter(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // 1st quarter, 2nd quarter, ...
                case 'QQQQ':
                default:
                    return match.quarter(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.quarter(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.quarter(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 4;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMonth((value - 1) * 3, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'q',
            'M',
            'L',
            'w',
            'I',
            'd',
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Stand-alone quarter
    q: {
        priority: 120,
        parse: function parse(string, token, match, _options) {
            switch(token){
                // 1, 2, 3, 4
                case 'q':
                case 'qq':
                    // 01, 02, 03, 04
                    return parseNDigits(token.length, string);
                // 1st, 2nd, 3rd, 4th
                case 'qo':
                    return match.ordinalNumber(string, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4
                case 'qqq':
                    return match.quarter(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.quarter(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                case 'qqqqq':
                    return match.quarter(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // 1st quarter, 2nd quarter, ...
                case 'qqqq':
                default:
                    return match.quarter(string, {
                        width: 'wide',
                        context: 'standalone'
                    }) || match.quarter(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.quarter(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 4;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMonth((value - 1) * 3, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'Q',
            'M',
            'L',
            'w',
            'I',
            'd',
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Month
    M: {
        priority: 110,
        parse: function parse(string, token, match, _options) {
            var valueCallback = function valueCallback(value) {
                return value - 1;
            };
            switch(token){
                // 1, 2, ..., 12
                case 'M':
                    return parseNumericPattern(numericPatterns.month, string, valueCallback);
                // 01, 02, ..., 12
                case 'MM':
                    return parseNDigits(2, string, valueCallback);
                // 1st, 2nd, ..., 12th
                case 'Mo':
                    return match.ordinalNumber(string, {
                        unit: 'month',
                        valueCallback: valueCallback
                    });
                // Jan, Feb, ..., Dec
                case 'MMM':
                    return match.month(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.month(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // J, F, ..., D
                case 'MMMMM':
                    return match.month(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // January, February, ..., December
                case 'MMMM':
                default:
                    return match.month(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.month(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.month(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 11;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMonth(value, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'q',
            'Q',
            'L',
            'w',
            'I',
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Stand-alone month
    L: {
        priority: 110,
        parse: function parse(string, token, match, _options) {
            var valueCallback = function valueCallback(value) {
                return value - 1;
            };
            switch(token){
                // 1, 2, ..., 12
                case 'L':
                    return parseNumericPattern(numericPatterns.month, string, valueCallback);
                // 01, 02, ..., 12
                case 'LL':
                    return parseNDigits(2, string, valueCallback);
                // 1st, 2nd, ..., 12th
                case 'Lo':
                    return match.ordinalNumber(string, {
                        unit: 'month',
                        valueCallback: valueCallback
                    });
                // Jan, Feb, ..., Dec
                case 'LLL':
                    return match.month(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.month(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // J, F, ..., D
                case 'LLLLL':
                    return match.month(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // January, February, ..., December
                case 'LLLL':
                default:
                    return match.month(string, {
                        width: 'wide',
                        context: 'standalone'
                    }) || match.month(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.month(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 11;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMonth(value, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'q',
            'Q',
            'M',
            'w',
            'I',
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Local week of year
    w: {
        priority: 100,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'w':
                    return parseNumericPattern(numericPatterns.week, string);
                case 'wo':
                    return match.ordinalNumber(string, {
                        unit: 'week'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 53;
        },
        set: function set(date, _flags, value, options) {
            return _indexJsDefault6.default(_indexJsDefault4.default(date, value, options), options);
        },
        incompatibleTokens: [
            'y',
            'R',
            'u',
            'q',
            'Q',
            'M',
            'L',
            'I',
            'd',
            'D',
            'i',
            't',
            'T'
        ]
    },
    // ISO week of year
    I: {
        priority: 100,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'I':
                    return parseNumericPattern(numericPatterns.week, string);
                case 'Io':
                    return match.ordinalNumber(string, {
                        unit: 'week'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 53;
        },
        set: function set(date, _flags, value, options) {
            return _indexJsDefault5.default(_indexJsDefault3.default(date, value, options), options);
        },
        incompatibleTokens: [
            'y',
            'Y',
            'u',
            'q',
            'Q',
            'M',
            'L',
            'w',
            'd',
            'D',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Day of the month
    d: {
        priority: 90,
        subPriority: 1,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'd':
                    return parseNumericPattern(numericPatterns.date, string);
                case 'do':
                    return match.ordinalNumber(string, {
                        unit: 'date'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(date, value, _options) {
            var year = date.getUTCFullYear();
            var isLeapYear = isLeapYearIndex(year);
            var month = date.getUTCMonth();
            if (isLeapYear) return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
            else return value >= 1 && value <= DAYS_IN_MONTH[month];
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCDate(value);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'q',
            'Q',
            'w',
            'I',
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Day of year
    D: {
        priority: 90,
        subPriority: 1,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'D':
                case 'DD':
                    return parseNumericPattern(numericPatterns.dayOfYear, string);
                case 'Do':
                    return match.ordinalNumber(string, {
                        unit: 'date'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(date, value, _options) {
            var year = date.getUTCFullYear();
            var isLeapYear = isLeapYearIndex(year);
            if (isLeapYear) return value >= 1 && value <= 366;
            else return value >= 1 && value <= 365;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMonth(0, value);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'Y',
            'R',
            'q',
            'Q',
            'M',
            'L',
            'w',
            'I',
            'd',
            'E',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Day of week
    E: {
        priority: 90,
        parse: function parse(string, token, match, _options) {
            switch(token){
                // Tue
                case 'E':
                case 'EE':
                case 'EEE':
                    return match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // T
                case 'EEEEE':
                    return match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu
                case 'EEEEEE':
                    return match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tuesday
                case 'EEEE':
                default:
                    return match.day(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 6;
        },
        set: function set(date, _flags, value, options) {
            date = _indexJsDefault1.default(date, value, options);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'D',
            'i',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // Local day of week
    e: {
        priority: 90,
        parse: function parse(string, token, match, options) {
            var valueCallback = function valueCallback(value) {
                var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
            };
            switch(token){
                // 3
                case 'e':
                case 'ee':
                    // 03
                    return parseNDigits(token.length, string, valueCallback);
                // 3rd
                case 'eo':
                    return match.ordinalNumber(string, {
                        unit: 'day',
                        valueCallback: valueCallback
                    });
                // Tue
                case 'eee':
                    return match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // T
                case 'eeeee':
                    return match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu
                case 'eeeeee':
                    return match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tuesday
                case 'eeee':
                default:
                    return match.day(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 6;
        },
        set: function set(date, _flags, value, options) {
            date = _indexJsDefault1.default(date, value, options);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'y',
            'R',
            'u',
            'q',
            'Q',
            'M',
            'L',
            'I',
            'd',
            'D',
            'E',
            'i',
            'c',
            't',
            'T'
        ]
    },
    // Stand-alone local day of week
    c: {
        priority: 90,
        parse: function parse(string, token, match, options) {
            var valueCallback = function valueCallback(value) {
                var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
            };
            switch(token){
                // 3
                case 'c':
                case 'cc':
                    // 03
                    return parseNDigits(token.length, string, valueCallback);
                // 3rd
                case 'co':
                    return match.ordinalNumber(string, {
                        unit: 'day',
                        valueCallback: valueCallback
                    });
                // Tue
                case 'ccc':
                    return match.day(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // T
                case 'ccccc':
                    return match.day(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // Tu
                case 'cccccc':
                    return match.day(string, {
                        width: 'short',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // Tuesday
                case 'cccc':
                default:
                    return match.day(string, {
                        width: 'wide',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'abbreviated',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'short',
                        context: 'standalone'
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'standalone'
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 6;
        },
        set: function set(date, _flags, value, options) {
            date = _indexJsDefault1.default(date, value, options);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'y',
            'R',
            'u',
            'q',
            'Q',
            'M',
            'L',
            'I',
            'd',
            'D',
            'E',
            'i',
            'e',
            't',
            'T'
        ]
    },
    // ISO day of week
    i: {
        priority: 90,
        parse: function parse(string, token, match, _options) {
            var valueCallback = function valueCallback(value) {
                if (value === 0) return 7;
                return value;
            };
            switch(token){
                // 2
                case 'i':
                case 'ii':
                    // 02
                    return parseNDigits(token.length, string);
                // 2nd
                case 'io':
                    return match.ordinalNumber(string, {
                        unit: 'day'
                    });
                // Tue
                case 'iii':
                    return match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting',
                        valueCallback: valueCallback
                    });
                // T
                case 'iiiii':
                    return match.day(string, {
                        width: 'narrow',
                        context: 'formatting',
                        valueCallback: valueCallback
                    });
                // Tu
                case 'iiiiii':
                    return match.day(string, {
                        width: 'short',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting',
                        valueCallback: valueCallback
                    });
                // Tuesday
                case 'iiii':
                default:
                    return match.day(string, {
                        width: 'wide',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'abbreviated',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'short',
                        context: 'formatting',
                        valueCallback: valueCallback
                    }) || match.day(string, {
                        width: 'narrow',
                        context: 'formatting',
                        valueCallback: valueCallback
                    });
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 7;
        },
        set: function set(date, _flags, value, options) {
            date = _indexJsDefault2.default(date, value, options);
            date.setUTCHours(0, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'y',
            'Y',
            'u',
            'q',
            'Q',
            'M',
            'L',
            'w',
            'd',
            'D',
            'E',
            'e',
            'c',
            't',
            'T'
        ]
    },
    // AM or PM
    a: {
        priority: 80,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'a':
                case 'aa':
                case 'aaa':
                    return match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'aaaaa':
                    return match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'aaaa':
                default:
                    return match.dayPeriod(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'b',
            'B',
            'H',
            'k',
            't',
            'T'
        ]
    },
    // AM, PM, midnight
    b: {
        priority: 80,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'b':
                case 'bb':
                case 'bbb':
                    return match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'bbbbb':
                    return match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'bbbb':
                default:
                    return match.dayPeriod(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'a',
            'B',
            'H',
            'k',
            't',
            'T'
        ]
    },
    // in the morning, in the afternoon, in the evening, at night
    B: {
        priority: 80,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'B':
                case 'BB':
                case 'BBB':
                    return match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'BBBBB':
                    return match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'BBBB':
                default:
                    return match.dayPeriod(string, {
                        width: 'wide',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }) || match.dayPeriod(string, {
                        width: 'narrow',
                        context: 'formatting'
                    });
            }
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'a',
            'b',
            't',
            'T'
        ]
    },
    // Hour [1-12]
    h: {
        priority: 70,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'h':
                    return parseNumericPattern(numericPatterns.hour12h, string);
                case 'ho':
                    return match.ordinalNumber(string, {
                        unit: 'hour'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 12;
        },
        set: function set(date, _flags, value, _options) {
            var isPM = date.getUTCHours() >= 12;
            if (isPM && value < 12) date.setUTCHours(value + 12, 0, 0, 0);
            else if (!isPM && value === 12) date.setUTCHours(0, 0, 0, 0);
            else date.setUTCHours(value, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'H',
            'K',
            'k',
            't',
            'T'
        ]
    },
    // Hour [0-23]
    H: {
        priority: 70,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'H':
                    return parseNumericPattern(numericPatterns.hour23h, string);
                case 'Ho':
                    return match.ordinalNumber(string, {
                        unit: 'hour'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 23;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCHours(value, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'a',
            'b',
            'h',
            'K',
            'k',
            't',
            'T'
        ]
    },
    // Hour [0-11]
    K: {
        priority: 70,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'K':
                    return parseNumericPattern(numericPatterns.hour11h, string);
                case 'Ko':
                    return match.ordinalNumber(string, {
                        unit: 'hour'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 11;
        },
        set: function set(date, _flags, value, _options) {
            var isPM = date.getUTCHours() >= 12;
            if (isPM && value < 12) date.setUTCHours(value + 12, 0, 0, 0);
            else date.setUTCHours(value, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'h',
            'H',
            'k',
            't',
            'T'
        ]
    },
    // Hour [1-24]
    k: {
        priority: 70,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'k':
                    return parseNumericPattern(numericPatterns.hour24h, string);
                case 'ko':
                    return match.ordinalNumber(string, {
                        unit: 'hour'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 1 && value <= 24;
        },
        set: function set(date, _flags, value, _options) {
            var hours = value <= 24 ? value % 24 : value;
            date.setUTCHours(hours, 0, 0, 0);
            return date;
        },
        incompatibleTokens: [
            'a',
            'b',
            'h',
            'H',
            'K',
            't',
            'T'
        ]
    },
    // Minute
    m: {
        priority: 60,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 'm':
                    return parseNumericPattern(numericPatterns.minute, string);
                case 'mo':
                    return match.ordinalNumber(string, {
                        unit: 'minute'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 59;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMinutes(value, 0, 0);
            return date;
        },
        incompatibleTokens: [
            't',
            'T'
        ]
    },
    // Second
    s: {
        priority: 50,
        parse: function parse(string, token, match, _options) {
            switch(token){
                case 's':
                    return parseNumericPattern(numericPatterns.second, string);
                case 'so':
                    return match.ordinalNumber(string, {
                        unit: 'second'
                    });
                default:
                    return parseNDigits(token.length, string);
            }
        },
        validate: function validate(_date, value, _options) {
            return value >= 0 && value <= 59;
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCSeconds(value, 0);
            return date;
        },
        incompatibleTokens: [
            't',
            'T'
        ]
    },
    // Fraction of second
    S: {
        priority: 30,
        parse: function parse(string, token, _match, _options) {
            var valueCallback = function valueCallback(value) {
                return Math.floor(value * Math.pow(10, -token.length + 3));
            };
            return parseNDigits(token.length, string, valueCallback);
        },
        set: function set(date, _flags, value, _options) {
            date.setUTCMilliseconds(value);
            return date;
        },
        incompatibleTokens: [
            't',
            'T'
        ]
    },
    // Timezone (ISO-8601. +00:00 is `'Z'`)
    X: {
        priority: 10,
        parse: function parse(string, token, _match, _options) {
            switch(token){
                case 'X':
                    return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
                case 'XX':
                    return parseTimezonePattern(timezonePatterns.basic, string);
                case 'XXXX':
                    return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
                case 'XXXXX':
                    return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
                case 'XXX':
                default:
                    return parseTimezonePattern(timezonePatterns.extended, string);
            }
        },
        set: function set(date, flags, value, _options) {
            if (flags.timestampIsSet) return date;
            return new Date(date.getTime() - value);
        },
        incompatibleTokens: [
            't',
            'T',
            'x'
        ]
    },
    // Timezone (ISO-8601)
    x: {
        priority: 10,
        parse: function parse(string, token, _match, _options) {
            switch(token){
                case 'x':
                    return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
                case 'xx':
                    return parseTimezonePattern(timezonePatterns.basic, string);
                case 'xxxx':
                    return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
                case 'xxxxx':
                    return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
                case 'xxx':
                default:
                    return parseTimezonePattern(timezonePatterns.extended, string);
            }
        },
        set: function set(date, flags, value, _options) {
            if (flags.timestampIsSet) return date;
            return new Date(date.getTime() - value);
        },
        incompatibleTokens: [
            't',
            'T',
            'X'
        ]
    },
    // Seconds timestamp
    t: {
        priority: 40,
        parse: function parse(string, _token, _match, _options) {
            return parseAnyDigitsSigned(string);
        },
        set: function set(_date, _flags, value, _options) {
            return [
                new Date(value * 1000),
                {
                    timestampIsSet: true
                }
            ];
        },
        incompatibleTokens: '*'
    },
    // Milliseconds timestamp
    T: {
        priority: 20,
        parse: function parse(string, _token, _match, _options) {
            return parseAnyDigitsSigned(string);
        },
        set: function set(_date, _flags, value, _options) {
            return [
                new Date(value),
                {
                    timestampIsSet: true
                }
            ];
        },
        incompatibleTokens: '*'
    }
};
exports.default = parsers;

},{"../../../_lib/getUTCWeekYear/index.js":"ktZve","../../../_lib/setUTCDay/index.js":"2B8J4","../../../_lib/setUTCISODay/index.js":"jJ1L3","../../../_lib/setUTCISOWeek/index.js":"aTzn6","../../../_lib/setUTCWeek/index.js":"geUc7","../../../_lib/startOfUTCISOWeek/index.js":"5OaM6","../../../_lib/startOfUTCWeek/index.js":"cM5KI","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2B8J4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../toInteger/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
    _indexJsDefault1.default(2, arguments);
    var options = dirtyOptions || {
    };
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : _indexJsDefault2.default(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : _indexJsDefault2.default(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    var date = _indexJsDefault.default(dirtyDate);
    var day = _indexJsDefault2.default(dirtyDay);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
exports.default = setUTCDay;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","../toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jJ1L3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../toDate/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../requiredArgs/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../toInteger/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
function setUTCISODay(dirtyDate, dirtyDay) {
    _indexJsDefault1.default(2, arguments);
    var day = _indexJsDefault2.default(dirtyDay);
    if (day % 7 === 0) day = day - 7;
    var weekStartsOn = 1;
    var date = _indexJsDefault.default(dirtyDate);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
exports.default = setUTCISODay;

},{"../../toDate/index.js":"id6nD","../requiredArgs/index.js":"1Nemu","../toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aTzn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../getUTCISOWeek/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../requiredArgs/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
    _indexJsDefault3.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var isoWeek = _indexJsDefault.default(dirtyISOWeek);
    var diff = _indexJsDefault2.default(date) - isoWeek;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
}
exports.default = setUTCISOWeek;

},{"../toInteger/index.js":"att0s","../../toDate/index.js":"id6nD","../getUTCISOWeek/index.js":"jg6eP","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"geUc7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../toInteger/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../../toDate/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../getUTCWeek/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../requiredArgs/index.js"); // This function will be a part of public API when UTC function will be implemented.
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
    _indexJsDefault3.default(2, arguments);
    var date = _indexJsDefault1.default(dirtyDate);
    var week = _indexJsDefault.default(dirtyWeek);
    var diff = _indexJsDefault2.default(date, options) - week;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
}
exports.default = setUTCWeek;

},{"../toInteger/index.js":"att0s","../../toDate/index.js":"id6nD","../getUTCWeek/index.js":"l4GkC","../requiredArgs/index.js":"1Nemu","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ccLYc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../constants/index.js");
var _indexJs1 = require("../_lib/requiredArgs/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../_lib/toInteger/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs2);
function parseISO(argument, dirtyOptions) {
    _indexJsDefault.default(1, arguments);
    var options = dirtyOptions || {
    };
    var additionalDigits = options.additionalDigits == null ? 2 : _indexJsDefault1.default(options.additionalDigits);
    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) throw new RangeError('additionalDigits must be 0, 1 or 2');
    if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) return new Date(NaN);
    var dateStrings = splitDateString(argument);
    var date;
    if (dateStrings.date) {
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
    }
    if (!date || isNaN(date.getTime())) return new Date(NaN);
    var timestamp = date.getTime();
    var time = 0;
    var offset;
    if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) return new Date(NaN);
    }
    if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) return new Date(NaN);
    } else {
        var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone
        // but we need it to be parsed in our timezone
        // so we use utc values to build date in our timezone.
        // Year values from 0 to 99 map to the years 1900 to 1999
        // so set year explicitly with setFullYear.
        var result = new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
    }
    return new Date(timestamp + time + offset);
}
exports.default = parseISO;
var patterns = {
    dateTimeDelimiter: /[T ]/,
    timeZoneDelimiter: /[Z ]/i,
    timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
    var dateStrings = {
    };
    var array = dateString.split(patterns.dateTimeDelimiter);
    var timeString; // The regex match should only return at maximum two array elements.
    // [date], [time], or [date, time].
    if (array.length > 2) return dateStrings;
    if (/:/.test(array[0])) timeString = array[0];
    else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
            dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
            timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
    }
    if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
            dateStrings.time = timeString.replace(token[1], '');
            dateStrings.timezone = token[1];
        } else dateStrings.time = timeString;
    }
    return dateStrings;
}
function parseYear(dateString, additionalDigits) {
    var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
    var captures = dateString.match(regex); // Invalid ISO-formatted year
    if (!captures) return {
        year: NaN,
        restDateString: ''
    };
    var year = captures[1] ? parseInt(captures[1]) : null;
    var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both
    return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
    };
}
function parseDate(dateString, year) {
    // Invalid ISO-formatted year
    if (year === null) return new Date(NaN);
    var captures = dateString.match(dateRegex); // Invalid ISO-formatted string
    if (!captures) return new Date(NaN);
    var isWeekDate = !!captures[4];
    var dayOfYear = parseDateUnit(captures[1]);
    var month = parseDateUnit(captures[2]) - 1;
    var day = parseDateUnit(captures[3]);
    var week = parseDateUnit(captures[4]);
    var dayOfWeek = parseDateUnit(captures[5]) - 1;
    if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) return new Date(NaN);
        return dayOfISOWeekYear(year, week, dayOfWeek);
    } else {
        var date = new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) return new Date(NaN);
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
    }
}
function parseDateUnit(value) {
    return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
    var captures = timeString.match(timeRegex);
    if (!captures) return NaN; // Invalid ISO-formatted time
    var hours = parseTimeUnit(captures[1]);
    var minutes = parseTimeUnit(captures[2]);
    var seconds = parseTimeUnit(captures[3]);
    if (!validateTime(hours, minutes, seconds)) return NaN;
    return hours * _indexJs.millisecondsInHour + minutes * _indexJs.millisecondsInMinute + seconds * 1000;
}
function parseTimeUnit(value) {
    return value && parseFloat(value.replace(',', '.')) || 0;
}
function parseTimezone(timezoneString) {
    if (timezoneString === 'Z') return 0;
    var captures = timezoneString.match(timezoneRegex);
    if (!captures) return 0;
    var sign = captures[1] === '+' ? -1 : 1;
    var hours = parseInt(captures[2]);
    var minutes = captures[3] && parseInt(captures[3]) || 0;
    if (!validateTimezone(hours, minutes)) return NaN;
    return sign * (hours * _indexJs.millisecondsInHour + minutes * _indexJs.millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
    var date = new Date(0);
    date.setUTCFullYear(isoWeekYear, 0, 4);
    var fourthOfJanuaryDay = date.getUTCDay() || 7;
    var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
} // Validation functions
// February is null to handle the leap year (using ||)
var daysInMonths = [
    31,
    null,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
    return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
    return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
    return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
    if (hours === 24) return minutes === 0 && seconds === 0;
    return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
    return minutes >= 0 && minutes <= 59;
}

},{"../constants/index.js":"4PTGR","../_lib/requiredArgs/index.js":"1Nemu","../_lib/toInteger/index.js":"att0s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4PTGR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "daysInWeek", function() {
    return daysInWeek;
});
parcelHelpers.export(exports, "maxTime", function() {
    return maxTime;
});
parcelHelpers.export(exports, "millisecondsInMinute", function() {
    return millisecondsInMinute;
});
parcelHelpers.export(exports, "millisecondsInHour", function() {
    return millisecondsInHour;
});
parcelHelpers.export(exports, "millisecondsInSecond", function() {
    return millisecondsInSecond;
});
parcelHelpers.export(exports, "minTime", function() {
    return minTime;
});
parcelHelpers.export(exports, "minutesInHour", function() {
    return minutesInHour;
});
parcelHelpers.export(exports, "monthsInQuarter", function() {
    return monthsInQuarter;
});
parcelHelpers.export(exports, "monthsInYear", function() {
    return monthsInYear;
});
parcelHelpers.export(exports, "quartersInYear", function() {
    return quartersInYear;
});
parcelHelpers.export(exports, "secondsInHour", function() {
    return secondsInHour;
});
parcelHelpers.export(exports, "secondsInMinute", function() {
    return secondsInMinute;
});
var daysInWeek = 7;
var maxTime = Math.pow(10, 8) * 86400000;
var millisecondsInMinute = 60000;
var millisecondsInHour = 3600000;
var millisecondsInSecond = 1000;
var minTime = -maxTime;
var minutesInHour = 60;
var monthsInQuarter = 3;
var monthsInYear = 12;
var quartersInYear = 4;
var secondsInHour = 3600;
var secondsInMinute = 60;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cxhWW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IGNORE_CLASS_NAME", function() {
    return IGNORE_CLASS_NAME;
});
var _react = require("react");
var _reactDom = require("react-dom");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
} /**
 * Check whether some DOM node is our Component's node.
 */ 
function isNodeFound(current, componentNode, ignoreClass) {
    if (current === componentNode) return true;
     // SVG <use/> elements do not technically reside in the rendered DOM, so
    // they do not have classList directly, but they offer a link to their
    // corresponding element, which can have classList. This extra check is for
    // that case.
    // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
    // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17
    if (current.correspondingElement) return current.correspondingElement.classList.contains(ignoreClass);
    return current.classList.contains(ignoreClass);
}
/**
 * Try to find our node in a hierarchy of nodes, returning the document
 * node as highest node if our node is not found in the path up.
 */ function findHighest(current, componentNode, ignoreClass) {
    if (current === componentNode) return true;
     // If source=local then this event came from 'somewhere'
    // inside and should be ignored. We could handle this with
    // a layered approach, too, but that requires going back to
    // thinking in terms of Dom node nesting, running counter
    // to React's 'you shouldn't care about the DOM' philosophy.
    // Also cover shadowRoot node by checking current.host
    while(current.parentNode || current.host){
        // Only check normal node without shadowRoot
        if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) return true;
        current = current.parentNode || current.host;
    }
    return current;
}
/**
 * Check if the browser scrollbar was clicked
 */ function clickedScrollbar(evt) {
    return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
} // ideally will get replaced with external dep
// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in
var testPassiveEventSupport = function testPassiveEventSupport() {
    if (typeof window === 'undefined' || typeof window.addEventListener !== 'function') return;
    var passive = false;
    var options = Object.defineProperty({
    }, 'passive', {
        get: function get() {
            passive = true;
        }
    });
    var noop = function noop() {
    };
    window.addEventListener('testPassiveEventSupport', noop, options);
    window.removeEventListener('testPassiveEventSupport', noop, options);
    return passive;
};
function autoInc(seed) {
    if (seed === void 0) seed = 0;
    return function() {
        return ++seed;
    };
}
var uid = autoInc();
var passiveEventSupport;
var handlersMap = {
};
var enabledInstances = {
};
var touchEvents = [
    'touchstart',
    'touchmove'
];
var IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';
/**
 * Options for addEventHandler and removeEventHandler
 */ function getEventHandlerOptions(instance, eventName) {
    var handlerOptions = null;
    var isTouchEvent = touchEvents.indexOf(eventName) !== -1;
    if (isTouchEvent && passiveEventSupport) handlerOptions = {
        passive: !instance.props.preventDefault
    };
    return handlerOptions;
}
/**
 * This function generates the HOC function that you'll use
 * in order to impart onOutsideClick listening to an
 * arbitrary component. It gets called at the end of the
 * bootstrapping code to yield an instance of the
 * onClickOutsideHOC function defined inside setupHOC().
 */ function onClickOutsideHOC(WrappedComponent, config) {
    var _class, _temp;
    var componentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    return _temp = _class = /*#__PURE__*/ (function(_Component) {
        _inheritsLoose(onClickOutside, _Component);
        function onClickOutside(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.__outsideClickHandler = function(event) {
                if (typeof _this.__clickOutsideHandlerProp === 'function') {
                    _this.__clickOutsideHandlerProp(event);
                    return;
                }
                var instance = _this.getInstance();
                if (typeof instance.props.handleClickOutside === 'function') {
                    instance.props.handleClickOutside(event);
                    return;
                }
                if (typeof instance.handleClickOutside === 'function') {
                    instance.handleClickOutside(event);
                    return;
                }
                throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
            };
            _this.__getComponentNode = function() {
                var instance = _this.getInstance();
                if (config && typeof config.setClickOutsideRef === 'function') return config.setClickOutsideRef()(instance);
                if (typeof instance.setClickOutsideRef === 'function') return instance.setClickOutsideRef();
                return _reactDom.findDOMNode(instance);
            };
            _this.enableOnClickOutside = function() {
                if (typeof document === 'undefined' || enabledInstances[_this._uid]) return;
                if (typeof passiveEventSupport === 'undefined') passiveEventSupport = testPassiveEventSupport();
                enabledInstances[_this._uid] = true;
                var events = _this.props.eventTypes;
                if (!events.forEach) events = [
                    events
                ];
                handlersMap[_this._uid] = function(event) {
                    if (_this.componentNode === null) return;
                    if (_this.props.preventDefault) event.preventDefault();
                    if (_this.props.stopPropagation) event.stopPropagation();
                    if (_this.props.excludeScrollbar && clickedScrollbar(event)) return;
                    var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;
                    if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) return;
                    _this.__outsideClickHandler(event);
                };
                events.forEach(function(eventName) {
                    document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));
                });
            };
            _this.disableOnClickOutside = function() {
                delete enabledInstances[_this._uid];
                var fn = handlersMap[_this._uid];
                if (fn && typeof document !== 'undefined') {
                    var events = _this.props.eventTypes;
                    if (!events.forEach) events = [
                        events
                    ];
                    events.forEach(function(eventName) {
                        return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized(_this), eventName));
                    });
                    delete handlersMap[_this._uid];
                }
            };
            _this.getRef = function(ref) {
                return _this.instanceRef = ref;
            };
            _this._uid = uid();
            return _this;
        }
        /**
     * Access the WrappedComponent's instance.
     */ var _proto = onClickOutside.prototype;
        _proto.getInstance = function getInstance() {
            if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) return this;
            var ref = this.instanceRef;
            return ref.getInstance ? ref.getInstance() : ref;
        };
        /**
     * Add click listeners to the current document,
     * linked to this component's state.
     */ _proto.componentDidMount = function componentDidMount() {
            // If we are in an environment without a DOM such
            // as shallow rendering or snapshots then we exit
            // early to prevent any unhandled errors being thrown.
            if (typeof document === 'undefined' || !document.createElement) return;
            var instance = this.getInstance();
            if (config && typeof config.handleClickOutside === 'function') {
                this.__clickOutsideHandlerProp = config.handleClickOutside(instance);
                if (typeof this.__clickOutsideHandlerProp !== 'function') throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
            }
            this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside
            if (this.props.disableOnClickOutside) return;
            this.enableOnClickOutside();
        };
        _proto.componentDidUpdate = function componentDidUpdate() {
            this.componentNode = this.__getComponentNode();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.disableOnClickOutside();
        };
        /**
     * Pass-through render
     */ _proto.render = function render() {
            // eslint-disable-next-line no-unused-vars
            var _this$props = this.props;
            _this$props.excludeScrollbar;
            var props = _objectWithoutPropertiesLoose(_this$props, [
                "excludeScrollbar"
            ]);
            if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) props.ref = this.getRef;
            else props.wrappedRef = this.getRef;
            props.disableOnClickOutside = this.disableOnClickOutside;
            props.enableOnClickOutside = this.enableOnClickOutside;
            return _react.createElement(WrappedComponent, props);
        };
        return onClickOutside;
    })(_react.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
        eventTypes: [
            'mousedown',
            'touchstart'
        ],
        excludeScrollbar: config && config.excludeScrollbar || false,
        outsideClickIgnoreClass: IGNORE_CLASS_NAME,
        preventDefault: false,
        stopPropagation: false
    }, _class.getClass = function() {
        return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
    }, _temp;
}
exports.default = onClickOutsideHOC;

},{"react":"kEcQC","react-dom":"6cUDX","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eOkXa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popper", function() {
    return _popper.Popper;
}) // Public types
;
parcelHelpers.export(exports, "Manager", function() {
    return _manager.Manager;
});
parcelHelpers.export(exports, "Reference", function() {
    return _reference.Reference;
});
parcelHelpers.export(exports, "usePopper", function() {
    return _usePopper.usePopper;
});
// Public components
var _popper = require("./Popper");
var _manager = require("./Manager");
var _reference = require("./Reference");
var _usePopper = require("./usePopper");

},{"./Popper":"d1r2I","./Manager":"9r3ke","./Reference":"65VrR","./usePopper":"N0O4s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"d1r2I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popper", function() {
    return Popper;
});
var _react = require("react");
var _manager = require("./Manager");
var _utils = require("./utils");
var _usePopper = require("./usePopper");
var NOOP = function NOOP() {
    return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE() {
    return Promise.resolve(null);
};
var EMPTY_MODIFIERS = [];
function Popper(_ref) {
    var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? 'bottom' : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? 'absolute' : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
    var referenceNode = _react.useContext(_manager.ManagerReferenceNodeContext);
    var _React$useState = _react.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
    var _React$useState2 = _react.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
    _react.useEffect(function() {
        _utils.setRef(innerRef, popperElement);
    }, [
        innerRef,
        popperElement
    ]);
    var options = _react.useMemo(function() {
        return {
            placement: placement,
            strategy: strategy,
            onFirstUpdate: onFirstUpdate,
            modifiers: [].concat(modifiers, [
                {
                    name: 'arrow',
                    enabled: arrowElement != null,
                    options: {
                        element: arrowElement
                    }
                }
            ])
        };
    }, [
        placement,
        strategy,
        onFirstUpdate,
        modifiers,
        arrowElement
    ]);
    var _usePopper1 = _usePopper.usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper1.state, styles = _usePopper1.styles, forceUpdate = _usePopper1.forceUpdate, update = _usePopper1.update;
    var childrenProps = _react.useMemo(function() {
        return {
            ref: setPopperElement,
            style: styles.popper,
            placement: state ? state.placement : placement,
            hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
            isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
            arrowProps: {
                style: styles.arrow,
                ref: setArrowElement
            },
            forceUpdate: forceUpdate || NOOP,
            update: update || NOOP_PROMISE
        };
    }, [
        setPopperElement,
        setArrowElement,
        placement,
        state,
        styles,
        update,
        forceUpdate
    ]);
    return _utils.unwrapArray(children)(childrenProps);
}

},{"react":"kEcQC","./Manager":"9r3ke","./utils":"gu8BJ","./usePopper":"N0O4s","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9r3ke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ManagerReferenceNodeContext", function() {
    return ManagerReferenceNodeContext;
});
parcelHelpers.export(exports, "ManagerReferenceNodeSetterContext", function() {
    return ManagerReferenceNodeSetterContext;
});
parcelHelpers.export(exports, "Manager", function() {
    return Manager;
});
var _react = require("react");
var ManagerReferenceNodeContext = _react.createContext();
var ManagerReferenceNodeSetterContext = _react.createContext();
function Manager(_ref) {
    var children = _ref.children;
    var _React$useState = _react.useState(null), referenceNode = _React$useState[0], setReferenceNode = _React$useState[1];
    var hasUnmounted = _react.useRef(false);
    _react.useEffect(function() {
        return function() {
            hasUnmounted.current = true;
        };
    }, []);
    var handleSetReferenceNode = _react.useCallback(function(node) {
        if (!hasUnmounted.current) setReferenceNode(node);
    }, []);
    return(/*#__PURE__*/ _react.createElement(ManagerReferenceNodeContext.Provider, {
        value: referenceNode
    }, /*#__PURE__*/ _react.createElement(ManagerReferenceNodeSetterContext.Provider, {
        value: handleSetReferenceNode
    }, children)));
}

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gu8BJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unwrapArray", function() {
    return unwrapArray;
});
parcelHelpers.export(exports, "safeInvoke", function() {
    return safeInvoke;
});
parcelHelpers.export(exports, "setRef", function() {
    return setRef;
});
parcelHelpers.export(exports, "fromEntries", function() {
    return fromEntries;
});
parcelHelpers.export(exports, "useIsomorphicLayoutEffect", function() {
    return useIsomorphicLayoutEffect;
});
var _react = require("react");
var unwrapArray = function unwrapArray(arg) {
    return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke(fn) {
    if (typeof fn === 'function') {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return fn.apply(void 0, args);
    }
};
var setRef = function setRef(ref, node) {
    // if its a function call it
    if (typeof ref === 'function') return safeInvoke(ref, node);
    else if (ref != null) ref.current = node;
};
var fromEntries = function fromEntries(entries) {
    return entries.reduce(function(acc, _ref) {
        var key = _ref[0], value = _ref[1];
        acc[key] = value;
        return acc;
    }, {
    });
};
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? _react.useLayoutEffect : _react.useEffect;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"N0O4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePopper", function() {
    return usePopper;
});
var _react = require("react");
var _core = require("@popperjs/core");
var _reactFastCompare = require("react-fast-compare");
var _reactFastCompareDefault = parcelHelpers.interopDefault(_reactFastCompare);
var _utils = require("./utils");
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper(referenceElement, popperElement, options) {
    if (options === void 0) options = {
    };
    var prevOptions = _react.useRef(null);
    var optionsWithDefaults = {
        onFirstUpdate: options.onFirstUpdate,
        placement: options.placement || 'bottom',
        strategy: options.strategy || 'absolute',
        modifiers: options.modifiers || EMPTY_MODIFIERS
    };
    var _React$useState = _react.useState({
        styles: {
            popper: {
                position: optionsWithDefaults.strategy,
                left: '0',
                top: '0'
            },
            arrow: {
                position: 'absolute'
            }
        },
        attributes: {
        }
    }), state1 = _React$useState[0], setState = _React$useState[1];
    var updateStateModifier = _react.useMemo(function() {
        return {
            name: 'updateState',
            enabled: true,
            phase: 'write',
            fn: function fn(_ref) {
                var state = _ref.state;
                var elements = Object.keys(state.elements);
                setState({
                    styles: _utils.fromEntries(elements.map(function(element) {
                        return [
                            element,
                            state.styles[element] || {
                            }
                        ];
                    })),
                    attributes: _utils.fromEntries(elements.map(function(element) {
                        return [
                            element,
                            state.attributes[element]
                        ];
                    }))
                });
            },
            requires: [
                'computeStyles'
            ]
        };
    }, []);
    var popperOptions = _react.useMemo(function() {
        var newOptions = {
            onFirstUpdate: optionsWithDefaults.onFirstUpdate,
            placement: optionsWithDefaults.placement,
            strategy: optionsWithDefaults.strategy,
            modifiers: [].concat(optionsWithDefaults.modifiers, [
                updateStateModifier,
                {
                    name: 'applyStyles',
                    enabled: false
                }
            ])
        };
        if (_reactFastCompareDefault.default(prevOptions.current, newOptions)) return prevOptions.current || newOptions;
        else {
            prevOptions.current = newOptions;
            return newOptions;
        }
    }, [
        optionsWithDefaults.onFirstUpdate,
        optionsWithDefaults.placement,
        optionsWithDefaults.strategy,
        optionsWithDefaults.modifiers,
        updateStateModifier
    ]);
    var popperInstanceRef = _react.useRef();
    _utils.useIsomorphicLayoutEffect(function() {
        if (popperInstanceRef.current) popperInstanceRef.current.setOptions(popperOptions);
    }, [
        popperOptions
    ]);
    _utils.useIsomorphicLayoutEffect(function() {
        if (referenceElement == null || popperElement == null) return;
        var createPopper = options.createPopper || _core.createPopper;
        var popperInstance = createPopper(referenceElement, popperElement, popperOptions);
        popperInstanceRef.current = popperInstance;
        return function() {
            popperInstance.destroy();
            popperInstanceRef.current = null;
        };
    }, [
        referenceElement,
        popperElement,
        options.createPopper
    ]);
    return {
        state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
        styles: state1.styles,
        attributes: state1.attributes,
        update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
        forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
};

},{"react":"kEcQC","@popperjs/core":"kkNfP","react-fast-compare":"1sBmz","./utils":"gu8BJ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kkNfP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", function() {
    return _createPopperJs.popperGenerator;
}) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", function() {
    return _createPopperJs.detectOverflow;
});
parcelHelpers.export(exports, "createPopperBase", function() {
    return _createPopperJs.createPopper;
});
parcelHelpers.export(exports, "createPopper", function() {
    return _popperJs.createPopper;
}) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", function() {
    return _popperLiteJs.createPopper;
});
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"ljL5U","./modifiers/index.js":"eweDv","./createPopper.js":"3KZpY","./popper.js":"49jp2","./popper-lite.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ljL5U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", function() {
    return top;
});
parcelHelpers.export(exports, "bottom", function() {
    return bottom;
});
parcelHelpers.export(exports, "right", function() {
    return right;
});
parcelHelpers.export(exports, "left", function() {
    return left;
});
parcelHelpers.export(exports, "auto", function() {
    return auto;
});
parcelHelpers.export(exports, "basePlacements", function() {
    return basePlacements;
});
parcelHelpers.export(exports, "start", function() {
    return start;
});
parcelHelpers.export(exports, "end", function() {
    return end;
});
parcelHelpers.export(exports, "clippingParents", function() {
    return clippingParents;
});
parcelHelpers.export(exports, "viewport", function() {
    return viewport;
});
parcelHelpers.export(exports, "popper", function() {
    return popper;
});
parcelHelpers.export(exports, "reference", function() {
    return reference;
});
parcelHelpers.export(exports, "variationPlacements", function() {
    return variationPlacements;
});
parcelHelpers.export(exports, "placements", function() {
    return placements;
});
parcelHelpers.export(exports, "beforeRead", function() {
    return beforeRead;
});
parcelHelpers.export(exports, "read", function() {
    return read;
});
parcelHelpers.export(exports, "afterRead", function() {
    return afterRead;
});
parcelHelpers.export(exports, "beforeMain", function() {
    return beforeMain;
});
parcelHelpers.export(exports, "main", function() {
    return main;
});
parcelHelpers.export(exports, "afterMain", function() {
    return afterMain;
});
parcelHelpers.export(exports, "beforeWrite", function() {
    return beforeWrite;
});
parcelHelpers.export(exports, "write", function() {
    return write;
});
parcelHelpers.export(exports, "afterWrite", function() {
    return afterWrite;
});
parcelHelpers.export(exports, "modifierPhases", function() {
    return modifierPhases;
});
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eweDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", function() {
    return _applyStylesJsDefault.default;
});
parcelHelpers.export(exports, "arrow", function() {
    return _arrowJsDefault.default;
});
parcelHelpers.export(exports, "computeStyles", function() {
    return _computeStylesJsDefault.default;
});
parcelHelpers.export(exports, "eventListeners", function() {
    return _eventListenersJsDefault.default;
});
parcelHelpers.export(exports, "flip", function() {
    return _flipJsDefault.default;
});
parcelHelpers.export(exports, "hide", function() {
    return _hideJsDefault.default;
});
parcelHelpers.export(exports, "offset", function() {
    return _offsetJsDefault.default;
});
parcelHelpers.export(exports, "popperOffsets", function() {
    return _popperOffsetsJsDefault.default;
});
parcelHelpers.export(exports, "preventOverflow", function() {
    return _preventOverflowJsDefault.default;
});
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"ajNDs","./arrow.js":"e1kro","./computeStyles.js":"58avQ","./eventListeners.js":"1h0yu","./flip.js":"gjQvC","./hide.js":"53QuR","./offset.js":"89R3d","./popperOffsets.js":"7HTII","./preventOverflow.js":"9cbio","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ajNDs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name1) {
        var style = state.styles[name1] || {
        };
        var attributes = state.attributes[name1] || {
        };
        var element = state.elements[name1]; // arrow is optional + virtual elements
        if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {
        }
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {
            };
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style1 = styleProperties.reduce(function(style, property) {
                style[property] = '';
                return style;
            }, {
            }); // arrow is optional + virtual elements
            if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
            Object.assign(element.style, style1);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"gvTIK","../dom-utils/instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gvTIK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2VHQb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", function() {
    return isElement;
});
parcelHelpers.export(exports, "isHTMLElement", function() {
    return isHTMLElement;
});
parcelHelpers.export(exports, "isShadowRoot", function() {
    return isShadowRoot;
});
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"3niTG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3niTG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
exports.default = getWindow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e1kro":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : padding;
    return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var isVertical = [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
    var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
    var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = _withinJs.within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"hHW3k","../dom-utils/getLayoutRect.js":"64Nai","../dom-utils/contains.js":"4gBQi","../dom-utils/getOffsetParent.js":"37zJh","../utils/getMainAxisFromPlacement.js":"3lj9u","../utils/within.js":"c44Vi","../utils/mergePaddingObject.js":"i7Wsu","../utils/expandToHashMap.js":"vaW88","../enums.js":"ljL5U","../dom-utils/instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hHW3k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
exports.default = getBasePlacement;

},{"../enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"64Nai":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
exports.default = getLayoutRect;

},{"./getBoundingClientRect.js":"e6EB3","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e6EB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) includeScale = false;
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (_instanceOfJs.isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`
        if (offsetWidth > 0) scaleX = _mathJs.round(rect.width) / offsetWidth || 1;
        if (offsetHeight > 0) scaleY = _mathJs.round(rect.height) / offsetHeight || 1;
    }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
exports.default = getBoundingClientRect;

},{"./instanceOf.js":"2VHQb","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i2E65":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", function() {
    return max;
});
parcelHelpers.export(exports, "min", function() {
    return min;
});
parcelHelpers.export(exports, "round", function() {
    return round;
});
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4gBQi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
exports.default = contains;

},{"./instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"37zJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
function getTrueOffsetParent(element) {
    if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;
    if (isIE && _instanceOfJs.isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = _getComputedStyleJsDefault.default(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = _getParentNodeJsDefault.default(element);
    while(_instanceOfJs.isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
        var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = _getWindowJsDefault.default(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},{"./getWindow.js":"3niTG","./getNodeName.js":"gvTIK","./getComputedStyle.js":"1yZEK","./instanceOf.js":"2VHQb","./isTableElement.js":"6IiL0","./getParentNode.js":"4b2df","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1yZEK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return _getWindowJsDefault.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},{"./getWindow.js":"3niTG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6IiL0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
}
exports.default = isTableElement;

},{"./getNodeName.js":"gvTIK","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4b2df":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if (_getNodeNameJsDefault.default(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    _getDocumentElementJsDefault.default(element) // fallback
    );
}
exports.default = getParentNode;

},{"./getNodeName.js":"gvTIK","./getDocumentElement.js":"lBiA9","./instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lBiA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},{"./instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3lj9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"c44Vi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", function() {
    return within;
});
parcelHelpers.export(exports, "withinMaxClamp", function() {
    return withinMaxClamp;
});
var _mathJs = require("./math.js");
function within(min, value, max) {
    return _mathJs.max(min, _mathJs.min(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i7Wsu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({
    }, _getFreshSideObjectJsDefault.default(), paddingObject);
}
exports.default = mergePaddingObject;

},{"./getFreshSideObject.js":"7pyD2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7pyD2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
exports.default = getFreshSideObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"vaW88":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
exports.default = expandToHashMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"58avQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", function() {
    return mapToStyles;
});
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: _mathJs.round(x * dpr) / dpr || 0,
        y: _mathJs.round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = _enumsJs.left;
    var sideY = _enumsJs.top;
    var win = window;
    if (adaptive) {
        var offsetParent = _getOffsetParentJsDefault.default(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === _getWindowJsDefault.default(popper)) {
            offsetParent = _getDocumentElementJsDefault.default(popper);
            if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
            sideY = _enumsJs.bottom;
            var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
            sideX = _enumsJs.right;
            var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({
        }, commonStyles, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({
    }, commonStyles, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: _getBasePlacementJsDefault.default(state.placement),
        variation: _getVariationJsDefault.default(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
    }, state.styles.popper, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
    }, state.styles.arrow, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {
    }
};

},{"../enums.js":"ljL5U","../dom-utils/getOffsetParent.js":"37zJh","../dom-utils/getWindow.js":"3niTG","../dom-utils/getDocumentElement.js":"lBiA9","../dom-utils/getComputedStyle.js":"1yZEK","../utils/getBasePlacement.js":"hHW3k","../utils/getVariation.js":"j4IRJ","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j4IRJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getVariation(placement) {
    return placement.split('-')[1];
}
exports.default = getVariation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1h0yu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = _getWindowJsDefault.default(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {
    },
    effect: effect,
    data: {
    }
};

},{"../dom-utils/getWindow.js":"3niTG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gjQvC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
    var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
    return [
        _getOppositeVariationPlacementJsDefault.default(placement),
        oppositePlacement,
        _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        _getOppositePlacementJsDefault.default(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement1 = placements[i];
        var _basePlacement = _getBasePlacementJsDefault.default(placement1);
        var isStartVariation = _getVariationJsDefault.default(placement1) === _enumsJs.start;
        var isVertical = [
            _enumsJs.top,
            _enumsJs.bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = _detectOverflowJsDefault.default(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement1;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement1, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i1 = numberOfChecks; _i1 > 0; _i1--){
            var _ret = _loop(_i1);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"eFCQt","../utils/getBasePlacement.js":"hHW3k","../utils/getOppositeVariationPlacement.js":"1RtV9","../utils/detectOverflow.js":"lkc8k","../utils/computeAutoPlacement.js":"jvIrf","../enums.js":"ljL5U","../utils/getVariation.js":"j4IRJ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eFCQt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositePlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1RtV9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositeVariationPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lkc8k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
    var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
    var popperOffsets = _computeOffsetsJsDefault.default({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({
    }, popperRect, popperOffsets));
    var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === _enumsJs.popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                _enumsJs.right,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                _enumsJs.top,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
exports.default = detectOverflow;

},{"../dom-utils/getClippingRect.js":"hQgou","../dom-utils/getDocumentElement.js":"lBiA9","../dom-utils/getBoundingClientRect.js":"e6EB3","./computeOffsets.js":"bfxiT","./rectToClientRect.js":"gBBwt","../enums.js":"ljL5U","../dom-utils/instanceOf.js":"2VHQb","./mergePaddingObject.js":"i7Wsu","./expandToHashMap.js":"vaW88","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hQgou":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element) {
    var rect = _getBoundingClientRectJsDefault.default(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element)) : _instanceOfJs.isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
    var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
    if (!_instanceOfJs.isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = _mathJs.max(rect.top, accRect.top);
        accRect.right = _mathJs.min(rect.right, accRect.right);
        accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
        accRect.left = _mathJs.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
exports.default = getClippingRect;

},{"../enums.js":"ljL5U","./getViewportRect.js":"cZfBj","./getDocumentRect.js":"5JPQS","./listScrollParents.js":"6M8Q3","./getOffsetParent.js":"37zJh","./getDocumentElement.js":"lBiA9","./getComputedStyle.js":"1yZEK","./instanceOf.js":"2VHQb","./getBoundingClientRect.js":"e6EB3","./getParentNode.js":"4b2df","./contains.js":"4gBQi","./getNodeName.js":"gvTIK","../utils/rectToClientRect.js":"gBBwt","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cZfBj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
function getViewportRect(element) {
    var win = _getWindowJsDefault.default(element);
    var html = _getDocumentElementJsDefault.default(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + _getWindowScrollBarXJsDefault.default(element),
        y: y
    };
}
exports.default = getViewportRect;

},{"./getWindow.js":"3niTG","./getDocumentElement.js":"lBiA9","./getWindowScrollBarX.js":"7fNh9","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7fNh9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},{"./getBoundingClientRect.js":"e6EB3","./getDocumentElement.js":"lBiA9","./getWindowScroll.js":"iyvVF","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iyvVF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = _getWindowJsDefault.default(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
exports.default = getWindowScroll;

},{"./getWindow.js":"3niTG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5JPQS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = _getDocumentElementJsDefault.default(element);
    var winScroll = _getWindowScrollJsDefault.default(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
    var y = -winScroll.scrollTop;
    if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
exports.default = getDocumentRect;

},{"./getDocumentElement.js":"lBiA9","./getComputedStyle.js":"1yZEK","./getWindowScrollBarX.js":"7fNh9","./getWindowScroll.js":"iyvVF","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6M8Q3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = _getScrollParentJsDefault.default(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = _getWindowJsDefault.default(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
}
exports.default = listScrollParents;

},{"./getScrollParent.js":"iatJ4","./getParentNode.js":"4b2df","./getWindow.js":"3niTG","./isScrollParent.js":"h9loM","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iatJ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
    return getScrollParent(_getParentNodeJsDefault.default(node));
}
exports.default = getScrollParent;

},{"./getParentNode.js":"4b2df","./isScrollParent.js":"h9loM","./getNodeName.js":"gvTIK","./instanceOf.js":"2VHQb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h9loM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},{"./getComputedStyle.js":"1yZEK","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gBBwt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function rectToClientRect(rect) {
    return Object.assign({
    }, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
exports.default = rectToClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bfxiT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
    var variation = placement ? _getVariationJsDefault.default(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
exports.default = computeOffsets;

},{"./getBasePlacement.js":"hHW3k","./getVariation.js":"j4IRJ","./getMainAxisFromPlacement.js":"3lj9u","../enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jvIrf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement1 = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
    var variation = _getVariationJsDefault.default(placement1);
    var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement) {
        return _getVariationJsDefault.default(placement) === variation;
    }) : _enumsJs.basePlacements;
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = _detectOverflowJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[_getBasePlacementJsDefault.default(placement)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
exports.default = computeAutoPlacement;

},{"./getVariation.js":"j4IRJ","../enums.js":"ljL5U","./detectOverflow.js":"lkc8k","./getBasePlacement.js":"hHW3k","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"53QuR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        _enumsJs.top,
        _enumsJs.right,
        _enumsJs.bottom,
        _enumsJs.left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = _detectOverflowJsDefault.default(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = _detectOverflowJsDefault.default(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"ljL5U","../utils/detectOverflow.js":"lkc8k","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"89R3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", function() {
    return distanceAndSkiddingToXY;
});
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset1) {
    var basePlacement = _getBasePlacementJsDefault.default(placement);
    var invertDistance = [
        _enumsJs.left,
        _enumsJs.top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset1 === 'function' ? offset1(Object.assign({
    }, rects, {
        placement: placement
    })) : offset1, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = _enumsJs.placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"hHW3k","../enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7HTII":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = _computeOffsetsJsDefault.default({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {
    }
};

},{"../utils/computeOffsets.js":"bfxiT","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9cbio":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = _detectOverflowJsDefault.default(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var variation = _getVariationJsDefault.default(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var altAxis = _getAltAxisJsDefault.default(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
        var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = _withinJs.within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = _withinJs.within(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
        var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            _enumsJs.top,
            _enumsJs.left
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? _withinJs.withinMaxClamp(_tetherMin, _offset, _tetherMax) : _withinJs.within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"ljL5U","../utils/getBasePlacement.js":"hHW3k","../utils/getMainAxisFromPlacement.js":"3lj9u","../utils/getAltAxis.js":"6p88K","../utils/within.js":"c44Vi","../dom-utils/getLayoutRect.js":"64Nai","../dom-utils/getOffsetParent.js":"37zJh","../utils/detectOverflow.js":"lkc8k","../utils/getVariation.js":"j4IRJ","../utils/getFreshSideObject.js":"7pyD2","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6p88K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3KZpY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", function() {
    return popperGenerator;
});
parcelHelpers.export(exports, "createPopper", function() {
    return createPopper;
});
parcelHelpers.export(exports, "detectOverflow", function() {
    return _detectOverflowJsDefault.default;
});
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _validateModifiersJs = require("./utils/validateModifiers.js");
var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
var _uniqueByJs = require("./utils/uniqueBy.js");
var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
var _getBasePlacementJs = require("./utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var _enumsJs = require("./enums.js");
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference1, popper1, options1) {
        if (options1 === void 0) options1 = defaultOptions;
        var state1 = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({
            }, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference1,
                popper: popper1
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state1,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state1.options) : setOptionsAction;
                cleanupModifierEffects();
                state1.options = Object.assign({
                }, defaultOptions, state1.options, options);
                state1.scrollParents = {
                    reference: _instanceOfJs.isElement(reference1) ? _listScrollParentsJsDefault.default(reference1) : reference1.contextElement ? _listScrollParentsJsDefault.default(reference1.contextElement) : [],
                    popper: _listScrollParentsJsDefault.default(popper1)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state1.options.modifiers))); // Strip out disabled modifiers
                state1.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state1.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                _validateModifiersJsDefault.default(modifiers);
                if (_getBasePlacementJsDefault.default(state1.options.placement) === _enumsJs.auto) {
                    var flipModifier = state1.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = _getComputedStyleJsDefault.default(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state1.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state1.rects = {
                    reference: _getCompositeRectJsDefault.default(reference, _getOffsetParentJsDefault.default(popper), state1.options.strategy === 'fixed'),
                    popper: _getLayoutRectJsDefault.default(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state1.reset = false;
                state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state1.orderedModifiers.forEach(function(modifier) {
                    return state1.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state1.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state1.reset === true) {
                        state1.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state1.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state1 = fn({
                        state: state1,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state1;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: _debounceJsDefault.default(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state1);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference1, popper1)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options1).then(function(state) {
            if (!isDestroyed && options1.onFirstUpdate) options1.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state1.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {
                } : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state1,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"ksiOB","./dom-utils/getLayoutRect.js":"64Nai","./dom-utils/listScrollParents.js":"6M8Q3","./dom-utils/getOffsetParent.js":"37zJh","./dom-utils/getComputedStyle.js":"1yZEK","./utils/orderModifiers.js":"cHPaE","./utils/debounce.js":"4Gkbe","./utils/validateModifiers.js":"aUsVK","./utils/uniqueBy.js":"1LGwi","./utils/getBasePlacement.js":"hHW3k","./utils/mergeByName.js":"lLlYA","./utils/detectOverflow.js":"lkc8k","./dom-utils/instanceOf.js":"2VHQb","./enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ksiOB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = _mathJs.round(rect.width) / element.offsetWidth || 1;
    var scaleY = _mathJs.round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
    var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = _getDocumentElementJsDefault.default(offsetParent);
    var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
        if (_instanceOfJs.isHTMLElement(offsetParent)) {
            offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
exports.default = getCompositeRect;

},{"./getBoundingClientRect.js":"e6EB3","./getNodeScroll.js":"a3EQR","./getNodeName.js":"gvTIK","./instanceOf.js":"2VHQb","./getWindowScrollBarX.js":"7fNh9","./getDocumentElement.js":"lBiA9","./isScrollParent.js":"h9loM","../utils/math.js":"i2E65","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a3EQR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
    else return _getHTMLElementScrollJsDefault.default(node);
}
exports.default = getNodeScroll;

},{"./getWindowScroll.js":"iyvVF","./getWindow.js":"3niTG","./instanceOf.js":"2VHQb","./getHTMLElementScroll.js":"kQJ9Q","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kQJ9Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
exports.default = getHTMLElementScroll;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cHPaE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return _enumsJs.modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
exports.default = orderModifiers;

},{"../enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4Gkbe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aUsVK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _enumsJs = require("../enums.js");
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    break;
                case 'phase':
                    if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
exports.default = validateModifiers;

},{"./format.js":"hIr3o","../enums.js":"ljL5U","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hIr3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
exports.default = format;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1LGwi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
exports.default = uniqueBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lLlYA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mergeByName(modifiers) {
    var merged1 = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({
        }, existing, current, {
            options: Object.assign({
            }, existing.options, current.options),
            data: Object.assign({
            }, existing.data, current.data)
        }) : current;
        return merged;
    }, {
    }); // IE11 does not support Object.values
    return Object.keys(merged1).map(function(key) {
        return merged1[key];
    });
}
exports.default = mergeByName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"49jp2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", function() {
    return createPopper;
}) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", function() {
    return _createPopperJs.popperGenerator;
});
parcelHelpers.export(exports, "defaultModifiers", function() {
    return defaultModifiers;
});
parcelHelpers.export(exports, "detectOverflow", function() {
    return _createPopperJs.detectOverflow;
});
parcelHelpers.export(exports, "createPopperLite", function() {
    return _popperLiteJs.createPopper;
}) // eslint-disable-next-line import/no-unused-modules
;
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    _eventListenersJsDefault.default,
    _popperOffsetsJsDefault.default,
    _computeStylesJsDefault.default,
    _applyStylesJsDefault.default,
    _offsetJsDefault.default,
    _flipJsDefault.default,
    _preventOverflowJsDefault.default,
    _arrowJsDefault.default,
    _hideJsDefault.default
];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"3KZpY","./modifiers/eventListeners.js":"1h0yu","./modifiers/popperOffsets.js":"7HTII","./modifiers/computeStyles.js":"58avQ","./modifiers/applyStyles.js":"ajNDs","./modifiers/offset.js":"89R3d","./modifiers/flip.js":"gjQvC","./modifiers/preventOverflow.js":"9cbio","./modifiers/arrow.js":"e1kro","./modifiers/hide.js":"53QuR","./popper-lite.js":false,"./modifiers/index.js":"eweDv","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1sBmz":[function(require,module,exports) {
/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;
// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js
function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.1
    if (a === b) return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!equal(i.value[1], b.get(i.value[0]))) return false;
            return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            return true;
        }
        // END: Modifications
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (a[i] !== b[i]) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; (i--) !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        // END: fast-deep-equal
        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element) return false;
        // custom handling for React/Preact
        for(i = length; (i--) !== 0;){
            if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) continue;
            // all other properties should be traversed as usual
            if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        // END: react-fast-compare
        // START: fast-deep-equal
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
module.exports = function isEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if ((error.message || '').match(/stack|recursion/i)) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn('react-fast-compare cannot handle circular refs');
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};

},{}],"65VrR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Reference", function() {
    return Reference;
});
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _manager = require("./Manager");
var _utils = require("./utils");
function Reference(_ref) {
    var children = _ref.children, innerRef = _ref.innerRef;
    var setReferenceNode = _react.useContext(_manager.ManagerReferenceNodeSetterContext);
    var refHandler = _react.useCallback(function(node) {
        _utils.setRef(innerRef, node);
        _utils.safeInvoke(setReferenceNode, node);
    }, [
        innerRef,
        setReferenceNode
    ]); // ran on unmount
    _react.useEffect(function() {
        return function() {
            return _utils.setRef(innerRef, null);
        };
    });
    _react.useEffect(function() {
        _warningDefault.default(Boolean(setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
    }, [
        setReferenceNode
    ]);
    return _utils.unwrapArray(children)({
        ref: refHandler
    });
}

},{"react":"kEcQC","warning":"eUQJb","./Manager":"9r3ke","./utils":"gu8BJ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eUQJb":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var __DEV__ = true;
var warning = function warning() {
};
if (__DEV__) {
    var printWarning = function printWarning(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for(var key = 1; key < len; key++)args[key - 1] = arguments[key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.error(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    warning = function warning(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for(var key = 2; key < len; key++)args[key - 2] = arguments[key];
        if (format === undefined) throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        if (!condition) printWarning.apply(null, [
            format
        ].concat(args));
    };
}
module.exports = warning;

},{}],"erhge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mixed", function() {
    return _mixed.create;
});
parcelHelpers.export(exports, "bool", function() {
    return _boolean.create;
});
parcelHelpers.export(exports, "boolean", function() {
    return _boolean.create;
});
parcelHelpers.export(exports, "string", function() {
    return _string.create;
});
parcelHelpers.export(exports, "number", function() {
    return _number.create;
});
parcelHelpers.export(exports, "date", function() {
    return _date.create;
});
parcelHelpers.export(exports, "object", function() {
    return _object.create;
});
parcelHelpers.export(exports, "array", function() {
    return _array.create;
});
parcelHelpers.export(exports, "ref", function() {
    return _reference.create;
});
parcelHelpers.export(exports, "lazy", function() {
    return _lazy.create;
});
parcelHelpers.export(exports, "reach", function() {
    return _reachDefault.default;
});
parcelHelpers.export(exports, "isSchema", function() {
    return _isSchemaDefault.default;
});
parcelHelpers.export(exports, "addMethod", function() {
    return addMethod;
});
parcelHelpers.export(exports, "setLocale", function() {
    return _setLocaleDefault.default;
});
parcelHelpers.export(exports, "ValidationError", function() {
    return _validationErrorDefault.default;
});
parcelHelpers.export(exports, "BaseSchema", function() {
    return _schemaDefault.default;
});
parcelHelpers.export(exports, "MixedSchema", function() {
    return _mixedDefault.default;
});
parcelHelpers.export(exports, "BooleanSchema", function() {
    return _booleanDefault.default;
});
parcelHelpers.export(exports, "StringSchema", function() {
    return _stringDefault.default;
});
parcelHelpers.export(exports, "NumberSchema", function() {
    return _numberDefault.default;
});
parcelHelpers.export(exports, "DateSchema", function() {
    return _dateDefault.default;
});
parcelHelpers.export(exports, "ObjectSchema", function() {
    return _objectDefault.default;
});
parcelHelpers.export(exports, "ArraySchema", function() {
    return _arrayDefault.default;
});
var _mixed = require("./mixed");
var _mixedDefault = parcelHelpers.interopDefault(_mixed);
var _boolean = require("./boolean");
var _booleanDefault = parcelHelpers.interopDefault(_boolean);
var _string = require("./string");
var _stringDefault = parcelHelpers.interopDefault(_string);
var _number = require("./number");
var _numberDefault = parcelHelpers.interopDefault(_number);
var _date = require("./date");
var _dateDefault = parcelHelpers.interopDefault(_date);
var _object = require("./object");
var _objectDefault = parcelHelpers.interopDefault(_object);
var _array = require("./array");
var _arrayDefault = parcelHelpers.interopDefault(_array);
var _reference = require("./Reference");
var _lazy = require("./Lazy");
var _validationError = require("./ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var _reach = require("./util/reach");
var _reachDefault = parcelHelpers.interopDefault(_reach);
var _isSchema = require("./util/isSchema");
var _isSchemaDefault = parcelHelpers.interopDefault(_isSchema);
var _setLocale = require("./setLocale");
var _setLocaleDefault = parcelHelpers.interopDefault(_setLocale);
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
function addMethod(schemaType, name, fn) {
    if (!schemaType || !_isSchemaDefault.default(schemaType.prototype)) throw new TypeError('You must provide a yup schema constructor function');
    if (typeof name !== 'string') throw new TypeError('A Method name must be provided');
    if (typeof fn !== 'function') throw new TypeError('Method function must be provided');
    schemaType.prototype[name] = fn;
}

},{"./mixed":"eRzP3","./boolean":"g8jUL","./string":"it0d2","./number":"aYaH0","./date":"cgHto","./object":"1wTcF","./array":"cdfE4","./Reference":"cJReZ","./Lazy":"a880E","./ValidationError":"grLFR","./util/reach":"aknEg","./util/isSchema":"ubtYO","./setLocale":"4z6ss","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eRzP3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
}) // XXX: this is using the Base schema so that `addMethod(mixed)` works as a base class
;
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
var Mixed = _schemaDefault.default;
exports.default = Mixed;
function create() {
    return new Mixed();
}
create.prototype = Mixed.prototype;

},{"./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cjaeG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return BaseSchema;
}) // eslint-disable-next-line @typescript-eslint/no-unused-vars
;
var _helpers = require("@swc/helpers");
// @ts-ignore
var _nanoclone = require("nanoclone");
var _nanocloneDefault = parcelHelpers.interopDefault(_nanoclone);
var _locale = require("./locale");
var _condition = require("./Condition");
var _conditionDefault = parcelHelpers.interopDefault(_condition);
var _runTests = require("./util/runTests");
var _runTestsDefault = parcelHelpers.interopDefault(_runTests);
var _createValidation = require("./util/createValidation");
var _createValidationDefault = parcelHelpers.interopDefault(_createValidation);
var _printValue = require("./util/printValue");
var _printValueDefault = parcelHelpers.interopDefault(_printValue);
var _reference = require("./Reference");
var _referenceDefault = parcelHelpers.interopDefault(_reference);
var _reach = require("./util/reach");
var _validationError = require("./ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var _referenceSet = require("./util/ReferenceSet");
var _referenceSetDefault = parcelHelpers.interopDefault(_referenceSet);
var _toArray = require("./util/toArray"); // const UNSET = 'unset' as const;
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var BaseSchema = /*#__PURE__*/ function() {
    "use strict";
    function BaseSchema(options) {
        var _this = this;
        _helpers.classCallCheck(this, BaseSchema);
        this.deps = [];
        this.tests = void 0;
        this.transforms = void 0;
        this.conditions = [];
        this._mutate = void 0;
        this._typeError = void 0;
        this._whitelist = new _referenceSetDefault.default();
        this._blacklist = new _referenceSetDefault.default();
        this.exclusiveTests = Object.create(null);
        this.spec = void 0;
        this.tests = [];
        this.transforms = [];
        this.withMutation(function() {
            _this.typeError(_locale.mixed.notType);
        });
        this.type = (options == null ? void 0 : options.type) || 'mixed';
        this.spec = _extends({
            strip: false,
            strict: false,
            abortEarly: true,
            recursive: true,
            nullable: false,
            presence: 'optional'
        }, options == null ? void 0 : options.spec);
    }
    _helpers.createClass(BaseSchema, [
        {
            key: "_type",
            get: function get() {
                return this.type;
            }
        },
        {
            key: "_typeCheck",
            value: function _typeCheck(_value) {
                return true;
            }
        },
        {
            key: "clone",
            value: function clone(spec) {
                if (this._mutate) {
                    if (spec) Object.assign(this.spec, spec);
                    return this;
                } // if the nested value is a schema we can skip cloning, since
                // they are already immutable
                var next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly
                next.type = this.type;
                next._typeError = this._typeError;
                next._whitelistError = this._whitelistError;
                next._blacklistError = this._blacklistError;
                next._whitelist = this._whitelist.clone();
                next._blacklist = this._blacklist.clone();
                next.exclusiveTests = _extends({
                }, this.exclusiveTests); // @ts-expect-error this is readonly
                next.deps = _helpers.toConsumableArray(this.deps);
                next.conditions = _helpers.toConsumableArray(this.conditions);
                next.tests = _helpers.toConsumableArray(this.tests);
                next.transforms = _helpers.toConsumableArray(this.transforms);
                next.spec = _nanocloneDefault.default(_extends({
                }, this.spec, spec));
                return next;
            }
        },
        {
            key: "label",
            value: function label1(label) {
                var next = this.clone();
                next.spec.label = label;
                return next;
            }
        },
        {
            key: "meta",
            value: function meta() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                if (args.length === 0) return this.spec.meta;
                var next = this.clone();
                next.spec.meta = Object.assign(next.spec.meta || {
                }, args[0]);
                return next;
            } // withContext<TContext extends AnyObject>(): BaseSchema<
        },
        {
            //   TCast,
            //   TContext,
            //   TOutput
            // > {
            //   return this as any;
            // }
            key: "withMutation",
            value: function withMutation(fn) {
                var before = this._mutate;
                this._mutate = true;
                var result = fn(this);
                this._mutate = before;
                return result;
            }
        },
        {
            key: "concat",
            value: function concat(schema) {
                if (!schema || schema === this) return this;
                if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError("You cannot `concat()` schema's of different types: ".concat(this.type, " and ").concat(schema.type));
                var base = this;
                var combined = schema.clone();
                var mergedSpec = _extends({
                }, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)
                //   mergedSpec.nullable = base.spec.nullable;
                // if (combined.spec.presence === UNSET)
                //   mergedSpec.presence = base.spec.presence;
                combined.spec = mergedSpec;
                combined._typeError || (combined._typeError = base._typeError);
                combined._whitelistError || (combined._whitelistError = base._whitelistError);
                combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes
                // precedence in case of conflicts)
                combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
                combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests
                combined.tests = base.tests;
                combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure
                // the deduping logic is consistent
                combined.withMutation(function(next) {
                    schema.tests.forEach(function(fn) {
                        next.test(fn.OPTIONS);
                    });
                });
                combined.transforms = _helpers.toConsumableArray(base.transforms).concat(_helpers.toConsumableArray(combined.transforms));
                return combined;
            }
        },
        {
            key: "isType",
            value: function isType(v) {
                if (this.spec.nullable && v === null) return true;
                return this._typeCheck(v);
            }
        },
        {
            key: "resolve",
            value: function resolve(options) {
                var schema1 = this;
                if (schema1.conditions.length) {
                    var conditions = schema1.conditions;
                    schema1 = schema1.clone();
                    schema1.conditions = [];
                    schema1 = conditions.reduce(function(schema, condition) {
                        return condition.resolve(schema, options);
                    }, schema1);
                    schema1 = schema1.resolve(options);
                }
                return schema1;
            }
        },
        {
            /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */ key: "cast",
            value: function cast(value) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                };
                var resolvedSchema = this.resolve(_extends({
                    value: value
                }, options));
                var result = resolvedSchema._cast(value, options);
                if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {
                    var formattedValue = _printValueDefault.default(value);
                    var formattedResult = _printValueDefault.default(result);
                    throw new TypeError("The value of ".concat(options.path || 'field', " could not be cast to a value ") + "that satisfies the schema type: \"".concat(resolvedSchema._type, "\". \n\n") + "attempted value: ".concat(formattedValue, " \n") + (formattedResult !== formattedValue ? "result of cast: ".concat(formattedResult) : ''));
                }
                return result;
            }
        },
        {
            key: "_cast",
            value: function _cast(rawValue, _options) {
                var _this = this;
                var value1 = rawValue === undefined ? rawValue : this.transforms.reduce(function(value, fn) {
                    return fn.call(_this, value, rawValue, _this);
                }, rawValue);
                if (value1 === undefined) value1 = this.getDefault();
                return value1;
            }
        },
        {
            key: "_validate",
            value: function _validate(_value) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                }, cb = arguments.length > 2 ? arguments[2] : void 0;
                var _this = this;
                var sync = options.sync, path = options.path, _from = options.from, from = _from === void 0 ? [] : _from, _originalValue = options.originalValue, originalValue = _originalValue === void 0 ? _value : _originalValue, _strict = options.strict, strict = _strict === void 0 ? this.spec.strict : _strict, _abortEarly = options.abortEarly, abortEarly = _abortEarly === void 0 ? this.spec.abortEarly : _abortEarly;
                var value = _value;
                if (!strict) // this._validating = true;
                value = this._cast(value, _extends({
                    assert: false
                }, options)); // this._validating = false;
                 // value is cast, we can check if it meets type requirements
                var args = {
                    value: value,
                    path: path,
                    options: options,
                    originalValue: originalValue,
                    schema: this,
                    label: this.spec.label,
                    sync: sync,
                    from: from
                };
                var initialTests = [];
                if (this._typeError) initialTests.push(this._typeError);
                var finalTests = [];
                if (this._whitelistError) finalTests.push(this._whitelistError);
                if (this._blacklistError) finalTests.push(this._blacklistError);
                _runTestsDefault.default({
                    args: args,
                    value: value,
                    path: path,
                    sync: sync,
                    tests: initialTests,
                    endEarly: abortEarly
                }, function(err) {
                    if (err) return void cb(err, value);
                    _runTestsDefault.default({
                        tests: _this.tests.concat(finalTests),
                        args: args,
                        path: path,
                        sync: sync,
                        value: value,
                        endEarly: abortEarly
                    }, cb);
                });
            }
        },
        {
            key: "validate",
            value: function validate(value2, options, maybeCb) {
                var schema = this.resolve(_extends({
                }, options, {
                    value: value2
                })); // callback case is for nested validations
                return typeof maybeCb === 'function' ? schema._validate(value2, options, maybeCb) : new Promise(function(resolve, reject) {
                    return schema._validate(value2, options, function(err, value) {
                        if (err) reject(err);
                        else resolve(value);
                    });
                });
            }
        },
        {
            key: "validateSync",
            value: function validateSync(value3, options) {
                var schema = this.resolve(_extends({
                }, options, {
                    value: value3
                }));
                var result;
                schema._validate(value3, _extends({
                }, options, {
                    sync: true
                }), function(err, value) {
                    if (err) throw err;
                    result = value;
                });
                return result;
            }
        },
        {
            key: "isValid",
            value: function isValid(value, options) {
                return this.validate(value, options).then(function() {
                    return true;
                }, function(err) {
                    if (_validationErrorDefault.default.isError(err)) return false;
                    throw err;
                });
            }
        },
        {
            key: "isValidSync",
            value: function isValidSync(value, options) {
                try {
                    this.validateSync(value, options);
                    return true;
                } catch (err) {
                    if (_validationErrorDefault.default.isError(err)) return false;
                    throw err;
                }
            }
        },
        {
            key: "_getDefault",
            value: function _getDefault() {
                var defaultValue = this.spec.default;
                if (defaultValue == null) return defaultValue;
                return typeof defaultValue === 'function' ? defaultValue.call(this) : _nanocloneDefault.default(defaultValue);
            }
        },
        {
            key: "getDefault",
            value: function getDefault(options) {
                var schema = this.resolve(options || {
                });
                return schema._getDefault();
            }
        },
        {
            key: "default",
            value: function _default(def) {
                if (arguments.length === 0) return this._getDefault();
                var next = this.clone({
                    default: def
                });
                return next;
            }
        },
        {
            key: "strict",
            value: function strict() {
                var isStrict = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var next = this.clone();
                next.spec.strict = isStrict;
                return next;
            }
        },
        {
            key: "_isPresent",
            value: function _isPresent(value) {
                return value != null;
            }
        },
        {
            key: "defined",
            value: function defined() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.mixed.defined;
                return this.test({
                    message: message,
                    name: 'defined',
                    exclusive: true,
                    test: function(value) {
                        return value !== undefined;
                    }
                });
            }
        },
        {
            key: "required",
            value: function required() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.mixed.required;
                return this.clone({
                    presence: 'required'
                }).withMutation(function(s) {
                    return s.test({
                        message: message,
                        name: 'required',
                        exclusive: true,
                        test: function(value) {
                            return this.schema._isPresent(value);
                        }
                    });
                });
            }
        },
        {
            key: "notRequired",
            value: function notRequired() {
                var next = this.clone({
                    presence: 'optional'
                });
                next.tests = next.tests.filter(function(test) {
                    return test.OPTIONS.name !== 'required';
                });
                return next;
            }
        },
        {
            key: "nullable",
            value: function nullable() {
                var isNullable = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var next = this.clone({
                    nullable: isNullable !== false
                });
                return next;
            }
        },
        {
            key: "transform",
            value: function transform(fn) {
                var next = this.clone();
                next.transforms.push(fn);
                return next;
            }
        },
        {
            /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */ key: "test",
            value: function test() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                var opts = void 0;
                if (args.length === 1) {
                    if (typeof args[0] === 'function') opts = {
                        test: args[0]
                    };
                    else opts = args[0];
                } else if (args.length === 2) opts = {
                    name: args[0],
                    test: args[1]
                };
                else opts = {
                    name: args[0],
                    message: args[1],
                    test: args[2]
                };
                if (opts.message === undefined) opts.message = _locale.mixed.default;
                if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
                var next = this.clone();
                var validate = _createValidationDefault.default(opts);
                var isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
                if (opts.exclusive) {
                    if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
                }
                if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
                next.tests = next.tests.filter(function(fn) {
                    if (fn.OPTIONS.name === opts.name) {
                        if (isExclusive) return false;
                        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
                    }
                    return true;
                });
                next.tests.push(validate);
                return next;
            }
        },
        {
            key: "when",
            value: function when(keys, options) {
                if (!Array.isArray(keys) && typeof keys !== 'string') {
                    options = keys;
                    keys = '.';
                }
                var next = this.clone();
                var deps = _toArrayDefault.default(keys).map(function(key) {
                    return new _referenceDefault.default(key);
                });
                deps.forEach(function(dep) {
                    // @ts-ignore
                    if (dep.isSibling) next.deps.push(dep.key);
                });
                next.conditions.push(new _conditionDefault.default(deps, options));
                return next;
            }
        },
        {
            key: "typeError",
            value: function typeError(message) {
                var next = this.clone();
                next._typeError = _createValidationDefault.default({
                    message: message,
                    name: 'typeError',
                    test: function(value) {
                        if (value !== undefined && !this.schema.isType(value)) return this.createError({
                            params: {
                                type: this.schema._type
                            }
                        });
                        return true;
                    }
                });
                return next;
            }
        },
        {
            key: "oneOf",
            value: function oneOf(enums) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.mixed.oneOf;
                var next = this.clone();
                enums.forEach(function(val) {
                    next._whitelist.add(val);
                    next._blacklist.delete(val);
                });
                next._whitelistError = _createValidationDefault.default({
                    message: message,
                    name: 'oneOf',
                    test: function(value) {
                        if (value === undefined) return true;
                        var valids = this.schema._whitelist;
                        var resolved = valids.resolveAll(this.resolve);
                        return resolved.includes(value) ? true : this.createError({
                            params: {
                                values: valids.toArray().join(', '),
                                resolved: resolved
                            }
                        });
                    }
                });
                return next;
            }
        },
        {
            key: "notOneOf",
            value: function notOneOf(enums) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.mixed.notOneOf;
                var next = this.clone();
                enums.forEach(function(val) {
                    next._blacklist.add(val);
                    next._whitelist.delete(val);
                });
                next._blacklistError = _createValidationDefault.default({
                    message: message,
                    name: 'notOneOf',
                    test: function(value) {
                        var invalids = this.schema._blacklist;
                        var resolved = invalids.resolveAll(this.resolve);
                        if (resolved.includes(value)) return this.createError({
                            params: {
                                values: invalids.toArray().join(', '),
                                resolved: resolved
                            }
                        });
                        return true;
                    }
                });
                return next;
            }
        },
        {
            key: "strip",
            value: function strip() {
                var strip1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var next = this.clone();
                next.spec.strip = strip1;
                return next;
            }
        },
        {
            key: "describe",
            value: function describe() {
                var next = this.clone();
                var _spec = next.spec, label = _spec.label, meta = _spec.meta;
                var description = {
                    meta: meta,
                    label: label,
                    type: next.type,
                    oneOf: next._whitelist.describe(),
                    notOneOf: next._blacklist.describe(),
                    tests: next.tests.map(function(fn) {
                        return {
                            name: fn.OPTIONS.name,
                            params: fn.OPTIONS.params
                        };
                    }).filter(function(n, idx, list) {
                        return list.findIndex(function(c) {
                            return c.name === n.name;
                        }) === idx;
                    })
                };
                return description;
            }
        }
    ]);
    return BaseSchema;
}();
// @ts-expect-error
BaseSchema.prototype.__isYupSchema__ = true;
var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
try {
    var _loop = function(_iterator, _step) {
        var method = _step.value;
        BaseSchema.prototype["".concat(method, "At")] = function(path, value) {
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
            };
            var ref = _reach.getIn(this, path, value, options.context), parent = ref.parent, parentPath = ref.parentPath, schema = ref.schema;
            return schema[method](parent && parent[parentPath], _extends({
            }, options, {
                parent: parent,
                path: path
            }));
        };
    };
    for(var _iterator = [
        'validate',
        'validateSync'
    ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
} catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
} finally{
    try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
        }
    } finally{
        if (_didIteratorError) {
            throw _iteratorError;
        }
    }
}
var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
try {
    for(var _iterator1 = [
        'equals',
        'is'
    ][Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
        var alias = _step1.value;
        BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
    }
} catch (err) {
    _didIteratorError1 = true;
    _iteratorError1 = err;
} finally{
    try {
        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
            _iterator1.return();
        }
    } finally{
        if (_didIteratorError1) {
            throw _iteratorError1;
        }
    }
}
var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
try {
    for(var _iterator2 = [
        'not',
        'nope'
    ][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
        var alias1 = _step2.value;
        BaseSchema.prototype[alias1] = BaseSchema.prototype.notOneOf;
    }
} catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
} finally{
    try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
        }
    } finally{
        if (_didIteratorError2) {
            throw _iteratorError2;
        }
    }
}
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;

},{"@swc/helpers":"cawJ1","nanoclone":"kRFk0","./locale":"6pzIM","./Condition":"fZjDf","./util/runTests":"8iXQO","./util/createValidation":"lPkpb","./util/printValue":"fjVdc","./Reference":"cJReZ","./util/reach":"aknEg","./ValidationError":"grLFR","./util/ReferenceSet":"hCXXq","./util/toArray":"4yUsd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kRFk0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// ES6 Map
var map;
try {
    map = Map;
} catch (_) {
}
var set;
// ES6 Set
try {
    set = Set;
} catch (_1) {
}
function baseClone(src, circulars, clones) {
    // Null/undefined/functions/etc
    if (!src || typeof src !== 'object' || typeof src === 'function') return src;
    // DOM Node
    if (src.nodeType && 'cloneNode' in src) return src.cloneNode(true);
    // Date
    if (src instanceof Date) return new Date(src.getTime());
    // RegExp
    if (src instanceof RegExp) return new RegExp(src);
    // Arrays
    if (Array.isArray(src)) return src.map(clone);
    // ES6 Maps
    if (map && src instanceof map) return new Map(Array.from(src.entries()));
    // ES6 Sets
    if (set && src instanceof set) return new Set(Array.from(src.values()));
    // Object
    if (src instanceof Object) {
        var _loop = function(key) {
            var idx = circulars.findIndex(function(i) {
                return i === src[key];
            });
            obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);
        };
        circulars.push(src);
        var obj = Object.create(src);
        clones.push(obj);
        for(var key in src)_loop(key);
        return obj;
    }
    // ???
    return src;
}
function clone(src) {
    return baseClone(src, [], []);
}
exports.default = clone;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6pzIM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mixed", function() {
    return mixed;
});
parcelHelpers.export(exports, "string", function() {
    return string;
});
parcelHelpers.export(exports, "number", function() {
    return number;
});
parcelHelpers.export(exports, "date", function() {
    return date;
});
parcelHelpers.export(exports, "boolean", function() {
    return boolean;
});
parcelHelpers.export(exports, "object", function() {
    return object;
});
parcelHelpers.export(exports, "array", function() {
    return array;
});
var _printValue = require("./util/printValue");
var _printValueDefault = parcelHelpers.interopDefault(_printValue);
var mixed = {
    default: '${path} is invalid',
    required: '${path} is a required field',
    oneOf: '${path} must be one of the following values: ${values}',
    notOneOf: '${path} must not be one of the following values: ${values}',
    notType: function(param) {
        var path = param.path, type = param.type, value = param.value, originalValue = param.originalValue;
        var isCast = originalValue != null && originalValue !== value;
        var msg = "".concat(path, " must be a `").concat(type, "` type, ") + "but the final value was: `".concat(_printValueDefault.default(value, true), "`") + (isCast ? " (cast from the value `".concat(_printValueDefault.default(originalValue, true), "`).") : '.');
        if (value === null) msg += "\n If \"null\" is intended as an empty value be sure to mark the schema as `.nullable()`";
        return msg;
    },
    defined: '${path} must be defined'
};
var string = {
    length: '${path} must be exactly ${length} characters',
    min: '${path} must be at least ${min} characters',
    max: '${path} must be at most ${max} characters',
    matches: '${path} must match the following: "${regex}"',
    email: '${path} must be a valid email',
    url: '${path} must be a valid URL',
    uuid: '${path} must be a valid UUID',
    trim: '${path} must be a trimmed string',
    lowercase: '${path} must be a lowercase string',
    uppercase: '${path} must be a upper case string'
};
var number = {
    min: '${path} must be greater than or equal to ${min}',
    max: '${path} must be less than or equal to ${max}',
    lessThan: '${path} must be less than ${less}',
    moreThan: '${path} must be greater than ${more}',
    positive: '${path} must be a positive number',
    negative: '${path} must be a negative number',
    integer: '${path} must be an integer'
};
var date = {
    min: '${path} field must be later than ${min}',
    max: '${path} field must be at earlier than ${max}'
};
var boolean = {
    isValue: '${path} field must be ${value}'
};
var object = {
    noUnknown: '${path} field has unspecified keys: ${unknown}'
};
var array = {
    min: '${path} field must have at least ${min} items',
    max: '${path} field must have less than or equal to ${max} items',
    length: '${path} must have ${length} items'
};
exports.default = Object.assign(Object.create(null), {
    mixed: mixed,
    string: string,
    number: number,
    date: date,
    object: object,
    array: array,
    boolean: boolean
});

},{"./util/printValue":"fjVdc","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fjVdc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var toString = Object.prototype.toString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;
var symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : function() {
    return '';
};
var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
}
function printSimpleValue(val) {
    var quoteStrings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (val == null || val === true || val === false) return '' + val;
    var typeOf = typeof val === "undefined" ? "undefined" : _helpers.typeOf(val);
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return quoteStrings ? "\"".concat(val, "\"") : val;
    if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
    if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
    var tag = toString.call(val).slice(8, -1);
    if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
    if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
    if (tag === 'RegExp') return regExpToString.call(val);
    return null;
}
function printValue(value1, quoteStrings) {
    var result1 = printSimpleValue(value1, quoteStrings);
    if (result1 !== null) return result1;
    return JSON.stringify(value1, function(key, value) {
        var result = printSimpleValue(this[key], quoteStrings);
        if (result !== null) return result;
        return value;
    }, 2);
}
exports.default = printValue;

},{"@swc/helpers":"cawJ1","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fZjDf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _has = require("lodash/has");
var _hasDefault = parcelHelpers.interopDefault(_has);
var _isSchema = require("./util/isSchema");
var _isSchemaDefault = parcelHelpers.interopDefault(_isSchema);
var Condition = /*#__PURE__*/ function() {
    "use strict";
    function Condition(refs, options1) {
        _helpers.classCallCheck(this, Condition);
        this.fn = void 0;
        this.refs = refs;
        this.refs = refs;
        if (typeof options1 === 'function') {
            this.fn = options1;
            return;
        }
        if (!_hasDefault.default(options1, 'is')) throw new TypeError('`is:` is required for `when()` conditions');
        if (!options1.then && !options1.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
        var is = options1.is, then = options1.then, otherwise = options1.otherwise;
        var check = typeof is === 'function' ? is : function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return values.every(function(value) {
                return value === is;
            });
        };
        this.fn = function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            var options = args.pop();
            var schema = args.pop();
            var branch = check.apply(void 0, _helpers.toConsumableArray(args)) ? then : otherwise;
            if (!branch) return undefined;
            if (typeof branch === 'function') return branch(schema);
            return schema.concat(branch.resolve(options));
        };
    }
    _helpers.createClass(Condition, [
        {
            key: "resolve",
            value: function resolve(base, options) {
                var values = this.refs.map(function(ref) {
                    return ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
                });
                var schema = this.fn.apply(base, values.concat(base, options));
                if (schema === undefined || schema === base) return base;
                if (!_isSchemaDefault.default(schema)) throw new TypeError('conditions must return a schema object');
                return schema.resolve(options);
            }
        }
    ]);
    return Condition;
}();
exports.default = Condition;

},{"@swc/helpers":"cawJ1","lodash/has":"UIsIc","./util/isSchema":"ubtYO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"UIsIc":[function(require,module,exports) {
var baseHas = require('./_baseHas'), hasPath = require('./_hasPath');
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */ function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
}
module.exports = has;

},{"./_baseHas":"kJRpR","./_hasPath":"hmmrE"}],"kJRpR":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHas(object, key) {
    return object != null && hasOwnProperty.call(object, key);
}
module.exports = baseHas;

},{}],"hmmrE":[function(require,module,exports) {
var castPath = require('./_castPath'), isArguments = require('./isArguments'), isArray = require('./isArray'), isIndex = require('./_isIndex'), isLength = require('./isLength'), toKey = require('./_toKey');
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while(++index < length){
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || ++index != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

},{"./_castPath":"k0q4P","./isArguments":"bQAsF","./isArray":"fLSqa","./_isIndex":"1Hmh5","./isLength":"2aLkv","./_toKey":"85CQO"}],"k0q4P":[function(require,module,exports) {
var isArray = require('./isArray'), isKey = require('./_isKey'), stringToPath = require('./_stringToPath'), toString = require('./toString');
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (isArray(value)) return value;
    return isKey(value, object) ? [
        value
    ] : stringToPath(toString(value));
}
module.exports = castPath;

},{"./isArray":"fLSqa","./_isKey":"8m4ez","./_stringToPath":"7UU04","./toString":"biUn3"}],"fLSqa":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"8m4ez":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (isArray(value)) return false;
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

},{"@swc/helpers":"cawJ1","./isArray":"fLSqa","./isSymbol":"3hQrw"}],"3hQrw":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return (typeof value === "undefined" ? "undefined" : _helpers.typeOf(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"@swc/helpers":"cawJ1","./_baseGetTag":"br1fa","./isObjectLike":"lj1ZO"}],"br1fa":[function(require,module,exports) {
var Symbol = require('./_Symbol'), getRawTag = require('./_getRawTag'), objectToString = require('./_objectToString');
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"bj7yh","./_getRawTag":"5Keuc","./_objectToString":"hGvA8"}],"bj7yh":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"./_root":"bTJMp"}],"bTJMp":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

},{"./_freeGlobal":"iVLGk"}],"iVLGk":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"5Keuc":[function(require,module,exports) {
var Symbol = require('./_Symbol');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"bj7yh"}],"hGvA8":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"lj1ZO":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

},{}],"7UU04":[function(require,module,exports) {
var memoizeCapped = require('./_memoizeCapped');
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
});
module.exports = stringToPath;

},{"./_memoizeCapped":"6FRhH"}],"6FRhH":[function(require,module,exports) {
var memoize = require('./memoize');
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = memoizeCapped;

},{"./memoize":"b4bIL"}],"b4bIL":[function(require,module,exports) {
var MapCache = require('./_MapCache');
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

},{"./_MapCache":"guI1h"}],"guI1h":[function(require,module,exports) {
var mapCacheClear = require('./_mapCacheClear'), mapCacheDelete = require('./_mapCacheDelete'), mapCacheGet = require('./_mapCacheGet'), mapCacheHas = require('./_mapCacheHas'), mapCacheSet = require('./_mapCacheSet');
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"./_mapCacheClear":"2d4dQ","./_mapCacheDelete":"6WPKW","./_mapCacheGet":"4EBIE","./_mapCacheHas":"4LuVb","./_mapCacheSet":"eIGwi"}],"2d4dQ":[function(require,module,exports) {
var Hash = require('./_Hash'), ListCache = require('./_ListCache'), Map = require('./_Map');
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;

},{"./_Hash":"lJdnU","./_ListCache":"5Sgd0","./_Map":"hS09H"}],"lJdnU":[function(require,module,exports) {
var hashClear = require('./_hashClear'), hashDelete = require('./_hashDelete'), hashGet = require('./_hashGet'), hashHas = require('./_hashHas'), hashSet = require('./_hashSet');
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"./_hashClear":"7wl5e","./_hashDelete":"eXqF2","./_hashGet":"BtEmY","./_hashHas":"3cgFt","./_hashSet":"21VFJ"}],"7wl5e":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {
    };
    this.size = 0;
}
module.exports = hashClear;

},{"./_nativeCreate":"1w0Tn"}],"1w0Tn":[function(require,module,exports) {
var getNative = require('./_getNative');
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

},{"./_getNative":"1aFhS"}],"1aFhS":[function(require,module,exports) {
var baseIsNative = require('./_baseIsNative'), getValue = require('./_getValue');
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"./_baseIsNative":"5YvNi","./_getValue":"fhS7j"}],"5YvNi":[function(require,module,exports) {
var isFunction = require('./isFunction'), isMasked = require('./_isMasked'), isObject = require('./isObject'), toSource = require('./_toSource');
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"./isFunction":"9c3oe","./_isMasked":"fUOKN","./isObject":"21X9h","./_toSource":"9p5sF"}],"9c3oe":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObject = require('./isObject');
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"br1fa","./isObject":"21X9h"}],"21X9h":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

},{"@swc/helpers":"cawJ1"}],"fUOKN":[function(require,module,exports) {
var coreJsData = require('./_coreJsData');
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"./_coreJsData":"5mdCp"}],"5mdCp":[function(require,module,exports) {
var root = require('./_root');
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

},{"./_root":"bTJMp"}],"9p5sF":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e1) {
        }
    }
    return '';
}
module.exports = toSource;

},{}],"fhS7j":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"eXqF2":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"BtEmY":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"./_nativeCreate":"1w0Tn"}],"3cgFt":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"./_nativeCreate":"1w0Tn"}],"21VFJ":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"./_nativeCreate":"1w0Tn"}],"5Sgd0":[function(require,module,exports) {
var listCacheClear = require('./_listCacheClear'), listCacheDelete = require('./_listCacheDelete'), listCacheGet = require('./_listCacheGet'), listCacheHas = require('./_listCacheHas'), listCacheSet = require('./_listCacheSet');
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"./_listCacheClear":"5Nvoz","./_listCacheDelete":"k1f0G","./_listCacheGet":"2AHNr","./_listCacheHas":"kJTUe","./_listCacheSet":"6unDU"}],"5Nvoz":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"k1f0G":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"./_assocIndexOf":"cGwtf"}],"cGwtf":[function(require,module,exports) {
var eq = require('./eq');
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"./eq":"ajFEh"}],"ajFEh":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"2AHNr":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"./_assocIndexOf":"cGwtf"}],"kJTUe":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"./_assocIndexOf":"cGwtf"}],"6unDU":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"./_assocIndexOf":"cGwtf"}],"hS09H":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Map = getNative(root, 'Map');
module.exports = Map;

},{"./_getNative":"1aFhS","./_root":"bTJMp"}],"6WPKW":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"./_getMapData":"jLlCb"}],"jLlCb":[function(require,module,exports) {
var isKeyable = require('./_isKeyable');
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;

},{"./_isKeyable":"idKHj"}],"idKHj":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;

},{"@swc/helpers":"cawJ1"}],"4EBIE":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"./_getMapData":"jLlCb"}],"4LuVb":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"./_getMapData":"jLlCb"}],"eIGwi":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"./_getMapData":"jLlCb"}],"biUn3":[function(require,module,exports) {
var baseToString = require('./_baseToString');
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
module.exports = toString;

},{"./_baseToString":"1HBJs"}],"1HBJs":[function(require,module,exports) {
var Symbol = require('./_Symbol'), arrayMap = require('./_arrayMap'), isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') return value;
    if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = baseToString;

},{"./_Symbol":"bj7yh","./_arrayMap":"jxdoH","./isArray":"fLSqa","./isSymbol":"3hQrw"}],"jxdoH":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = arrayMap;

},{}],"bQAsF":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'), isObjectLike = require('./isObjectLike');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function isArguments(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

},{"./_baseIsArguments":"eYZbA","./isObjectLike":"lj1ZO"}],"eYZbA":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"br1fa","./isObjectLike":"lj1ZO"}],"1Hmh5":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value === "undefined" ? "undefined" : _helpers.typeOf(value);
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{"@swc/helpers":"cawJ1"}],"2aLkv":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"85CQO":[function(require,module,exports) {
var isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) return value;
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = toKey;

},{"./isSymbol":"3hQrw"}],"ubtYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isSchema = function(obj) {
    return obj && obj.__isYupSchema__;
};
exports.default = isSchema;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8iXQO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _validationError = require("../ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var once = function(cb) {
    var fired = false;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (fired) return;
        fired = true;
        cb.apply(void 0, _helpers.toConsumableArray(args));
    };
};
function runTests(options, cb) {
    var endEarly = options.endEarly, tests = options.tests, args = options.args, value = options.value, errors = options.errors, sort = options.sort, path = options.path;
    var callback = once(cb);
    var count = tests.length;
    var nestedErrors = [];
    errors = errors ? errors : [];
    if (!count) return errors.length ? callback(new _validationErrorDefault.default(errors, value, path)) : callback(null, value);
    for(var i = 0; i < tests.length; i++){
        var test = tests[i];
        test(args, function finishTestRun(err) {
            if (err) {
                // always return early for non validation errors
                if (!_validationErrorDefault.default.isError(err)) return callback(err, value);
                if (endEarly) {
                    err.value = value;
                    return callback(err, value);
                }
                nestedErrors.push(err);
            }
            if (--count <= 0) {
                if (nestedErrors.length) {
                    var _nestedErrors;
                    if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name
                    if (errors.length) (_nestedErrors = nestedErrors).push.apply(_nestedErrors, _helpers.toConsumableArray(errors));
                    errors = nestedErrors;
                }
                if (errors.length) {
                    callback(new _validationErrorDefault.default(errors, value, path), value);
                    return;
                }
                callback(null, value);
            }
        });
    }
}
exports.default = runTests;

},{"@swc/helpers":"cawJ1","../ValidationError":"grLFR","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"grLFR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ValidationError;
});
var _helpers = require("@swc/helpers");
var _printValue = require("./util/printValue");
var _printValueDefault = parcelHelpers.interopDefault(_printValue);
var _toArray = require("./util/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var strReg = /\$\{\s*(\w+)\s*\}/g;
var ValidationError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _helpers.inherits(ValidationError, Error1);
    var _super = _helpers.createSuper(ValidationError);
    function ValidationError(errorOrErrors, value, field, type) {
        _helpers.classCallCheck(this, ValidationError);
        var _this;
        _this = _super.call(this);
        _this.value = void 0;
        _this.path = void 0;
        _this.type = void 0;
        _this.errors = void 0;
        _this.params = void 0;
        _this.inner = void 0;
        _this.name = 'ValidationError';
        _this.value = value;
        _this.path = field;
        _this.type = type;
        _this.errors = [];
        _this.inner = [];
        _toArrayDefault.default(errorOrErrors).forEach(function(err) {
            if (ValidationError.isError(err)) {
                var _errors;
                (_errors = _this.errors).push.apply(_errors, _helpers.toConsumableArray(err.errors));
                _this.inner = _this.inner.concat(err.inner.length ? err.inner : err);
            } else _this.errors.push(err);
        });
        _this.message = _this.errors.length > 1 ? "".concat(_this.errors.length, " errors occurred") : _this.errors[0];
        if (Error.captureStackTrace) Error.captureStackTrace(_helpers.assertThisInitialized(_this), ValidationError);
        return _this;
    }
    _helpers.createClass(ValidationError, null, [
        {
            key: "formatError",
            value: function formatError(message, params) {
                var path = params.label || params.path || 'this';
                if (path !== params.path) params = _extends({
                }, params, {
                    path: path
                });
                if (typeof message === 'string') return message.replace(strReg, function(_, key) {
                    return _printValueDefault.default(params[key]);
                });
                if (typeof message === 'function') return message(params);
                return message;
            }
        },
        {
            key: "isError",
            value: function isError(err) {
                return err && err.name === 'ValidationError';
            }
        }
    ]);
    return ValidationError;
}(_helpers.wrapNativeSuper(Error));

},{"@swc/helpers":"cawJ1","./util/printValue":"fjVdc","./util/toArray":"4yUsd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4yUsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function toArray(value) {
    return value == null ? [] : [].concat(value);
}
exports.default = toArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lPkpb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapValues = require("lodash/mapValues");
var _mapValuesDefault = parcelHelpers.interopDefault(_mapValues);
var _validationError = require("../ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var _reference = require("../Reference");
var _referenceDefault = parcelHelpers.interopDefault(_reference);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function createValidation(config) {
    function validate(_ref, cb) {
        var value = _ref.value, _path = _ref.path, path = _path === void 0 ? '' : _path, label = _ref.label, options = _ref.options, originalValue = _ref.originalValue, sync = _ref.sync, rest = _objectWithoutPropertiesLoose(_ref, [
            "value",
            "path",
            "label",
            "options",
            "originalValue",
            "sync"
        ]);
        var name = config.name, test = config.test, params = config.params, message = config.message;
        var parent = options.parent, context = options.context;
        function resolve(item) {
            return _referenceDefault.default.isRef(item) ? item.getValue(value, parent, context) : item;
        }
        function createError() {
            var overrides = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
            };
            var nextParams = _mapValuesDefault.default(_extends({
                value: value,
                originalValue: originalValue,
                label: label,
                path: overrides.path || path
            }, params, overrides.params), resolve);
            var error = new _validationErrorDefault.default(_validationErrorDefault.default.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
            error.params = nextParams;
            return error;
        }
        var ctx = _extends({
            path: path,
            parent: parent,
            type: name,
            createError: createError,
            resolve: resolve,
            options: options,
            originalValue: originalValue
        }, rest);
        if (!sync) {
            try {
                Promise.resolve(test.call(ctx, value, ctx)).then(function(validOrError) {
                    if (_validationErrorDefault.default.isError(validOrError)) cb(validOrError);
                    else if (!validOrError) cb(createError());
                    else cb(null, validOrError);
                }).catch(cb);
            } catch (err) {
                cb(err);
            }
            return;
        }
        var result;
        try {
            var _ref2;
            result = test.call(ctx, value, ctx);
            if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === 'function') throw new Error("Validation test of type: \"".concat(ctx.type, "\" returned a Promise during a synchronous validate. ") + "This test will finish after the validate call has returned");
        } catch (err) {
            cb(err);
            return;
        }
        if (_validationErrorDefault.default.isError(result)) cb(result);
        else if (!result) cb(createError());
        else cb(null, result);
    }
    validate.OPTIONS = config;
    return validate;
}
exports.default = createValidation;

},{"lodash/mapValues":"j5C5w","../ValidationError":"grLFR","../Reference":"cJReZ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j5C5w":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), baseForOwn = require('./_baseForOwn'), baseIteratee = require('./_baseIteratee');
/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */ function mapValues(object1, iteratee) {
    var result = {
    };
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object1, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
    });
    return result;
}
module.exports = mapValues;

},{"./_baseAssignValue":"d4SNj","./_baseForOwn":"dl601","./_baseIteratee":"hMNOv"}],"d4SNj":[function(require,module,exports) {
var defineProperty = require('./_defineProperty');
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;

},{"./_defineProperty":"eMUZE"}],"eMUZE":[function(require,module,exports) {
var getNative = require('./_getNative');
var defineProperty = function() {
    try {
        var func = getNative(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
module.exports = defineProperty;

},{"./_getNative":"1aFhS"}],"dl601":[function(require,module,exports) {
var baseFor = require('./_baseFor'), keys = require('./keys');
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */ function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
}
module.exports = baseForOwn;

},{"./_baseFor":"lhnjQ","./keys":"kZD1g"}],"lhnjQ":[function(require,module,exports) {
var createBaseFor = require('./_createBaseFor');
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
module.exports = baseFor;

},{"./_createBaseFor":"29Bs7"}],"29Bs7":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;

},{}],"kZD1g":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeys = require('./_baseKeys'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"eDZVo","./_baseKeys":"iFfRC","./isArrayLike":"k3kF8"}],"eDZVo":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'), isArguments = require('./isArguments'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isIndex = require('./_isIndex'), isTypedArray = require('./isTypedArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"jkZeW","./isArguments":"bQAsF","./isArray":"fLSqa","./isBuffer":"6OcFT","./_isIndex":"1Hmh5","./isTypedArray":"beR8G"}],"jkZeW":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"6OcFT":[function(require,module,exports) {
var root = require('./_root'), stubFalse = require('./stubFalse');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"bTJMp","./stubFalse":"hSGQz"}],"hSGQz":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"beR8G":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"96QLW","./_baseUnary":"iJ9U4","./_nodeUtil":"j0rls"}],"96QLW":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isLength = require('./isLength'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"br1fa","./isLength":"2aLkv","./isObjectLike":"lj1ZO"}],"iJ9U4":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"j0rls":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"iVLGk"}],"iFfRC":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'), nativeKeys = require('./_nativeKeys');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"hdZen","./_nativeKeys":"dqjxP"}],"hdZen":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"dqjxP":[function(require,module,exports) {
var overArg = require('./_overArg');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"aFIjB"}],"aFIjB":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"k3kF8":[function(require,module,exports) {
var isFunction = require('./isFunction'), isLength = require('./isLength');
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"9c3oe","./isLength":"2aLkv"}],"hMNOv":[function(require,module,exports) {
var baseMatches = require('./_baseMatches'), baseMatchesProperty = require('./_baseMatchesProperty'), identity = require('./identity'), isArray = require('./isArray'), property = require('./property');
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') return value;
    if (value == null) return identity;
    if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    return property(value);
}
module.exports = baseIteratee;

},{"./_baseMatches":"ehUxO","./_baseMatchesProperty":"549c3","./identity":"3GgR9","./isArray":"fLSqa","./property":"e5cb0"}],"ehUxO":[function(require,module,exports) {
var baseIsMatch = require('./_baseIsMatch'), getMatchData = require('./_getMatchData'), matchesStrictComparable = require('./_matchesStrictComparable');
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
    };
}
module.exports = baseMatches;

},{"./_baseIsMatch":"3fs8B","./_getMatchData":"eaTMw","./_matchesStrictComparable":"h7QJb"}],"3fs8B":[function(require,module,exports) {
var Stack = require('./_Stack'), baseIsEqual = require('./_baseIsEqual');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while(++index < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new Stack;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
module.exports = baseIsMatch;

},{"./_Stack":"3XiVS","./_baseIsEqual":"fCDkq"}],"3XiVS":[function(require,module,exports) {
var ListCache = require('./_ListCache'), stackClear = require('./_stackClear'), stackDelete = require('./_stackDelete'), stackGet = require('./_stackGet'), stackHas = require('./_stackHas'), stackSet = require('./_stackSet');
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"./_ListCache":"5Sgd0","./_stackClear":"2qtfT","./_stackDelete":"kQwrw","./_stackGet":"8pgM1","./_stackHas":"7iFxL","./_stackSet":"am9Tf"}],"2qtfT":[function(require,module,exports) {
var ListCache = require('./_ListCache');
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"./_ListCache":"5Sgd0"}],"kQwrw":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"8pgM1":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"7iFxL":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"am9Tf":[function(require,module,exports) {
var ListCache = require('./_ListCache'), Map = require('./_Map'), MapCache = require('./_MapCache');
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"./_ListCache":"5Sgd0","./_Map":"hS09H","./_MapCache":"guI1h"}],"fCDkq":[function(require,module,exports) {
var baseIsEqualDeep = require('./_baseIsEqualDeep'), isObjectLike = require('./isObjectLike');
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"31LGP","./isObjectLike":"lj1ZO"}],"31LGP":[function(require,module,exports) {
var Stack = require('./_Stack'), equalArrays = require('./_equalArrays'), equalByTag = require('./_equalByTag'), equalObjects = require('./_equalObjects'), getTag = require('./_getTag'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isTypedArray = require('./isTypedArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"./_Stack":"3XiVS","./_equalArrays":"k1vjY","./_equalByTag":"bPSSd","./_equalObjects":"7gyLM","./_getTag":"fTxN8","./isArray":"fLSqa","./isBuffer":"6OcFT","./isTypedArray":"beR8G"}],"k1vjY":[function(require,module,exports) {
var SetCache = require('./_SetCache'), arraySome = require('./_arraySome'), cacheHas = require('./_cacheHas');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue1 = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
module.exports = equalArrays;

},{"./_SetCache":"hn7tR","./_arraySome":"bLm3e","./_cacheHas":"2UjdK"}],"hn7tR":[function(require,module,exports) {
var MapCache = require('./_MapCache'), setCacheAdd = require('./_setCacheAdd'), setCacheHas = require('./_setCacheHas');
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"./_MapCache":"guI1h","./_setCacheAdd":"im6Zd","./_setCacheHas":"jCbzw"}],"im6Zd":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"jCbzw":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"bLm3e":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"2UjdK":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"bPSSd":[function(require,module,exports) {
var Symbol = require('./_Symbol'), Uint8Array = require('./_Uint8Array'), eq = require('./eq'), equalArrays = require('./_equalArrays'), mapToArray = require('./_mapToArray'), setToArray = require('./_setToArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"./_Symbol":"bj7yh","./_Uint8Array":"4qQAT","./eq":"ajFEh","./_equalArrays":"k1vjY","./_mapToArray":"kjlqX","./_setToArray":"9EsnS"}],"4qQAT":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

},{"./_root":"bTJMp"}],"kjlqX":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"9EsnS":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"7gyLM":[function(require,module,exports) {
var getAllKeys = require('./_getAllKeys');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
module.exports = equalObjects;

},{"./_getAllKeys":"cbvwC"}],"cbvwC":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbols = require('./_getSymbols'), keys = require('./keys');
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"./_baseGetAllKeys":"aZPzF","./_getSymbols":"7ltrM","./keys":"kZD1g"}],"aZPzF":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), isArray = require('./isArray');
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"./_arrayPush":"7jzRs","./isArray":"fLSqa"}],"7jzRs":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"7ltrM":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'), stubArray = require('./stubArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function getSymbols(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"./_arrayFilter":"ljbg0","./stubArray":"lggFl"}],"ljbg0":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"lggFl":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"fTxN8":[function(require,module,exports) {
var DataView = require('./_DataView'), Map = require('./_Map'), Promise = require('./_Promise'), Set = require('./_Set'), WeakMap = require('./_WeakMap'), baseGetTag = require('./_baseGetTag'), toSource = require('./_toSource');
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function getTag(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"./_DataView":"lCLjp","./_Map":"hS09H","./_Promise":"3qziD","./_Set":"dyrYr","./_WeakMap":"cUnNy","./_baseGetTag":"br1fa","./_toSource":"9p5sF"}],"lCLjp":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, 'DataView');
module.exports = DataView;

},{"./_getNative":"1aFhS","./_root":"bTJMp"}],"3qziD":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, 'Promise');
module.exports = Promise;

},{"./_getNative":"1aFhS","./_root":"bTJMp"}],"dyrYr":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Set = getNative(root, 'Set');
module.exports = Set;

},{"./_getNative":"1aFhS","./_root":"bTJMp"}],"cUnNy":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

},{"./_getNative":"1aFhS","./_root":"bTJMp"}],"eaTMw":[function(require,module,exports) {
var isStrictComparable = require('./_isStrictComparable'), keys = require('./keys');
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = keys(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            isStrictComparable(value)
        ];
    }
    return result;
}
module.exports = getMatchData;

},{"./_isStrictComparable":"7efls","./keys":"kZD1g"}],"7efls":[function(require,module,exports) {
var isObject = require('./isObject');
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !isObject(value);
}
module.exports = isStrictComparable;

},{"./isObject":"21X9h"}],"h7QJb":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
module.exports = matchesStrictComparable;

},{}],"549c3":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual'), get = require('./get'), hasIn = require('./hasIn'), isKey = require('./_isKey'), isStrictComparable = require('./_isStrictComparable'), matchesStrictComparable = require('./_matchesStrictComparable'), toKey = require('./_toKey');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
    return function(object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"fCDkq","./get":"lp96d","./hasIn":"9SQGZ","./_isKey":"8m4ez","./_isStrictComparable":"7efls","./_matchesStrictComparable":"h7QJb","./_toKey":"85CQO"}],"lp96d":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
}
module.exports = get;

},{"./_baseGet":"kcai6"}],"kcai6":[function(require,module,exports) {
var castPath = require('./_castPath'), toKey = require('./_toKey');
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[toKey(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = baseGet;

},{"./_castPath":"k0q4P","./_toKey":"85CQO"}],"9SQGZ":[function(require,module,exports) {
var baseHasIn = require('./_baseHasIn'), hasPath = require('./_hasPath');
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

},{"./_baseHasIn":"3Xhr8","./_hasPath":"hmmrE"}],"3Xhr8":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
module.exports = baseHasIn;

},{}],"3GgR9":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
module.exports = identity;

},{}],"e5cb0":[function(require,module,exports) {
var baseProperty = require('./_baseProperty'), basePropertyDeep = require('./_basePropertyDeep'), isKey = require('./_isKey'), toKey = require('./_toKey');
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

},{"./_baseProperty":"e2WbJ","./_basePropertyDeep":"6SwQs","./_isKey":"8m4ez","./_toKey":"85CQO"}],"e2WbJ":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
module.exports = baseProperty;

},{}],"6SwQs":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return baseGet(object, path);
    };
}
module.exports = basePropertyDeep;

},{"./_baseGet":"kcai6"}],"cJReZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return Reference;
}) // @ts-ignore
;
var _helpers = require("@swc/helpers");
var _propertyExpr = require("property-expr");
var prefixes = {
    context: '$',
    value: '.'
};
function create(key, options) {
    return new Reference(key, options);
}
var Reference = /*#__PURE__*/ function() {
    "use strict";
    function Reference(key) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        };
        _helpers.classCallCheck(this, Reference);
        this.key = void 0;
        this.isContext = void 0;
        this.isValue = void 0;
        this.isSibling = void 0;
        this.path = void 0;
        this.getter = void 0;
        this.map = void 0;
        if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);
        this.key = key.trim();
        if (key === '') throw new TypeError('ref must be a non-empty string');
        this.isContext = this.key[0] === prefixes.context;
        this.isValue = this.key[0] === prefixes.value;
        this.isSibling = !this.isContext && !this.isValue;
        var prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';
        this.path = this.key.slice(prefix.length);
        this.getter = this.path && _propertyExpr.getter(this.path, true);
        this.map = options.map;
    }
    _helpers.createClass(Reference, [
        {
            key: "getValue",
            value: function getValue(value, parent, context) {
                var result = this.isContext ? context : this.isValue ? value : parent;
                if (this.getter) result = this.getter(result || {
                });
                if (this.map) result = this.map(result);
                return result;
            }
        },
        {
            /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */ key: "cast",
            value: function cast(value, options) {
                return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
            }
        },
        {
            key: "resolve",
            value: function resolve() {
                return this;
            }
        },
        {
            key: "describe",
            value: function describe() {
                return {
                    type: 'ref',
                    key: this.key
                };
            }
        },
        {
            key: "toString",
            value: function toString() {
                return "Ref(".concat(this.key, ")");
            }
        }
    ], [
        {
            key: "isRef",
            value: function isRef(value) {
                return value && value.__isYupRef;
            }
        }
    ]);
    return Reference;
}();
Reference.prototype.__isYupRef = true;

},{"@swc/helpers":"cawJ1","property-expr":"7cgUm","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7cgUm":[function(require,module,exports) {
/**
 * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
 */ 'use strict';
function Cache(maxSize) {
    this._maxSize = maxSize;
    this.clear();
}
Cache.prototype.clear = function() {
    this._size = 0;
    this._values = Object.create(null);
};
Cache.prototype.get = function(key) {
    return this._values[key];
};
Cache.prototype.set = function(key, value) {
    this._size >= this._maxSize && this.clear();
    if (!(key in this._values)) this._size++;
    return this._values[key] = value;
};
var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g, DIGIT_REGEX = /^\d+$/, LEAD_DIGIT_REGEX = /^\d/, SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/, MAX_CACHE_SIZE = 512;
var pathCache = new Cache(MAX_CACHE_SIZE), setCache = new Cache(MAX_CACHE_SIZE), getCache = new Cache(MAX_CACHE_SIZE);
var config;
module.exports = {
    Cache: Cache,
    split: split,
    normalizePath: normalizePath,
    setter: function setter(path) {
        var parts = normalizePath(path);
        return setCache.get(path) || setCache.set(path, function setter(obj, value) {
            var index = 0;
            var len = parts.length;
            var data = obj;
            while(index < len - 1){
                var part = parts[index];
                if (part === '__proto__' || part === 'constructor' || part === 'prototype') return obj;
                data = data[parts[index++]];
            }
            data[parts[index]] = value;
        });
    },
    getter: function getter(path, safe) {
        var parts = normalizePath(path);
        return getCache.get(path) || getCache.set(path, function getter(data) {
            var index = 0, len = parts.length;
            while(index < len){
                if (data != null || !safe) data = data[parts[index++]];
                else return;
            }
            return data;
        });
    },
    join: function join(segments) {
        return segments.reduce(function(path, part) {
            return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? '[' + part + ']' : (path ? '.' : '') + part);
        }, '');
    },
    forEach: function forEach1(path, cb, thisArg) {
        forEach(Array.isArray(path) ? path : split(path), cb, thisArg);
    }
};
function normalizePath(path) {
    return pathCache.get(path) || pathCache.set(path, split(path).map(function(part) {
        return part.replace(CLEAN_QUOTES_REGEX, '$2');
    }));
}
function split(path) {
    return path.match(SPLIT_REGEX);
}
function forEach(parts, iter, thisArg) {
    var len = parts.length, part, idx, isArray, isBracket;
    for(idx = 0; idx < len; idx++){
        part = parts[idx];
        if (part) {
            if (shouldBeQuoted(part)) part = '"' + part + '"';
            isBracket = isQuoted(part);
            isArray = !isBracket && /^\d+$/.test(part);
            iter.call(thisArg, part, isBracket, isArray, idx, parts);
        }
    }
}
function isQuoted(str) {
    return typeof str === 'string' && str && [
        "'",
        '"'
    ].indexOf(str.charAt(0)) !== -1;
}
function hasLeadingNumber(part) {
    return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}
function hasSpecialChars(part) {
    return SPEC_CHAR_REGEX.test(part);
}
function shouldBeQuoted(part) {
    return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}

},{}],"aknEg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIn", function() {
    return getIn;
});
var _propertyExpr = require("property-expr");
var trim = function(part) {
    return part.substr(0, part.length - 1).substr(1);
};
function getIn(schema, path, value) {
    var context = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : value;
    var parent, lastPart, lastPartDebug; // root path: ''
    if (!path) return {
        parent: parent,
        parentPath: path,
        schema: schema
    };
    _propertyExpr.forEach(path, function(_part, isBracket, isArray) {
        var part = isBracket ? trim(_part) : _part;
        schema = schema.resolve({
            context: context,
            parent: parent,
            value: value
        });
        if (schema.innerType) {
            var idx = isArray ? parseInt(part, 10) : 0;
            if (value && idx >= value.length) throw new Error("Yup.reach cannot resolve an array item at index: ".concat(_part, ", in the path: ").concat(path, ". ") + "because there is no value at that index. ");
            parent = value;
            value = value && value[idx];
            schema = schema.innerType;
        } // sometimes the array index part of a path doesn't exist: "nested.arr.child"
        // in these cases the current part is the next schema and should be processed
        // in this iteration. For cases where the index signature is included this
        // check will fail and we'll handle the `child` part on the next iteration like normal
        if (!isArray) {
            if (!schema.fields || !schema.fields[part]) throw new Error("The schema does not contain the path: ".concat(path, ". ") + "(failed at: ".concat(lastPartDebug, " which is a type: \"").concat(schema._type, "\")"));
            parent = value;
            value = value && value[part];
            schema = schema.fields[part];
        }
        lastPart = part;
        lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;
    });
    return {
        schema: schema,
        parent: parent,
        parentPath: lastPart
    };
}
var reach = function(obj, path, value, context) {
    return getIn(obj, path, value, context).schema;
};
exports.default = reach;

},{"property-expr":"7cgUm","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hCXXq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ReferenceSet;
});
var _helpers = require("@swc/helpers");
var _reference = require("../Reference");
var _referenceDefault = parcelHelpers.interopDefault(_reference);
var ReferenceSet = /*#__PURE__*/ function() {
    "use strict";
    function ReferenceSet() {
        _helpers.classCallCheck(this, ReferenceSet);
        this.list = void 0;
        this.refs = void 0;
        this.list = new Set();
        this.refs = new Map();
    }
    _helpers.createClass(ReferenceSet, [
        {
            key: "size",
            get: function get() {
                return this.list.size + this.refs.size;
            }
        },
        {
            key: "describe",
            value: function describe() {
                var description = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var item = _step.value;
                        description.push(item);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = this.refs[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var _value = _helpers.slicedToArray(_step1.value, 2), ref = _value[1];
                        description.push(ref.describe());
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                return description;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                return Array.from(this.list).concat(Array.from(this.refs.values()));
            }
        },
        {
            key: "resolveAll",
            value: function resolveAll(resolve) {
                return this.toArray().reduce(function(acc, e) {
                    return acc.concat(_referenceDefault.default.isRef(e) ? resolve(e) : e);
                }, []);
            }
        },
        {
            key: "add",
            value: function add(value) {
                _referenceDefault.default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
            }
        },
        {
            key: "delete",
            value: function _delete(value) {
                _referenceDefault.default.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
            }
        },
        {
            key: "clone",
            value: function clone() {
                var next = new ReferenceSet();
                next.list = new Set(this.list);
                next.refs = new Map(this.refs);
                return next;
            }
        },
        {
            key: "merge",
            value: function merge(newItems, removeItems) {
                var next = this.clone();
                newItems.list.forEach(function(value) {
                    return next.add(value);
                });
                newItems.refs.forEach(function(value) {
                    return next.add(value);
                });
                removeItems.list.forEach(function(value) {
                    return next.delete(value);
                });
                removeItems.refs.forEach(function(value) {
                    return next.delete(value);
                });
                return next;
            }
        }
    ]);
    return ReferenceSet;
}();

},{"@swc/helpers":"cawJ1","../Reference":"cJReZ","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g8jUL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return BooleanSchema;
});
var _helpers = require("@swc/helpers");
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
var _locale = require("./locale");
var _isAbsent = require("./util/isAbsent");
var _isAbsentDefault = parcelHelpers.interopDefault(_isAbsent);
function create() {
    return new BooleanSchema();
}
var BooleanSchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(BooleanSchema, BaseSchema);
    var _super = _helpers.createSuper(BooleanSchema);
    function BooleanSchema() {
        _helpers.classCallCheck(this, BooleanSchema);
        var _this;
        _this = _super.call(this, {
            type: 'boolean'
        });
        _this.withMutation(function() {
            _this.transform(function(value) {
                if (!_this.isType(value)) {
                    if (/^(true|1)$/i.test(String(value))) return true;
                    if (/^(false|0)$/i.test(String(value))) return false;
                }
                return value;
            });
        });
        return _this;
    }
    _helpers.createClass(BooleanSchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(v) {
                if (v instanceof Boolean) v = v.valueOf();
                return typeof v === 'boolean';
            }
        },
        {
            key: "isTrue",
            value: function isTrue() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.boolean.isValue;
                return this.test({
                    message: message,
                    name: 'is-value',
                    exclusive: true,
                    params: {
                        value: 'true'
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value === true;
                    }
                });
            }
        },
        {
            key: "isFalse",
            value: function isFalse() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.boolean.isValue;
                return this.test({
                    message: message,
                    name: 'is-value',
                    exclusive: true,
                    params: {
                        value: 'false'
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value === false;
                    }
                });
            }
        }
    ]);
    return BooleanSchema;
}(_schemaDefault.default);
create.prototype = BooleanSchema.prototype;

},{"@swc/helpers":"cawJ1","./schema":"cjaeG","./locale":"6pzIM","./util/isAbsent":"95E5W","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"95E5W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isAbsent = function(value) {
    return value == null;
};
exports.default = isAbsent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"it0d2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return StringSchema;
});
var _helpers = require("@swc/helpers");
var _locale = require("./locale");
var _isAbsent = require("./util/isAbsent");
var _isAbsentDefault = parcelHelpers.interopDefault(_isAbsent);
var _schema = require("./schema"); // eslint-disable-next-line
var _schemaDefault = parcelHelpers.interopDefault(_schema);
var rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i; // eslint-disable-next-line
var rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i; // eslint-disable-next-line
var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
var isTrimmed = function(value) {
    return _isAbsentDefault.default(value) || value === value.trim();
};
var objStringTag = ({
}).toString();
function create() {
    return new StringSchema();
}
var StringSchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(StringSchema, BaseSchema);
    var _super = _helpers.createSuper(StringSchema);
    function StringSchema() {
        _helpers.classCallCheck(this, StringSchema);
        var _this;
        _this = _super.call(this, {
            type: 'string'
        });
        _this.withMutation(function() {
            _this.transform(function(value) {
                if (_this.isType(value)) return value;
                if (Array.isArray(value)) return value;
                var strValue = value != null && value.toString ? value.toString() : value;
                if (strValue === objStringTag) return value;
                return strValue;
            });
        });
        return _this;
    }
    _helpers.createClass(StringSchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(value) {
                if (value instanceof String) value = value.valueOf();
                return typeof value === 'string';
            }
        },
        {
            key: "_isPresent",
            value: function _isPresent(value) {
                return _helpers.get(_helpers.getPrototypeOf(StringSchema.prototype), "_isPresent", this).call(this, value) && !!value.length;
            }
        },
        {
            key: "length",
            value: function length1(length) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.string.length;
                return this.test({
                    message: message,
                    name: 'length',
                    exclusive: true,
                    params: {
                        length: length
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length === this.resolve(length);
                    }
                });
            }
        },
        {
            key: "min",
            value: function min1(min) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.string.min;
                return this.test({
                    message: message,
                    name: 'min',
                    exclusive: true,
                    params: {
                        min: min
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length >= this.resolve(min);
                    }
                });
            }
        },
        {
            key: "max",
            value: function max1(max) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.string.max;
                return this.test({
                    name: 'max',
                    exclusive: true,
                    message: message,
                    params: {
                        max: max
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length <= this.resolve(max);
                    }
                });
            }
        },
        {
            key: "matches",
            value: function matches(regex, options) {
                var excludeEmptyString = false;
                var message;
                var name;
                if (options) {
                    var ref, ref1;
                    if (typeof options === 'object') ref = options, ref1 = ref.excludeEmptyString, excludeEmptyString = ref1 === void 0 ? false : ref1, message = ref.message, name = ref.name, ref;
                    else message = options;
                }
                return this.test({
                    name: name || 'matches',
                    message: message || _locale.string.matches,
                    params: {
                        regex: regex
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value === '' && excludeEmptyString || value.search(regex) !== -1;
                    }
                });
            }
        },
        {
            key: "email",
            value: function email() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.email;
                return this.matches(rEmail, {
                    name: 'email',
                    message: message,
                    excludeEmptyString: true
                });
            }
        },
        {
            key: "url",
            value: function url() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.url;
                return this.matches(rUrl, {
                    name: 'url',
                    message: message,
                    excludeEmptyString: true
                });
            }
        },
        {
            key: "uuid",
            value: function uuid() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.uuid;
                return this.matches(rUUID, {
                    name: 'uuid',
                    message: message,
                    excludeEmptyString: false
                });
            } //-- transforms --
        },
        {
            key: "ensure",
            value: function ensure() {
                return this.default('').transform(function(val) {
                    return val === null ? '' : val;
                });
            }
        },
        {
            key: "trim",
            value: function trim() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.trim;
                return this.transform(function(val) {
                    return val != null ? val.trim() : val;
                }).test({
                    message: message,
                    name: 'trim',
                    test: isTrimmed
                });
            }
        },
        {
            key: "lowercase",
            value: function lowercase() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.lowercase;
                return this.transform(function(value) {
                    return !_isAbsentDefault.default(value) ? value.toLowerCase() : value;
                }).test({
                    message: message,
                    name: 'string_case',
                    exclusive: true,
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value === value.toLowerCase();
                    }
                });
            }
        },
        {
            key: "uppercase",
            value: function uppercase() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.string.uppercase;
                return this.transform(function(value) {
                    return !_isAbsentDefault.default(value) ? value.toUpperCase() : value;
                }).test({
                    message: message,
                    name: 'string_case',
                    exclusive: true,
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value === value.toUpperCase();
                    }
                });
            }
        }
    ]);
    return StringSchema;
}(_schemaDefault.default);
create.prototype = StringSchema.prototype; //
 // String Interfaces
 //

},{"@swc/helpers":"cawJ1","./locale":"6pzIM","./util/isAbsent":"95E5W","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aYaH0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return NumberSchema;
});
var _helpers = require("@swc/helpers");
var _locale = require("./locale");
var _isAbsent = require("./util/isAbsent");
var _isAbsentDefault = parcelHelpers.interopDefault(_isAbsent);
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
var isNaN = function(value) {
    return value != +value;
};
function create() {
    return new NumberSchema();
}
var NumberSchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(NumberSchema, BaseSchema);
    var _super = _helpers.createSuper(NumberSchema);
    function NumberSchema() {
        _helpers.classCallCheck(this, NumberSchema);
        var _this;
        _this = _super.call(this, {
            type: 'number'
        });
        _this.withMutation(function() {
            _this.transform(function(value) {
                var parsed = value;
                if (typeof parsed === 'string') {
                    parsed = parsed.replace(/\s/g, '');
                    if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings
                    parsed = +parsed;
                }
                if (_this.isType(parsed)) return parsed;
                return parseFloat(parsed);
            });
        });
        return _this;
    }
    _helpers.createClass(NumberSchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(value) {
                if (value instanceof Number) value = value.valueOf();
                return typeof value === 'number' && !isNaN(value);
            }
        },
        {
            key: "min",
            value: function min1(min) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.number.min;
                return this.test({
                    message: message,
                    name: 'min',
                    exclusive: true,
                    params: {
                        min: min
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value >= this.resolve(min);
                    }
                });
            }
        },
        {
            key: "max",
            value: function max1(max) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.number.max;
                return this.test({
                    message: message,
                    name: 'max',
                    exclusive: true,
                    params: {
                        max: max
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value <= this.resolve(max);
                    }
                });
            }
        },
        {
            key: "lessThan",
            value: function lessThan(less) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.number.lessThan;
                return this.test({
                    message: message,
                    name: 'max',
                    exclusive: true,
                    params: {
                        less: less
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value < this.resolve(less);
                    }
                });
            }
        },
        {
            key: "moreThan",
            value: function moreThan(more) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.number.moreThan;
                return this.test({
                    message: message,
                    name: 'min',
                    exclusive: true,
                    params: {
                        more: more
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value > this.resolve(more);
                    }
                });
            }
        },
        {
            key: "positive",
            value: function positive() {
                var msg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.number.positive;
                return this.moreThan(0, msg);
            }
        },
        {
            key: "negative",
            value: function negative() {
                var msg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.number.negative;
                return this.lessThan(0, msg);
            }
        },
        {
            key: "integer",
            value: function integer() {
                var message = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _locale.number.integer;
                return this.test({
                    name: 'integer',
                    message: message,
                    test: function(val) {
                        return _isAbsentDefault.default(val) || Number.isInteger(val);
                    }
                });
            }
        },
        {
            key: "truncate",
            value: function truncate() {
                return this.transform(function(value) {
                    return !_isAbsentDefault.default(value) ? value | 0 : value;
                });
            }
        },
        {
            key: "round",
            value: function round(method) {
                var _method;
                var avail = [
                    'ceil',
                    'floor',
                    'round',
                    'trunc'
                ];
                method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc
                if (method === 'trunc') return this.truncate();
                if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));
                return this.transform(function(value) {
                    return !_isAbsentDefault.default(value) ? Math[method](value) : value;
                });
            }
        }
    ]);
    return NumberSchema;
}(_schemaDefault.default);
create.prototype = NumberSchema.prototype; //
 // Number Interfaces
 //

},{"@swc/helpers":"cawJ1","./locale":"6pzIM","./util/isAbsent":"95E5W","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cgHto":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return DateSchema;
});
var _helpers = require("@swc/helpers");
// @ts-ignore
var _isodate = require("./util/isodate");
var _isodateDefault = parcelHelpers.interopDefault(_isodate);
var _locale = require("./locale");
var _isAbsent = require("./util/isAbsent");
var _isAbsentDefault = parcelHelpers.interopDefault(_isAbsent);
var _reference = require("./Reference");
var _referenceDefault = parcelHelpers.interopDefault(_reference);
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
var invalidDate = new Date('');
var isDate = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
};
function create() {
    return new DateSchema();
}
var DateSchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(DateSchema, BaseSchema);
    var _super = _helpers.createSuper(DateSchema);
    function DateSchema() {
        _helpers.classCallCheck(this, DateSchema);
        var _this;
        _this = _super.call(this, {
            type: 'date'
        });
        _this.withMutation(function() {
            _this.transform(function(value) {
                if (_this.isType(value)) return value;
                value = _isodateDefault.default(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.
                return !isNaN(value) ? new Date(value) : invalidDate;
            });
        });
        return _this;
    }
    _helpers.createClass(DateSchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(v) {
                return isDate(v) && !isNaN(v.getTime());
            }
        },
        {
            key: "prepareParam",
            value: function prepareParam(ref, name) {
                var param;
                if (!_referenceDefault.default.isRef(ref)) {
                    var cast = this.cast(ref);
                    if (!this._typeCheck(cast)) throw new TypeError("`".concat(name, "` must be a Date or a value that can be `cast()` to a Date"));
                    param = cast;
                } else param = ref;
                return param;
            }
        },
        {
            key: "min",
            value: function min1(min) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.date.min;
                var limit = this.prepareParam(min, 'min');
                return this.test({
                    message: message,
                    name: 'min',
                    exclusive: true,
                    params: {
                        min: min
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value >= this.resolve(limit);
                    }
                });
            }
        },
        {
            key: "max",
            value: function max1(max) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.date.max;
                var limit = this.prepareParam(max, 'max');
                return this.test({
                    message: message,
                    name: 'max',
                    exclusive: true,
                    params: {
                        max: max
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value <= this.resolve(limit);
                    }
                });
            }
        }
    ]);
    return DateSchema;
}(_schemaDefault.default);
DateSchema.INVALID_DATE = invalidDate;
create.prototype = DateSchema.prototype;
create.INVALID_DATE = invalidDate;

},{"@swc/helpers":"cawJ1","./util/isodate":"41YcE","./locale":"6pzIM","./util/isAbsent":"95E5W","./Reference":"cJReZ","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"41YcE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable */ /**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */ //              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date) {
    var numericKeys = [
        1,
        4,
        5,
        6,
        7,
        10,
        11
    ], minutesOffset = 0, timestamp, struct;
    if (struct = isoReg.exec(date)) {
        // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
        for(var i = 0, k; k = numericKeys[i]; ++i)struct[k] = +struct[k] || 0; // allow undefined days and months
        struct[2] = (+struct[2] || 1) - 1;
        struct[3] = +struct[3] || 1; // allow arbitrary sub-second precision beyond milliseconds
        struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0; // timestamps without timezone identifiers should be considered local time
        if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
        else {
            if (struct[8] !== 'Z' && struct[9] !== undefined) {
                minutesOffset = struct[10] * 60 + struct[11];
                if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
            }
            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
        }
    } else timestamp = Date.parse ? Date.parse(date) : NaN;
    return timestamp;
}
exports.default = parseIsoDate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1wTcF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ObjectSchema;
});
parcelHelpers.export(exports, "create", function() {
    return create;
});
var _helpers = require("@swc/helpers");
var _has = require("lodash/has");
var _hasDefault = parcelHelpers.interopDefault(_has);
var _snakeCase = require("lodash/snakeCase");
var _snakeCaseDefault = parcelHelpers.interopDefault(_snakeCase);
var _camelCase = require("lodash/camelCase");
var _camelCaseDefault = parcelHelpers.interopDefault(_camelCase);
var _mapKeys = require("lodash/mapKeys");
var _mapKeysDefault = parcelHelpers.interopDefault(_mapKeys);
var _mapValues = require("lodash/mapValues");
var _mapValuesDefault = parcelHelpers.interopDefault(_mapValues);
var _propertyExpr = require("property-expr");
var _locale = require("./locale");
var _sortFields = require("./util/sortFields");
var _sortFieldsDefault = parcelHelpers.interopDefault(_sortFields);
var _sortByKeyOrder = require("./util/sortByKeyOrder");
var _sortByKeyOrderDefault = parcelHelpers.interopDefault(_sortByKeyOrder);
var _runTests = require("./util/runTests");
var _runTestsDefault = parcelHelpers.interopDefault(_runTests);
var _validationError = require("./ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var isObject = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
};
function unknown(ctx, value) {
    var known = Object.keys(ctx.fields);
    return Object.keys(value).filter(function(key) {
        return known.indexOf(key) === -1;
    });
}
var defaultSort = _sortByKeyOrderDefault.default([]);
var ObjectSchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(ObjectSchema, BaseSchema);
    var _super = _helpers.createSuper(ObjectSchema);
    function ObjectSchema(spec) {
        _helpers.classCallCheck(this, ObjectSchema);
        var _this;
        _this = _super.call(this, {
            type: 'object'
        });
        _this.fields = Object.create(null);
        _this._sortErrors = defaultSort;
        _this._nodes = [];
        _this._excludedEdges = [];
        _this.withMutation(function() {
            _this.transform(function coerce(value) {
                if (typeof value === 'string') try {
                    value = JSON.parse(value);
                } catch (err) {
                    value = null;
                }
                if (_this.isType(value)) return value;
                return null;
            });
            if (spec) _this.shape(spec);
        });
        return _this;
    }
    _helpers.createClass(ObjectSchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(value) {
                return isObject(value) || typeof value === 'function';
            }
        },
        {
            key: "_cast",
            value: function _cast(_value) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                };
                var _this = this;
                var _options$stripUnknown;
                var value = _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "_cast", this).call(this, _value, options); //should ignore nulls here
                if (value === undefined) return this.getDefault();
                if (!this._typeCheck(value)) return value;
                var fields = this.fields;
                var strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
                var props = this._nodes.concat(Object.keys(value).filter(function(v) {
                    return _this._nodes.indexOf(v) === -1;
                }));
                var intermediateValue = {
                }; // is filled during the transform below
                var innerOptions = _extends({
                }, options, {
                    parent: intermediateValue,
                    __validating: options.__validating || false
                });
                var isChanged = false;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var prop = _step.value;
                        var field = fields[prop];
                        var exists = _hasDefault.default(value, prop);
                        if (field) {
                            var fieldValue = void 0;
                            var inputValue = value[prop]; // safe to mutate since this is fired in sequence
                            innerOptions.path = (options.path ? "".concat(options.path, ".") : '') + prop; // innerOptions.value = value[prop];
                            field = field.resolve({
                                value: inputValue,
                                context: options.context,
                                parent: intermediateValue
                            });
                            var fieldSpec = 'spec' in field ? field.spec : undefined;
                            var strict = fieldSpec == null ? void 0 : fieldSpec.strict;
                            if (fieldSpec == null ? void 0 : fieldSpec.strip) {
                                isChanged = isChanged || prop in value;
                                continue;
                            }
                            fieldValue = !options.__validating || !strict ? field.cast(value[prop], innerOptions) : value[prop];
                            if (fieldValue !== undefined) intermediateValue[prop] = fieldValue;
                        } else if (exists && !strip) intermediateValue[prop] = value[prop];
                        if (intermediateValue[prop] !== value[prop]) isChanged = true;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return isChanged ? intermediateValue : value;
            }
        },
        {
            key: "_validate",
            value: function _validate(_value) {
                var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                }, callback = arguments.length > 2 ? arguments[2] : void 0;
                var _this = this;
                var errors = [];
                var sync = opts.sync, _from = opts.from, from = _from === void 0 ? [] : _from, _originalValue = opts.originalValue, originalValue = _originalValue === void 0 ? _value : _originalValue, _abortEarly = opts.abortEarly, abortEarly = _abortEarly === void 0 ? this.spec.abortEarly : _abortEarly, _recursive = opts.recursive, recursive = _recursive === void 0 ? this.spec.recursive : _recursive;
                from = [
                    {
                        schema: this,
                        value: originalValue
                    }
                ].concat(_helpers.toConsumableArray(from)); // this flag is needed for handling `strict` correctly in the context of
                // validation vs just casting. e.g strict() on a field is only used when validating
                opts.__validating = true;
                opts.originalValue = originalValue;
                opts.from = from;
                _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "_validate", this).call(this, _value, opts, function(err, value) {
                    var _this1 = _this;
                    if (err) {
                        if (!_validationErrorDefault.default.isError(err) || abortEarly) return void callback(err, value);
                        errors.push(err);
                    }
                    if (!recursive || !isObject(value)) {
                        callback(errors[0] || null, value);
                        return;
                    }
                    originalValue = originalValue || value;
                    var tests = _this._nodes.map(function(key) {
                        return function(_, cb) {
                            var path = key.indexOf('.') === -1 ? (opts.path ? "".concat(opts.path, ".") : '') + key : "".concat(opts.path || '', "[\"").concat(key, "\"]");
                            var field = _this1.fields[key];
                            if (field && 'validate' in field) {
                                field.validate(value[key], _extends({
                                }, opts, {
                                    // @ts-ignore
                                    path: path,
                                    from: from,
                                    // inner fields are always strict:
                                    // 1. this isn't strict so the casting will also have cast inner values
                                    // 2. this is strict in which case the nested values weren't cast either
                                    strict: true,
                                    parent: value,
                                    originalValue: originalValue[key]
                                }), cb);
                                return;
                            }
                            cb(null);
                        };
                    });
                    _runTestsDefault.default({
                        sync: sync,
                        tests: tests,
                        value: value,
                        errors: errors,
                        endEarly: abortEarly,
                        sort: _this._sortErrors,
                        path: opts.path
                    }, callback);
                });
            }
        },
        {
            key: "clone",
            value: function clone(spec) {
                var next = _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "clone", this).call(this, spec);
                next.fields = _extends({
                }, this.fields);
                next._nodes = this._nodes;
                next._excludedEdges = this._excludedEdges;
                next._sortErrors = this._sortErrors;
                return next;
            }
        },
        {
            key: "concat",
            value: function concat(schema) {
                var _this = this;
                var next = _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "concat", this).call(this, schema);
                var nextFields = next.fields;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = Object.entries(this.fields)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _helpers.slicedToArray(_step.value, 2), field = _value[0], schemaOrRef = _value[1];
                        var target = nextFields[field];
                        if (target === undefined) nextFields[field] = schemaOrRef;
                        else if (target instanceof _schemaDefault.default && schemaOrRef instanceof _schemaDefault.default) nextFields[field] = schemaOrRef.concat(target);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return next.withMutation(function() {
                    return next.shape(nextFields, _this._excludedEdges);
                });
            }
        },
        {
            key: "getDefaultFromShape",
            value: function getDefaultFromShape() {
                var _this = this;
                var dft = {
                };
                this._nodes.forEach(function(key) {
                    var field = _this.fields[key];
                    dft[key] = 'default' in field ? field.getDefault() : undefined;
                });
                return dft;
            }
        },
        {
            key: "_getDefault",
            value: function _getDefault() {
                if ('default' in this.spec) return _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "_getDefault", this).call(this);
                 // if there is no default set invent one
                if (!this._nodes.length) return undefined;
                return this.getDefaultFromShape();
            }
        },
        {
            key: "shape",
            value: function shape(additions) {
                var excludes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                var next = this.clone();
                var fields = Object.assign(next.fields, additions);
                next.fields = fields;
                next._sortErrors = _sortByKeyOrderDefault.default(Object.keys(fields));
                if (excludes.length) {
                    // this is a convenience for when users only supply a single pair
                    if (!Array.isArray(excludes[0])) excludes = [
                        excludes
                    ];
                    next._excludedEdges = _helpers.toConsumableArray(next._excludedEdges).concat(_helpers.toConsumableArray(excludes));
                }
                next._nodes = _sortFieldsDefault.default(fields, next._excludedEdges);
                return next;
            }
        },
        {
            key: "pick",
            value: function pick(keys) {
                var picked = {
                };
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var key = _step.value;
                        if (this.fields[key]) picked[key] = this.fields[key];
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return this.clone().withMutation(function(next) {
                    next.fields = {
                    };
                    return next.shape(picked);
                });
            }
        },
        {
            key: "omit",
            value: function omit(keys) {
                var next = this.clone();
                var fields = next.fields;
                next.fields = {
                };
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var key = _step.value;
                        delete fields[key];
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return next.withMutation(function() {
                    return next.shape(fields);
                });
            }
        },
        {
            key: "from",
            value: function from1(from, to, alias) {
                var fromGetter = _propertyExpr.getter(from, true);
                return this.transform(function(obj) {
                    if (obj == null) return obj;
                    var newObj = obj;
                    if (_hasDefault.default(obj, from)) {
                        newObj = _extends({
                        }, obj);
                        if (!alias) delete newObj[from];
                        newObj[to] = fromGetter(obj);
                    }
                    return newObj;
                });
            }
        },
        {
            key: "noUnknown",
            value: function noUnknown() {
                var noAllow = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.object.noUnknown;
                if (typeof noAllow === 'string') {
                    message = noAllow;
                    noAllow = true;
                }
                var next = this.test({
                    name: 'noUnknown',
                    exclusive: true,
                    message: message,
                    test: function(value) {
                        if (value == null) return true;
                        var unknownKeys = unknown(this.schema, value);
                        return !noAllow || unknownKeys.length === 0 || this.createError({
                            params: {
                                unknown: unknownKeys.join(', ')
                            }
                        });
                    }
                });
                next.spec.noUnknown = noAllow;
                return next;
            }
        },
        {
            key: "unknown",
            value: function unknown() {
                var allow = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.object.noUnknown;
                return this.noUnknown(!allow, message);
            }
        },
        {
            key: "transformKeys",
            value: function transformKeys(fn) {
                return this.transform(function(obj) {
                    return obj && _mapKeysDefault.default(obj, function(_, key) {
                        return fn(key);
                    });
                });
            }
        },
        {
            key: "camelCase",
            value: function camelCase() {
                return this.transformKeys(_camelCaseDefault.default);
            }
        },
        {
            key: "snakeCase",
            value: function snakeCase() {
                return this.transformKeys(_snakeCaseDefault.default);
            }
        },
        {
            key: "constantCase",
            value: function constantCase() {
                return this.transformKeys(function(key) {
                    return _snakeCaseDefault.default(key).toUpperCase();
                });
            }
        },
        {
            key: "describe",
            value: function describe() {
                var base = _helpers.get(_helpers.getPrototypeOf(ObjectSchema.prototype), "describe", this).call(this);
                base.fields = _mapValuesDefault.default(this.fields, function(value) {
                    return value.describe();
                });
                return base;
            }
        }
    ]);
    return ObjectSchema;
}(_schemaDefault.default);
function create(spec) {
    return new ObjectSchema(spec);
}
create.prototype = ObjectSchema.prototype;

},{"@swc/helpers":"cawJ1","lodash/has":"UIsIc","lodash/snakeCase":"1ro8g","lodash/camelCase":"f9rj9","lodash/mapKeys":"jjl4G","lodash/mapValues":"j5C5w","property-expr":"7cgUm","./locale":"6pzIM","./util/sortFields":"cNrmp","./util/sortByKeyOrder":"7srFE","./util/runTests":"8iXQO","./ValidationError":"grLFR","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1ro8g":[function(require,module,exports) {
var createCompounder = require('./_createCompounder');
/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */ var snakeCase = createCompounder(function(result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
});
module.exports = snakeCase;

},{"./_createCompounder":"imnXP"}],"imnXP":[function(require,module,exports) {
var arrayReduce = require('./_arrayReduce'), deburr = require('./deburr'), words = require('./words');
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]";
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
}
module.exports = createCompounder;

},{"./_arrayReduce":"35DLv","./deburr":"8OM7r","./words":"f9UO9"}],"35DLv":[function(require,module,exports) {
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array == null ? 0 : array.length;
    if (initAccum && length) accumulator = array[++index];
    while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
    return accumulator;
}
module.exports = arrayReduce;

},{}],"8OM7r":[function(require,module,exports) {
var deburrLetter = require('./_deburrLetter'), toString = require('./toString');
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
/** Used to compose unicode capture groups. */ var rsCombo = '[' + rsComboRange + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}
module.exports = deburr;

},{"./_deburrLetter":"gML10","./toString":"biUn3"}],"gML10":[function(require,module,exports) {
var basePropertyOf = require('./_basePropertyOf');
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 's'
};
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = basePropertyOf(deburredLetters);
module.exports = deburrLetter;

},{"./_basePropertyOf":"7Qb3f"}],"7Qb3f":[function(require,module,exports) {
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
module.exports = basePropertyOf;

},{}],"f9UO9":[function(require,module,exports) {
var asciiWords = require('./_asciiWords'), hasUnicodeWord = require('./_hasUnicodeWord'), toString = require('./toString'), unicodeWords = require('./_unicodeWords');
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    return string.match(pattern) || [];
}
module.exports = words;

},{"./_asciiWords":"iqvtY","./_hasUnicodeWord":"5TJ2a","./toString":"biUn3","./_unicodeWords":"jRDvT"}],"iqvtY":[function(require,module,exports) {
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
module.exports = asciiWords;

},{}],"5TJ2a":[function(require,module,exports) {
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
module.exports = hasUnicodeWord;

},{}],"jRDvT":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq;
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
        rsBreak,
        rsUpper + rsMiscLower,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
module.exports = unicodeWords;

},{}],"f9rj9":[function(require,module,exports) {
var capitalize = require('./capitalize'), createCompounder = require('./_createCompounder');
/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */ var camelCase = createCompounder(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
});
module.exports = camelCase;

},{"./capitalize":"3TI70","./_createCompounder":"imnXP"}],"3TI70":[function(require,module,exports) {
var toString = require('./toString'), upperFirst = require('./upperFirst');
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */ function capitalize(string) {
    return upperFirst(toString(string).toLowerCase());
}
module.exports = capitalize;

},{"./toString":"biUn3","./upperFirst":"deF1t"}],"deF1t":[function(require,module,exports) {
var createCaseFirst = require('./_createCaseFirst');
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */ var upperFirst = createCaseFirst('toUpperCase');
module.exports = upperFirst;

},{"./_createCaseFirst":"6oAdW"}],"6oAdW":[function(require,module,exports) {
var castSlice = require('./_castSlice'), hasUnicode = require('./_hasUnicode'), stringToArray = require('./_stringToArray'), toString = require('./toString');
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */ function createCaseFirst(methodName) {
    return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
    };
}
module.exports = createCaseFirst;

},{"./_castSlice":"66ZqP","./_hasUnicode":"9qfcY","./_stringToArray":"8aTCq","./toString":"biUn3"}],"66ZqP":[function(require,module,exports) {
var baseSlice = require('./_baseSlice');
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */ function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
}
module.exports = castSlice;

},{"./_baseSlice":"aZX2a"}],"aZX2a":[function(require,module,exports) {
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end > length ? length : end;
    if (end < 0) end += length;
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while(++index < length)result[index] = array[index + start];
    return result;
}
module.exports = baseSlice;

},{}],"9qfcY":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsZWJ = '\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */ function hasUnicode(string) {
    return reHasUnicode.test(string);
}
module.exports = hasUnicode;

},{}],"8aTCq":[function(require,module,exports) {
var asciiToArray = require('./_asciiToArray'), hasUnicode = require('./_hasUnicode'), unicodeToArray = require('./_unicodeToArray');
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
module.exports = stringToArray;

},{"./_asciiToArray":"dRlP0","./_hasUnicode":"9qfcY","./_unicodeToArray":"aPqI7"}],"dRlP0":[function(require,module,exports) {
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function asciiToArray(string) {
    return string.split('');
}
module.exports = asciiToArray;

},{}],"aPqI7":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsAstral = '[' + rsAstralRange + ']', rsCombo = '[' + rsComboRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = '(?:' + [
    rsNonAstral + rsCombo + '?',
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}
module.exports = unicodeToArray;

},{}],"jjl4G":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), baseForOwn = require('./_baseForOwn'), baseIteratee = require('./_baseIteratee');
/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */ function mapKeys(object1, iteratee) {
    var result = {
    };
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object1, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
    });
    return result;
}
module.exports = mapKeys;

},{"./_baseAssignValue":"d4SNj","./_baseForOwn":"dl601","./_baseIteratee":"hMNOv"}],"cNrmp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _has = require("lodash/has"); // @ts-expect-error
var _hasDefault = parcelHelpers.interopDefault(_has);
var _toposort = require("toposort");
var _toposortDefault = parcelHelpers.interopDefault(_toposort);
var _propertyExpr = require("property-expr");
var _reference = require("../Reference");
var _referenceDefault = parcelHelpers.interopDefault(_reference);
var _isSchema = require("./isSchema");
var _isSchemaDefault = parcelHelpers.interopDefault(_isSchema);
function sortFields(fields) {
    var _loop = function(key) {
        if (_hasDefault.default(fields, key)) {
            var value = fields[key];
            nodes.add(key);
            if (_referenceDefault.default.isRef(value) && value.isSibling) addNode(value.path, key);
            else if (_isSchemaDefault.default(value) && 'deps' in value) value.deps.forEach(function(path) {
                return addNode(path, key);
            });
        }
    };
    var excludedEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var edges = [];
    var nodes = new Set();
    var excludes = new Set(excludedEdges.map(function(param) {
        var _param = _helpers.slicedToArray(param, 2), a = _param[0], b = _param[1];
        return "".concat(a, "-").concat(b);
    }));
    function addNode(depPath, key) {
        var node = _propertyExpr.split(depPath)[0];
        nodes.add(node);
        if (!excludes.has("".concat(key, "-").concat(node))) edges.push([
            key,
            node
        ]);
    }
    for(var key in fields)_loop(key);
    return _toposortDefault.default.array(Array.from(nodes), edges).reverse();
}
exports.default = sortFields;

},{"@swc/helpers":"cawJ1","lodash/has":"UIsIc","toposort":"5j44F","property-expr":"7cgUm","../Reference":"cJReZ","./isSchema":"ubtYO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5j44F":[function(require,module,exports) {
/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */ module.exports = function(edges) {
    return toposort(uniqueNodes(edges), edges);
};
module.exports.array = toposort;
function toposort(nodes, edges) {
    var cursor = nodes.length, sorted = new Array(cursor), visited = {
    }, i1 = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
    // check for unknown nodes
    edges.forEach(function(edge) {
        if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) throw new Error('Unknown node. There is an unknown node in the supplied edges.');
    });
    while(i1--)if (!visited[i1]) visit(nodes[i1], i1, new Set());
    function visit(node, i, predecessors) {
        if (predecessors.has(node)) {
            var nodeRep;
            try {
                nodeRep = ", node was:" + JSON.stringify(node);
            } catch (e) {
                nodeRep = "";
            }
            throw new Error('Cyclic dependency' + nodeRep);
        }
        if (!nodesHash.has(node)) {
            throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));
        }
        if (visited[i]) return;
        visited[i] = true;
        var outgoing = outgoingEdges.get(node) || new Set();
        outgoing = Array.from(outgoing);
        if (i = outgoing.length) {
            predecessors.add(node);
            do {
                var child = outgoing[--i];
                visit(child, nodesHash.get(child), predecessors);
            }while (i)
            predecessors.delete(node);
        }
        sorted[--cursor] = node;
    }
    return sorted;
}
function uniqueNodes(arr) {
    var res = new Set();
    for(var i = 0, len = arr.length; i < len; i++){
        var edge = arr[i];
        res.add(edge[0]);
        res.add(edge[1]);
    }
    return Array.from(res);
}
function makeOutgoingEdges(arr) {
    var edges = new Map();
    for(var i = 0, len = arr.length; i < len; i++){
        var edge = arr[i];
        if (!edges.has(edge[0])) edges.set(edge[0], new Set());
        if (!edges.has(edge[1])) edges.set(edge[1], new Set());
        edges.get(edge[0]).add(edge[1]);
    }
    return edges;
}
function makeNodesHash(arr) {
    var res = new Map();
    for(var i = 0, len = arr.length; i < len; i++)res.set(arr[i], i);
    return res;
}

},{}],"7srFE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function findIndex(arr, err) {
    var idx = Infinity;
    arr.some(function(key, ii) {
        var _err$path;
        if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
            idx = ii;
            return true;
        }
    });
    return idx;
}
function sortByKeyOrder(keys) {
    return function(a, b) {
        return findIndex(keys, a) - findIndex(keys, b);
    };
}
exports.default = sortByKeyOrder;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cdfE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
parcelHelpers.export(exports, "default", function() {
    return ArraySchema;
});
var _helpers = require("@swc/helpers");
var _isAbsent = require("./util/isAbsent");
var _isAbsentDefault = parcelHelpers.interopDefault(_isAbsent);
var _isSchema = require("./util/isSchema");
var _isSchemaDefault = parcelHelpers.interopDefault(_isSchema);
var _printValue = require("./util/printValue");
var _printValueDefault = parcelHelpers.interopDefault(_printValue);
var _locale = require("./locale");
var _runTests = require("./util/runTests");
var _runTestsDefault = parcelHelpers.interopDefault(_runTests);
var _validationError = require("./ValidationError");
var _validationErrorDefault = parcelHelpers.interopDefault(_validationError);
var _schema = require("./schema");
var _schemaDefault = parcelHelpers.interopDefault(_schema);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function create(type) {
    return new ArraySchema(type);
}
var ArraySchema = /*#__PURE__*/ function(BaseSchema) {
    "use strict";
    _helpers.inherits(ArraySchema, BaseSchema);
    var _super = _helpers.createSuper(ArraySchema);
    function ArraySchema(type) {
        _helpers.classCallCheck(this, ArraySchema);
        var _this;
        _this = _super.call(this, {
            type: 'array'
        }); // `undefined` specifically means uninitialized, as opposed to
        // "no subtype"
        _this.innerType = void 0;
        _this.innerType = type;
        _this.withMutation(function() {
            _this.transform(function(values) {
                if (typeof values === 'string') try {
                    values = JSON.parse(values);
                } catch (err) {
                    values = null;
                }
                return _this.isType(values) ? values : null;
            });
        });
        return _this;
    }
    _helpers.createClass(ArraySchema, [
        {
            key: "_typeCheck",
            value: function _typeCheck(v) {
                return Array.isArray(v);
            }
        },
        {
            key: "_subType",
            get: function get() {
                return this.innerType;
            }
        },
        {
            key: "_cast",
            value: function _cast(_value, _opts) {
                var _this = this;
                var value = _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "_cast", this).call(this, _value, _opts); //should ignore nulls here
                if (!this._typeCheck(value) || !this.innerType) return value;
                var isChanged = false;
                var castArray = value.map(function(v, idx) {
                    var castElement = _this.innerType.cast(v, _extends({
                    }, _opts, {
                        path: "".concat(_opts.path || '', "[").concat(idx, "]")
                    }));
                    if (castElement !== v) isChanged = true;
                    return castElement;
                });
                return isChanged ? castArray : value;
            }
        },
        {
            key: "_validate",
            value: function _validate(_value) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                }, callback = arguments.length > 2 ? arguments[2] : void 0;
                var _this = this;
                var _options$abortEarly, _options$recursive;
                var errors = [];
                var sync = options.sync;
                var path1 = options.path;
                var innerType = this.innerType;
                var endEarly = (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
                var recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
                var originalValue = options.originalValue != null ? options.originalValue : _value;
                _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "_validate", this).call(this, _value, options, function(err, value) {
                    var _loop = function(idx) {
                        var item = value[idx];
                        var path = "".concat(options.path || '', "[").concat(idx, "]"); // object._validate note for isStrict explanation
                        var innerOptions = _extends({
                        }, options, {
                            path: path,
                            strict: true,
                            parent: value,
                            index: idx,
                            originalValue: originalValue[idx]
                        });
                        tests[idx] = function(_, cb) {
                            return innerType.validate(item, innerOptions, cb);
                        };
                    };
                    if (err) {
                        if (!_validationErrorDefault.default.isError(err) || endEarly) return void callback(err, value);
                        errors.push(err);
                    }
                    if (!recursive || !innerType || !_this._typeCheck(value)) {
                        callback(errors[0] || null, value);
                        return;
                    }
                    originalValue = originalValue || value; // #950 Ensure that sparse array empty slots are validated
                    var tests = new Array(value.length);
                    for(var idx = 0; idx < value.length; idx++)_loop(idx);
                    _runTestsDefault.default({
                        sync: sync,
                        path: path1,
                        value: value,
                        errors: errors,
                        endEarly: endEarly,
                        tests: tests
                    }, callback);
                });
            }
        },
        {
            key: "clone",
            value: function clone(spec) {
                var next = _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "clone", this).call(this, spec);
                next.innerType = this.innerType;
                return next;
            }
        },
        {
            key: "concat",
            value: function concat(schema) {
                var next = _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "concat", this).call(this, schema);
                next.innerType = this.innerType;
                if (schema.innerType) next.innerType = next.innerType ? next.innerType.concat(schema.innerType) : schema.innerType;
                return next;
            }
        },
        {
            key: "of",
            value: function of(schema) {
                // FIXME: this should return a new instance of array without the default to be
                var next = this.clone();
                if (!_isSchemaDefault.default(schema)) throw new TypeError('`array.of()` sub-schema must be a valid yup schema not: ' + _printValueDefault.default(schema)); // FIXME(ts):
                next.innerType = schema;
                return next;
            }
        },
        {
            key: "length",
            value: function length1(length) {
                var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _locale.array.length;
                return this.test({
                    message: message,
                    name: 'length',
                    exclusive: true,
                    params: {
                        length: length
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length === this.resolve(length);
                    }
                });
            }
        },
        {
            key: "min",
            value: function min1(min, message) {
                message = message || _locale.array.min;
                return this.test({
                    message: message,
                    name: 'min',
                    exclusive: true,
                    params: {
                        min: min
                    },
                    // FIXME(ts): Array<typeof T>
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length >= this.resolve(min);
                    }
                });
            }
        },
        {
            key: "max",
            value: function max1(max, message) {
                message = message || _locale.array.max;
                return this.test({
                    message: message,
                    name: 'max',
                    exclusive: true,
                    params: {
                        max: max
                    },
                    test: function(value) {
                        return _isAbsentDefault.default(value) || value.length <= this.resolve(max);
                    }
                });
            }
        },
        {
            key: "ensure",
            value: function ensure() {
                var _this = this;
                return this.default(function() {
                    return [];
                }).transform(function(val, original) {
                    // We don't want to return `null` for nullable schema
                    if (_this._typeCheck(val)) return val;
                    return original == null ? [] : [].concat(original);
                });
            }
        },
        {
            key: "compact",
            value: function compact(rejector) {
                var reject = !rejector ? function(v) {
                    return !!v;
                } : function(v, i, a) {
                    return !rejector(v, i, a);
                };
                return this.transform(function(values) {
                    return values != null ? values.filter(reject) : values;
                });
            }
        },
        {
            key: "describe",
            value: function describe() {
                var base = _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "describe", this).call(this);
                if (this.innerType) base.innerType = this.innerType.describe();
                return base;
            }
        },
        {
            key: "nullable",
            value: function nullable() {
                var isNullable = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                return _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "nullable", this).call(this, isNullable);
            }
        },
        {
            key: "defined",
            value: function defined() {
                return _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "defined", this).call(this);
            }
        },
        {
            key: "required",
            value: function required(msg) {
                return _helpers.get(_helpers.getPrototypeOf(ArraySchema.prototype), "required", this).call(this, msg);
            }
        }
    ]);
    return ArraySchema;
}(_schemaDefault.default);
create.prototype = ArraySchema.prototype; //
 // Interfaces
 //

},{"@swc/helpers":"cawJ1","./util/isAbsent":"95E5W","./util/isSchema":"ubtYO","./util/printValue":"fjVdc","./locale":"6pzIM","./util/runTests":"8iXQO","./ValidationError":"grLFR","./schema":"cjaeG","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a880E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", function() {
    return create;
});
var _helpers = require("@swc/helpers");
var _isSchema = require("./util/isSchema");
var _isSchemaDefault = parcelHelpers.interopDefault(_isSchema);
function create(builder) {
    return new Lazy(builder);
}
var Lazy = /*#__PURE__*/ function() {
    "use strict";
    function Lazy(builder) {
        var _this = this;
        _helpers.classCallCheck(this, Lazy);
        this.type = 'lazy';
        this.__isYupSchema__ = true;
        this.__inputType = void 0;
        this.__outputType = void 0;
        this._resolve = function(value) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
            };
            var schema = _this.builder(value, options);
            if (!_isSchemaDefault.default(schema)) throw new TypeError('lazy() functions must return a valid schema');
            return schema.resolve(options);
        };
        this.builder = builder;
    }
    _helpers.createClass(Lazy, [
        {
            key: "resolve",
            value: function resolve(options) {
                return this._resolve(options.value, options);
            }
        },
        {
            key: "cast",
            value: function cast(value, options) {
                return this._resolve(value, options).cast(value, options);
            }
        },
        {
            key: "validate",
            value: function validate(value, options, maybeCb) {
                // @ts-expect-error missing public callback on type
                return this._resolve(value, options).validate(value, options, maybeCb);
            }
        },
        {
            key: "validateSync",
            value: function validateSync(value, options) {
                return this._resolve(value, options).validateSync(value, options);
            }
        },
        {
            key: "validateAt",
            value: function validateAt(path, value, options) {
                return this._resolve(value, options).validateAt(path, value, options);
            }
        },
        {
            key: "validateSyncAt",
            value: function validateSyncAt(path, value, options) {
                return this._resolve(value, options).validateSyncAt(path, value, options);
            }
        },
        {
            key: "describe",
            value: function describe() {
                return null;
            }
        },
        {
            key: "isValid",
            value: function isValid(value, options) {
                return this._resolve(value, options).isValid(value, options);
            }
        },
        {
            key: "isValidSync",
            value: function isValidSync(value, options) {
                return this._resolve(value, options).isValidSync(value, options);
            }
        }
    ]);
    return Lazy;
}();
exports.default = Lazy;

},{"@swc/helpers":"cawJ1","./util/isSchema":"ubtYO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4z6ss":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _locale = require("./locale");
var _localeDefault = parcelHelpers.interopDefault(_locale);
function setLocale(custom) {
    Object.keys(custom).forEach(function(type) {
        // @ts-ignore
        Object.keys(custom[type]).forEach(function(method) {
            // @ts-ignore
            _localeDefault.default[type][method] = custom[type][method];
        });
    });
}
exports.default = setLocale;

},{"./locale":"6pzIM","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kDqtZ":[function() {},{}],"bYq7b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Accordion", function() {
    return _accordionDefault.default;
});
parcelHelpers.export(exports, "AccordionContext", function() {
    return _accordionContextDefault.default;
});
parcelHelpers.export(exports, "AccordionCollapse", function() {
    return _accordionCollapseDefault.default;
});
parcelHelpers.export(exports, "AccordionButton", function() {
    return _accordionButtonDefault.default;
});
parcelHelpers.export(exports, "useAccordionButton", function() {
    return _accordionButton.useAccordionButton;
});
parcelHelpers.export(exports, "Alert", function() {
    return _alertDefault.default;
});
parcelHelpers.export(exports, "Anchor", function() {
    return _anchorDefault.default;
});
parcelHelpers.export(exports, "Badge", function() {
    return _badgeDefault.default;
});
parcelHelpers.export(exports, "Breadcrumb", function() {
    return _breadcrumbDefault.default;
});
parcelHelpers.export(exports, "BreadcrumbItem", function() {
    return _breadcrumbItemDefault.default;
});
parcelHelpers.export(exports, "Button", function() {
    return _buttonDefault.default;
});
parcelHelpers.export(exports, "ButtonGroup", function() {
    return _buttonGroupDefault.default;
});
parcelHelpers.export(exports, "ButtonToolbar", function() {
    return _buttonToolbarDefault.default;
});
parcelHelpers.export(exports, "Card", function() {
    return _cardDefault.default;
});
parcelHelpers.export(exports, "CardImg", function() {
    return _cardImgDefault.default;
});
parcelHelpers.export(exports, "CardGroup", function() {
    return _cardGroupDefault.default;
});
parcelHelpers.export(exports, "Carousel", function() {
    return _carouselDefault.default;
});
parcelHelpers.export(exports, "CarouselItem", function() {
    return _carouselItemDefault.default;
});
parcelHelpers.export(exports, "CloseButton", function() {
    return _closeButtonDefault.default;
});
parcelHelpers.export(exports, "Col", function() {
    return _colDefault.default;
});
parcelHelpers.export(exports, "Collapse", function() {
    return _collapseDefault.default;
});
parcelHelpers.export(exports, "Dropdown", function() {
    return _dropdownDefault.default;
});
parcelHelpers.export(exports, "DropdownButton", function() {
    return _dropdownButtonDefault.default;
});
parcelHelpers.export(exports, "Fade", function() {
    return _fadeDefault.default;
});
parcelHelpers.export(exports, "Form", function() {
    return _formDefault.default;
});
parcelHelpers.export(exports, "FormControl", function() {
    return _formControlDefault.default;
});
parcelHelpers.export(exports, "FormCheck", function() {
    return _formCheckDefault.default;
});
parcelHelpers.export(exports, "FormFloating", function() {
    return _formFloatingDefault.default;
});
parcelHelpers.export(exports, "FloatingLabel", function() {
    return _floatingLabelDefault.default;
});
parcelHelpers.export(exports, "FormGroup", function() {
    return _formGroupDefault.default;
});
parcelHelpers.export(exports, "FormLabel", function() {
    return _formLabelDefault.default;
});
parcelHelpers.export(exports, "FormText", function() {
    return _formTextDefault.default;
});
parcelHelpers.export(exports, "FormSelect", function() {
    return _formSelectDefault.default;
});
parcelHelpers.export(exports, "Container", function() {
    return _containerDefault.default;
});
parcelHelpers.export(exports, "Image", function() {
    return _imageDefault.default;
});
parcelHelpers.export(exports, "Figure", function() {
    return _figureDefault.default;
});
parcelHelpers.export(exports, "InputGroup", function() {
    return _inputGroupDefault.default;
});
parcelHelpers.export(exports, "ListGroup", function() {
    return _listGroupDefault.default;
});
parcelHelpers.export(exports, "ListGroupItem", function() {
    return _listGroupItemDefault.default;
});
parcelHelpers.export(exports, "Modal", function() {
    return _modalDefault.default;
});
parcelHelpers.export(exports, "ModalBody", function() {
    return _modalBodyDefault.default;
});
parcelHelpers.export(exports, "ModalDialog", function() {
    return _modalDialogDefault.default;
});
parcelHelpers.export(exports, "ModalFooter", function() {
    return _modalFooterDefault.default;
});
parcelHelpers.export(exports, "ModalTitle", function() {
    return _modalTitleDefault.default;
});
parcelHelpers.export(exports, "Nav", function() {
    return _navDefault.default;
});
parcelHelpers.export(exports, "Navbar", function() {
    return _navbarDefault.default;
});
parcelHelpers.export(exports, "NavbarBrand", function() {
    return _navbarBrandDefault.default;
});
parcelHelpers.export(exports, "NavDropdown", function() {
    return _navDropdownDefault.default;
});
parcelHelpers.export(exports, "NavItem", function() {
    return _navItemDefault.default;
});
parcelHelpers.export(exports, "NavLink", function() {
    return _navLinkDefault.default;
});
parcelHelpers.export(exports, "Offcanvas", function() {
    return _offcanvasDefault.default;
});
parcelHelpers.export(exports, "OffcanvasHeader", function() {
    return _offcanvasHeaderDefault.default;
});
parcelHelpers.export(exports, "OffcanvasTitle", function() {
    return _offcanvasTitleDefault.default;
});
parcelHelpers.export(exports, "OffcanvasBody", function() {
    return _offcanvasBodyDefault.default;
});
parcelHelpers.export(exports, "Overlay", function() {
    return _overlayDefault.default;
});
parcelHelpers.export(exports, "OverlayTrigger", function() {
    return _overlayTriggerDefault.default;
});
parcelHelpers.export(exports, "PageItem", function() {
    return _pageItemDefault.default;
});
parcelHelpers.export(exports, "Pagination", function() {
    return _paginationDefault.default;
});
parcelHelpers.export(exports, "Placeholder", function() {
    return _placeholderDefault.default;
});
parcelHelpers.export(exports, "PlaceholderButton", function() {
    return _placeholderButtonDefault.default;
});
parcelHelpers.export(exports, "Popover", function() {
    return _popoverDefault.default;
});
parcelHelpers.export(exports, "PopoverHeader", function() {
    return _popoverHeaderDefault.default;
});
parcelHelpers.export(exports, "PopoverBody", function() {
    return _popoverBodyDefault.default;
});
parcelHelpers.export(exports, "ProgressBar", function() {
    return _progressBarDefault.default;
});
parcelHelpers.export(exports, "Ratio", function() {
    return _ratioDefault.default;
});
parcelHelpers.export(exports, "Row", function() {
    return _rowDefault.default;
});
parcelHelpers.export(exports, "Spinner", function() {
    return _spinnerDefault.default;
});
parcelHelpers.export(exports, "SplitButton", function() {
    return _splitButtonDefault.default;
});
parcelHelpers.export(exports, "SSRProvider", function() {
    return _ssrproviderDefault.default;
});
parcelHelpers.export(exports, "Stack", function() {
    return _stackDefault.default;
});
parcelHelpers.export(exports, "Tab", function() {
    return _tabDefault.default;
});
parcelHelpers.export(exports, "TabContainer", function() {
    return _tabContainerDefault.default;
});
parcelHelpers.export(exports, "TabContent", function() {
    return _tabContentDefault.default;
});
parcelHelpers.export(exports, "Table", function() {
    return _tableDefault.default;
});
parcelHelpers.export(exports, "TabPane", function() {
    return _tabPaneDefault.default;
});
parcelHelpers.export(exports, "Tabs", function() {
    return _tabsDefault.default;
});
parcelHelpers.export(exports, "ThemeProvider", function() {
    return _themeProviderDefault.default;
});
parcelHelpers.export(exports, "Toast", function() {
    return _toastDefault.default;
});
parcelHelpers.export(exports, "ToastBody", function() {
    return _toastBodyDefault.default;
});
parcelHelpers.export(exports, "ToastHeader", function() {
    return _toastHeaderDefault.default;
});
parcelHelpers.export(exports, "ToastContainer", function() {
    return _toastContainerDefault.default;
});
parcelHelpers.export(exports, "ToggleButton", function() {
    return _toggleButtonDefault.default;
});
parcelHelpers.export(exports, "ToggleButtonGroup", function() {
    return _toggleButtonGroupDefault.default;
});
parcelHelpers.export(exports, "Tooltip", function() {
    return _tooltipDefault.default;
});
var _accordion = require("./Accordion");
var _accordionDefault = parcelHelpers.interopDefault(_accordion);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _alert = require("./Alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _anchor = require("./Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _badge = require("./Badge");
var _badgeDefault = parcelHelpers.interopDefault(_badge);
var _breadcrumb = require("./Breadcrumb");
var _breadcrumbDefault = parcelHelpers.interopDefault(_breadcrumb);
var _breadcrumbItem = require("./BreadcrumbItem");
var _breadcrumbItemDefault = parcelHelpers.interopDefault(_breadcrumbItem);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _buttonToolbar = require("./ButtonToolbar");
var _buttonToolbarDefault = parcelHelpers.interopDefault(_buttonToolbar);
var _card = require("./Card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _cardImg = require("./CardImg");
var _cardImgDefault = parcelHelpers.interopDefault(_cardImg);
var _cardGroup = require("./CardGroup");
var _cardGroupDefault = parcelHelpers.interopDefault(_cardGroup);
var _carousel = require("./Carousel");
var _carouselDefault = parcelHelpers.interopDefault(_carousel);
var _carouselItem = require("./CarouselItem");
var _carouselItemDefault = parcelHelpers.interopDefault(_carouselItem);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _col = require("./Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _dropdownButton = require("./DropdownButton");
var _dropdownButtonDefault = parcelHelpers.interopDefault(_dropdownButton);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _form = require("./Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _formControl = require("./FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _formFloating = require("./FormFloating");
var _formFloatingDefault = parcelHelpers.interopDefault(_formFloating);
var _floatingLabel = require("./FloatingLabel");
var _floatingLabelDefault = parcelHelpers.interopDefault(_floatingLabel);
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _formLabel = require("./FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
var _formText = require("./FormText");
var _formTextDefault = parcelHelpers.interopDefault(_formText);
var _formSelect = require("./FormSelect");
var _formSelectDefault = parcelHelpers.interopDefault(_formSelect);
var _container = require("./Container");
var _containerDefault = parcelHelpers.interopDefault(_container);
var _image = require("./Image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _figure = require("./Figure");
var _figureDefault = parcelHelpers.interopDefault(_figure);
var _inputGroup = require("./InputGroup");
var _inputGroupDefault = parcelHelpers.interopDefault(_inputGroup);
var _listGroup = require("./ListGroup");
var _listGroupDefault = parcelHelpers.interopDefault(_listGroup);
var _listGroupItem = require("./ListGroupItem");
var _listGroupItemDefault = parcelHelpers.interopDefault(_listGroupItem);
var _modal = require("./Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _modalBody = require("./ModalBody");
var _modalBodyDefault = parcelHelpers.interopDefault(_modalBody);
var _modalDialog = require("./ModalDialog");
var _modalDialogDefault = parcelHelpers.interopDefault(_modalDialog);
var _modalFooter = require("./ModalFooter");
var _modalFooterDefault = parcelHelpers.interopDefault(_modalFooter);
var _modalTitle = require("./ModalTitle");
var _modalTitleDefault = parcelHelpers.interopDefault(_modalTitle);
var _nav = require("./Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _navbar = require("./Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
var _navbarBrand = require("./NavbarBrand");
var _navbarBrandDefault = parcelHelpers.interopDefault(_navbarBrand);
var _navDropdown = require("./NavDropdown");
var _navDropdownDefault = parcelHelpers.interopDefault(_navDropdown);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _offcanvas = require("./Offcanvas");
var _offcanvasDefault = parcelHelpers.interopDefault(_offcanvas);
var _offcanvasHeader = require("./OffcanvasHeader");
var _offcanvasHeaderDefault = parcelHelpers.interopDefault(_offcanvasHeader);
var _offcanvasTitle = require("./OffcanvasTitle");
var _offcanvasTitleDefault = parcelHelpers.interopDefault(_offcanvasTitle);
var _offcanvasBody = require("./OffcanvasBody");
var _offcanvasBodyDefault = parcelHelpers.interopDefault(_offcanvasBody);
var _overlay = require("./Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _overlayTrigger = require("./OverlayTrigger");
var _overlayTriggerDefault = parcelHelpers.interopDefault(_overlayTrigger);
var _pageItem = require("./PageItem");
var _pageItemDefault = parcelHelpers.interopDefault(_pageItem);
var _pagination = require("./Pagination");
var _paginationDefault = parcelHelpers.interopDefault(_pagination);
var _placeholder = require("./Placeholder");
var _placeholderDefault = parcelHelpers.interopDefault(_placeholder);
var _placeholderButton = require("./PlaceholderButton");
var _placeholderButtonDefault = parcelHelpers.interopDefault(_placeholderButton);
var _popover = require("./Popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _popoverHeader = require("./PopoverHeader");
var _popoverHeaderDefault = parcelHelpers.interopDefault(_popoverHeader);
var _popoverBody = require("./PopoverBody");
var _popoverBodyDefault = parcelHelpers.interopDefault(_popoverBody);
var _progressBar = require("./ProgressBar");
var _progressBarDefault = parcelHelpers.interopDefault(_progressBar);
var _ratio = require("./Ratio");
var _ratioDefault = parcelHelpers.interopDefault(_ratio);
var _row = require("./Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _spinner = require("./Spinner");
var _spinnerDefault = parcelHelpers.interopDefault(_spinner);
var _splitButton = require("./SplitButton");
var _splitButtonDefault = parcelHelpers.interopDefault(_splitButton);
var _ssrprovider = require("./SSRProvider");
var _ssrproviderDefault = parcelHelpers.interopDefault(_ssrprovider);
var _stack = require("./Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _tab = require("./Tab");
var _tabDefault = parcelHelpers.interopDefault(_tab);
var _tabContainer = require("./TabContainer");
var _tabContainerDefault = parcelHelpers.interopDefault(_tabContainer);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _table = require("./Table");
var _tableDefault = parcelHelpers.interopDefault(_table);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _tabs = require("./Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _toast = require("./Toast");
var _toastDefault = parcelHelpers.interopDefault(_toast);
var _toastBody = require("./ToastBody");
var _toastBodyDefault = parcelHelpers.interopDefault(_toastBody);
var _toastHeader = require("./ToastHeader");
var _toastHeaderDefault = parcelHelpers.interopDefault(_toastHeader);
var _toastContainer = require("./ToastContainer");
var _toastContainerDefault = parcelHelpers.interopDefault(_toastContainer);
var _toggleButton = require("./ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _toggleButtonGroup = require("./ToggleButtonGroup");
var _toggleButtonGroupDefault = parcelHelpers.interopDefault(_toggleButtonGroup);
var _tooltip = require("./Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);

},{"./Accordion":"g9ugU","./AccordionContext":"jgc6O","./AccordionCollapse":"9Xswx","./AccordionButton":"5gqho","./Alert":"kTCXP","./Anchor":"5vSUX","./Badge":"kjPtG","./Breadcrumb":"85LGP","./BreadcrumbItem":"a6D3A","./Button":"5vnhO","./ButtonGroup":"dqjqa","./ButtonToolbar":"gS05m","./Card":"jYYv7","./CardImg":"dSzEi","./CardGroup":"4YjQE","./Carousel":"bFJ6a","./CarouselItem":"5e3xC","./CloseButton":"l89s9","./Col":"1YyUj","./Collapse":"9vqfG","./Dropdown":"dHYfj","./DropdownButton":"dR7qt","./Fade":"4nlBx","./Form":"jhGDT","./FormControl":"N8VBL","./FormCheck":"lgwna","./FormFloating":"dRl73","./FloatingLabel":"6dBde","./FormGroup":"kIvRg","./FormLabel":"kHZxe","./FormText":"3Mnk3","./FormSelect":"e8VwS","./Container":"exjAm","./Image":"8jj6x","./Figure":"d3AvT","./InputGroup":"cZBEO","./ListGroup":"fNfiX","./ListGroupItem":"7hDNN","./Modal":"gfL02","./ModalBody":"g7gWo","./ModalDialog":"5HkO0","./ModalFooter":"bHAyE","./ModalTitle":"l4LrN","./Nav":"fQqZq","./Navbar":"hsrMY","./NavbarBrand":"bYfbI","./NavDropdown":"cngDg","./NavItem":"j5i23","./NavLink":"3BFyZ","./Offcanvas":"5i2nj","./OffcanvasHeader":"b9ZHH","./OffcanvasTitle":"Erxvh","./OffcanvasBody":"2TJsr","./Overlay":"hmy64","./OverlayTrigger":"bPQ3i","./PageItem":"4ijK9","./Pagination":"kgOxM","./Placeholder":"eEXtK","./PlaceholderButton":"5SzMV","./Popover":"2nEpR","./PopoverHeader":"kArwz","./PopoverBody":"jSUYZ","./ProgressBar":"29eqb","./Ratio":"832eS","./Row":"fOw3u","./Spinner":"9x782","./SplitButton":"lKRiD","./SSRProvider":"1nzqf","./Stack":"lyQJI","./Tab":"hRJFx","./TabContainer":"lAq6n","./TabContent":"bBmYU","./Table":"5p1ZA","./TabPane":"YnuWW","./Tabs":"lUV3c","./ThemeProvider":"7HSML","./Toast":"efggD","./ToastBody":"jkTQU","./ToastHeader":"2M6ls","./ToastContainer":"jShAj","./ToggleButton":"e1ODv","./ToggleButtonGroup":"izWRo","./Tooltip":"izdrX","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g9ugU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _themeProvider = require("./ThemeProvider");
var _accordionBody = require("./AccordionBody");
var _accordionBodyDefault = parcelHelpers.interopDefault(_accordionBody);
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionHeader = require("./AccordionHeader");
var _accordionHeaderDefault = parcelHelpers.interopDefault(_accordionHeader);
var _accordionItem = require("./AccordionItem");
var _accordionItemDefault = parcelHelpers.interopDefault(_accordionItem);
var _jsxRuntime = require("react/jsx-runtime");
var Accordion = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _ref = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    }), tmp = _ref.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, activeKey = _ref.activeKey, bsPrefix = _ref.bsPrefix, className = _ref.className, onSelect = _ref.onSelect, flush = _ref.flush, alwaysOpen = _ref.alwaysOpen, controlledProps = _helpers.objectWithoutProperties(_ref, [
        "as",
        "activeKey",
        "bsPrefix",
        "className",
        "onSelect",
        "flush",
        "alwaysOpen"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion');
    var contextValue = _react.useMemo(function() {
        return {
            activeEventKey: activeKey,
            onSelect: onSelect,
            alwaysOpen: alwaysOpen
        };
    }, [
        activeKey,
        onSelect,
        alwaysOpen
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            ref: ref
        }, controlledProps, {
            className: _classnamesDefault.default(className, prefix, flush && "".concat(prefix, "-flush"))
        }))
    }));
});
Accordion.displayName = 'Accordion';
exports.default = Object.assign(Accordion, {
    Button: _accordionButtonDefault.default,
    Collapse: _accordionCollapseDefault.default,
    Item: _accordionItemDefault.default,
    Header: _accordionHeaderDefault.default,
    Body: _accordionBodyDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","uncontrollable":"3QjJi","./ThemeProvider":"7HSML","./AccordionBody":"8xPbT","./AccordionButton":"5gqho","./AccordionCollapse":"9Xswx","./AccordionContext":"jgc6O","./AccordionHeader":"2n5rx","./AccordionItem":"jD249","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3QjJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUncontrolled", function() {
    return _hookDefault.default;
});
parcelHelpers.export(exports, "useUncontrolledProp", function() {
    return _hook.useUncontrolledProp;
});
parcelHelpers.export(exports, "uncontrollable", function() {
    return _uncontrollableDefault.default;
});
var _hook = require("./hook");
var _hookDefault = parcelHelpers.interopDefault(_hook);
var _uncontrollable = require("./uncontrollable");
var _uncontrollableDefault = parcelHelpers.interopDefault(_uncontrollable);

},{"./hook":"jk6mL","./uncontrollable":"39J3Y","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jk6mL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUncontrolledProp", function() {
    return useUncontrolledProp;
});
var _helpers = require("@swc/helpers");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _utils = require("./utils");
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : _helpers.typeOf(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function useUncontrolledProp(propValue, defaultValue, handler) {
    var wasPropRef = _react.useRef(propValue !== undefined);
    var _useState = _react.useState(defaultValue), stateValue = _useState[0], setState = _useState[1];
    var isProp = propValue !== undefined;
    var wasProp = wasPropRef.current;
    wasPropRef.current = isProp;
    /**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */ if (!isProp && wasProp && stateValue !== defaultValue) setState(defaultValue);
    return [
        isProp ? propValue : stateValue,
        _react.useCallback(function(value) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            if (handler) handler.apply(void 0, [
                value
            ].concat(args));
            setState(value);
        }, [
            handler
        ])
    ];
}
function useUncontrolled(props, config) {
    return Object.keys(config).reduce(function(result, fieldName) {
        var _extends2;
        var _ref = result, defaultValue = _ref[_utils.defaultKey(fieldName)], propsValue = _ref[fieldName], rest = _objectWithoutPropertiesLooseDefault.default(_ref, [
            _utils.defaultKey(fieldName),
            fieldName
        ].map(_toPropertyKey));
        var handlerName = config[fieldName];
        var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
        return _extendsDefault.default({
        }, rest, (_extends2 = {
        }, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));
    }, props);
}
exports.default = useUncontrolled;

},{"@swc/helpers":"cawJ1","@babel/runtime/helpers/esm/extends":"3r1nX","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"dx5iZ","react":"kEcQC","./utils":"kK8hV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3r1nX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dx5iZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kK8hV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uncontrolledPropTypes", function() {
    return uncontrolledPropTypes;
});
parcelHelpers.export(exports, "isProp", function() {
    return isProp;
});
parcelHelpers.export(exports, "defaultKey", function() {
    return defaultKey;
});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */ parcelHelpers.export(exports, "canAcceptRef", function() {
    return canAcceptRef;
});
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var noop = function noop() {
};
function readOnlyPropType(handler, name) {
    return function(props, propName) {
        if (props[propName] !== undefined) {
            if (!props[handler]) return new Error("You have provided a `" + propName + "` prop to `" + name + "` " + ("without an `" + handler + "` handler prop. This will render a read-only field. ") + ("If the field should be mutable use `" + defaultKey(propName) + "`. ") + ("Otherwise, set `" + handler + "`."));
        }
    };
}
function uncontrolledPropTypes(controlledValues, displayName) {
    var propTypes = {
    };
    Object.keys(controlledValues).forEach(function(prop) {
        // add default propTypes for folks that use runtime checks
        propTypes[defaultKey(prop)] = noop;
        var handler = controlledValues[prop];
        !(typeof handler === 'string' && handler.trim().length) && _invariantDefault.default(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);
        propTypes[prop] = readOnlyPropType(handler, displayName);
    });
    return propTypes;
}
function isProp(props, prop) {
    return props[prop] !== undefined;
}
function defaultKey(key) {
    return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
}
function canAcceptRef(component) {
    return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);
}

},{"invariant":"7jb40","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7jb40":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (format === undefined) throw new Error('invariant requires an error message argument');
    if (!condition) {
        var error;
        if (format === undefined) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;

},{}],"39J3Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactLifecyclesCompat = require("react-lifecycles-compat");
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _utils = require("./utils");
var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";
function uncontrollable(Component, controlledValues, methods) {
    if (methods === void 0) methods = [];
    var displayName = Component.displayName || Component.name || 'Component';
    var canAcceptRef = _utils.canAcceptRef(Component);
    var controlledProps = Object.keys(controlledValues);
    var PROPS_TO_OMIT = controlledProps.map(_utils.defaultKey);
    !(canAcceptRef || !methods.length) && _invariantDefault.default(false, "[uncontrollable] stateless function components cannot pass through methods because they have no associated instances. Check component: " + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '));
    var UncontrolledComponent1 = /*#__PURE__*/ function(_React$Component) {
        _inheritsLooseDefault.default(UncontrolledComponent, _React$Component);
        function UncontrolledComponent() {
            var _this;
            for(var _len = arguments.length, args1 = new Array(_len), _key = 0; _key < _len; _key++)args1[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [
                this
            ].concat(args1)) || this;
            _this.handlers = Object.create(null);
            controlledProps.forEach(function(propName) {
                var handlerName = controlledValues[propName];
                var handleChange = function handleChange(value) {
                    if (_this.props[handlerName]) {
                        var _this$props;
                        _this._notifying = true;
                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
                        (_this$props = _this.props)[handlerName].apply(_this$props, [
                            value
                        ].concat(args));
                        _this._notifying = false;
                    }
                    if (!_this.unmounted) _this.setState(function(_ref) {
                        var _extends2;
                        var values = _ref.values;
                        return {
                            values: _extendsDefault.default(Object.create(null), values, (_extends2 = {
                            }, _extends2[propName] = value, _extends2))
                        };
                    });
                };
                _this.handlers[handlerName] = handleChange;
            });
            if (methods.length) _this.attachRef = function(ref) {
                _this.inner = ref;
            };
            var values1 = Object.create(null);
            controlledProps.forEach(function(key) {
                values1[key] = _this.props[_utils.defaultKey(key)];
            });
            _this.state = {
                values: values1,
                prevProps: {
                }
            };
            return _this;
        }
        var _proto = UncontrolledComponent.prototype;
        _proto.shouldComponentUpdate = function shouldComponentUpdate() {
            //let setState trigger the update
            return !this._notifying;
        };
        UncontrolledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
            var values = _ref2.values, prevProps = _ref2.prevProps;
            var nextState = {
                values: _extendsDefault.default(Object.create(null), values),
                prevProps: {
                }
            };
            controlledProps.forEach(function(key) {
                /**
         * If a prop switches from controlled to Uncontrolled
         * reset its value to the defaultValue
         */ nextState.prevProps[key] = props[key];
                if (!_utils.isProp(props, key) && _utils.isProp(prevProps, key)) nextState.values[key] = props[_utils.defaultKey(key)];
            });
            return nextState;
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.unmounted = true;
        };
        _proto.render = function render() {
            var _this2 = this;
            var _this$props2 = this.props, innerRef = _this$props2.innerRef, props = _objectWithoutPropertiesLooseDefault.default(_this$props2, [
                "innerRef"
            ]);
            PROPS_TO_OMIT.forEach(function(prop) {
                delete props[prop];
            });
            var newProps = {
            };
            controlledProps.forEach(function(propName) {
                var propValue = _this2.props[propName];
                newProps[propName] = propValue !== undefined ? propValue : _this2.state.values[propName];
            });
            return _reactDefault.default.createElement(Component, _extendsDefault.default({
            }, props, newProps, this.handlers, {
                ref: innerRef || this.attachRef
            }));
        };
        return UncontrolledComponent;
    }(_reactDefault.default.Component);
    _reactLifecyclesCompat.polyfill(UncontrolledComponent1);
    UncontrolledComponent1.displayName = "Uncontrolled(" + displayName + ")";
    UncontrolledComponent1.propTypes = _extendsDefault.default({
        innerRef: function innerRef() {
        }
    }, _utils.uncontrolledPropTypes(controlledValues, displayName));
    methods.forEach(function(method) {
        UncontrolledComponent1.prototype[method] = function $proxiedMethod() {
            var _this$inner;
            return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
        };
    });
    var WrappedComponent = UncontrolledComponent1;
    if (_reactDefault.default.forwardRef) {
        WrappedComponent = _reactDefault.default.forwardRef(function(props, ref) {
            return _reactDefault.default.createElement(UncontrolledComponent1, _extendsDefault.default({
            }, props, {
                innerRef: ref,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 128
                },
                __self: this
            }));
        });
        WrappedComponent.propTypes = UncontrolledComponent1.propTypes;
    }
    WrappedComponent.ControlledComponent = Component;
    /**
   * useful when wrapping a Component and you want to control
   * everything
   */ WrappedComponent.deferControlTo = function(newComponent, additions, nextMethods) {
        if (additions === void 0) additions = {
        };
        return uncontrollable(newComponent, _extendsDefault.default({
        }, controlledValues, additions), nextMethods);
    };
    return WrappedComponent;
}
exports.default = uncontrollable;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"dx5iZ","@babel/runtime/helpers/esm/extends":"3r1nX","@babel/runtime/helpers/esm/inheritsLoose":"6Uz43","react":"kEcQC","react-lifecycles-compat":"157PK","invariant":"7jb40","./utils":"kK8hV","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6Uz43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},{"./setPrototypeOf.js":"ktjbS","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ktjbS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"157PK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polyfill", function() {
    return polyfill;
});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) this.setState(state);
}
function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
    try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally{
        this.props = prevProps;
        this.state = prevState;
    }
}
// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
    var prototype = Component.prototype;
    if (!prototype || !prototype.isReactComponent) throw new Error('Can only polyfill class components');
    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') return Component;
    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === 'function') foundWillMountName = 'componentWillMount';
    else if (typeof prototype.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
    if (typeof prototype.componentWillReceiveProps === 'function') foundWillReceivePropsName = 'componentWillReceiveProps';
    else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    if (typeof prototype.componentWillUpdate === 'function') foundWillUpdateName = 'componentWillUpdate';
    else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component.displayName || Component.name;
        var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    }
    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === 'function') {
        prototype.componentWillMount = componentWillMount;
        prototype.componentWillReceiveProps = componentWillReceiveProps;
    }
    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
        if (typeof prototype.componentDidUpdate !== 'function') throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
        prototype.componentWillUpdate = componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            // 16.3+ will not execute our will-update method;
            // It will pass a snapshot value to did-update though.
            // Older versions will require our polyfilled will-update value.
            // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
            // Because for <= 15.x versions this might be a "prevContext" object.
            // We also can't just check "__reactInternalSnapshot",
            // Because get-snapshot might return a falsy value.
            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
    }
    return Component;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7HSML":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBootstrapPrefix", function() {
    return useBootstrapPrefix;
});
parcelHelpers.export(exports, "useIsRTL", function() {
    return useIsRTL;
});
parcelHelpers.export(exports, "createBootstrapComponent", function() {
    return createBootstrapComponent;
});
parcelHelpers.export(exports, "ThemeConsumer", function() {
    return Consumer;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var ThemeContext = /*#__PURE__*/ _react.createContext({
    prefixes: {
    }
});
var Consumer = ThemeContext.Consumer, Provider = ThemeContext.Provider;
function ThemeProvider(param) {
    var _prefixes = param.prefixes, prefixes = _prefixes === void 0 ? {
    } : _prefixes, dir = param.dir, children = param.children;
    var contextValue = _react.useMemo(function() {
        return {
            prefixes: _helpers.objectSpread({
            }, prefixes),
            dir: dir
        };
    }, [
        prefixes,
        dir
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Provider, {
        value: contextValue,
        children: children
    }));
}
function useBootstrapPrefix(prefix, defaultPrefix) {
    var prefixes = _react.useContext(ThemeContext).prefixes;
    return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
function useIsRTL() {
    var dir = _react.useContext(ThemeContext).dir;
    return dir === 'rtl';
}
function createBootstrapComponent(Component, opts) {
    if (typeof opts === 'string') opts = {
        prefix: opts
    };
    var isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref
    var prefix = opts.prefix, _forwardRefAs = opts.forwardRefAs, forwardRefAs = _forwardRefAs === void 0 ? isClassy ? 'ref' : 'innerRef' : _forwardRefAs;
    var Wrapped = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
        var props = _helpers.extends({
        }, _param);
        props[forwardRefAs] = ref;
        var bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
        return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        }, props, {
            bsPrefix: bsPrefix
        })));
    });
    Wrapped.displayName = "Bootstrap(".concat(Component.displayName || Component.name, ")");
    return Wrapped;
}
exports.default = ThemeProvider;

},{"@swc/helpers":"cawJ1","react":"kEcQC","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kNAvd":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"d5YCk"}],"d5YCk":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function Fake() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function set() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _helpers.typeOf(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1 === "undefined" ? "undefined" : _helpers.typeOf(error$1));
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type === "undefined" ? "undefined" : _helpers.typeOf(type);
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"@swc/helpers":"cawJ1","react":"kEcQC","object-assign":"geatC"}],"8xPbT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _jsxRuntime = require("react/jsx-runtime");
var AccordionBody = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-body');
    var eventKey = _react.useContext(_accordionItemContextDefault.default).eventKey;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionCollapseDefault.default, {
        eventKey: eventKey,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            ref: ref
        }, props, {
            className: _classnamesDefault.default(className, bsPrefix)
        }))
    }));
});
AccordionBody.displayName = 'AccordionBody';
exports.default = AccordionBody;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./AccordionCollapse":"9Xswx","./AccordionItemContext":"2h2tk","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9Xswx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _jsxRuntime = require("react/jsx-runtime");
var AccordionCollapse = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, eventKey = _param.eventKey, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className",
        "children",
        "eventKey"
    ]);
    var activeEventKey = _react.useContext(_accordionContextDefault.default).activeEventKey;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-collapse');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_collapseDefault.default, _helpers.objectSpread({
        ref: ref,
        in: _accordionContext.isAccordionItemSelected(activeEventKey, eventKey)
    }, props, {
        className: _classnamesDefault.default(className, bsPrefix),
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            children: _react.Children.only(children)
        })
    })));
});
AccordionCollapse.displayName = 'AccordionCollapse';
exports.default = AccordionCollapse;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./Collapse":"9vqfG","./AccordionContext":"jgc6O","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9vqfG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
var MARGINS = {
    height: [
        'marginTop',
        'marginBottom'
    ],
    width: [
        'marginLeft',
        'marginRight'
    ]
};
function getDefaultDimensionValue(dimension, elem) {
    var offset = "offset".concat(dimension[0].toUpperCase()).concat(dimension.slice(1));
    var value = elem[offset];
    var margins = MARGINS[dimension];
    return value + parseInt(_cssDefault.default(elem, margins[0]), 10) + parseInt(_cssDefault.default(elem, margins[1]), 10);
}
var _obj;
var collapseStyles = (_obj = {
}, _helpers.defineProperty(_obj, _transition.EXITED, 'collapse'), _helpers.defineProperty(_obj, _transition.EXITING, 'collapsing'), _helpers.defineProperty(_obj, _transition.ENTERING, 'collapsing'), _helpers.defineProperty(_obj, _transition.ENTERED, 'collapse show'), _obj);
var defaultProps = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    getDimensionValue: getDefaultDimensionValue
};
var Collapse = /*#__PURE__*/ _reactDefault.default.forwardRef(function(_param, ref) {
    var onEnter = _param.onEnter, onEntering = _param.onEntering, onEntered = _param.onEntered, onExit = _param.onExit, onExiting = _param.onExiting, className = _param.className, children = _param.children, tmp = _param.dimension, dimension = tmp === void 0 ? 'height' : tmp, tmp1 = _param.getDimensionValue, getDimensionValue = tmp1 === void 0 ? getDefaultDimensionValue : tmp1, props = _helpers.objectWithoutProperties(_param, [
        "onEnter",
        "onEntering",
        "onEntered",
        "onExit",
        "onExiting",
        "className",
        "children",
        "dimension",
        "getDimensionValue"
    ]);
    /* Compute dimension */ var computedDimension = typeof dimension === 'function' ? dimension() : dimension;
    /* -- Expanding -- */ var handleEnter = _react.useMemo(function() {
        return _createChainedFunctionDefault.default(function(elem) {
            elem.style[computedDimension] = '0';
        }, onEnter);
    }, [
        computedDimension,
        onEnter
    ]);
    var handleEntering = _react.useMemo(function() {
        return _createChainedFunctionDefault.default(function(elem) {
            var scroll = "scroll".concat(computedDimension[0].toUpperCase()).concat(computedDimension.slice(1));
            elem.style[computedDimension] = "".concat(elem[scroll], "px");
        }, onEntering);
    }, [
        computedDimension,
        onEntering
    ]);
    var handleEntered = _react.useMemo(function() {
        return _createChainedFunctionDefault.default(function(elem) {
            elem.style[computedDimension] = null;
        }, onEntered);
    }, [
        computedDimension,
        onEntered
    ]);
    /* -- Collapsing -- */ var handleExit = _react.useMemo(function() {
        return _createChainedFunctionDefault.default(function(elem) {
            elem.style[computedDimension] = "".concat(getDimensionValue(computedDimension, elem), "px");
            _triggerBrowserReflowDefault.default(elem);
        }, onExit);
    }, [
        onExit,
        getDimensionValue,
        computedDimension
    ]);
    var handleExiting = _react.useMemo(function() {
        return _createChainedFunctionDefault.default(function(elem) {
            elem.style[computedDimension] = null;
        }, onExiting);
    }, [
        computedDimension,
        onExiting
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, _helpers.objectSpread({
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default
    }, props, {
        "aria-expanded": props.role ? props.in : null,
        onEnter: handleEnter,
        onEntering: handleEntering,
        onEntered: handleEntered,
        onExit: handleExit,
        onExiting: handleExiting,
        childRef: children.ref,
        children: function(state, innerProps) {
            /*#__PURE__*/ return _reactDefault.default.cloneElement(children, _helpers.objectSpread({
            }, innerProps, {
                className: _classnamesDefault.default(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')
            }));
        }
    })));
}); // @ts-ignore
// @ts-ignore
Collapse.defaultProps = defaultProps;
exports.default = Collapse;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","dom-helpers/css":"8WNyP","react":"kEcQC","react-transition-group/Transition":"jRkxX","./transitionEndListener":"j5oP0","./createChainedFunction":"4gYKV","./triggerBrowserReflow":"2EQD8","./TransitionWrapper":"4syw8","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8WNyP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyle = require("./getComputedStyle");
var _getComputedStyleDefault = parcelHelpers.interopDefault(_getComputedStyle);
var _hyphenateStyle = require("./hyphenateStyle");
var _hyphenateStyleDefault = parcelHelpers.interopDefault(_hyphenateStyle);
var _isTransform = require("./isTransform");
var _isTransformDefault = parcelHelpers.interopDefault(_isTransform);
function style(node, property) {
    var css = '';
    var transforms = '';
    if (typeof property === 'string') return node.style.getPropertyValue(_hyphenateStyleDefault.default(property)) || _getComputedStyleDefault.default(node).getPropertyValue(_hyphenateStyleDefault.default(property));
    Object.keys(property).forEach(function(key) {
        var value = property[key];
        if (!value && value !== 0) node.style.removeProperty(_hyphenateStyleDefault.default(key));
        else if (_isTransformDefault.default(key)) transforms += key + "(" + value + ") ";
        else css += _hyphenateStyleDefault.default(key) + ": " + value + ";";
    });
    if (transforms) css += "transform: " + transforms + ";";
    node.style.cssText += ";" + css;
}
exports.default = style;

},{"./getComputedStyle":"6WK8p","./hyphenateStyle":"4q7Ts","./isTransform":"jy858","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6WK8p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
function getComputedStyle(node, psuedoElement) {
    return _ownerWindowDefault.default(node).getComputedStyle(node, psuedoElement);
}
exports.default = getComputedStyle;

},{"./ownerWindow":"67d2X","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"67d2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function ownerWindow(node) {
    var doc = _ownerDocumentDefault.default(node);
    return doc && doc.defaultView || window;
}
exports.default = ownerWindow;

},{"./ownerDocument":"fd2mh","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fd2mh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ownerDocument(node) {
    return node && node.ownerDocument || document;
}
exports.default = ownerDocument;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4q7Ts":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */ var _hyphenate = require("./hyphenate");
var _hyphenateDefault = parcelHelpers.interopDefault(_hyphenate);
var msPattern = /^ms-/;
function hyphenateStyleName(string) {
    return _hyphenateDefault.default(string).replace(msPattern, '-ms-');
}
exports.default = hyphenateStyleName;

},{"./hyphenate":"jdLho","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jdLho":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var rUpper = /([A-Z])/g;
function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase();
}
exports.default = hyphenate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jy858":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
    return !!(value && supportedTransforms.test(value));
}
exports.default = isTransform;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jRkxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UNMOUNTED", function() {
    return UNMOUNTED;
});
parcelHelpers.export(exports, "EXITED", function() {
    return EXITED;
});
parcelHelpers.export(exports, "ENTERING", function() {
    return ENTERING;
});
parcelHelpers.export(exports, "ENTERED", function() {
    return ENTERED;
});
parcelHelpers.export(exports, "EXITING", function() {
    return EXITING;
});
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _propTypes1 = require("./utils/PropTypes");
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */ var Transition = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Transition1, _React$Component);
    function Transition1(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    Transition1.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    ;
    var _proto = Transition1.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();
            if (nextStatus === ENTERING) this.performEnter(mounting);
            else this.performExit();
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [
            appearing
        ] : [
            _reactDomDefault.default.findDOMNode(this),
            appearing
        ], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
        if (!mounting && !enter || _configDefault.default.disabled) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(maybeNode);
            });
            return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(maybeNode, maybeAppearing);
                });
            });
        });
    };
    _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : _reactDomDefault.default.findDOMNode(this); // no exit animation skip right to EXITED
        if (!exit || _configDefault.default.disabled) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(maybeNode);
            });
            return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(maybeNode);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDomDefault.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [
                this.nextCallback
            ] : [
                node,
                this.nextCallback
            ], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "children",
            "in",
            "mountOnEnter",
            "unmountOnExit",
            "appear",
            "enter",
            "exit",
            "timeout",
            "addEndListener",
            "onEnter",
            "onEntering",
            "onEntered",
            "onExit",
            "onExiting",
            "onExited",
            "nodeRef"
        ]);
        return(/*#__PURE__*/ // allows for nested Transitions
        _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: null
        }, typeof children === 'function' ? children(status, childProps) : _reactDefault.default.cloneElement(_reactDefault.default.Children.only(children), childProps)));
    };
    return Transition1;
}(_reactDefault.default.Component);
Transition.contextType = _transitionGroupContextDefault.default;
Transition.propTypes = {
    /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */ nodeRef: _propTypesDefault.default.shape({
        current: typeof Element === 'undefined' ? _propTypesDefault.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _propTypesDefault.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
    }),
    /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */ children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func.isRequired,
        _propTypesDefault.default.element.isRequired
    ]).isRequired,
    /**
   * Show the component; triggers the enter or exit states
   */ in: _propTypesDefault.default.bool,
    /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */ mountOnEnter: _propTypesDefault.default.bool,
    /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */ unmountOnExit: _propTypesDefault.default.bool,
    /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */ appear: _propTypesDefault.default.bool,
    /**
   * Enable or disable enter transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * Enable or disable exit transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */ timeout: function timeout(props) {
        var pt = _propTypes1.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEnter: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEntered: _propTypesDefault.default.func,
    /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExit: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExiting: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */ onExited: _propTypesDefault.default.func
}; // Name the function so it is clearer in the documentation
function noop() {
}
Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
exports.default = Transition;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"dx5iZ","@babel/runtime/helpers/esm/inheritsLoose":"6Uz43","prop-types":"h9rZg","react":"kEcQC","react-dom":"6cUDX","./config":"f9Q0l","./utils/PropTypes":"5FY9k","./TransitionGroupContext":"iHUH9","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"f9Q0l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    disabled: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5FY9k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutsShape", function() {
    return timeoutsShape;
});
parcelHelpers.export(exports, "classNamesShape", function() {
    return classNamesShape;
});
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var timeoutsShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.number,
        exit: _propTypesDefault.default.number,
        appear: _propTypesDefault.default.number
    }).isRequired
]);
var classNamesShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        active: _propTypesDefault.default.string
    }),
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        enterDone: _propTypesDefault.default.string,
        enterActive: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        exitDone: _propTypesDefault.default.string,
        exitActive: _propTypesDefault.default.string
    })
]);

},{"prop-types":"h9rZg","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iHUH9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = _reactDefault.default.createContext(null);

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j5oP0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _transitionEnd = require("dom-helpers/transitionEnd");
var _transitionEndDefault = parcelHelpers.interopDefault(_transitionEnd);
function parseDuration(node, property) {
    var str = _cssDefault.default(node, property) || '';
    var mult = str.indexOf('ms') === -1 ? 1000 : 1;
    return parseFloat(str) * mult;
}
function transitionEndListener(element, handler) {
    var duration = parseDuration(element, 'transitionDuration');
    var delay = parseDuration(element, 'transitionDelay');
    var remove = _transitionEndDefault.default(element, function(e) {
        if (e.target === element) {
            remove();
            handler(e);
        }
    }, duration + delay);
}
exports.default = transitionEndListener;

},{"dom-helpers/css":"8WNyP","dom-helpers/transitionEnd":"48WgU","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"48WgU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _css = require("./css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _listen = require("./listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _triggerEvent = require("./triggerEvent");
var _triggerEventDefault = parcelHelpers.interopDefault(_triggerEvent);
function parseDuration(node) {
    var str = _cssDefault.default(node, 'transitionDuration') || '';
    var mult = str.indexOf('ms') === -1 ? 1000 : 1;
    return parseFloat(str) * mult;
}
function emulateTransitionEnd(element, duration, padding) {
    if (padding === void 0) padding = 5;
    var called = false;
    var handle = setTimeout(function() {
        if (!called) _triggerEventDefault.default(element, 'transitionend', true);
    }, duration + padding);
    var remove = _listenDefault.default(element, 'transitionend', function() {
        called = true;
    }, {
        once: true
    });
    return function() {
        clearTimeout(handle);
        remove();
    };
}
function transitionEnd(element, handler, duration, padding) {
    if (duration == null) duration = parseDuration(element) || 0;
    var removeEmulate = emulateTransitionEnd(element, duration, padding);
    var remove = _listenDefault.default(element, 'transitionend', handler);
    return function() {
        removeEmulate();
        remove();
    };
}
exports.default = transitionEnd;

},{"./css":"8WNyP","./listen":"5XTIX","./triggerEvent":"7TpR5","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5XTIX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addEventListener = require("./addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _removeEventListener = require("./removeEventListener");
var _removeEventListenerDefault = parcelHelpers.interopDefault(_removeEventListener);
function listen(node, eventName, handler, options) {
    _addEventListenerDefault.default(node, eventName, handler, options);
    return function() {
        _removeEventListenerDefault.default(node, eventName, handler, options);
    };
}
exports.default = listen;

},{"./addEventListener":"4a2fe","./removeEventListener":"4P8Z4","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4a2fe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optionsSupported", function() {
    return optionsSupported;
});
parcelHelpers.export(exports, "onceSupported", function() {
    return onceSupported;
});
/* eslint-disable no-return-assign */ var _canUseDOM = require("./canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var optionsSupported = false;
var onceSupported = false;
try {
    var options = {
        get passive () {
            return optionsSupported = true;
        },
        get once () {
            // eslint-disable-next-line no-multi-assign
            return onceSupported = optionsSupported = true;
        }
    };
    if (_canUseDOMDefault.default) {
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, true);
    }
} catch (e) {
/* */ }
/**
 * An `addEventListener` ponyfill, supports the `once` option
 * 
 * @param node the element
 * @param eventName the event name
 * @param handle the handler
 * @param options event options
 */ function addEventListener(node, eventName, handler, options) {
    if (options && typeof options !== 'boolean' && !onceSupported) {
        var once = options.once, capture = options.capture;
        var wrappedHandler = handler;
        if (!onceSupported && once) {
            wrappedHandler = handler.__once || function onceHandler(event) {
                this.removeEventListener(eventName, onceHandler, capture);
                handler.call(this, event);
            };
            handler.__once = wrappedHandler;
        }
        node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
    }
    node.addEventListener(eventName, handler, options);
}
exports.default = addEventListener;

},{"./canUseDOM":"5fed2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5fed2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4P8Z4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A `removeEventListener` ponyfill
 * 
 * @param node the element
 * @param eventName the event name
 * @param handle the handler
 * @param options event options
 */ function removeEventListener(node, eventName, handler, options) {
    var capture = options && typeof options !== 'boolean' ? options.capture : options;
    node.removeEventListener(eventName, handler, capture);
    if (handler.__once) node.removeEventListener(eventName, handler.__once, capture);
}
exports.default = removeEventListener;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7TpR5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function triggerEvent(node, eventName, bubbles, cancelable) {
    if (bubbles === void 0) bubbles = false;
    if (cancelable === void 0) cancelable = true;
    if (node) {
        var event = document.createEvent('HTMLEvents');
        event.initEvent(eventName, bubbles, cancelable);
        node.dispatchEvent(event);
    }
}
exports.default = triggerEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4gYKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */ function createChainedFunction() {
    for(var _len1 = arguments.length, funcs = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){
        funcs[_key1] = arguments[_key1];
    }
    return funcs.filter(function(f) {
        return f != null;
    }).reduce(function(acc, f) {
        if (typeof f !== 'function') throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
        if (acc === null) return f;
        return function chainedFunction() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            // @ts-ignore
            acc.apply(this, args); // @ts-ignore
            f.apply(this, args);
        };
    }, null);
}
exports.default = createChainedFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2EQD8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function triggerBrowserReflow(node) {
    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
    node.offsetHeight;
}
exports.default = triggerBrowserReflow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4syw8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transition = require("react-transition-group/Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
// Normalizes Transition callbacks when nodeRef is used.
var TransitionWrapper = /*#__PURE__*/ _reactDefault.default.forwardRef(function(_param, ref) {
    var onEnter = _param.onEnter, onEntering = _param.onEntering, onEntered = _param.onEntered, onExit = _param.onExit, onExiting = _param.onExiting, onExited = _param.onExited, addEndListener = _param.addEndListener, children = _param.children, childRef = _param.childRef, props = _helpers.objectWithoutProperties(_param, [
        "onEnter",
        "onEntering",
        "onEntered",
        "onExit",
        "onExiting",
        "onExited",
        "addEndListener",
        "children",
        "childRef"
    ]);
    var nodeRef = _react.useRef(null);
    var mergedRef = _useMergedRefsDefault.default(nodeRef, childRef);
    var attachRef = function(r) {
        mergedRef(_safeFindDOMNodeDefault.default(r));
    };
    var normalize = function(callback) {
        return function(param) {
            if (callback && nodeRef.current) callback(nodeRef.current, param);
        };
    };
    /* eslint-disable react-hooks/exhaustive-deps */ var handleEnter = _react.useCallback(normalize(onEnter), [
        onEnter
    ]);
    var handleEntering = _react.useCallback(normalize(onEntering), [
        onEntering
    ]);
    var handleEntered = _react.useCallback(normalize(onEntered), [
        onEntered
    ]);
    var handleExit = _react.useCallback(normalize(onExit), [
        onExit
    ]);
    var handleExiting = _react.useCallback(normalize(onExiting), [
        onExiting
    ]);
    var handleExited = _react.useCallback(normalize(onExited), [
        onExited
    ]);
    var handleAddEndListener = _react.useCallback(normalize(addEndListener), [
        addEndListener
    ]);
    /* eslint-enable react-hooks/exhaustive-deps */ return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        nodeRef: nodeRef,
        children: typeof children === 'function' ? function(status, innerProps) {
            return children(status, _helpers.objectSpread({
            }, innerProps, {
                ref: attachRef
            }));
        } : /*#__PURE__*/ _reactDefault.default.cloneElement(children, {
            ref: attachRef
        })
    })));
});
exports.default = TransitionWrapper;

},{"@swc/helpers":"cawJ1","react":"kEcQC","react-transition-group/Transition":"jRkxX","@restart/hooks/useMergedRefs":"bbv4J","./safeFindDOMNode":"8srVe","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bbv4J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeRefs", function() {
    return mergeRefs;
});
var _react = require("react");
var toFnRef = function toFnRef(ref) {
    return !ref || typeof ref === 'function' ? ref : function(value) {
        ref.current = value;
    };
};
function mergeRefs(refA, refB) {
    var a = toFnRef(refA);
    var b = toFnRef(refB);
    return function(value) {
        if (a) a(value);
        if (b) b(value);
    };
}
/**
 * Create and returns a single callback ref composed from two other Refs.
 *
 * ```tsx
 * const Button = React.forwardRef((props, ref) => {
 *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
 *   const mergedRef = useMergedRefs(ref, attachRef);
 *
 *   return <button ref={mergedRef} {...props}/>
 * })
 * ```
 *
 * @param refA A Callback or mutable Ref
 * @param refB A Callback or mutable Ref
 * @category refs
 */ function useMergedRefs(refA, refB) {
    return _react.useMemo(function() {
        return mergeRefs(refA, refB);
    }, [
        refA,
        refB
    ]);
}
exports.default = useMergedRefs;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8srVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && 'setState' in componentOrElement) return _reactDomDefault.default.findDOMNode(componentOrElement);
    return componentOrElement != null ? componentOrElement : null;
}
exports.default = safeFindDOMNode;

},{"react-dom":"6cUDX","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jgc6O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAccordionItemSelected", function() {
    return isAccordionItemSelected;
});
var _react = require("react");
function isAccordionItemSelected(activeEventKey, eventKey) {
    return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;
}
var context = /*#__PURE__*/ _react.createContext({
});
context.displayName = 'AccordionContext';
exports.default = context;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2h2tk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var context = /*#__PURE__*/ _react.createContext({
    eventKey: ''
});
context.displayName = 'AccordionItemContext';
exports.default = context;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5gqho":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAccordionButton", function() {
    return useAccordionButton;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
function useAccordionButton(eventKey, onClick) {
    var ref = _react.useContext(_accordionContextDefault.default), activeEventKey = ref.activeEventKey, onSelect = ref.onSelect, alwaysOpen = ref.alwaysOpen;
    return function(e) {
        /*
      Compare the event key in context with the given event key.
      If they are the same, then collapse the component.
    */ var eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (alwaysOpen) {
            if (Array.isArray(activeEventKey)) {
                if (activeEventKey.includes(eventKey)) eventKeyPassed = activeEventKey.filter(function(k) {
                    return k !== eventKey;
                });
                else eventKeyPassed = _helpers.toConsumableArray(activeEventKey).concat([
                    eventKey
                ]);
            } else // activeEventKey is undefined.
            eventKeyPassed = [
                eventKey
            ];
        }
        onSelect == null || onSelect(eventKeyPassed, e);
        onClick == null || onClick(e);
    };
}
var AccordionButton = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'button' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, onClick = _param.onClick, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className",
        "onClick"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-button');
    var eventKey = _react.useContext(_accordionItemContextDefault.default).eventKey;
    var accordionOnClick = useAccordionButton(eventKey, onClick);
    var activeEventKey = _react.useContext(_accordionContextDefault.default).activeEventKey;
    if (Component === 'button') props.type = 'button';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref,
        onClick: accordionOnClick
    }, props, {
        "aria-expanded": eventKey === activeEventKey,
        className: _classnamesDefault.default(className, bsPrefix, !_accordionContext.isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')
    })));
});
AccordionButton.displayName = 'AccordionButton';
exports.default = AccordionButton;

},{"@swc/helpers":"cawJ1","react":"kEcQC","classnames":"eflpt","./AccordionContext":"jgc6O","./AccordionItemContext":"2h2tk","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2n5rx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _jsxRuntime = require("react/jsx-runtime");
var AccordionHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'h2' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, onClick = _param.onClick, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className",
        "children",
        "onClick"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, bsPrefix),
        children: /*#__PURE__*/ _jsxRuntime.jsx(_accordionButtonDefault.default, {
            onClick: onClick,
            children: children
        })
    })));
});
AccordionHeader.displayName = 'AccordionHeader';
exports.default = AccordionHeader;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./AccordionButton":"5gqho","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jD249":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _jsxRuntime = require("react/jsx-runtime");
var AccordionItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, eventKey = _param.eventKey, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className",
        "eventKey"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-item');
    var contextValue = _react.useMemo(function() {
        return {
            eventKey: eventKey
        };
    }, [
        eventKey
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionItemContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            ref: ref
        }, props, {
            className: _classnamesDefault.default(className, bsPrefix)
        }))
    }));
});
AccordionItem.displayName = 'AccordionItem';
exports.default = AccordionItem;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./AccordionItemContext":"2h2tk","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kTCXP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _jsxRuntime = require("react/jsx-runtime");
var DivStyledAsH4 = _divWithClassNameDefault.default('h4');
DivStyledAsH4.displayName = 'DivStyledAsH4';
var AlertHeading = _createWithBsPrefixDefault.default('alert-heading', {
    Component: DivStyledAsH4
});
var AlertLink = _createWithBsPrefixDefault.default('alert-link', {
    Component: _anchorDefault.default
});
var defaultProps = {
    variant: 'primary',
    show: true,
    transition: _fadeDefault.default,
    closeLabel: 'Close alert'
};
var Alert = /*#__PURE__*/ _react.forwardRef(function(uncontrolledProps, ref) {
    var _ref = _uncontrollable.useUncontrolled(uncontrolledProps, {
        show: 'onClose'
    }), bsPrefix = _ref.bsPrefix, show = _ref.show, closeLabel = _ref.closeLabel, closeVariant = _ref.closeVariant, className = _ref.className, children = _ref.children, variant = _ref.variant, onClose = _ref.onClose, dismissible = _ref.dismissible, transition = _ref.transition, props = _helpers.objectWithoutProperties(_ref, [
        "bsPrefix",
        "show",
        "closeLabel",
        "closeVariant",
        "className",
        "children",
        "variant",
        "onClose",
        "dismissible",
        "transition"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'alert');
    var handleClose = _useEventCallbackDefault.default(function(e) {
        if (onClose) onClose(false, e);
    });
    var Transition = transition === true ? _fadeDefault.default : transition;
    var alert = /*#__PURE__*/ _jsxRuntime.jsxs("div", _helpers.objectSpread({
        role: "alert"
    }, !Transition ? props : undefined, {
        ref: ref,
        className: _classnamesDefault.default(className, prefix, variant && "".concat(prefix, "-").concat(variant), dismissible && "".concat(prefix, "-dismissible")),
        children: [
            dismissible && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                onClick: handleClose,
                "aria-label": closeLabel,
                variant: closeVariant
            }),
            children
        ]
    }));
    if (!Transition) return show ? alert : null;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Transition, _helpers.objectSpread({
        unmountOnExit: true
    }, props, {
        ref: undefined,
        in: show,
        children: alert
    })));
});
Alert.displayName = 'Alert';
Alert.defaultProps = defaultProps;
exports.default = Object.assign(Alert, {
    Link: AlertLink,
    Heading: AlertHeading
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","uncontrollable":"3QjJi","@restart/hooks/useEventCallback":"iaqs7","@restart/ui/Anchor":"8XIew","./ThemeProvider":"7HSML","./Fade":"4nlBx","./CloseButton":"l89s9","./divWithClassName":"8C7xS","./createWithBsPrefix":"l44ad","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iaqs7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
function useEventCallback(fn) {
    var ref = _useCommittedRefDefault.default(fn);
    return _react.useCallback(function() {
        return ref.current && ref.current.apply(ref, arguments);
    }, [
        ref
    ]);
}
exports.default = useEventCallback;

},{"react":"kEcQC","./useCommittedRef":"gLYl6","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gLYl6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
 * value is the one rendered with. Generally only required for Concurrent mode usage
 * where previous work in `render()` may be discarded before being used.
 *
 * This is safe to access in an event handler.
 *
 * @param value The `Ref` value
 */ function useCommittedRef(value) {
    var ref = _react.useRef(value);
    _react.useEffect(function() {
        ref.current = value;
    }, [
        value
    ]);
    return ref;
}
exports.default = useCommittedRef;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8XIew":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTrivialHref", function() {
    return isTrivialHref;
});
var _helpers = require("@swc/helpers");
/* eslint-disable jsx-a11y/no-static-element-interactions */ /* eslint-disable jsx-a11y/anchor-has-content */ var _react = require("react");
var _hooks = require("@restart/hooks");
var _button = require("./Button");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "onKeyDown"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isTrivialHref(href) {
    return !href || href.trim() === '#';
}
/**
 * An generic `<a>` component that covers a few A11y cases, ensuring that
 * cases where the `href` is missing or trivial like "#" are treated like buttons.
 */ var Anchor = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var onKeyDown = _ref.onKeyDown, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ref1 = _helpers.slicedToArray(_button.useButtonProps(Object.assign({
        tagName: 'a'
    }, props)), 1), buttonProps = ref1[0];
    var handleKeyDown = _hooks.useEventCallback(function(e) {
        buttonProps.onKeyDown(e);
        onKeyDown == null || onKeyDown(e);
    });
    if (isTrivialHref(props.href) && !props.role || props.role === 'button') return(/*#__PURE__*/ _jsxRuntime.jsx("a", Object.assign({
        ref: ref
    }, props, buttonProps, {
        onKeyDown: handleKeyDown
    })));
    return(/*#__PURE__*/ _jsxRuntime.jsx("a", Object.assign({
        ref: ref
    }, props, {
        onKeyDown: onKeyDown
    })));
});
Anchor.displayName = 'Anchor';
exports.default = Anchor;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/hooks":"9Xc8G","./Button":"9Dxoo","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9Xc8G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallbackRef", function() {
    return _useCallbackRefDefault.default;
});
parcelHelpers.export(exports, "useCommittedRef", function() {
    return _useCommittedRefDefault.default;
});
parcelHelpers.export(exports, "useEventCallback", function() {
    return _useEventCallbackDefault.default;
});
parcelHelpers.export(exports, "useEventListener", function() {
    return _useEventListenerDefault.default;
});
parcelHelpers.export(exports, "useGlobalListener", function() {
    return _useGlobalListenerDefault.default;
});
parcelHelpers.export(exports, "useInterval", function() {
    return _useIntervalDefault.default;
});
parcelHelpers.export(exports, "useRafInterval", function() {
    return _useRafIntervalDefault.default;
});
parcelHelpers.export(exports, "useMergeState", function() {
    return _useMergeStateDefault.default;
});
parcelHelpers.export(exports, "useMergeStateFromProps", function() {
    return _useMergeStateFromPropsDefault.default;
});
parcelHelpers.export(exports, "useMounted", function() {
    return _useMountedDefault.default;
});
parcelHelpers.export(exports, "usePrevious", function() {
    return _usePreviousDefault.default;
});
parcelHelpers.export(exports, "useImage", function() {
    return _useImageDefault.default;
});
parcelHelpers.export(exports, "useResizeObserver", function() {
    return _useResizeObserverDefault.default;
});
var _useCallbackRef = require("./useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useEventListener = require("./useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _useGlobalListener = require("./useGlobalListener");
var _useGlobalListenerDefault = parcelHelpers.interopDefault(_useGlobalListener);
var _useInterval = require("./useInterval");
var _useIntervalDefault = parcelHelpers.interopDefault(_useInterval);
var _useRafInterval = require("./useRafInterval");
var _useRafIntervalDefault = parcelHelpers.interopDefault(_useRafInterval);
var _useMergeState = require("./useMergeState");
var _useMergeStateDefault = parcelHelpers.interopDefault(_useMergeState);
var _useMergeStateFromProps = require("./useMergeStateFromProps");
var _useMergeStateFromPropsDefault = parcelHelpers.interopDefault(_useMergeStateFromProps);
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _usePrevious = require("./usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useImage = require("./useImage");
var _useImageDefault = parcelHelpers.interopDefault(_useImage);
var _useResizeObserver = require("./useResizeObserver");
var _useResizeObserverDefault = parcelHelpers.interopDefault(_useResizeObserver);

},{"./useCallbackRef":"7m4Rf","./useCommittedRef":"gLYl6","./useEventCallback":"iaqs7","./useEventListener":"hv06P","./useGlobalListener":"6hkBu","./useInterval":"gDN5R","./useRafInterval":"h2Hgt","./useMergeState":"fvqnO","./useMergeStateFromProps":"ePGu6","./useMounted":"03N3e","./usePrevious":"6KEhY","./useImage":"b4eQC","./useResizeObserver":"jTzll","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7m4Rf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useCallbackRef() {
    return _react.useState(null);
}
exports.default = useCallbackRef;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hv06P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
function useEventListener(eventTarget, event, listener, capture) {
    if (capture === void 0) capture = false;
    var handler = _useEventCallbackDefault.default(listener);
    _react.useEffect(function() {
        var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;
        target.addEventListener(event, handler, capture);
        return function() {
            return target.removeEventListener(event, handler, capture);
        };
    }, [
        eventTarget
    ]);
}
exports.default = useEventListener;

},{"react":"kEcQC","./useEventCallback":"iaqs7","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6hkBu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useEventListener = require("./useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _react = require("react");
function useGlobalListener(event, handler, capture) {
    if (capture === void 0) capture = false;
    var documentTarget = _react.useCallback(function() {
        return document;
    }, []);
    return _useEventListenerDefault.default(documentTarget, event, handler, capture);
}
exports.default = useGlobalListener;

},{"./useEventListener":"hv06P","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gDN5R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
/**
 * Creates a `setInterval` that is properly cleaned up when a component unmounted
 *
 * ```tsx
 *  function Timer() {
 *    const [timer, setTimer] = useState(0)
 *    useInterval(() => setTimer(i => i + 1), 1000)
 *
 *    return <span>{timer} seconds past</span>
 *  }
 * ```
 *
 * @param fn an function run on each interval
 * @param ms The milliseconds duration of the interval
 */ function useInterval(fn, ms, paused, runImmediately) {
    if (paused === void 0) paused = false;
    if (runImmediately === void 0) runImmediately = false;
    var handle;
    var fnRef = _useCommittedRefDefault.default(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle
    // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.
    var pausedRef = _useCommittedRefDefault.default(paused);
    var tick = function tick() {
        if (pausedRef.current) return;
        fnRef.current();
        schedule(); // eslint-disable-line no-use-before-define
    };
    var schedule = function schedule() {
        clearTimeout(handle);
        handle = setTimeout(tick, ms);
    };
    _react.useEffect(function() {
        if (runImmediately) tick();
        else schedule();
        return function() {
            return clearTimeout(handle);
        };
    }, [
        paused,
        runImmediately
    ]);
}
exports.default = useInterval;

},{"react":"kEcQC","./useCommittedRef":"gLYl6","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h2Hgt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
function useRafInterval(fn, ms, paused) {
    if (paused === void 0) paused = false;
    var handle;
    var start = new Date().getTime();
    var fnRef = _useCommittedRefDefault.default(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle
    // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.
    var pausedRef = _useCommittedRefDefault.default(paused);
    function loop() {
        var current = new Date().getTime();
        var delta = current - start;
        if (pausedRef.current) return;
        if (delta >= ms && fnRef.current) {
            fnRef.current();
            start = new Date().getTime();
        }
        cancelAnimationFrame(handle);
        handle = requestAnimationFrame(loop);
    }
    _react.useEffect(function() {
        handle = requestAnimationFrame(loop);
        return function() {
            return cancelAnimationFrame(handle);
        };
    }, []);
}
exports.default = useRafInterval;

},{"react":"kEcQC","./useCommittedRef":"gLYl6","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fvqnO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useMergeState(initialState) {
    var _useState = _react.useState(initialState), state1 = _useState[0], setState = _useState[1];
    var updater = _react.useCallback(function(update) {
        if (update === null) return;
        if (typeof update === 'function') setState(function(state) {
            var nextState = update(state);
            return nextState == null ? state : _extends({
            }, state, nextState);
        });
        else setState(function(state) {
            return _extends({
            }, state, update);
        });
    }, [
        setState
    ]);
    return [
        state1,
        updater
    ];
}
exports.default = useMergeState;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ePGu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useMergeState = require("./useMergeState");
var _useMergeStateDefault = parcelHelpers.interopDefault(_useMergeState);
function useMergeStateFromProps(props, gDSFP, initialState) {
    var _useMergeState1 = _useMergeStateDefault.default(initialState), state = _useMergeState1[0], setState = _useMergeState1[1];
    var nextState = gDSFP(props, state);
    if (nextState !== null) setState(nextState);
    return [
        state,
        setState
    ];
}
exports.default = useMergeStateFromProps;

},{"./useMergeState":"fvqnO","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"03N3e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useMounted() {
    var mounted = _react.useRef(true);
    var isMounted = _react.useRef(function() {
        return mounted.current;
    });
    _react.useEffect(function() {
        return function() {
            mounted.current = false;
        };
    }, []);
    return isMounted.current;
}
exports.default = useMounted;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6KEhY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function usePrevious(value) {
    var ref = _react.useRef(null);
    _react.useEffect(function() {
        ref.current = value;
    });
    return ref.current;
}
exports.default = usePrevious;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"b4eQC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useImage(imageOrUrl, crossOrigin) {
    var _useState = _react.useState({
        image: null,
        error: null
    }), state = _useState[0], setState = _useState[1];
    _react.useEffect(function() {
        if (!imageOrUrl) return undefined;
        var image;
        if (typeof imageOrUrl === 'string') {
            image = new Image();
            if (crossOrigin) image.crossOrigin = crossOrigin;
            image.src = imageOrUrl;
        } else {
            image = imageOrUrl;
            if (image.complete && image.naturalHeight > 0) {
                setState({
                    image: image,
                    error: null
                });
                return;
            }
        }
        function onLoad() {
            setState({
                image: image,
                error: null
            });
        }
        function onError(error) {
            setState({
                image: image,
                error: error
            });
        }
        image.addEventListener('load', onLoad);
        image.addEventListener('error', onError);
        return function() {
            image.removeEventListener('load', onLoad);
            image.removeEventListener('error', onError);
        };
    }, [
        imageOrUrl,
        crossOrigin
    ]);
    return state;
}
exports.default = useImage;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jTzll":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useIsomorphicEffect = require("./useIsomorphicEffect");
var _useIsomorphicEffectDefault = parcelHelpers.interopDefault(_useIsomorphicEffect);
var targetMap = new WeakMap();
var resizeObserver;
function getResizeObserver() {
    // eslint-disable-next-line no-return-assign
    return resizeObserver = resizeObserver || new window.ResizeObserver(function(entries) {
        entries.forEach(function(entry) {
            var handler = targetMap.get(entry.target);
            if (handler) handler(entry.contentRect);
        });
    });
}
function useResizeObserver(element) {
    var _useState = _react.useState(null), rect1 = _useState[0], setRect = _useState[1];
    _useIsomorphicEffectDefault.default(function() {
        if (!element) return;
        getResizeObserver().observe(element);
        setRect(element.getBoundingClientRect());
        targetMap.set(element, function(rect) {
            setRect(rect);
        });
        return function() {
            targetMap.delete(element);
        };
    }, [
        element
    ]);
    return rect1;
}
exports.default = useResizeObserver;

},{"react":"kEcQC","./useIsomorphicEffect":"71sMj","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"71sMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var global = arguments[3];
var isReactNative = typeof global !== 'undefined' && global.navigator && global.navigator.product === 'ReactNative';
var isDOM = typeof document !== 'undefined';
exports.default = isDOM || isReactNative ? _react.useLayoutEffect : _react.useEffect;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9Dxoo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTrivialHref", function() {
    return isTrivialHref;
});
parcelHelpers.export(exports, "useButtonProps", function() {
    return useButtonProps;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "as",
    "disabled"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isTrivialHref(href) {
    return !href || href.trim() === '#';
}
function useButtonProps(param) {
    var tagName = param.tagName, disabled = param.disabled, href = param.href, target = param.target, rel = param.rel, onClick = param.onClick, _tabIndex = param.tabIndex, tabIndex = _tabIndex === void 0 ? 0 : _tabIndex, type = param.type;
    if (!tagName) {
        if (href != null || target != null || rel != null) tagName = 'a';
        else tagName = 'button';
    }
    var meta = {
        tagName: tagName
    };
    if (tagName === 'button') return [
        {
            type: type || 'button',
            disabled: disabled
        },
        meta
    ];
    var handleClick = function(event) {
        if (disabled || tagName === 'a' && isTrivialHref(href)) event.preventDefault();
        if (disabled) {
            event.stopPropagation();
            return;
        }
        onClick == null || onClick(event);
    };
    var handleKeyDown = function(event) {
        if (event.key === ' ') {
            event.preventDefault();
            handleClick(event);
        }
    };
    return [
        {
            role: 'button',
            // explicitly undefined so that it overrides the props disabled in a spread
            // e.g. <Tag {...props} {...hookProps} />
            disabled: undefined,
            tabIndex: disabled ? undefined : tabIndex,
            href: tagName === 'a' && disabled ? undefined : href,
            target: tagName === 'a' ? target : undefined,
            'aria-disabled': !disabled ? undefined : disabled,
            rel: tagName === 'a' ? rel : undefined,
            onClick: handleClick,
            onKeyDown: handleKeyDown
        },
        meta
    ];
}
var Button = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var asProp = _ref.as, disabled = _ref.disabled, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ref1 = _helpers.slicedToArray(useButtonProps(Object.assign({
        tagName: asProp,
        disabled: disabled
    }, props)), 2), buttonProps = ref1[0], ref2 = ref1[1], Component = ref2.tagName;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, props, buttonProps, {
        ref: ref
    })));
});
Button.displayName = 'Button';
exports.default = Button;

},{"@swc/helpers":"cawJ1","react":"kEcQC","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4nlBx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false
};
var _obj;
var fadeStyles = (_obj = {
}, _helpers.defineProperty(_obj, _transition.ENTERING, 'show'), _helpers.defineProperty(_obj, _transition.ENTERED, 'show'), _obj);
var Fade = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var className = _param.className, children = _param.children, tmp = _param.transitionClasses, transitionClasses = tmp === void 0 ? {
    } : tmp, props = _helpers.objectWithoutProperties(_param, [
        "className",
        "children",
        "transitionClasses"
    ]);
    var handleEnter = _react.useCallback(function(node, isAppearing) {
        _triggerBrowserReflowDefault.default(node);
        props.onEnter == null || props.onEnter(node, isAppearing);
    }, [
        props
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, _helpers.objectSpread({
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default
    }, props, {
        onEnter: handleEnter,
        childRef: children.ref,
        children: function(status, innerProps) {
            /*#__PURE__*/ return _react.cloneElement(children, _helpers.objectSpread({
            }, innerProps, {
                className: _classnamesDefault.default('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])
            }));
        }
    })));
});
Fade.defaultProps = defaultProps;
Fade.displayName = 'Fade';
exports.default = Fade;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","react-transition-group/Transition":"jRkxX","./transitionEndListener":"j5oP0","./triggerBrowserReflow":"2EQD8","./TransitionWrapper":"4syw8","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"l89s9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    'aria-label': _propTypesDefault.default.string,
    onClick: _propTypesDefault.default.func,
    /**
   * Render different color variant for the button.
   *
   * Omitting this will render the default dark color.
   */ variant: _propTypesDefault.default.oneOf([
        'white'
    ])
};
var defaultProps = {
    'aria-label': 'Close'
};
var CloseButton = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var className = _param.className, variant = _param.variant, props = _helpers.objectWithoutProperties(_param, [
        "className",
        "variant"
    ]);
    return _jsxRuntime.jsx("button", _helpers.objectSpread({
        ref: ref,
        type: "button",
        className: _classnamesDefault.default('btn-close', variant && "btn-close-".concat(variant), className)
    }, props));
});
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes;
CloseButton.defaultProps = defaultProps;
exports.default = CloseButton;

},{"@swc/helpers":"cawJ1","prop-types":"h9rZg","react":"kEcQC","classnames":"eflpt","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8C7xS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _jsxRuntime = require("react/jsx-runtime");
exports.default = function(className) {
    /*#__PURE__*/ return _react.forwardRef(function(p, ref) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", _helpers.objectSpread({
        }, p, {
            ref: ref,
            className: _classnamesDefault.default(p.className, className)
        }));
    });
};

},{"@swc/helpers":"cawJ1","react":"kEcQC","classnames":"eflpt","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"l44ad":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _camelize = require("dom-helpers/camelize");
var _camelizeDefault = parcelHelpers.interopDefault(_camelize);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var pascalCase = function(str) {
    return str[0].toUpperCase() + _camelizeDefault.default(str).slice(1);
};
function createWithBsPrefix(prefix) {
    var ref1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    }, _displayName = ref1.displayName, displayName = _displayName === void 0 ? pascalCase(prefix) : _displayName, Component = ref1.Component, defaultProps = ref1.defaultProps;
    var BsComponent = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
        var className = _param.className, bsPrefix = _param.bsPrefix, tmp = _param.as, Tag = tmp === void 0 ? Component || 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
            "className",
            "bsPrefix",
            "as"
        ]);
        var resolvedPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, prefix);
        return(/*#__PURE__*/ _jsxRuntime.jsx(Tag, _helpers.objectSpread({
            ref: ref,
            className: _classnamesDefault.default(className, resolvedPrefix)
        }, props)));
    });
    BsComponent.defaultProps = defaultProps;
    BsComponent.displayName = displayName;
    return BsComponent;
}
exports.default = createWithBsPrefix;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","dom-helpers/camelize":"6f2Jg","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6f2Jg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var rHyphen = /-(.)/g;
function camelize(string) {
    return string.replace(rHyphen, function(_, chr) {
        return chr.toUpperCase();
    });
}
exports.default = camelize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5vSUX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
exports.default = _anchorDefault.default;

},{"@restart/ui/Anchor":"8XIew","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kjPtG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    bg: 'primary',
    pill: false
};
var Badge = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, bg = _param.bg, pill = _param.pill, text = _param.text, className = _param.className, tmp = _param.as, Component = tmp === void 0 ? 'span' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "bg",
        "pill",
        "text",
        "className",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'badge');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, prefix, pill && "rounded-pill", text && "text-".concat(text), bg && "bg-".concat(bg))
    })));
});
Badge.displayName = 'Badge';
Badge.defaultProps = defaultProps;
exports.default = Badge;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"85LGP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _breadcrumbItem = require("./BreadcrumbItem");
var _breadcrumbItemDefault = parcelHelpers.interopDefault(_breadcrumbItem);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    label: 'breadcrumb',
    listProps: {
    }
};
var Breadcrumb = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, listProps = _param.listProps, children = _param.children, label = _param.label, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'nav' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "listProps",
        "children",
        "label",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'breadcrumb');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        "aria-label": label,
        className: className,
        ref: ref
    }, props, {
        children: /*#__PURE__*/ _jsxRuntime.jsx("ol", _helpers.objectSpread({
        }, listProps, {
            className: _classnamesDefault.default(prefix, listProps == null ? void 0 : listProps.className),
            children: children
        }))
    })));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.defaultProps = defaultProps;
exports.default = Object.assign(Breadcrumb, {
    Item: _breadcrumbItemDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./BreadcrumbItem":"a6D3A","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a6D3A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    active: false,
    linkProps: {
    }
};
var BreadcrumbItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, active = _param.active, children = _param.children, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'li' : tmp, tmp1 = _param.linkAs, LinkComponent = tmp1 === void 0 ? _anchorDefault.default : tmp1, linkProps = _param.linkProps, href = _param.href, title = _param.title, target = _param.target, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "active",
        "children",
        "className",
        "as",
        "linkAs",
        "linkProps",
        "href",
        "title",
        "target"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(prefix, className, {
            active: active
        }),
        "aria-current": active ? 'page' : undefined,
        children: active ? children : /*#__PURE__*/ _jsxRuntime.jsx(LinkComponent, _helpers.objectSpread({
        }, linkProps, {
            href: href,
            title: title,
            target: target,
            children: children
        }))
    })));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.defaultProps = defaultProps;
exports.default = BreadcrumbItem;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/Anchor":"8XIew","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5vnhO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _button = require("@restart/ui/Button");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    variant: 'primary',
    active: false,
    disabled: false
};
var Button = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var as = _param.as, bsPrefix = _param.bsPrefix, variant = _param.variant, size = _param.size, active = _param.active, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "variant",
        "size",
        "active",
        "className"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn');
    var ref1 = _helpers.slicedToArray(_button.useButtonProps(_helpers.objectSpread({
        tagName: as
    }, props)), 2), buttonProps = ref1[0], tagName = ref1[1].tagName;
    var Component = tagName;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, buttonProps, {
        ref: ref,
        className: _classnamesDefault.default(className, prefix, active && 'active', variant && "".concat(prefix, "-").concat(variant), size && "".concat(prefix, "-").concat(size), props.href && props.disabled && 'disabled')
    })));
});
Button.displayName = 'Button';
Button.defaultProps = defaultProps;
exports.default = Button;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/Button":"9Dxoo","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dqjqa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    vertical: false,
    role: 'group'
};
var ButtonGroup = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, size = _param.size, vertical = _param.vertical, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, rest = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "size",
        "vertical",
        "className",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-group');
    var baseClass = prefix;
    if (vertical) baseClass = "".concat(prefix, "-vertical");
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, rest, {
        ref: ref,
        className: _classnamesDefault.default(className, baseClass, size && "".concat(prefix, "-").concat(size))
    })));
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.defaultProps = defaultProps;
exports.default = ButtonGroup;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gS05m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    role: 'toolbar'
};
var ButtonToolbar = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-toolbar');
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(className, prefix)
    })));
});
ButtonToolbar.displayName = 'ButtonToolbar';
ButtonToolbar.defaultProps = defaultProps;
exports.default = ButtonToolbar;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jYYv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var _cardImg = require("./CardImg");
var _cardImgDefault = parcelHelpers.interopDefault(_cardImg);
var _cardHeader = require("./CardHeader");
var _cardHeaderDefault = parcelHelpers.interopDefault(_cardHeader);
var _jsxRuntime = require("react/jsx-runtime");
var DivStyledAsH5 = _divWithClassNameDefault.default('h5');
var DivStyledAsH6 = _divWithClassNameDefault.default('h6');
var CardBody = _createWithBsPrefixDefault.default('card-body');
var CardTitle = _createWithBsPrefixDefault.default('card-title', {
    Component: DivStyledAsH5
});
var CardSubtitle = _createWithBsPrefixDefault.default('card-subtitle', {
    Component: DivStyledAsH6
});
var CardLink = _createWithBsPrefixDefault.default('card-link', {
    Component: 'a'
});
var CardText = _createWithBsPrefixDefault.default('card-text', {
    Component: 'p'
});
var CardFooter = _createWithBsPrefixDefault.default('card-footer');
var CardImgOverlay = _createWithBsPrefixDefault.default('card-img-overlay');
var defaultProps = {
    body: false
};
var Card = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, bg = _param.bg, text = _param.text, border = _param.border, body = _param.body, children = _param.children, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "bg",
        "text",
        "border",
        "body",
        "children",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, prefix, bg && "bg-".concat(bg), text && "text-".concat(text), border && "border-".concat(border)),
        children: body ? /*#__PURE__*/ _jsxRuntime.jsx(CardBody, {
            children: children
        }) : children
    })));
});
Card.displayName = 'Card';
Card.defaultProps = defaultProps;
exports.default = Object.assign(Card, {
    Img: _cardImgDefault.default,
    Title: CardTitle,
    Subtitle: CardSubtitle,
    Body: CardBody,
    Link: CardLink,
    Text: CardText,
    Header: _cardHeaderDefault.default,
    Footer: CardFooter,
    ImgOverlay: CardImgOverlay
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./createWithBsPrefix":"l44ad","./divWithClassName":"8C7xS","./CardImg":"dSzEi","./CardHeader":"eNL5n","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dSzEi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var CardImg = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, variant = _param.variant, tmp = _param.as, Component = tmp === void 0 ? 'img' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "variant",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card-img');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref,
        className: _classnamesDefault.default(variant ? "".concat(prefix, "-").concat(variant) : prefix, className)
    }, props)));
});
CardImg.displayName = 'CardImg';
exports.default = CardImg;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eNL5n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _cardHeaderContext = require("./CardHeaderContext");
var _cardHeaderContextDefault = parcelHelpers.interopDefault(_cardHeaderContext);
var _jsxRuntime = require("react/jsx-runtime");
var CardHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card-header');
    var contextValue = _react.useMemo(function() {
        return {
            cardHeaderBsPrefix: prefix
        };
    }, [
        prefix
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_cardHeaderContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            ref: ref
        }, props, {
            className: _classnamesDefault.default(className, prefix)
        }))
    }));
});
CardHeader.displayName = 'CardHeader';
exports.default = CardHeader;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./CardHeaderContext":"jbhK2","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jbhK2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'CardHeaderContext';
exports.default = context;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4YjQE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('card-group');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bFJ6a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useUpdateEffect = require("@restart/hooks/useUpdateEffect");
var _useUpdateEffectDefault = parcelHelpers.interopDefault(_useUpdateEffect);
var _useCommittedRef = require("@restart/hooks/useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _carouselCaption = require("./CarouselCaption");
var _carouselCaptionDefault = parcelHelpers.interopDefault(_carouselCaption);
var _carouselItem = require("./CarouselItem");
var _carouselItemDefault = parcelHelpers.interopDefault(_carouselItem);
var _elementChildren = require("./ElementChildren");
var _themeProvider = require("./ThemeProvider");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
var SWIPE_THRESHOLD = 40;
var defaultProps = {
    slide: true,
    fade: false,
    controls: true,
    indicators: true,
    indicatorLabels: [],
    defaultActiveIndex: 0,
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    wrap: true,
    touch: true,
    prevIcon: /*#__PURE__*/ _jsxRuntime.jsx("span", {
        "aria-hidden": "true",
        className: "carousel-control-prev-icon"
    }),
    prevLabel: 'Previous',
    nextIcon: /*#__PURE__*/ _jsxRuntime.jsx("span", {
        "aria-hidden": "true",
        className: "carousel-control-next-icon"
    }),
    nextLabel: 'Next'
};
function isVisible(element) {
    if (!element || !element.style || !element.parentNode || !element.parentNode.style) return false;
    var elementStyle = getComputedStyle(element);
    return elementStyle.display !== 'none' && elementStyle.visibility !== 'hidden' && getComputedStyle(element.parentNode).display !== 'none';
}
var Carousel = /*#__PURE__*/ _react.forwardRef(function(uncontrolledProps, ref) {
    var _ref1 = _uncontrollable.useUncontrolled(uncontrolledProps, {
        activeIndex: 'onSelect'
    }), tmp = _ref1.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _ref1.bsPrefix, slide = _ref1.slide, fade = _ref1.fade, controls = _ref1.controls, indicators = _ref1.indicators, indicatorLabels = _ref1.indicatorLabels, activeIndex = _ref1.activeIndex, onSelect = _ref1.onSelect, onSlide = _ref1.onSlide, onSlid = _ref1.onSlid, interval = _ref1.interval, keyboard = _ref1.keyboard, onKeyDown = _ref1.onKeyDown, pause = _ref1.pause, onMouseOver = _ref1.onMouseOver, onMouseOut = _ref1.onMouseOut, wrap = _ref1.wrap, touch = _ref1.touch, onTouchStart = _ref1.onTouchStart, onTouchMove = _ref1.onTouchMove, onTouchEnd = _ref1.onTouchEnd, prevIcon = _ref1.prevIcon, prevLabel = _ref1.prevLabel, nextIcon = _ref1.nextIcon, nextLabel = _ref1.nextLabel, variant = _ref1.variant, className = _ref1.className, children = _ref1.children, props = _helpers.objectWithoutProperties(_ref1, [
        "as",
        "bsPrefix",
        "slide",
        "fade",
        "controls",
        "indicators",
        "indicatorLabels",
        "activeIndex",
        "onSelect",
        "onSlide",
        "onSlid",
        "interval",
        "keyboard",
        "onKeyDown",
        "pause",
        "onMouseOver",
        "onMouseOut",
        "wrap",
        "touch",
        "onTouchStart",
        "onTouchMove",
        "onTouchEnd",
        "prevIcon",
        "prevLabel",
        "nextIcon",
        "nextLabel",
        "variant",
        "className",
        "children"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'carousel');
    var isRTL = _themeProvider.useIsRTL();
    var nextDirectionRef = _react.useRef(null);
    var ref1 = _helpers.slicedToArray(_react.useState('next'), 2), direction = ref1[0], setDirection = ref1[1];
    var ref2 = _helpers.slicedToArray(_react.useState(false), 2), paused = ref2[0], setPaused = ref2[1];
    var ref3 = _helpers.slicedToArray(_react.useState(false), 2), isSliding = ref3[0], setIsSliding = ref3[1];
    var ref4 = _helpers.slicedToArray(_react.useState(activeIndex || 0), 2), renderedActiveIndex = ref4[0], setRenderedActiveIndex = ref4[1];
    if (!isSliding && activeIndex !== renderedActiveIndex) {
        if (nextDirectionRef.current) setDirection(nextDirectionRef.current);
        else setDirection((activeIndex || 0) > renderedActiveIndex ? 'next' : 'prev');
        if (slide) setIsSliding(true);
        setRenderedActiveIndex(activeIndex || 0);
    }
    _react.useEffect(function() {
        if (nextDirectionRef.current) nextDirectionRef.current = null;
    });
    var numChildren = 0;
    var activeChildInterval; // Iterate to grab all of the children's interval values
    // (and count them, too)
    _elementChildren.forEach(children, function(child, index) {
        ++numChildren;
        if (index === activeIndex) activeChildInterval = child.props.interval;
    });
    var activeChildIntervalRef = _useCommittedRefDefault.default(activeChildInterval);
    var prev = _react.useCallback(function(event) {
        if (isSliding) return;
        var nextActiveIndex = renderedActiveIndex - 1;
        if (nextActiveIndex < 0) {
            if (!wrap) return;
            nextActiveIndex = numChildren - 1;
        }
        nextDirectionRef.current = 'prev';
        onSelect == null || onSelect(nextActiveIndex, event);
    }, [
        isSliding,
        renderedActiveIndex,
        onSelect,
        wrap,
        numChildren
    ]); // This is used in the setInterval, so it should not invalidate.
    var next = _useEventCallbackDefault.default(function(event) {
        if (isSliding) return;
        var nextActiveIndex = renderedActiveIndex + 1;
        if (nextActiveIndex >= numChildren) {
            if (!wrap) return;
            nextActiveIndex = 0;
        }
        nextDirectionRef.current = 'next';
        onSelect == null || onSelect(nextActiveIndex, event);
    });
    var elementRef = _react.useRef();
    _react.useImperativeHandle(ref, function() {
        return {
            element: elementRef.current,
            prev: prev,
            next: next
        };
    }); // This is used in the setInterval, so it should not invalidate.
    var nextWhenVisible = _useEventCallbackDefault.default(function() {
        if (!document.hidden && isVisible(elementRef.current)) {
            if (isRTL) prev();
            else next();
        }
    });
    var slideDirection = direction === 'next' ? 'start' : 'end';
    _useUpdateEffectDefault.default(function() {
        if (slide) // These callbacks will be handled by the <Transition> callbacks.
        return;
        onSlide == null || onSlide(renderedActiveIndex, slideDirection);
        onSlid == null || onSlid(renderedActiveIndex, slideDirection);
    }, [
        renderedActiveIndex
    ]);
    var orderClassName = "".concat(prefix, "-item-").concat(direction);
    var directionalClassName = "".concat(prefix, "-item-").concat(slideDirection);
    var handleEnter = _react.useCallback(function(node) {
        _triggerBrowserReflowDefault.default(node);
        onSlide == null || onSlide(renderedActiveIndex, slideDirection);
    }, [
        onSlide,
        renderedActiveIndex,
        slideDirection
    ]);
    var handleEntered = _react.useCallback(function() {
        setIsSliding(false);
        onSlid == null || onSlid(renderedActiveIndex, slideDirection);
    }, [
        onSlid,
        renderedActiveIndex,
        slideDirection
    ]);
    var handleKeyDown = _react.useCallback(function(event) {
        if (keyboard && !/input|textarea/i.test(event.target.tagName)) switch(event.key){
            case 'ArrowLeft':
                event.preventDefault();
                if (isRTL) next(event);
                else prev(event);
                return;
            case 'ArrowRight':
                event.preventDefault();
                if (isRTL) prev(event);
                else next(event);
                return;
            default:
        }
        onKeyDown == null || onKeyDown(event);
    }, [
        keyboard,
        onKeyDown,
        prev,
        next,
        isRTL
    ]);
    var handleMouseOver = _react.useCallback(function(event) {
        if (pause === 'hover') setPaused(true);
        onMouseOver == null || onMouseOver(event);
    }, [
        pause,
        onMouseOver
    ]);
    var handleMouseOut = _react.useCallback(function(event) {
        setPaused(false);
        onMouseOut == null || onMouseOut(event);
    }, [
        onMouseOut
    ]);
    var touchStartXRef = _react.useRef(0);
    var touchDeltaXRef = _react.useRef(0);
    var touchUnpauseTimeout = _useTimeoutDefault.default();
    var handleTouchStart = _react.useCallback(function(event) {
        touchStartXRef.current = event.touches[0].clientX;
        touchDeltaXRef.current = 0;
        if (pause === 'hover') setPaused(true);
        onTouchStart == null || onTouchStart(event);
    }, [
        pause,
        onTouchStart
    ]);
    var handleTouchMove = _react.useCallback(function(event) {
        if (event.touches && event.touches.length > 1) touchDeltaXRef.current = 0;
        else touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;
        onTouchMove == null || onTouchMove(event);
    }, [
        onTouchMove
    ]);
    var handleTouchEnd = _react.useCallback(function(event) {
        if (touch) {
            var touchDeltaX = touchDeltaXRef.current;
            if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {
                if (touchDeltaX > 0) prev(event);
                else next(event);
            }
        }
        if (pause === 'hover') touchUnpauseTimeout.set(function() {
            setPaused(false);
        }, interval || undefined);
        onTouchEnd == null || onTouchEnd(event);
    }, [
        touch,
        pause,
        prev,
        next,
        touchUnpauseTimeout,
        interval,
        onTouchEnd
    ]);
    var shouldPlay = interval != null && !paused && !isSliding;
    var intervalHandleRef = _react.useRef();
    _react.useEffect(function() {
        var _ref, _activeChildIntervalR;
        if (!shouldPlay) return undefined;
        var nextFunc = isRTL ? prev : next;
        intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : nextFunc, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : undefined);
        return function() {
            if (intervalHandleRef.current !== null) clearInterval(intervalHandleRef.current);
        };
    }, [
        shouldPlay,
        prev,
        next,
        activeChildIntervalRef,
        interval,
        nextWhenVisible,
        isRTL
    ]);
    var indicatorOnClicks = _react.useMemo(function() {
        return indicators && Array.from({
            length: numChildren
        }, function(_, index) {
            return function(event) {
                onSelect == null || onSelect(index, event);
            };
        });
    }, [
        indicators,
        numChildren,
        onSelect
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Component, _helpers.objectSpread({
        ref: elementRef
    }, props, {
        onKeyDown: handleKeyDown,
        onMouseOver: handleMouseOver,
        onMouseOut: handleMouseOut,
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        className: _classnamesDefault.default(className, prefix, slide && 'slide', fade && "".concat(prefix, "-fade"), variant && "".concat(prefix, "-").concat(variant)),
        children: [
            indicators && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: "".concat(prefix, "-indicators"),
                children: _elementChildren.map(children, function(_, index) {
                    /*#__PURE__*/ return _jsxRuntime.jsx("button", {
                        type: "button",
                        "data-bs-target": "" // Bootstrap requires this in their css.
                        ,
                        "aria-label": indicatorLabels != null && indicatorLabels.length ? indicatorLabels[index] : "Slide ".concat(index + 1),
                        className: index === renderedActiveIndex ? 'active' : undefined,
                        onClick: indicatorOnClicks ? indicatorOnClicks[index] : undefined,
                        "aria-current": index === renderedActiveIndex
                    }, index);
                })
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: "".concat(prefix, "-inner"),
                children: _elementChildren.map(children, function(child, index) {
                    var isActive = index === renderedActiveIndex;
                    return slide ? /*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, {
                        in: isActive,
                        onEnter: isActive ? handleEnter : undefined,
                        onEntered: isActive ? handleEntered : undefined,
                        addEndListener: _transitionEndListenerDefault.default,
                        children: function(status, innerProps) {
                            /*#__PURE__*/ return _react.cloneElement(child, _helpers.objectSpread({
                            }, innerProps, {
                                className: _classnamesDefault.default(child.props.className, isActive && status !== 'entered' && orderClassName, (status === 'entered' || status === 'exiting') && 'active', (status === 'entering' || status === 'exiting') && directionalClassName)
                            }));
                        }
                    }) : /*#__PURE__*/ _react.cloneElement(child, {
                        className: _classnamesDefault.default(child.props.className, isActive && 'active')
                    });
                })
            }),
            controls && /*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
                children: [
                    (wrap || activeIndex !== 0) && /*#__PURE__*/ _jsxRuntime.jsxs(_anchorDefault.default, {
                        className: "".concat(prefix, "-control-prev"),
                        onClick: prev,
                        children: [
                            prevIcon,
                            prevLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                                className: "visually-hidden",
                                children: prevLabel
                            })
                        ]
                    }),
                    (wrap || activeIndex !== numChildren - 1) && /*#__PURE__*/ _jsxRuntime.jsxs(_anchorDefault.default, {
                        className: "".concat(prefix, "-control-next"),
                        onClick: next,
                        children: [
                            nextIcon,
                            nextLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                                className: "visually-hidden",
                                children: nextLabel
                            })
                        ]
                    })
                ]
            })
        ]
    })));
});
Carousel.displayName = 'Carousel';
Carousel.defaultProps = defaultProps;
exports.default = Object.assign(Carousel, {
    Caption: _carouselCaptionDefault.default,
    Item: _carouselItemDefault.default
});

},{"@swc/helpers":"cawJ1","@restart/hooks/useEventCallback":"iaqs7","@restart/hooks/useUpdateEffect":"i0XrG","@restart/hooks/useCommittedRef":"gLYl6","@restart/hooks/useTimeout":"2b87S","@restart/ui/Anchor":"8XIew","classnames":"eflpt","react":"kEcQC","uncontrollable":"3QjJi","./CarouselCaption":"79Uwi","./CarouselItem":"5e3xC","./ElementChildren":"3fvsy","./ThemeProvider":"7HSML","./transitionEndListener":"j5oP0","./triggerBrowserReflow":"2EQD8","./TransitionWrapper":"4syw8","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i0XrG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * Runs an effect only when the dependencies have changed, skipping the
 * initial "on mount" run. Caution, if the dependency list never changes,
 * the effect is **never run**
 *
 * ```ts
 *  const ref = useRef<HTMLInput>(null);
 *
 *  // focuses an element only if the focus changes, and not on mount
 *  useUpdateEffect(() => {
 *    const element = ref.current?.children[focusedIdx] as HTMLElement
 *
 *    element?.focus()
 *
 *  }, [focusedIndex])
 * ```
 * @param effect An effect to run on mount
 *
 * @category effects
 */ function useUpdateEffect(fn, deps) {
    var isFirst = _react.useRef(true);
    _react.useEffect(function() {
        if (isFirst.current) {
            isFirst.current = false;
            return;
        }
        return fn();
    }, deps);
}
exports.default = useUpdateEffect;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2b87S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _useWillUnmount = require("./useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
/*
 * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the
 * delay as a 32-bit signed integer internally. This causes an integer overflow
 * when using delays larger than 2,147,483,647 ms (about 24.8 days),
 * resulting in the timeout being executed immediately.
 *
 * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
 */ var MAX_DELAY_MS = Math.pow(2, 31) - 1;
function setChainedTimeout(handleRef, fn, timeoutAtMs) {
    var delayMs = timeoutAtMs - Date.now();
    handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function() {
        return setChainedTimeout(handleRef, fn, timeoutAtMs);
    }, MAX_DELAY_MS);
}
function useTimeout() {
    var isMounted = _useMountedDefault.default(); // types are confused between node and web here IDK
    var handleRef = _react.useRef();
    _useWillUnmountDefault.default(function() {
        return clearTimeout(handleRef.current);
    });
    return _react.useMemo(function() {
        var clear = function clear() {
            return clearTimeout(handleRef.current);
        };
        function set(fn, delayMs) {
            if (delayMs === void 0) delayMs = 0;
            if (!isMounted()) return;
            clear();
            if (delayMs <= MAX_DELAY_MS) // For simplicity, if the timeout is short, just set a normal timeout.
            handleRef.current = setTimeout(fn, delayMs);
            else setChainedTimeout(handleRef, fn, Date.now() + delayMs);
        }
        return {
            set: set,
            clear: clear
        };
    }, []);
}
exports.default = useTimeout;

},{"react":"kEcQC","./useMounted":"03N3e","./useWillUnmount":"4VvPC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4VvPC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useUpdatedRef = require("./useUpdatedRef");
var _useUpdatedRefDefault = parcelHelpers.interopDefault(_useUpdatedRef);
var _react = require("react");
function useWillUnmount(fn) {
    var onUnmount = _useUpdatedRefDefault.default(fn);
    _react.useEffect(function() {
        return function() {
            return onUnmount.current();
        };
    }, []);
}
exports.default = useWillUnmount;

},{"./useUpdatedRef":"61ROz","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"61ROz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useUpdatedRef(value) {
    var valueRef = _react.useRef(value);
    valueRef.current = value;
    return valueRef;
}
exports.default = useUpdatedRef;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"79Uwi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('carousel-caption');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5e3xC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var CarouselItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className"
    ]);
    var finalClassName = _classnamesDefault.default(className, _themeProvider.useBootstrapPrefix(bsPrefix, 'carousel-item'));
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: finalClassName
    })));
});
CarouselItem.displayName = 'CarouselItem';
exports.default = CarouselItem;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3fvsy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "map", function() {
    return map;
});
parcelHelpers.export(exports, "forEach", function() {
    return forEach;
});
parcelHelpers.export(exports, "hasChildOfType", function() {
    return hasChildOfType;
});
var _react = require("react");
/**
 * Iterates through children that are typically specified as `props.children`,
 * but only maps over children that are "valid elements".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 */ function map(children, func) {
    var index = 0;
    return _react.Children.map(children, function(child) {
        /*#__PURE__*/ return _react.isValidElement(child) ? func(child, index++) : child;
    });
}
/**
 * Iterates through children that are "valid elements".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 */ function forEach(children, func) {
    var index = 0;
    _react.Children.forEach(children, function(child) {
        if (/*#__PURE__*/ _react.isValidElement(child)) func(child, index++);
    });
}
/**
 * Finds whether a component's `children` prop includes a React element of the
 * specified type.
 */ function hasChildOfType(children, type) {
    return _react.Children.toArray(children).some(function(child) {
        /*#__PURE__*/ return _react.isValidElement(child) && child.type === type;
    });
}

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1YyUj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCol", function() {
    return useCol;
});
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
function useCol(_param) {
    var as = _param.as, bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'col');
    var spans = [];
    var classes = [];
    DEVICE_SIZES.forEach(function(brkPoint) {
        var propValue = props[brkPoint];
        delete props[brkPoint];
        var span;
        var offset;
        var order;
        var ref;
        if (typeof propValue === 'object' && propValue != null) ref = propValue, span = ref.span, offset = ref.offset, order = ref.order, ref;
        else span = propValue;
        var infix = brkPoint !== 'xs' ? "-".concat(brkPoint) : '';
        if (span) spans.push(span === true ? "".concat(bsPrefix).concat(infix) : "".concat(bsPrefix).concat(infix, "-").concat(span));
        if (order != null) classes.push("order".concat(infix, "-").concat(order));
        if (offset != null) classes.push("offset".concat(infix, "-").concat(offset));
    });
    return [
        _helpers.objectSpread({
        }, props, {
            className: _classnamesDefault.default.apply(void 0, [
                className
            ].concat(_helpers.toConsumableArray(spans), _helpers.toConsumableArray(classes)))
        }),
        {
            as: as,
            bsPrefix: bsPrefix,
            spans: spans
        }
    ];
}
var Col = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _ref = useCol(props), __ref = _helpers.slicedToArray(_ref, 2), className = __ref[0].className, ref1 = __ref[1], tmp = ref1.as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = ref1.bsPrefix, spans = ref1.spans, colProps = _helpers.objectWithoutProperties(_ref[0], [
        "className"
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, colProps, {
        ref: ref,
        className: _classnamesDefault.default(className, !spans.length && bsPrefix)
    })));
});
Col.displayName = 'Col';
exports.default = Col;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dHYfj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdown = require("@restart/ui/Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _uncontrollable = require("uncontrollable");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _dropdownItem = require("./DropdownItem");
var _dropdownItemDefault = parcelHelpers.interopDefault(_dropdownItem);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _themeProvider = require("./ThemeProvider");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
var DropdownHeader = _createWithBsPrefixDefault.default('dropdown-header', {
    defaultProps: {
        role: 'heading'
    }
});
var DropdownDivider = _createWithBsPrefixDefault.default('dropdown-divider', {
    Component: 'hr',
    defaultProps: {
        role: 'separator'
    }
});
var DropdownItemText = _createWithBsPrefixDefault.default('dropdown-item-text', {
    Component: 'span'
});
var defaultProps = {
    navbar: false,
    align: 'start',
    autoClose: true
};
var Dropdown = /*#__PURE__*/ _react.forwardRef(function(pProps, ref) {
    var _ref = _uncontrollable.useUncontrolled(pProps, {
        show: 'onToggle'
    }), bsPrefix = _ref.bsPrefix, drop = _ref.drop, show = _ref.show, className = _ref.className, align = _ref.align, onSelect = _ref.onSelect, onToggle = _ref.onToggle, focusFirstItemOnShow = _ref.focusFirstItemOnShow, tmp = _ref.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, _4 = _ref.navbar, autoClose = _ref.autoClose, props = _helpers.objectWithoutProperties(_ref, [
        "bsPrefix",
        "drop",
        "show",
        "className",
        "align",
        "onSelect",
        "onToggle",
        "focusFirstItemOnShow",
        "as",
        "navbar",
        "autoClose"
    ]);
    var isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown');
    var isRTL = _themeProvider.useIsRTL();
    var isClosingPermitted = function(source) {
        // autoClose=false only permits close on button click
        if (autoClose === false) return source === 'click'; // autoClose=inside doesn't permit close on rootClose
        if (autoClose === 'inside') return source !== 'rootClose'; // autoClose=outside doesn't permit close on select
        if (autoClose === 'outside') return source !== 'select';
        return true;
    };
    var handleToggle = _useEventCallbackDefault.default(function(nextShow, meta) {
        if (meta.originalEvent.currentTarget === document && (meta.source !== 'keydown' || meta.originalEvent.key === 'Escape')) meta.source = 'rootClose';
        if (isClosingPermitted(meta.source)) onToggle == null || onToggle(nextShow, meta);
    });
    var alignEnd = align === 'end';
    var placement = _dropdownMenu.getDropdownMenuPlacement(alignEnd, drop, isRTL);
    var contextValue = _react.useMemo(function() {
        return {
            align: align,
            drop: drop,
            isRTL: isRTL
        };
    }, [
        align,
        drop,
        isRTL
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_dropdownContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default, {
            placement: placement,
            show: show,
            onSelect: onSelect,
            onToggle: handleToggle,
            focusFirstItemOnShow: focusFirstItemOnShow,
            itemSelector: ".".concat(prefix, "-item:not(.disabled):not(:disabled)"),
            children: isInputGroup ? props.children : /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            }, props, {
                ref: ref,
                className: _classnamesDefault.default(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend', drop === 'start' && 'dropstart')
            }))
        })
    }));
});
Dropdown.displayName = 'Dropdown';
Dropdown.defaultProps = defaultProps;
exports.default = Object.assign(Dropdown, {
    Toggle: _dropdownToggleDefault.default,
    Menu: _dropdownMenuDefault.default,
    Item: _dropdownItemDefault.default,
    ItemText: DropdownItemText,
    Divider: DropdownDivider,
    Header: DropdownHeader
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/Dropdown":"7Kksk","uncontrollable":"3QjJi","@restart/hooks/useEventCallback":"iaqs7","./DropdownContext":"lm7AA","./DropdownItem":"7fcRw","./DropdownMenu":"iP74d","./DropdownToggle":"5QcuF","./InputGroupContext":"6zAPM","./ThemeProvider":"7HSML","./createWithBsPrefix":"l44ad","./types":"bnk26","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7Kksk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _addEventListener = require("dom-helpers/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _usePrevious = require("@restart/hooks/usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useForceUpdate = require("@restart/hooks/useForceUpdate");
var _useForceUpdateDefault = parcelHelpers.interopDefault(_useForceUpdate);
var _useEventListener = require("@restart/hooks/useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _dropdownItem = require("./DropdownItem");
var _dropdownItemDefault = parcelHelpers.interopDefault(_dropdownItem);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _dataKey = require("./DataKey");
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
var _jsxRuntime = require("react/jsx-runtime");
function useRefWithUpdate() {
    var forceUpdate = _useForceUpdateDefault.default();
    var ref = _react.useRef(null);
    var attachRef = _react.useCallback(function(element) {
        ref.current = element; // ensure that a menu set triggers an update for consumers
        forceUpdate();
    }, [
        forceUpdate
    ]);
    return [
        ref,
        attachRef
    ];
}
/**
 * @displayName Dropdown
 * @public
 */ function Dropdown(param) {
    var defaultShow = param.defaultShow, rawShow = param.show, onSelect = param.onSelect, rawOnToggle = param.onToggle, _itemSelector = param.itemSelector, itemSelector = _itemSelector === void 0 ? "* [".concat(_dataKey.dataAttr('dropdown-item'), "]") : _itemSelector, focusFirstItemOnShow = param.focusFirstItemOnShow, _placement = param.placement, placement = _placement === void 0 ? 'bottom-start' : _placement, children = param.children;
    var window = _useWindowDefault.default();
    var ref = _helpers.slicedToArray(_uncontrollable.useUncontrolledProp(rawShow, defaultShow, rawOnToggle), 2), show = ref[0], onToggle = ref[1]; // We use normal refs instead of useCallbackRef in order to populate the
    // the value as quickly as possible, otherwise the effect to focus the element
    // may run before the state value is set
    var ref1 = _helpers.slicedToArray(useRefWithUpdate(), 2), menuRef = ref1[0], setMenu = ref1[1];
    var menuElement = menuRef.current;
    var ref2 = _helpers.slicedToArray(useRefWithUpdate(), 2), toggleRef = ref2[0], setToggle = ref2[1];
    var toggleElement = toggleRef.current;
    var lastShow = _usePreviousDefault.default(show);
    var lastSourceEvent = _react.useRef(null);
    var focusInDropdown = _react.useRef(false);
    var onSelectCtx = _react.useContext(_selectableContextDefault.default);
    var toggle = _react.useCallback(function(nextShow, event) {
        var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : event == null ? void 0 : event.type;
        onToggle(nextShow, {
            originalEvent: event,
            source: source
        });
    }, [
        onToggle
    ]);
    var handleSelect = _useEventCallbackDefault.default(function(key, event) {
        onSelect == null || onSelect(key, event);
        toggle(false, event, 'select');
        if (!event.isPropagationStopped()) onSelectCtx == null || onSelectCtx(key, event);
    });
    var context = _react.useMemo(function() {
        return {
            toggle: toggle,
            placement: placement,
            show: show,
            menuElement: menuElement,
            toggleElement: toggleElement,
            setMenu: setMenu,
            setToggle: setToggle
        };
    }, [
        toggle,
        placement,
        show,
        menuElement,
        toggleElement,
        setMenu,
        setToggle
    ]);
    if (menuElement && lastShow && !show) focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);
    var focusToggle = _useEventCallbackDefault.default(function() {
        if (toggleElement && toggleElement.focus) toggleElement.focus();
    });
    var maybeFocusFirst = _useEventCallbackDefault.default(function() {
        var type = lastSourceEvent.current;
        var focusType = focusFirstItemOnShow;
        if (focusType == null) focusType = menuRef.current && _dropdownToggle.isRoleMenu(menuRef.current) ? 'keyboard' : false;
        if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) return;
        var first = _querySelectorAllDefault.default(menuRef.current, itemSelector)[0];
        if (first && first.focus) first.focus();
    });
    _react.useEffect(function() {
        if (show) maybeFocusFirst();
        else if (focusInDropdown.current) {
            focusInDropdown.current = false;
            focusToggle();
        } // only `show` should be changing
    }, [
        show,
        focusInDropdown,
        focusToggle,
        maybeFocusFirst
    ]);
    _react.useEffect(function() {
        lastSourceEvent.current = null;
    });
    var getNextFocusedChild = function(current, offset) {
        if (!menuRef.current) return null;
        var items = _querySelectorAllDefault.default(menuRef.current, itemSelector);
        var index = items.indexOf(current) + offset;
        index = Math.max(0, Math.min(index, items.length));
        return items[index];
    };
    _useEventListenerDefault.default(_react.useCallback(function() {
        return window.document;
    }, [
        window
    ]), 'keydown', function(event) {
        var _menuRef$current, _toggleRef$current;
        var key = event.key;
        var target = event.target;
        var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
        var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400
        // in inscrutability
        var isInput = /input|textarea/i.test(target.tagName);
        if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) return;
        if (!fromMenu && !fromToggle) return;
        if (key === 'Tab' && (!menuRef.current || !show)) return;
        lastSourceEvent.current = event.type;
        var meta = {
            originalEvent: event,
            source: event.type
        };
        switch(key){
            case 'ArrowUp':
                {
                    var next = getNextFocusedChild(target, -1);
                    if (next && next.focus) next.focus();
                    event.preventDefault();
                    return;
                }
            case 'ArrowDown':
                event.preventDefault();
                if (!show) onToggle(true, meta);
                else {
                    var next1 = getNextFocusedChild(target, 1);
                    if (next1 && next1.focus) next1.focus();
                }
                return;
            case 'Tab':
                // on keydown the target is the element being tabbed FROM, we need that
                // to know if this event is relevant to this dropdown (e.g. in this menu).
                // On `keyup` the target is the element being tagged TO which we use to check
                // if focus has left the menu
                _addEventListenerDefault.default(target.ownerDocument, 'keyup', function(e) {
                    var _menuRef$current2;
                    if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) onToggle(false, meta);
                }, {
                    once: true
                });
                break;
            case 'Escape':
                if (key === 'Escape') {
                    event.preventDefault();
                    event.stopPropagation();
                }
                onToggle(false, meta);
                break;
            default:
        }
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
        value: handleSelect,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_dropdownContextDefault.default.Provider, {
            value: context,
            children: children
        })
    }));
}
Dropdown.displayName = 'Dropdown';
Dropdown.Menu = _dropdownMenuDefault.default;
Dropdown.Toggle = _dropdownToggleDefault.default;
Dropdown.Item = _dropdownItemDefault.default;
exports.default = Dropdown;

},{"@swc/helpers":"cawJ1","dom-helpers/querySelectorAll":"7x6pG","dom-helpers/addEventListener":"4a2fe","react":"kEcQC","uncontrollable":"3QjJi","@restart/hooks/usePrevious":"6KEhY","@restart/hooks/useForceUpdate":"dsDNV","@restart/hooks/useEventListener":"hv06P","@restart/hooks/useEventCallback":"iaqs7","./DropdownContext":"94prv","./DropdownMenu":"3UkFY","./DropdownToggle":"j9hhm","./DropdownItem":"8pb5q","./SelectableContext":"497xu","./DataKey":"4rt2J","./useWindow":"70XQw","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7x6pG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
    return toArray(element.querySelectorAll(selector));
}
exports.default = qsa;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dsDNV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useForceUpdate() {
    // The toggling state value is designed to defeat React optimizations for skipping
    // updates when they are stricting equal to the last state value
    var _useReducer = _react.useReducer(function(state) {
        return !state;
    }, false), dispatch = _useReducer[1];
    return dispatch;
}
exports.default = useForceUpdate;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"94prv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var DropdownContext = /*#__PURE__*/ _react.createContext(null);
exports.default = DropdownContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3UkFY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @memberOf Dropdown
 * @param {object}  options
 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
 * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle
 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
 */ parcelHelpers.export(exports, "useDropdownMenu", function() {
    return useDropdownMenu;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _usePopper = require("./usePopper");
var _usePopperDefault = parcelHelpers.interopDefault(_usePopper);
var _useRootClose = require("./useRootClose");
var _useRootCloseDefault = parcelHelpers.interopDefault(_useRootClose);
var _mergeOptionsWithPopperConfig = require("./mergeOptionsWithPopperConfig");
var _mergeOptionsWithPopperConfigDefault = parcelHelpers.interopDefault(_mergeOptionsWithPopperConfig);
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "children"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var noop = function() {
};
function useDropdownMenu() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    };
    var context = _react.useContext(_dropdownContextDefault.default);
    var ref = _helpers.slicedToArray(_useCallbackRefDefault.default(), 2), arrowElement = ref[0], attachArrowRef = ref[1];
    var hasShownRef = _react.useRef(false);
    var flip = options.flip, offset = options.offset, rootCloseEvent = options.rootCloseEvent, _fixed = options.fixed, fixed = _fixed === void 0 ? false : _fixed, placementOverride = options.placement, _popperConfig = options.popperConfig, popperConfig = _popperConfig === void 0 ? {
    } : _popperConfig, _enableEventListeners = options.enableEventListeners, enableEventListeners = _enableEventListeners === void 0 ? true : _enableEventListeners, tmp = options.usePopper, shouldUsePopper = tmp === void 0 ? !!context : tmp;
    var show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;
    if (show && !hasShownRef.current) hasShownRef.current = true;
    var handleClose = function(e) {
        context == null || context.toggle(false, e);
    };
    var ref1 = context || {
    }, placement = ref1.placement, setMenu = ref1.setMenu, menuElement = ref1.menuElement, toggleElement = ref1.toggleElement;
    var popper = _usePopperDefault.default(toggleElement, menuElement, _mergeOptionsWithPopperConfigDefault.default({
        placement: placementOverride || placement || 'bottom-start',
        enabled: shouldUsePopper,
        enableEvents: enableEventListeners == null ? show : enableEventListeners,
        offset: offset,
        flip: flip,
        fixed: fixed,
        arrowElement: arrowElement,
        popperConfig: popperConfig
    }));
    var menuProps = Object.assign({
        ref: setMenu || noop,
        'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id
    }, popper.attributes.popper, {
        style: popper.styles.popper
    });
    var metadata = {
        show: show,
        placement: placement,
        hasShown: hasShownRef.current,
        toggle: context == null ? void 0 : context.toggle,
        popper: shouldUsePopper ? popper : null,
        arrowProps: shouldUsePopper ? Object.assign({
            ref: attachArrowRef
        }, popper.attributes.arrow, {
            style: popper.styles.arrow
        }) : {
        }
    };
    _useRootCloseDefault.default(menuElement, handleClose, {
        clickTrigger: rootCloseEvent,
        disabled: !show
    });
    return [
        menuProps,
        metadata
    ];
}
var defaultProps = {
    usePopper: true
};
/**
 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
 *
 * @displayName DropdownMenu
 * @memberOf Dropdown
 */ function DropdownMenu(_ref) {
    var children = _ref.children, options = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ref = _helpers.slicedToArray(useDropdownMenu(options), 2), props = ref[0], meta = ref[1];
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: children(props, meta)
    }));
}
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/hooks/useCallbackRef":"7m4Rf","./DropdownContext":"94prv","./usePopper":"ese59","./useRootClose":"enzTs","./mergeOptionsWithPopperConfig":"7iDwF","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ese59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _dequal = require("dequal");
var _useSafeState = require("@restart/hooks/useSafeState");
var _useSafeStateDefault = parcelHelpers.interopDefault(_useSafeState);
var _popper = require("./popper");
var _excluded = [
    "enabled",
    "placement",
    "strategy",
    "modifiers"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var disabledApplyStylesModifier = {
    name: 'applyStyles',
    enabled: false,
    phase: 'afterWrite',
    fn: function() {
        return undefined;
    }
}; // until docjs supports type exports...
var ariaDescribedByModifier = {
    name: 'ariaDescribedBy',
    enabled: true,
    phase: 'afterWrite',
    effect: function(param) {
        var state = param.state;
        return function() {
            var _elements = state.elements, reference = _elements.reference, popper = _elements.popper;
            if ('removeAttribute' in reference) {
                var ids = (reference.getAttribute('aria-describedby') || '').split(',').filter(function(id) {
                    return id.trim() !== popper.id;
                });
                if (!ids.length) reference.removeAttribute('aria-describedby');
                else reference.setAttribute('aria-describedby', ids.join(','));
            }
        };
    },
    fn: function(param) {
        var state = param.state;
        var _popper$getAttribute;
        var _elements = state.elements, popper = _elements.popper, reference = _elements.reference;
        var role = (_popper$getAttribute = popper.getAttribute('role')) == null ? void 0 : _popper$getAttribute.toLowerCase();
        if (popper.id && role === 'tooltip' && 'setAttribute' in reference) {
            var ids = reference.getAttribute('aria-describedby');
            if (ids && ids.split(',').indexOf(popper.id) !== -1) return;
            reference.setAttribute('aria-describedby', ids ? "".concat(ids, ",").concat(popper.id) : popper.id);
        }
    }
};
var EMPTY_MODIFIERS = [];
/**
 * Position an element relative some reference element using Popper.js
 *
 * @param referenceElement
 * @param popperElement
 * @param {object}      options
 * @param {object=}     options.modifiers Popper.js modifiers
 * @param {boolean=}    options.enabled toggle the popper functionality on/off
 * @param {string=}     options.placement The popper element placement relative to the reference element
 * @param {string=}     options.strategy the positioning strategy
 * @param {function=}   options.onCreate called when the popper is created
 * @param {function=}   options.onUpdate called when the popper is updated
 *
 * @returns {UsePopperState} The popper state
 */ function usePopper(referenceElement, popperElement) {
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
    };
    var _enabled = _ref.enabled, enabled = _enabled === void 0 ? true : _enabled, _placement = _ref.placement, placement = _placement === void 0 ? 'bottom' : _placement, _strategy = _ref.strategy, strategy = _strategy === void 0 ? 'absolute' : _strategy, _modifiers = _ref.modifiers, modifiers = _modifiers === void 0 ? EMPTY_MODIFIERS : _modifiers, config = _objectWithoutPropertiesLoose(_ref, _excluded);
    var prevModifiers = _react.useRef(modifiers);
    var popperInstanceRef = _react.useRef();
    var update = _react.useCallback(function() {
        var _popperInstanceRef$cu;
        (_popperInstanceRef$cu = popperInstanceRef.current) == null || _popperInstanceRef$cu.update();
    }, []);
    var forceUpdate = _react.useCallback(function() {
        var _popperInstanceRef$cu2;
        (_popperInstanceRef$cu2 = popperInstanceRef.current) == null || _popperInstanceRef$cu2.forceUpdate();
    }, []);
    var ref = _helpers.slicedToArray(_useSafeStateDefault.default(_react.useState({
        placement: placement,
        update: update,
        forceUpdate: forceUpdate,
        attributes: {
        },
        styles: {
            popper: {
            },
            arrow: {
            }
        }
    })), 2), popperState = ref[0], setState = ref[1];
    var updateModifier = _react.useMemo(function() {
        return {
            name: 'updateStateModifier',
            enabled: true,
            phase: 'write',
            requires: [
                'computeStyles'
            ],
            fn: function(param) {
                var state = param.state;
                var styles = {
                };
                var attributes = {
                };
                Object.keys(state.elements).forEach(function(element) {
                    styles[element] = state.styles[element];
                    attributes[element] = state.attributes[element];
                });
                setState({
                    state: state,
                    styles: styles,
                    attributes: attributes,
                    update: update,
                    forceUpdate: forceUpdate,
                    placement: state.placement
                });
            }
        };
    }, [
        update,
        forceUpdate,
        setState
    ]);
    var nextModifiers = _react.useMemo(function() {
        if (!_dequal.dequal(prevModifiers.current, modifiers)) prevModifiers.current = modifiers;
        return prevModifiers.current;
    }, [
        modifiers
    ]);
    _react.useEffect(function() {
        if (!popperInstanceRef.current || !enabled) return;
        popperInstanceRef.current.setOptions({
            placement: placement,
            strategy: strategy,
            modifiers: _helpers.toConsumableArray(nextModifiers).concat([
                updateModifier,
                disabledApplyStylesModifier
            ])
        });
    }, [
        strategy,
        placement,
        updateModifier,
        enabled,
        nextModifiers
    ]);
    _react.useEffect(function() {
        if (!enabled || referenceElement == null || popperElement == null) return undefined;
        popperInstanceRef.current = _popper.createPopper(referenceElement, popperElement, Object.assign({
        }, config, {
            placement: placement,
            strategy: strategy,
            modifiers: _helpers.toConsumableArray(nextModifiers).concat([
                ariaDescribedByModifier,
                updateModifier
            ])
        }));
        return function() {
            if (popperInstanceRef.current != null) {
                popperInstanceRef.current.destroy();
                popperInstanceRef.current = undefined;
                setState(function(s) {
                    return Object.assign({
                    }, s, {
                        attributes: {
                        },
                        styles: {
                            popper: {
                            }
                        }
                    });
                });
            }
        }; // This is only run once to _create_ the popper
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        enabled,
        referenceElement,
        popperElement
    ]);
    return popperState;
}
exports.default = usePopper;

},{"@swc/helpers":"cawJ1","react":"kEcQC","dequal":"8j0AJ","@restart/hooks/useSafeState":"kHOAQ","./popper":"bQKPn","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8j0AJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dequal", function() {
    return dequal;
});
var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = iter.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            key = _step.value;
            if (dequal(key, tar)) return key;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date) return foo.getTime() === bar.getTime();
        if (ctor === RegExp) return foo.toString() === bar.toString();
        if (ctor === Array) {
            if ((len = foo.length) === bar.length) {
                while(len-- && dequal(foo[len], bar[len]));
            }
            return len === -1;
        }
        if (ctor === Set) {
            if (foo.size !== bar.size) return false;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = foo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    len = _step.value;
                    tmp = len;
                    if (tmp && typeof tmp === 'object') {
                        tmp = find(bar, tmp);
                        if (!tmp) return false;
                    }
                    if (!bar.has(tmp)) return false;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return true;
        }
        if (ctor === Map) {
            if (foo.size !== bar.size) return false;
            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
            try {
                for(var _iterator1 = foo[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                    len = _step1.value;
                    tmp = len[0];
                    if (tmp && typeof tmp === 'object') {
                        tmp = find(bar, tmp);
                        if (!tmp) return false;
                    }
                    if (!dequal(len[1], bar.get(tmp))) return false;
                }
            } catch (err) {
                _didIteratorError1 = true;
                _iteratorError1 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
            }
            return true;
        }
        if (ctor === ArrayBuffer) {
            foo = new Uint8Array(foo);
            bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while((len--) && foo.getInt8(len) === bar.getInt8(len));
            }
            return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while((len--) && foo[len] === bar[len]);
            }
            return len === -1;
        }
        if (!ctor || typeof foo === 'object') {
            len = 0;
            for(ctor in foo){
                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
            }
            return Object.keys(bar).length === len;
        }
    }
    return foo !== foo && bar !== bar;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kHOAQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
function useSafeState(state) {
    var isMounted = _useMountedDefault.default();
    return [
        state[0],
        _react.useCallback(function(nextState) {
            if (!isMounted()) return;
            return state[1](nextState);
        }, [
            isMounted,
            state[1]
        ])
    ];
}
exports.default = useSafeState;

},{"react":"kEcQC","./useMounted":"03N3e","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bQKPn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", function() {
    return createPopper;
});
parcelHelpers.export(exports, "placements", function() {
    return _enums.placements;
});
var _arrow = require("@popperjs/core/lib/modifiers/arrow");
var _arrowDefault = parcelHelpers.interopDefault(_arrow);
var _computeStyles = require("@popperjs/core/lib/modifiers/computeStyles");
var _computeStylesDefault = parcelHelpers.interopDefault(_computeStyles);
var _eventListeners = require("@popperjs/core/lib/modifiers/eventListeners");
var _eventListenersDefault = parcelHelpers.interopDefault(_eventListeners);
var _flip = require("@popperjs/core/lib/modifiers/flip");
var _flipDefault = parcelHelpers.interopDefault(_flip);
var _hide = require("@popperjs/core/lib/modifiers/hide");
var _hideDefault = parcelHelpers.interopDefault(_hide);
var _offset = require("@popperjs/core/lib/modifiers/offset");
var _offsetDefault = parcelHelpers.interopDefault(_offset);
var _popperOffsets = require("@popperjs/core/lib/modifiers/popperOffsets");
var _popperOffsetsDefault = parcelHelpers.interopDefault(_popperOffsets);
var _preventOverflow = require("@popperjs/core/lib/modifiers/preventOverflow");
var _preventOverflowDefault = parcelHelpers.interopDefault(_preventOverflow);
var _enums = require("@popperjs/core/lib/enums");
var _popperBase = require("@popperjs/core/lib/popper-base"); // For the common JS build we will turn this file into a bundle with no imports.
var createPopper = _popperBase.popperGenerator({
    defaultModifiers: [
        _hideDefault.default,
        _popperOffsetsDefault.default,
        _computeStylesDefault.default,
        _eventListenersDefault.default,
        _offsetDefault.default,
        _flipDefault.default,
        _preventOverflowDefault.default,
        _arrowDefault.default
    ]
});

},{"@popperjs/core/lib/modifiers/arrow":"e1kro","@popperjs/core/lib/modifiers/computeStyles":"58avQ","@popperjs/core/lib/modifiers/eventListeners":"1h0yu","@popperjs/core/lib/modifiers/flip":"gjQvC","@popperjs/core/lib/modifiers/hide":"53QuR","@popperjs/core/lib/modifiers/offset":"89R3d","@popperjs/core/lib/modifiers/popperOffsets":"7HTII","@popperjs/core/lib/modifiers/preventOverflow":"9cbio","@popperjs/core/lib/enums":"ljL5U","@popperjs/core/lib/popper-base":"9iodf","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9iodf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// eslint-disable-next-line import/no-unused-modules
parcelHelpers.export(exports, "createPopper", function() {
    return _createPopperJs.createPopper;
});
parcelHelpers.export(exports, "popperGenerator", function() {
    return _createPopperJs.popperGenerator;
});
parcelHelpers.export(exports, "detectOverflow", function() {
    return _createPopperJs.detectOverflow;
});
var _createPopperJs = require("./createPopper.js");

},{"./createPopper.js":"3KZpY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"enzTs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _listen = require("dom-helpers/listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var escapeKeyCode = 27;
var noop = function() {
};
function isLeftClickEvent(event) {
    return event.button === 0;
}
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var getRefTarget = function(ref) {
    return ref && ('current' in ref ? ref.current : ref);
};
/**
 * The `useRootClose` hook registers your callback on the document
 * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
 * style behavior where your callback is triggered when the user tries to
 * interact with the rest of the document or hits the `esc` key.
 *
 * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
 * @param {function} onRootClose
 * @param {object=}  options
 * @param {boolean=} options.disabled
 * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
 */ function useRootClose(ref, onRootClose) {
    var ref1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
    }, disabled = ref1.disabled, _clickTrigger = ref1.clickTrigger, clickTrigger = _clickTrigger === void 0 ? 'click' : _clickTrigger;
    var preventMouseRootCloseRef = _react.useRef(false);
    var onClose = onRootClose || noop;
    var handleMouseCapture = _react.useCallback(function(e) {
        var currentTarget = getRefTarget(ref);
        _warningDefault.default(!!currentTarget, "RootClose captured a close event but does not have a ref to compare it to. useRootClose(), should be passed a ref that resolves to a DOM node");
        preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!_containsDefault.default(currentTarget, e.target);
    }, [
        ref
    ]);
    var handleMouse = _useEventCallbackDefault.default(function(e) {
        if (!preventMouseRootCloseRef.current) onClose(e);
    });
    var handleKeyUp = _useEventCallbackDefault.default(function(e) {
        if (e.keyCode === escapeKeyCode) onClose(e);
    });
    _react.useEffect(function() {
        if (disabled || ref == null) return undefined;
        var doc = _ownerDocumentDefault.default(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately
        // https://github.com/facebook/react/issues/20074
        var currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to
        // avoid false positives in the contains() check below if the target DOM
        // element is removed in the React mouse callback.
        var removeMouseCaptureListener = _listenDefault.default(doc, clickTrigger, handleMouseCapture, true);
        var removeMouseListener = _listenDefault.default(doc, clickTrigger, function(e) {
            // skip if this event is the same as the one running when we added the handlers
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleMouse(e);
        });
        var removeKeyupListener = _listenDefault.default(doc, 'keyup', function(e) {
            // skip if this event is the same as the one running when we added the handlers
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleKeyUp(e);
        });
        var mobileSafariHackListeners = [];
        if ('ontouchstart' in doc.documentElement) mobileSafariHackListeners = [].slice.call(doc.body.children).map(function(el) {
            return _listenDefault.default(el, 'mousemove', noop);
        });
        return function() {
            removeMouseCaptureListener();
            removeMouseListener();
            removeKeyupListener();
            mobileSafariHackListeners.forEach(function(remove) {
                return remove();
            });
        };
    }, [
        ref,
        disabled,
        clickTrigger,
        handleMouseCapture,
        handleMouse,
        handleKeyUp
    ]);
}
exports.default = useRootClose;

},{"dom-helpers/contains":"ZRkd1","dom-helpers/listen":"5XTIX","dom-helpers/ownerDocument":"fd2mh","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","warning":"eUQJb","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ZRkd1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function contains(context, node) {
    // HTML DOM and SVG DOM may have different support levels,
    // so we need to check on context instead of a document root element.
    if (context.contains) return context.contains(node);
    if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
}
exports.default = contains;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7iDwF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toModifierMap", function() {
    return toModifierMap;
});
parcelHelpers.export(exports, "toModifierArray", function() {
    return toModifierArray;
});
function toModifierMap(modifiers) {
    var result = {
    };
    if (!Array.isArray(modifiers)) return modifiers || result;
     // eslint-disable-next-line no-unused-expressions
    modifiers == null || modifiers.forEach(function(m) {
        result[m.name] = m;
    });
    return result;
}
function toModifierArray() {
    var map = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    };
    if (Array.isArray(map)) return map;
    return Object.keys(map).map(function(k) {
        map[k].name = k;
        return map[k];
    });
}
function mergeOptionsWithPopperConfig(param) {
    var enabled = param.enabled, enableEvents = param.enableEvents, placement = param.placement, flip = param.flip, offset = param.offset, fixed = param.fixed, containerPadding = param.containerPadding, arrowElement = param.arrowElement, _popperConfig = param.popperConfig, popperConfig = _popperConfig === void 0 ? {
    } : _popperConfig;
    var _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;
    var modifiers = toModifierMap(popperConfig.modifiers);
    return Object.assign({
    }, popperConfig, {
        placement: placement,
        enabled: enabled,
        strategy: fixed ? 'fixed' : popperConfig.strategy,
        modifiers: toModifierArray(Object.assign({
        }, modifiers, {
            eventListeners: {
                enabled: enableEvents
            },
            preventOverflow: Object.assign({
            }, modifiers.preventOverflow, {
                options: containerPadding ? Object.assign({
                    padding: containerPadding
                }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
            }),
            offset: {
                options: Object.assign({
                    offset: offset
                }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
            },
            arrow: Object.assign({
            }, modifiers.arrow, {
                enabled: !!arrowElement,
                options: Object.assign({
                }, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
                    element: arrowElement
                })
            }),
            flip: Object.assign({
                enabled: !!flip
            }, modifiers.flip)
        }))
    });
}
exports.default = mergeOptionsWithPopperConfig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"j9hhm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRoleMenu", function() {
    return isRoleMenu;
});
/**
 * Wires up Dropdown toggle functionality, returning a set a props to attach
 * to the element that functions as the dropdown toggle (generally a button).
 *
 * @memberOf Dropdown
 */ parcelHelpers.export(exports, "useDropdownToggle", function() {
    return useDropdownToggle;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _ssr = require("./ssr");
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _jsxRuntime = require("react/jsx-runtime");
var isRoleMenu = function(el) {
    var _el$getAttribute;
    return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';
};
var noop = function() {
};
function useDropdownToggle() {
    var id = _ssr.useSSRSafeId();
    var ref = _react.useContext(_dropdownContextDefault.default) || {
    }, _show = ref.show, show = _show === void 0 ? false : _show, _toggle = ref.toggle, toggle = _toggle === void 0 ? noop : _toggle, setToggle = ref.setToggle, menuElement = ref.menuElement;
    var handleClick = _react.useCallback(function(e) {
        toggle(!show, e);
    }, [
        show,
        toggle
    ]);
    var props = {
        id: id,
        ref: setToggle || noop,
        onClick: handleClick,
        'aria-expanded': !!show
    }; // This is maybe better down in an effect, but
    // the component is going to update anyway when the menu element
    // is set so might return new props.
    if (menuElement && isRoleMenu(menuElement)) props['aria-haspopup'] = true;
    return [
        props,
        {
            show: show,
            toggle: toggle
        }
    ];
}
/**
 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
 *
 * @displayName DropdownToggle
 * @memberOf Dropdown
 */ function DropdownToggle(param) {
    var children = param.children;
    var ref = _helpers.slicedToArray(useDropdownToggle(), 2), props = ref[0], meta = ref[1];
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: children(props, meta)
    }));
}
DropdownToggle.displayName = 'DropdownToggle';
exports.default = DropdownToggle;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./ssr":"71Gd6","./DropdownContext":"94prv","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"71Gd6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSSRSafeId", function() {
    return _ssr.useSSRSafeId;
});
parcelHelpers.export(exports, "useIsSSR", function() {
    return _ssr.useIsSSR;
});
parcelHelpers.export(exports, "SSRProvider", function() {
    return _ssr.SSRProvider;
});
var _ssr = require("@react-aria/ssr");

},{"@react-aria/ssr":"4grJY","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4grJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * When using SSR with React Aria, applications must be wrapped in an SSRProvider.
 * This ensures that auto generated ids are consistent between the client and server.
 */ parcelHelpers.export(exports, "SSRProvider", function() {
    return SSRProvider;
});
/** @private */ parcelHelpers.export(exports, "useSSRSafeId", function() {
    return useSSRSafeId;
});
/**
 * Returns whether the component is currently being server side rendered or
 * hydrated on the client. Can be used to delay browser-specific rendering
 * until after hydration.
 */ parcelHelpers.export(exports, "useIsSSR", function() {
    return useIsSSR;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
var $f01a183cc7bdff77849e49ad26eb904$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 10000000000)),
    current: 0
};
var $f01a183cc7bdff77849e49ad26eb904$var$SSRContext = /*#__PURE__*/ _reactDefault.default.createContext($f01a183cc7bdff77849e49ad26eb904$var$defaultContext);
function SSRProvider(props) {
    var cur = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
    var value = _react.useMemo(function() {
        return {
            // If this is the first SSRProvider, start with an empty string prefix, otherwise
            // append and increment the counter.
            prefix: cur === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext ? '' : cur.prefix + "-" + ++cur.current,
            current: 0
        };
    }, [
        cur
    ]);
    return(/*#__PURE__*/ _reactDefault.default.createElement($f01a183cc7bdff77849e49ad26eb904$var$SSRContext.Provider, {
        value: value
    }, props.children));
}
var $f01a183cc7bdff77849e49ad26eb904$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
function useSSRSafeId(defaultId) {
    var ctx = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,
    // provide a warning to hint to the developer to add one.
    if (ctx === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext && !$f01a183cc7bdff77849e49ad26eb904$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
    return _react.useMemo(function() {
        return defaultId || "react-aria" + ctx.prefix + "-" + ++ctx.current;
    }, [
        defaultId
    ]);
}
function useIsSSR() {
    var cur = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
    var isInSSRContext = cur !== $f01a183cc7bdff77849e49ad26eb904$var$defaultContext;
    var ref = _helpers.slicedToArray(_react.useState(isInSSRContext), 2), isSSR = ref[0], setIsSSR = ref[1]; // If on the client, and the component was initially server rendered,
    // then schedule a layout effect to update the component after hydration.
    if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useLayoutEffect(function() {
        setIsSSR(false);
    }, []);
    return isSSR;
}

},{"@swc/helpers":"cawJ1","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8pb5q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a dropdown item. Returns a set of props for the dropdown item component
 * including an `onClick` handler that prevents selection when the item is disabled
 */ parcelHelpers.export(exports, "useDropdownItem", function() {
    return useDropdownItem;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dataKey = require("./DataKey");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "eventKey",
    "disabled",
    "onClick",
    "active",
    "as"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useDropdownItem(param) {
    var key = param.key, href = param.href, active = param.active, disabled = param.disabled, onClick = param.onClick;
    var onSelectCtx = _react.useContext(_selectableContextDefault.default);
    var navContext = _react.useContext(_navContextDefault.default);
    var activeKey = (navContext || {
    }).activeKey;
    var eventKey = _selectableContext.makeEventKey(key, href);
    var isActive = active == null && key != null ? _selectableContext.makeEventKey(activeKey) === eventKey : active;
    var handleClick = _useEventCallbackDefault.default(function(event) {
        if (disabled) return;
        onClick == null || onClick(event);
        if (onSelectCtx && !event.isPropagationStopped()) onSelectCtx(eventKey, event);
    });
    return [
        _helpers.defineProperty({
            onClick: handleClick,
            'aria-disabled': disabled || undefined,
            'aria-selected': isActive
        }, _dataKey.dataAttr('dropdown-item'), ''),
        {
            isActive: isActive
        }
    ];
}
var DropdownItem = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var eventKey = _ref.eventKey, disabled = _ref.disabled, onClick = _ref.onClick, active = _ref.active, tmp = _ref.as, Component = tmp === void 0 ? _buttonDefault.default : tmp, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ref1 = _helpers.slicedToArray(useDropdownItem({
        key: eventKey,
        href: props.href,
        disabled: disabled,
        onClick: onClick,
        active: active
    }), 1), dropdownItemProps = ref1[0];
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, props, {
        ref: ref
    }, dropdownItemProps)));
});
DropdownItem.displayName = 'DropdownItem';
exports.default = DropdownItem;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","./SelectableContext":"497xu","./NavContext":"6YbBq","./Button":"9Dxoo","./DataKey":"4rt2J","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"497xu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeEventKey", function() {
    return makeEventKey;
});
var _react = require("react");
var SelectableContext = /*#__PURE__*/ _react.createContext(null);
var makeEventKey = function(eventKey) {
    var href = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (eventKey != null) return String(eventKey);
    return href || null;
};
exports.default = SelectableContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6YbBq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var NavContext = /*#__PURE__*/ _react.createContext(null);
NavContext.displayName = 'NavContext';
exports.default = NavContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4rt2J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ATTRIBUTE_PREFIX", function() {
    return ATTRIBUTE_PREFIX;
});
parcelHelpers.export(exports, "PROPERTY_PREFIX", function() {
    return PROPERTY_PREFIX;
});
parcelHelpers.export(exports, "dataAttr", function() {
    return dataAttr;
});
parcelHelpers.export(exports, "dataProp", function() {
    return dataProp;
});
var ATTRIBUTE_PREFIX = "data-rr-ui-";
var PROPERTY_PREFIX = "rrUi";
function dataAttr(property) {
    return "".concat(ATTRIBUTE_PREFIX).concat(property);
}
function dataProp(property) {
    return "".concat(PROPERTY_PREFIX).concat(property);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"70XQw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WindowProvider", function() {
    return WindowProvider;
});
var _react = require("react");
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var Context = /*#__PURE__*/ _react.createContext(_canUseDOMDefault.default ? window : undefined);
var WindowProvider = Context.Provider;
function useWindow() {
    return _react.useContext(Context);
}
exports.default = useWindow;

},{"react":"kEcQC","dom-helpers/canUseDOM":"5fed2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lm7AA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var DropdownContext = /*#__PURE__*/ _react.createContext({
});
DropdownContext.displayName = 'DropdownContext';
exports.default = DropdownContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7fcRw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownItem = require("@restart/ui/DropdownItem");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var DropdownItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, eventKey = _param.eventKey, tmp = _param.disabled, disabled = tmp === void 0 ? false : tmp, onClick = _param.onClick, active = _param.active, tmp1 = _param.as, Component = tmp1 === void 0 ? _anchorDefault.default : tmp1, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "eventKey",
        "disabled",
        "onClick",
        "active",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-item');
    var ref1 = _helpers.slicedToArray(_dropdownItem.useDropdownItem({
        key: eventKey,
        href: props.href,
        disabled: disabled,
        onClick: onClick,
        active: active
    }), 2), dropdownItemProps = ref1[0], meta = ref1[1];
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, dropdownItemProps, {
        ref: ref,
        className: _classnamesDefault.default(className, prefix, meta.isActive && 'active', disabled && 'disabled')
    })));
});
DropdownItem.displayName = 'DropdownItem';
exports.default = DropdownItem;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/DropdownItem":"8pb5q","@restart/ui/Anchor":"8XIew","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"iP74d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDropdownMenuPlacement", function() {
    return getDropdownMenuPlacement;
});
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownMenu = require("@restart/ui/DropdownMenu");
var _useIsomorphicEffect = require("@restart/hooks/useIsomorphicEffect");
var _useIsomorphicEffectDefault = parcelHelpers.interopDefault(_useIsomorphicEffect);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _themeProvider = require("./ThemeProvider");
var _useWrappedRefWithWarning = require("./useWrappedRefWithWarning");
var _useWrappedRefWithWarningDefault = parcelHelpers.interopDefault(_useWrappedRefWithWarning);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    flip: true
};
function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {
    var topStart = isRTL ? 'top-end' : 'top-start';
    var topEnd = isRTL ? 'top-start' : 'top-end';
    var bottomStart = isRTL ? 'bottom-end' : 'bottom-start';
    var bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';
    var leftStart = isRTL ? 'right-start' : 'left-start';
    var leftEnd = isRTL ? 'right-end' : 'left-end';
    var rightStart = isRTL ? 'left-start' : 'right-start';
    var rightEnd = isRTL ? 'left-end' : 'right-end';
    var placement = alignEnd ? bottomEnd : bottomStart;
    if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;
    else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;
    else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;
    return placement;
}
var DropdownMenu = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, align = _param.align, rootCloseEvent = _param.rootCloseEvent, flip = _param.flip, showProps = _param.show, renderOnMount = _param.renderOnMount, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, popperConfig = _param.popperConfig, variant = _param.variant, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "align",
        "rootCloseEvent",
        "flip",
        "show",
        "renderOnMount",
        "as",
        "popperConfig",
        "variant"
    ]);
    var alignEnd = false;
    var isNavbar = _react.useContext(_navbarContextDefault.default);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-menu');
    var ref1 = _react.useContext(_dropdownContextDefault.default), contextAlign = ref1.align, drop = ref1.drop, isRTL = ref1.isRTL;
    align = align || contextAlign;
    var isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    var alignClasses = [];
    if (align) {
        if (typeof align === 'object') {
            var keys = Object.keys(align);
            _warningDefault.default(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`');
            if (keys.length) {
                var brkPoint = keys[0];
                var direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning
                // left in addition to align left classes.
                alignEnd = direction === 'start';
                alignClasses.push("".concat(prefix, "-").concat(brkPoint, "-").concat(direction));
            }
        } else if (align === 'end') alignEnd = true;
    }
    var placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
    var ref2 = _helpers.slicedToArray(_dropdownMenu.useDropdownMenu({
        flip: flip,
        rootCloseEvent: rootCloseEvent,
        show: showProps,
        usePopper: !isNavbar && alignClasses.length === 0,
        offset: [
            0,
            2
        ],
        popperConfig: popperConfig,
        placement: placement
    }), 2), menuProps = ref2[0], ref3 = ref2[1], hasShown = ref3.hasShown, popper = ref3.popper, show = ref3.show, toggle = ref3.toggle;
    menuProps.ref = _useMergedRefsDefault.default(_useWrappedRefWithWarningDefault.default(ref, 'DropdownMenu'), menuProps.ref);
    _useIsomorphicEffectDefault.default(function() {
        // Popper's initial position for the menu is incorrect when
        // renderOnMount=true. Need to call update() to correct it.
        if (show) popper == null || popper.update();
    }, [
        show
    ]);
    if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;
    if (typeof Component !== 'string') {
        menuProps.show = show;
        menuProps.close = function() {
            return toggle == null ? void 0 : toggle(false);
        };
        menuProps.align = align;
    }
    var style = props.style;
    if (popper != null && popper.placement) {
        // we don't need the default popper style,
        // menus are display: none when not shown.
        style = _helpers.objectSpread({
        }, props.style, menuProps.style);
        props['x-placement'] = popper.placement;
    }
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, menuProps, {
        style: style // Bootstrap css requires this data attrib to style responsive menus.
    }, (alignClasses.length || isNavbar) && {
        'data-bs-popper': 'static'
    }, {
        className: _classnamesDefault.default.apply(void 0, [
            className,
            prefix,
            show && 'show',
            alignEnd && "".concat(prefix, "-end"),
            variant && "".concat(prefix, "-").concat(variant)
        ].concat(_helpers.toConsumableArray(alignClasses)))
    })));
});
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/DropdownMenu":"3UkFY","@restart/hooks/useIsomorphicEffect":"71sMj","@restart/hooks/useMergedRefs":"bbv4J","warning":"eUQJb","./DropdownContext":"lm7AA","./InputGroupContext":"6zAPM","./NavbarContext":"6MnAX","./ThemeProvider":"7HSML","./useWrappedRefWithWarning":"ladBe","./types":"bnk26","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6zAPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'InputGroupContext';
exports.default = context;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6MnAX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react"); // TODO: check
var context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'NavbarContext';
exports.default = context;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ladBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _react = require("react");
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
function useWrappedRefWithWarning(ref, componentName) {
    var warningRef = _react.useCallback(function(refValue) {
        !(refValue == null || !refValue.isReactComponent) && _invariantDefault.default(false, "".concat(componentName, " injected a ref to a provided `as` component that resolved to a component instance instead of a DOM element. ") + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element');
    }, [
        componentName
    ]); // eslint-disable-next-line react-hooks/rules-of-hooks
    return _useMergedRefsDefault.default(warningRef, ref);
}
exports.default = useWrappedRefWithWarning;

},{"invariant":"7jb40","react":"kEcQC","@restart/hooks/useMergedRefs":"bbv4J","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bnk26":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alignPropType", function() {
    return alignPropType;
});
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var alignDirection = _propTypesDefault.default.oneOf([
    'start',
    'end'
]);
var alignPropType = _propTypesDefault.default.oneOfType([
    alignDirection,
    _propTypesDefault.default.shape({
        sm: alignDirection
    }),
    _propTypesDefault.default.shape({
        md: alignDirection
    }),
    _propTypesDefault.default.shape({
        lg: alignDirection
    }),
    _propTypesDefault.default.shape({
        xl: alignDirection
    }),
    _propTypesDefault.default.shape({
        xxl: alignDirection
    })
]);

},{"prop-types":"h9rZg","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5QcuF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownToggle = require("@restart/ui/DropdownToggle");
var _dropdownContext = require("@restart/ui/DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _themeProvider = require("./ThemeProvider");
var _useWrappedRefWithWarning = require("./useWrappedRefWithWarning");
var _useWrappedRefWithWarningDefault = parcelHelpers.interopDefault(_useWrappedRefWithWarning);
var _jsxRuntime = require("react/jsx-runtime");
var DropdownToggle = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, split = _param.split, className = _param.className, childBsPrefix = _param.childBsPrefix, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? _buttonDefault.default : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "split",
        "className",
        "childBsPrefix",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-toggle');
    var dropdownContext = _react.useContext(_dropdownContextDefault.default);
    var isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    if (childBsPrefix !== undefined) props.bsPrefix = childBsPrefix;
    var ref1 = _helpers.slicedToArray(_dropdownToggle.useDropdownToggle(), 1), toggleProps = ref1[0];
    toggleProps.ref = _useMergedRefsDefault.default(toggleProps.ref, _useWrappedRefWithWarningDefault.default(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the
    // underlying component, to allow it to render size and style variants.
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        className: _classnamesDefault.default(className, prefix, split && "".concat(prefix, "-split"), !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show')
    }, toggleProps, props)));
});
DropdownToggle.displayName = 'DropdownToggle';
exports.default = DropdownToggle;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/DropdownToggle":"j9hhm","@restart/ui/DropdownContext":"94prv","@restart/hooks/useMergedRefs":"bbv4J","./Button":"5vnhO","./InputGroupContext":"6zAPM","./ThemeProvider":"7HSML","./useWrappedRefWithWarning":"ladBe","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dR7qt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string}
   */ id: _propTypesDefault.default.string,
    /** An `href` passed to the Toggle component */ href: _propTypesDefault.default.string,
    /** An `onClick` handler passed to the Toggle component */ onClick: _propTypesDefault.default.func,
    /** The content of the non-toggle Button.  */ title: _propTypesDefault.default.node.isRequired,
    /** Disables both Buttons  */ disabled: _propTypesDefault.default.bool,
    /**
   * Aligns the dropdown menu.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
   */ align: _types.alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */ menuRole: _propTypesDefault.default.string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */ renderMenuOnMount: _propTypesDefault.default.bool,
    /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */ rootCloseEvent: _propTypesDefault.default.string,
    /**
   * Menu color variant.
   *
   * Omitting this will use the default light color.
   */ menuVariant: _propTypesDefault.default.oneOf([
        'dark'
    ]),
    /** @ignore */ bsPrefix: _propTypesDefault.default.string,
    /** @ignore */ variant: _propTypesDefault.default.string,
    /** @ignore */ size: _propTypesDefault.default.string
};
/**
 * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of
 * [`Dropdown`'s props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._ Only
 * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,
 * along with menu-related props are passed to the `Dropdown.Menu`
 */ var DropdownButton = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var title = _param.title, children = _param.children, bsPrefix = _param.bsPrefix, rootCloseEvent = _param.rootCloseEvent, variant = _param.variant, size = _param.size, menuRole = _param.menuRole, renderMenuOnMount = _param.renderMenuOnMount, disabled = _param.disabled, href = _param.href, id = _param.id, menuVariant = _param.menuVariant, props = _helpers.objectWithoutProperties(_param, [
        "title",
        "children",
        "bsPrefix",
        "rootCloseEvent",
        "variant",
        "size",
        "menuRole",
        "renderMenuOnMount",
        "disabled",
        "href",
        "id",
        "menuVariant"
    ]);
    return _jsxRuntime.jsxs(_dropdownDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownToggleDefault.default, {
                id: id,
                href: href,
                size: size,
                variant: variant,
                disabled: disabled,
                childBsPrefix: bsPrefix,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownMenuDefault.default, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                variant: menuVariant,
                children: children
            })
        ]
    }));
});
DropdownButton.displayName = 'DropdownButton';
DropdownButton.propTypes = propTypes;
exports.default = DropdownButton;

},{"@swc/helpers":"cawJ1","react":"kEcQC","prop-types":"h9rZg","./Dropdown":"dHYfj","./DropdownToggle":"5QcuF","./DropdownMenu":"iP74d","./types":"bnk26","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jhGDT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _formControl = require("./FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _formFloating = require("./FormFloating");
var _formFloatingDefault = parcelHelpers.interopDefault(_formFloating);
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _formLabel = require("./FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
var _formRange = require("./FormRange");
var _formRangeDefault = parcelHelpers.interopDefault(_formRange);
var _formSelect = require("./FormSelect");
var _formSelectDefault = parcelHelpers.interopDefault(_formSelect);
var _formText = require("./FormText");
var _formTextDefault = parcelHelpers.interopDefault(_formText);
var _switch = require("./Switch");
var _switchDefault = parcelHelpers.interopDefault(_switch);
var _floatingLabel = require("./FloatingLabel");
var _floatingLabelDefault = parcelHelpers.interopDefault(_floatingLabel);
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    /**
   * The Form `ref` will be forwarded to the underlying element,
   * which means, unless it's rendered `as` a composite component,
   * it will be a DOM node, when resolved.
   *
   * @type {ReactRef}
   * @alias ref
   */ _ref: _propTypesDefault.default.any,
    /**
   * Mark a form as having been validated. Setting it to `true` will
   * toggle any validation styles on the forms elements.
   */ validated: _propTypesDefault.default.bool,
    as: _propTypesDefault.default.elementType
};
var Form = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var className = _param.className, validated = _param.validated, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'form' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "className",
        "validated",
        "as"
    ]);
    return _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(className, validated && 'was-validated')
    }));
});
Form.displayName = 'Form';
Form.propTypes = propTypes;
exports.default = Object.assign(Form, {
    Group: _formGroupDefault.default,
    Control: _formControlDefault.default,
    Floating: _formFloatingDefault.default,
    Check: _formCheckDefault.default,
    Switch: _switchDefault.default,
    Label: _formLabelDefault.default,
    Text: _formTextDefault.default,
    Range: _formRangeDefault.default,
    Select: _formSelectDefault.default,
    FloatingLabel: _floatingLabelDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","prop-types":"h9rZg","react":"kEcQC","./FormCheck":"lgwna","./FormControl":"N8VBL","./FormFloating":"dRl73","./FormGroup":"kIvRg","./FormLabel":"kHZxe","./FormRange":"i0a07","./FormSelect":"e8VwS","./FormText":"3Mnk3","./Switch":"hdXZq","./FloatingLabel":"6dBde","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lgwna":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _feedback = require("./Feedback");
var _feedbackDefault = parcelHelpers.interopDefault(_feedback);
var _formCheckInput = require("./FormCheckInput");
var _formCheckInputDefault = parcelHelpers.interopDefault(_formCheckInput);
var _formCheckLabel = require("./FormCheckLabel");
var _formCheckLabelDefault = parcelHelpers.interopDefault(_formCheckLabel);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _elementChildren = require("./ElementChildren");
var _jsxRuntime = require("react/jsx-runtime");
var FormCheck = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var id = _param.id, bsPrefix = _param.bsPrefix, bsSwitchPrefix = _param.bsSwitchPrefix, tmp = _param.inline, inline = tmp === void 0 ? false : tmp, tmp1 = _param.disabled, disabled = tmp1 === void 0 ? false : tmp1, tmp2 = _param.isValid, isValid = tmp2 === void 0 ? false : tmp2, tmp3 = _param.isInvalid, isInvalid = tmp3 === void 0 ? false : tmp3, tmp4 = _param.feedbackTooltip, feedbackTooltip = tmp4 === void 0 ? false : tmp4, feedback = _param.feedback, feedbackType = _param.feedbackType, className = _param.className, style = _param.style, tmp5 = _param.title, title = tmp5 === void 0 ? '' : tmp5, tmp6 = _param.type, type = tmp6 === void 0 ? 'checkbox' : tmp6, label = _param.label, children = _param.children, // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    tmp7 = _param.as, as = tmp7 === void 0 ? 'input' : tmp7, props = _helpers.objectWithoutProperties(_param, [
        "id",
        "bsPrefix",
        "bsSwitchPrefix",
        "inline",
        "disabled",
        "isValid",
        "isInvalid",
        "feedbackTooltip",
        "feedback",
        "feedbackType",
        "className",
        "style",
        "title",
        "type",
        "label",
        "children",
        "as"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check');
    bsSwitchPrefix = _themeProvider.useBootstrapPrefix(bsSwitchPrefix, 'form-switch');
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    var innerFormContext = _react.useMemo(function() {
        return {
            controlId: id || controlId
        };
    }, [
        controlId,
        id
    ]);
    var hasLabel = !children && label != null && label !== false || _elementChildren.hasChildOfType(children, _formCheckLabelDefault.default);
    var input = /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, _helpers.objectSpread({
    }, props, {
        type: type === 'switch' ? 'checkbox' : type,
        ref: ref,
        isValid: isValid,
        isInvalid: isInvalid,
        disabled: disabled,
        as: as
    }));
    return(/*#__PURE__*/ _jsxRuntime.jsx(_formContextDefault.default.Provider, {
        value: innerFormContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            style: style,
            className: _classnamesDefault.default(className, hasLabel && bsPrefix, inline && "".concat(bsPrefix, "-inline"), type === 'switch' && bsSwitchPrefix),
            children: children || /*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
                children: [
                    input,
                    hasLabel && /*#__PURE__*/ _jsxRuntime.jsx(_formCheckLabelDefault.default, {
                        title: title,
                        children: label
                    }),
                    feedback && /*#__PURE__*/ _jsxRuntime.jsx(_feedbackDefault.default, {
                        type: feedbackType,
                        tooltip: feedbackTooltip,
                        children: feedback
                    })
                ]
            })
        })
    }));
});
FormCheck.displayName = 'FormCheck';
exports.default = Object.assign(FormCheck, {
    Input: _formCheckInputDefault.default,
    Label: _formCheckLabelDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./Feedback":"gVQmo","./FormCheckInput":"bIRVl","./FormCheckLabel":"5ueLO","./FormContext":"hCNmi","./ThemeProvider":"7HSML","./ElementChildren":"3fvsy","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gVQmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    /**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */ type: _propTypesDefault.default.string,
    /** Display feedback as a tooltip. */ tooltip: _propTypesDefault.default.bool,
    as: _propTypesDefault.default.elementType
};
var Feedback = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var tmp = _param.as, Component = tmp === void 0 ? 'div' : tmp, className = _param.className, tmp1 = _param.type, type = tmp1 === void 0 ? 'valid' : tmp1, tmp2 = _param.tooltip, tooltip = tmp2 === void 0 ? false : tmp2, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "className",
        "type",
        "tooltip"
    ]);
    return _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(className, "".concat(type, "-").concat(tooltip ? 'tooltip' : 'feedback'))
    }));
});
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes;
exports.default = Feedback;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","prop-types":"h9rZg","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bIRVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var FormCheckInput = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var id = _param.id, bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.type, type = tmp === void 0 ? 'checkbox' : tmp, tmp1 = _param.isValid, isValid = tmp1 === void 0 ? false : tmp1, tmp2 = _param.isInvalid, isInvalid = tmp2 === void 0 ? false : tmp2, tmp3 = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp3 === void 0 ? 'input' : tmp3, props = _helpers.objectWithoutProperties(_param, [
        "id",
        "bsPrefix",
        "className",
        "type",
        "isValid",
        "isInvalid",
        "as"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check-input');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        type: type,
        id: id || controlId,
        className: _classnamesDefault.default(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')
    })));
});
FormCheckInput.displayName = 'FormCheckInput';
exports.default = FormCheckInput;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./FormContext":"hCNmi","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hCNmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react"); // TODO
var FormContext = /*#__PURE__*/ _react.createContext({
});
exports.default = FormContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5ueLO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var FormCheckLabel = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, htmlFor = _param.htmlFor, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "htmlFor"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check-label');
    return(/*#__PURE__*/ _jsxRuntime.jsx("label", _helpers.objectSpread({
    }, props, {
        ref: ref,
        htmlFor: htmlFor || controlId,
        className: _classnamesDefault.default(className, bsPrefix)
    })));
});
FormCheckLabel.displayName = 'FormCheckLabel';
exports.default = FormCheckLabel;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./FormContext":"hCNmi","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"N8VBL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _feedback = require("./Feedback");
var _feedbackDefault = parcelHelpers.interopDefault(_feedback);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var FormControl = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, type = _param.type, size = _param.size, htmlSize = _param.htmlSize, id = _param.id, className = _param.className, tmp = _param.isValid, isValid = tmp === void 0 ? false : tmp, tmp1 = _param.isInvalid, isInvalid = tmp1 === void 0 ? false : tmp1, plaintext = _param.plaintext, readOnly = _param.readOnly, tmp2 = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp2 === void 0 ? 'input' : tmp2, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "type",
        "size",
        "htmlSize",
        "id",
        "className",
        "isValid",
        "isInvalid",
        "plaintext",
        "readOnly",
        "as"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-control');
    var classes;
    var _obj;
    if (plaintext) classes = _helpers.defineProperty({
    }, "".concat(bsPrefix, "-plaintext"), true);
    else classes = (_obj = {
    }, _helpers.defineProperty(_obj, bsPrefix, true), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-").concat(size), size), _obj);
    _warningDefault.default(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        type: type,
        size: htmlSize,
        ref: ref,
        readOnly: readOnly,
        id: id || controlId,
        className: _classnamesDefault.default(className, classes, isValid && "is-valid", isInvalid && "is-invalid", type === 'color' && "".concat(bsPrefix, "-color"))
    })));
});
FormControl.displayName = 'FormControl';
exports.default = Object.assign(FormControl, {
    Feedback: _feedbackDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","warning":"eUQJb","./Feedback":"gVQmo","./FormContext":"hCNmi","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dRl73":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('form-floating');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kIvRg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
var FormGroup = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var controlId = _param.controlId, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "controlId",
        "as"
    ]);
    var context = _react.useMemo(function() {
        return {
            controlId: controlId
        };
    }, [
        controlId
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_formContextDefault.default.Provider, {
        value: context,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        }, props, {
            ref: ref
        }))
    }));
});
FormGroup.displayName = 'FormGroup';
exports.default = FormGroup;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./FormContext":"hCNmi","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kHZxe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _col = require("./Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    column: false,
    visuallyHidden: false
};
var FormLabel = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'label' : tmp, bsPrefix = _param.bsPrefix, column = _param.column, visuallyHidden = _param.visuallyHidden, className = _param.className, htmlFor = _param.htmlFor, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "column",
        "visuallyHidden",
        "className",
        "htmlFor"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-label');
    var columnClass = 'col-form-label';
    if (typeof column === 'string') columnClass = "".concat(columnClass, " ").concat(columnClass, "-").concat(column);
    var classes = _classnamesDefault.default(className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);
    _warningDefault.default(controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.');
    htmlFor = htmlFor || controlId;
    if (column) return(/*#__PURE__*/ _jsxRuntime.jsx(_colDefault.default, _helpers.objectSpread({
        ref: ref,
        as: "label",
        className: classes,
        htmlFor: htmlFor
    }, props)));
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
    _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref,
        className: classes,
        htmlFor: htmlFor
    }, props)));
});
FormLabel.displayName = 'FormLabel';
FormLabel.defaultProps = defaultProps;
exports.default = FormLabel;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","warning":"eUQJb","./Col":"1YyUj","./FormContext":"hCNmi","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"i0a07":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
var FormRange = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, id = _param.id, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "id"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-range');
    return(/*#__PURE__*/ _jsxRuntime.jsx("input", _helpers.objectSpread({
    }, props, {
        type: "range",
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix),
        id: id || controlId
    })));
});
FormRange.displayName = 'FormRange';
exports.default = FormRange;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./FormContext":"hCNmi","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e8VwS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
var FormSelect = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, size = _param.size, htmlSize = _param.htmlSize, className = _param.className, tmp = _param.isValid, isValid = tmp === void 0 ? false : tmp, tmp1 = _param.isInvalid, isInvalid = tmp1 === void 0 ? false : tmp1, id = _param.id, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "size",
        "htmlSize",
        "className",
        "isValid",
        "isInvalid",
        "id"
    ]);
    var controlId = _react.useContext(_formContextDefault.default).controlId;
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-select');
    return(/*#__PURE__*/ _jsxRuntime.jsx("select", _helpers.objectSpread({
    }, props, {
        size: htmlSize,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, size && "".concat(bsPrefix, "-").concat(size), isValid && "is-valid", isInvalid && "is-invalid"),
        id: id || controlId
    })));
});
FormSelect.displayName = 'FormSelect';
exports.default = FormSelect;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./FormContext":"hCNmi","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3Mnk3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var FormText = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.as, Component = tmp === void 0 ? 'small' : tmp, muted = _param.muted, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "as",
        "muted"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-text');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, muted && 'text-muted')
    })));
});
FormText.displayName = 'FormText';
exports.default = FormText;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hdXZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _jsxRuntime = require("react/jsx-runtime");
var Switch = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    /*#__PURE__*/ return _jsxRuntime.jsx(_formCheckDefault.default, _helpers.objectSpread({
    }, props, {
        ref: ref,
        type: "switch"
    }));
});
Switch.displayName = 'Switch';
exports.default = Object.assign(Switch, {
    Input: _formCheckDefault.default.Input,
    Label: _formCheckDefault.default.Label
});

},{"@swc/helpers":"cawJ1","react":"kEcQC","./FormCheck":"lgwna","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"6dBde":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var FloatingLabel = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, controlId = _param.controlId, label = _param.label, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "children",
        "controlId",
        "label"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-floating');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_formGroupDefault.default, _helpers.objectSpread({
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix),
        controlId: controlId
    }, props, {
        children: [
            children,
            /*#__PURE__*/ _jsxRuntime.jsx("label", {
                htmlFor: controlId,
                children: label
            })
        ]
    })));
});
FloatingLabel.displayName = 'FloatingLabel';
exports.default = FloatingLabel;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./FormGroup":"kIvRg","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"exjAm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    fluid: false
};
var Container = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, fluid = _param.fluid, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "fluid",
        "as",
        "className"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'container');
    var suffix = typeof fluid === 'string' ? "-".concat(fluid) : '-fluid';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, fluid ? "".concat(prefix).concat(suffix) : prefix)
    })));
});
Container.displayName = 'Container';
Container.defaultProps = defaultProps;
exports.default = Container;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8jj6x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "propTypes", function() {
    return propTypes;
});
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    /**
   * @default 'img'
   */ bsPrefix: _propTypesDefault.default.string,
    /**
   * Sets image as fluid image.
   */ fluid: _propTypesDefault.default.bool,
    /**
   * Sets image shape as rounded.
   */ rounded: _propTypesDefault.default.bool,
    /**
   * Sets image shape as circle.
   */ roundedCircle: _propTypesDefault.default.bool,
    /**
   * Sets image shape as thumbnail.
   */ thumbnail: _propTypesDefault.default.bool
};
var defaultProps = {
    fluid: false,
    rounded: false,
    roundedCircle: false,
    thumbnail: false
};
var Image = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, fluid = _param.fluid, rounded = _param.rounded, roundedCircle = _param.roundedCircle, thumbnail = _param.thumbnail, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "fluid",
        "rounded",
        "roundedCircle",
        "thumbnail"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'img');
    return(/*#__PURE__*/ _jsxRuntime.jsx("img", _helpers.objectSpread({
        // eslint-disable-line jsx-a11y/alt-text
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, fluid && "".concat(bsPrefix, "-fluid"), rounded && "rounded", roundedCircle && "rounded-circle", thumbnail && "".concat(bsPrefix, "-thumbnail"))
    })));
});
Image.displayName = 'Image';
Image.defaultProps = defaultProps;
exports.default = Image;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","prop-types":"h9rZg","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"d3AvT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _figureImage = require("./FigureImage");
var _figureImageDefault = parcelHelpers.interopDefault(_figureImage);
var _figureCaption = require("./FigureCaption");
var _figureCaptionDefault = parcelHelpers.interopDefault(_figureCaption);
var Figure = _createWithBsPrefixDefault.default('figure', {
    Component: 'figure'
});
exports.default = Object.assign(Figure, {
    Image: _figureImageDefault.default,
    Caption: _figureCaptionDefault.default
});

},{"./createWithBsPrefix":"l44ad","./FigureImage":"aGSzk","./FigureCaption":"cj0s0","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"aGSzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _image = require("./Image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    fluid: true
};
var FigureImage = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "className"
    ]);
    return _jsxRuntime.jsx(_imageDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, 'figure-img')
    }));
});
FigureImage.displayName = 'FigureImage';
FigureImage.propTypes = _image.propTypes;
FigureImage.defaultProps = defaultProps;
exports.default = FigureImage;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./Image":"8jj6x","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cj0s0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var FigureCaption = _createWithBsPrefixDefault.default('figure-caption', {
    Component: 'figcaption'
});
exports.default = FigureCaption;

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cZBEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _themeProvider = require("./ThemeProvider");
var _formCheckInput = require("./FormCheckInput");
var _formCheckInputDefault = parcelHelpers.interopDefault(_formCheckInput);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _jsxRuntime = require("react/jsx-runtime");
var InputGroupText = _createWithBsPrefixDefault.default('input-group-text', {
    Component: 'span'
});
var InputGroupCheckbox = function(props) {
    /*#__PURE__*/ return _jsxRuntime.jsx(InputGroupText, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, _helpers.objectSpread({
            type: "checkbox"
        }, props))
    });
};
var InputGroupRadio = function(props) {
    /*#__PURE__*/ return _jsxRuntime.jsx(InputGroupText, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, _helpers.objectSpread({
            type: "radio"
        }, props))
    });
};
/**
 *
 * @property {InputGroupText} Text
 * @property {InputGroupRadio} Radio
 * @property {InputGroupCheckbox} Checkbox
 */ var InputGroup = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, size = _param.size, hasValidation = _param.hasValidation, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "size",
        "hasValidation",
        "className",
        "as"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown
    // exists under an input group.
    var contextValue = _react.useMemo(function() {
        return {
        };
    }, []);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_inputGroupContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
            ref: ref
        }, props, {
            className: _classnamesDefault.default(className, bsPrefix, size && "".concat(bsPrefix, "-").concat(size), hasValidation && 'has-validation')
        }))
    }));
});
InputGroup.displayName = 'InputGroup';
exports.default = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./createWithBsPrefix":"l44ad","./ThemeProvider":"7HSML","./FormCheckInput":"bIRVl","./InputGroupContext":"6zAPM","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fNfiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _uncontrollable = require("uncontrollable");
var _nav = require("@restart/ui/Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _themeProvider = require("./ThemeProvider");
var _listGroupItem = require("./ListGroupItem");
var _listGroupItemDefault = parcelHelpers.interopDefault(_listGroupItem);
var _jsxRuntime = require("react/jsx-runtime");
var ListGroup = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _ref = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    }), className = _ref.className, initialBsPrefix = _ref.bsPrefix, variant = _ref.variant, horizontal = _ref.horizontal, numbered = _ref.numbered, _as = _ref.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, as = _as === void 0 ? 'div' : _as, controlledProps = _helpers.objectWithoutProperties(_ref, [
        "className",
        "bsPrefix",
        "variant",
        "horizontal",
        "numbered",
        "as"
    ]);
    var bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'list-group');
    var horizontalVariant;
    if (horizontal) horizontalVariant = horizontal === true ? 'horizontal' : "horizontal-".concat(horizontal);
    _warningDefault.default(!(horizontal && variant === 'flush'), '`variant="flush"` and `horizontal` should not be used together.');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, _helpers.objectSpread({
        ref: ref
    }, controlledProps, {
        as: as,
        className: _classnamesDefault.default(className, bsPrefix, variant && "".concat(bsPrefix, "-").concat(variant), horizontalVariant && "".concat(bsPrefix, "-").concat(horizontalVariant), numbered && "".concat(bsPrefix, "-numbered"))
    })));
});
ListGroup.displayName = 'ListGroup';
exports.default = Object.assign(ListGroup, {
    Item: _listGroupItemDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","warning":"eUQJb","uncontrollable":"3QjJi","@restart/ui/Nav":"4zv5Y","./ThemeProvider":"7HSML","./ListGroupItem":"7hDNN","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4zv5Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _react = require("react");
var _useForceUpdate = require("@restart/hooks/useForceUpdate");
var _useForceUpdateDefault = parcelHelpers.interopDefault(_useForceUpdate);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _dataKey = require("./DataKey");
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "as",
    "onSelect",
    "activeKey",
    "role",
    "onKeyDown"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// eslint-disable-next-line @typescript-eslint/no-empty-function
var noop = function() {
};
var EVENT_KEY_ATTR = _dataKey.dataAttr('event-key');
var Nav = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var tmp = _ref.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, onSelect = _ref.onSelect, activeKey = _ref.activeKey, role = _ref.role, onKeyDown = _ref.onKeyDown, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    // A ref and forceUpdate for refocus, b/c we only want to trigger when needed
    // and don't want to reset the set in the effect
    var forceUpdate = _useForceUpdateDefault.default();
    var needsRefocusRef = _react.useRef(false);
    var parentOnSelect = _react.useContext(_selectableContextDefault.default);
    var tabContext = _react.useContext(_tabContextDefault.default);
    var getControlledId, getControllerId;
    if (tabContext) {
        role = role || 'tablist';
        activeKey = tabContext.activeKey; // TODO: do we need to duplicate these?
        getControlledId = tabContext.getControlledId;
        getControllerId = tabContext.getControllerId;
    }
    var listNode = _react.useRef(null);
    var getNextActiveTab = function(offset) {
        var currentListNode = listNode.current;
        if (!currentListNode) return null;
        var items = _querySelectorAllDefault.default(currentListNode, "[".concat(EVENT_KEY_ATTR, "]:not([aria-disabled=true])"));
        var activeChild = currentListNode.querySelector('[aria-selected=true]');
        if (!activeChild) return null;
        var index = items.indexOf(activeChild);
        if (index === -1) return null;
        var nextIndex = index + offset;
        if (nextIndex >= items.length) nextIndex = 0;
        if (nextIndex < 0) nextIndex = items.length - 1;
        return items[nextIndex];
    };
    var handleSelect = function(key, event) {
        if (key == null) return;
        onSelect == null || onSelect(key, event);
        parentOnSelect == null || parentOnSelect(key, event);
    };
    var handleKeyDown = function(event) {
        onKeyDown == null || onKeyDown(event);
        if (!tabContext) return;
        var nextActiveChild;
        switch(event.key){
            case 'ArrowLeft':
            case 'ArrowUp':
                nextActiveChild = getNextActiveTab(-1);
                break;
            case 'ArrowRight':
            case 'ArrowDown':
                nextActiveChild = getNextActiveTab(1);
                break;
            default:
                return;
        }
        if (!nextActiveChild) return;
        event.preventDefault();
        handleSelect(nextActiveChild.dataset[_dataKey.dataProp('EventKey')] || null, event);
        needsRefocusRef.current = true;
        forceUpdate();
    };
    _react.useEffect(function() {
        if (listNode.current && needsRefocusRef.current) {
            var activeChild = listNode.current.querySelector("[".concat(EVENT_KEY_ATTR, "][aria-selected=true]"));
            activeChild == null || activeChild.focus();
        }
        needsRefocusRef.current = false;
    });
    var mergedRef = _useMergedRefsDefault.default(ref, listNode);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
        value: handleSelect,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_navContextDefault.default.Provider, {
            value: {
                role: role,
                // used by NavLink to determine it's role
                activeKey: _selectableContext.makeEventKey(activeKey),
                getControlledId: getControlledId || noop,
                getControllerId: getControllerId || noop
            },
            children: /*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
            }, props, {
                onKeyDown: handleKeyDown,
                ref: mergedRef,
                role: role
            }))
        })
    }));
});
Nav.displayName = 'Nav';
exports.default = Object.assign(Nav, {
    Item: _navItemDefault.default
});

},{"dom-helpers/querySelectorAll":"7x6pG","react":"kEcQC","@restart/hooks/useForceUpdate":"dsDNV","@restart/hooks/useMergedRefs":"bbv4J","./NavContext":"6YbBq","./SelectableContext":"497xu","./TabContext":"7fOQu","./DataKey":"4rt2J","./NavItem":"afmOV","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7fOQu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var TabContext = /*#__PURE__*/ _react.createContext(null);
exports.default = TabContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"afmOV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useNavItem", function() {
    return useNavItem;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dataKey = require("./DataKey");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "as",
    "active",
    "eventKey"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useNavItem(param) {
    var key = param.key, onClick = param.onClick, active = param.active, id = param.id, role = param.role, disabled = param.disabled;
    var parentOnSelect = _react.useContext(_selectableContextDefault.default);
    var navContext = _react.useContext(_navContextDefault.default);
    var isActive = active;
    var props = {
        role: role
    };
    if (navContext) {
        if (!role && navContext.role === 'tablist') props.role = 'tab';
        var contextControllerId = navContext.getControllerId(key != null ? key : null);
        var contextControlledId = navContext.getControlledId(key != null ? key : null); // @ts-ignore
        props[_dataKey.dataAttr('event-key')] = key;
        props.id = contextControllerId || id;
        props['aria-controls'] = contextControlledId;
        isActive = active == null && key != null ? navContext.activeKey === key : active;
    }
    if (props.role === 'tab') {
        if (disabled) {
            props.tabIndex = -1;
            props['aria-disabled'] = true;
        }
        if (isActive) props['aria-selected'] = isActive;
        else props.tabIndex = -1;
    }
    props.onClick = _useEventCallbackDefault.default(function(e) {
        if (disabled) return;
        onClick == null || onClick(e);
        if (key == null) return;
        if (parentOnSelect && !e.isPropagationStopped()) parentOnSelect(key, e);
    });
    return [
        props,
        {
            isActive: isActive
        }
    ];
}
var NavItem = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var tmp = _ref.as, Component = tmp === void 0 ? _buttonDefault.default : tmp, active = _ref.active, eventKey = _ref.eventKey, options = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ref1 = _helpers.slicedToArray(useNavItem(Object.assign({
        key: _selectableContext.makeEventKey(eventKey, options.href),
        active: active
    }, options)), 2), props = ref1[0], meta = ref1[1]; // @ts-ignore
    props[_dataKey.dataAttr('active')] = meta.isActive;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, options, props, {
        ref: ref
    })));
});
NavItem.displayName = 'NavItem';
exports.default = NavItem;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","./NavContext":"6YbBq","./SelectableContext":"497xu","./Button":"9Dxoo","./DataKey":"4rt2J","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7hDNN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _navItem = require("@restart/ui/NavItem");
var _selectableContext = require("@restart/ui/SelectableContext");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var ListGroupItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, active = _param.active, disabled = _param.disabled, eventKey = _param.eventKey, className = _param.className, variant = _param.variant, action = _param.action, as = _param.as, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "active",
        "disabled",
        "eventKey",
        "className",
        "variant",
        "action",
        "as"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'list-group-item');
    var ref1 = _helpers.slicedToArray(_navItem.useNavItem(_helpers.objectSpread({
        key: _selectableContext.makeEventKey(eventKey, props.href),
        active: active
    }, props)), 2), navItemProps = ref1[0], meta = ref1[1];
    var handleClick = _useEventCallbackDefault.default(function(event) {
        if (disabled) {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        navItemProps.onClick(event);
    });
    if (disabled && props.tabIndex === undefined) {
        props.tabIndex = -1;
        props['aria-disabled'] = true;
    } // eslint-disable-next-line no-nested-ternary
    var Component = as || (action ? props.href ? 'a' : 'button' : 'div');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, navItemProps, {
        onClick: handleClick,
        className: _classnamesDefault.default(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && "".concat(bsPrefix, "-").concat(variant), action && "".concat(bsPrefix, "-action"))
    })));
});
ListGroupItem.displayName = 'ListGroupItem';
exports.default = ListGroupItem;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","@restart/ui/NavItem":"afmOV","@restart/ui/SelectableContext":"497xu","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gfL02":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _addEventListener = require("dom-helpers/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _removeEventListener = require("dom-helpers/removeEventListener");
var _removeEventListenerDefault = parcelHelpers.interopDefault(_removeEventListener);
var _scrollbarSize = require("dom-helpers/scrollbarSize");
var _scrollbarSizeDefault = parcelHelpers.interopDefault(_scrollbarSize);
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _useWillUnmount = require("@restart/hooks/useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
var _transitionEnd = require("dom-helpers/transitionEnd");
var _transitionEndDefault = parcelHelpers.interopDefault(_transitionEnd);
var _react = require("react");
var _modal = require("@restart/ui/Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _bootstrapModalManager = require("./BootstrapModalManager");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _modalBody = require("./ModalBody");
var _modalBodyDefault = parcelHelpers.interopDefault(_modalBody);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _modalDialog = require("./ModalDialog");
var _modalDialogDefault = parcelHelpers.interopDefault(_modalDialog);
var _modalFooter = require("./ModalFooter");
var _modalFooterDefault = parcelHelpers.interopDefault(_modalFooter);
var _modalHeader = require("./ModalHeader");
var _modalHeaderDefault = parcelHelpers.interopDefault(_modalHeader);
var _modalTitle = require("./ModalTitle");
var _modalTitleDefault = parcelHelpers.interopDefault(_modalTitle);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    show: false,
    backdrop: true,
    keyboard: true,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    animation: true,
    dialogAs: _modalDialogDefault.default
};
/* eslint-disable no-use-before-define, react/no-multi-comp */ function DialogTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, _helpers.objectSpread({
    }, props, {
        timeout: null
    })));
}
function BackdropTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, _helpers.objectSpread({
    }, props, {
        timeout: null
    })));
}
/* eslint-enable no-use-before-define */ var Modal = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, style = _param.style, dialogClassName = _param.dialogClassName, contentClassName = _param.contentClassName, children = _param.children, Dialog = _param.dialogAs, ariaLabelledby = _param['aria-labelledby'], /* BaseModal props */ show = _param.show, animation = _param.animation, backdrop = _param.backdrop, keyboard = _param.keyboard, onEscapeKeyDown = _param.onEscapeKeyDown, onShow = _param.onShow, onHide = _param.onHide, container = _param.container, autoFocus = _param.autoFocus, enforceFocus = _param.enforceFocus, restoreFocus = _param.restoreFocus, restoreFocusOptions = _param.restoreFocusOptions, onEntered = _param.onEntered, onExit = _param.onExit, onExiting = _param.onExiting, onEnter = _param.onEnter, onEntering = _param.onEntering, onExited = _param.onExited, backdropClassName = _param.backdropClassName, propsManager = _param.manager, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "style",
        "dialogClassName",
        "contentClassName",
        "children",
        "dialogAs",
        'aria-labelledby',
        "show",
        "animation",
        "backdrop",
        "keyboard",
        "onEscapeKeyDown",
        "onShow",
        "onHide",
        "container",
        "autoFocus",
        "enforceFocus",
        "restoreFocus",
        "restoreFocusOptions",
        "onEntered",
        "onExit",
        "onExiting",
        "onEnter",
        "onEntering",
        "onExited",
        "backdropClassName",
        "manager"
    ]);
    var ref1 = _helpers.slicedToArray(_react.useState({
    }), 2), modalStyle = ref1[0], setStyle = ref1[1];
    var ref2 = _helpers.slicedToArray(_react.useState(false), 2), animateStaticModal = ref2[0], setAnimateStaticModal = ref2[1];
    var waitingForMouseUpRef = _react.useRef(false);
    var ignoreBackdropClickRef = _react.useRef(false);
    var removeStaticModalAnimationRef = _react.useRef(null);
    var ref3 = _helpers.slicedToArray(_useCallbackRefDefault.default(), 2), modal = ref3[0], setModalRef = ref3[1];
    var mergedRef = _useMergedRefsDefault.default(ref, setModalRef);
    var handleHide = _useEventCallbackDefault.default(onHide);
    var isRTL = _themeProvider.useIsRTL();
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal');
    var modalContext = _react.useMemo(function() {
        return {
            onHide: handleHide
        };
    }, [
        handleHide
    ]);
    function getModalManager() {
        if (propsManager) return propsManager;
        return _bootstrapModalManager.getSharedManager({
            isRTL: isRTL
        });
    }
    function updateDialogStyle(node) {
        if (!_canUseDOMDefault.default) return;
        var containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;
        var modalIsOverflowing = node.scrollHeight > _ownerDocumentDefault.default(node).documentElement.clientHeight;
        setStyle({
            paddingRight: containerIsOverflowing && !modalIsOverflowing ? _scrollbarSizeDefault.default() : undefined,
            paddingLeft: !containerIsOverflowing && modalIsOverflowing ? _scrollbarSizeDefault.default() : undefined
        });
    }
    var handleWindowResize = _useEventCallbackDefault.default(function() {
        if (modal) updateDialogStyle(modal.dialog);
    });
    _useWillUnmountDefault.default(function() {
        _removeEventListenerDefault.default(window, 'resize', handleWindowResize);
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
    }); // We prevent the modal from closing during a drag by detecting where the
    // the click originates from. If it starts in the modal and then ends outside
    // don't close.
    var handleDialogMouseDown = function() {
        waitingForMouseUpRef.current = true;
    };
    var handleMouseUp = function(e) {
        if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) ignoreBackdropClickRef.current = true;
        waitingForMouseUpRef.current = false;
    };
    var handleStaticModalAnimation = function() {
        setAnimateStaticModal(true);
        removeStaticModalAnimationRef.current = _transitionEndDefault.default(modal.dialog, function() {
            setAnimateStaticModal(false);
        });
    };
    var handleStaticBackdropClick = function(e) {
        if (e.target !== e.currentTarget) return;
        handleStaticModalAnimation();
    };
    var handleClick = function(e) {
        if (backdrop === 'static') {
            handleStaticBackdropClick(e);
            return;
        }
        if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
            ignoreBackdropClickRef.current = false;
            return;
        }
        onHide == null || onHide();
    };
    var handleEscapeKeyDown = function(e) {
        if (!keyboard && backdrop === 'static') {
            // Call preventDefault to stop modal from closing in restart ui,
            // then play our animation.
            e.preventDefault();
            handleStaticModalAnimation();
        } else if (keyboard && onEscapeKeyDown) onEscapeKeyDown(e);
    };
    var handleEnter = function(node, isAppearing) {
        if (node) {
            node.style.display = 'block';
            updateDialogStyle(node);
        }
        onEnter == null || onEnter(node, isAppearing);
    };
    var handleExit = function(node) {
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
        onExit == null || onExit(node);
    };
    var handleEntering = function(node, isAppearing) {
        onEntering == null || onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.
        _addEventListenerDefault.default(window, 'resize', handleWindowResize);
    };
    var handleExited = function(node) {
        if (node) node.style.display = ''; // RHL removes it sometimes
        onExited == null || onExited(node); // FIXME: This should work even when animation is disabled.
        _removeEventListenerDefault.default(window, 'resize', handleWindowResize);
    };
    var renderBackdrop = _react.useCallback(function(backdropProps) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", _helpers.objectSpread({
        }, backdropProps, {
            className: _classnamesDefault.default("".concat(bsPrefix, "-backdrop"), backdropClassName, !animation && 'show')
        }));
    }, [
        animation,
        backdropClassName,
        bsPrefix
    ]);
    var baseModalStyle = _helpers.objectSpread({
    }, style, modalStyle); // Sets `display` always block when `animation` is false
    if (!animation) baseModalStyle.display = 'block';
    var renderDialog = function(dialogProps) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", _helpers.objectSpread({
            role: "dialog"
        }, dialogProps, {
            style: baseModalStyle,
            className: _classnamesDefault.default(className, bsPrefix, animateStaticModal && "".concat(bsPrefix, "-static")),
            onClick: backdrop ? handleClick : undefined,
            onMouseUp: handleMouseUp,
            "aria-labelledby": ariaLabelledby,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Dialog, _helpers.objectSpread({
            }, props, {
                onMouseDown: handleDialogMouseDown,
                className: dialogClassName,
                contentClassName: contentClassName,
                children: children
            }))
        }));
    };
    return(/*#__PURE__*/ _jsxRuntime.jsx(_modalContextDefault.default.Provider, {
        value: modalContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_modalDefault.default, {
            show: show,
            ref: mergedRef,
            backdrop: backdrop,
            container: container,
            keyboard: true // Always set true - see handleEscapeKeyDown
            ,
            autoFocus: autoFocus,
            enforceFocus: enforceFocus,
            restoreFocus: restoreFocus,
            restoreFocusOptions: restoreFocusOptions,
            onEscapeKeyDown: handleEscapeKeyDown,
            onShow: onShow,
            onHide: onHide,
            onEnter: handleEnter,
            onEntering: handleEntering,
            onEntered: onEntered,
            onExit: handleExit,
            onExiting: onExiting,
            onExited: handleExited,
            manager: getModalManager(),
            transition: animation ? DialogTransition : undefined,
            backdropTransition: animation ? BackdropTransition : undefined,
            renderBackdrop: renderBackdrop,
            renderDialog: renderDialog
        })
    }));
});
Modal.displayName = 'Modal';
Modal.defaultProps = defaultProps;
exports.default = Object.assign(Modal, {
    Body: _modalBodyDefault.default,
    Header: _modalHeaderDefault.default,
    Title: _modalTitleDefault.default,
    Footer: _modalFooterDefault.default,
    Dialog: _modalDialogDefault.default,
    TRANSITION_DURATION: 300,
    BACKDROP_TRANSITION_DURATION: 150
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","dom-helpers/addEventListener":"4a2fe","dom-helpers/canUseDOM":"5fed2","dom-helpers/ownerDocument":"fd2mh","dom-helpers/removeEventListener":"4P8Z4","dom-helpers/scrollbarSize":"izHmo","@restart/hooks/useCallbackRef":"7m4Rf","@restart/hooks/useEventCallback":"iaqs7","@restart/hooks/useMergedRefs":"bbv4J","@restart/hooks/useWillUnmount":"4VvPC","dom-helpers/transitionEnd":"48WgU","react":"kEcQC","@restart/ui/Modal":"fuboZ","./BootstrapModalManager":"hgBvE","./Fade":"4nlBx","./ModalBody":"g7gWo","./ModalContext":"h5L29","./ModalDialog":"5HkO0","./ModalFooter":"bHAyE","./ModalHeader":"hcivh","./ModalTitle":"l4LrN","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"izHmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canUseDOM = require("./canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var size;
function scrollbarSize(recalc) {
    if (!size && size !== 0 || recalc) {
        if (_canUseDOMDefault.default) {
            var scrollDiv = document.createElement('div');
            scrollDiv.style.position = 'absolute';
            scrollDiv.style.top = '-9999px';
            scrollDiv.style.width = '50px';
            scrollDiv.style.height = '50px';
            scrollDiv.style.overflow = 'scroll';
            document.body.appendChild(scrollDiv);
            size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
        }
    }
    return size;
}
exports.default = scrollbarSize;

},{"./canUseDOM":"5fed2","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fuboZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */ var _activeElement = require("dom-helpers/activeElement");
var _activeElementDefault = parcelHelpers.interopDefault(_activeElement);
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _listen = require("dom-helpers/listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _useMounted = require("@restart/hooks/useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _useWillUnmount = require("@restart/hooks/useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
var _usePrevious = require("@restart/hooks/usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _useWaitForDOMRef = require("./useWaitForDOMRef");
var _useWaitForDOMRefDefault = parcelHelpers.interopDefault(_useWaitForDOMRef);
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "show",
    "role",
    "className",
    "style",
    "children",
    "backdrop",
    "keyboard",
    "onBackdropClick",
    "onEscapeKeyDown",
    "transition",
    "backdropTransition",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "renderDialog",
    "renderBackdrop",
    "manager",
    "container",
    "onShow",
    "onHide",
    "onExit",
    "onExited",
    "onExiting",
    "onEnter",
    "onEntering",
    "onEntered"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var manager;
function getManager(window) {
    if (!manager) manager = new _modalManagerDefault.default({
        ownerDocument: window == null ? void 0 : window.document
    });
    return manager;
}
function useModalManager(provided) {
    var window = _useWindowDefault.default();
    var modalManager = provided || getManager(window);
    var modal = _react.useRef({
        dialog: null,
        backdrop: null
    });
    return Object.assign(modal.current, {
        add: function() {
            return modalManager.add(modal.current);
        },
        remove: function() {
            return modalManager.remove(modal.current);
        },
        isTopModal: function() {
            return modalManager.isTopModal(modal.current);
        },
        setDialogRef: _react.useCallback(function(ref) {
            modal.current.dialog = ref;
        }, []),
        setBackdropRef: _react.useCallback(function(ref) {
            modal.current.backdrop = ref;
        }, [])
    });
}
var Modal = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var _show = _ref.show, show = _show === void 0 ? false : _show, _role = _ref.role, role = _role === void 0 ? 'dialog' : _role, className = _ref.className, style = _ref.style, children = _ref.children, _backdrop = _ref.backdrop, backdrop = _backdrop === void 0 ? true : _backdrop, _keyboard = _ref.keyboard, keyboard = _keyboard === void 0 ? true : _keyboard, onBackdropClick = _ref.onBackdropClick, onEscapeKeyDown = _ref.onEscapeKeyDown, transition = _ref.transition, backdropTransition = _ref.backdropTransition, _autoFocus = _ref.autoFocus, autoFocus = _autoFocus === void 0 ? true : _autoFocus, _enforceFocus = _ref.enforceFocus, enforceFocus = _enforceFocus === void 0 ? true : _enforceFocus, _restoreFocus = _ref.restoreFocus, restoreFocus = _restoreFocus === void 0 ? true : _restoreFocus, restoreFocusOptions = _ref.restoreFocusOptions, renderDialog = _ref.renderDialog, _renderBackdrop = _ref.renderBackdrop, renderBackdrop = _renderBackdrop === void 0 ? function(props) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", Object.assign({
        }, props));
    } : _renderBackdrop, providedManager = _ref.manager, containerRef = _ref.container, onShow = _ref.onShow, _onHide = _ref.onHide, onHide = _onHide === void 0 ? function() {
    } : _onHide, onExit = _ref.onExit, onExited = _ref.onExited, onExiting = _ref.onExiting, onEnter = _ref.onEnter, onEntering = _ref.onEntering, onEntered = _ref.onEntered, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
    var container = _useWaitForDOMRefDefault.default(containerRef);
    var modal = useModalManager(providedManager);
    var isMounted = _useMountedDefault.default();
    var prevShow = _usePreviousDefault.default(show);
    var ref1 = _helpers.slicedToArray(_react.useState(!show), 2), exited = ref1[0], setExited = ref1[1];
    var lastFocusRef = _react.useRef(null);
    _react.useImperativeHandle(ref, function() {
        return modal;
    }, [
        modal
    ]);
    if (_canUseDOMDefault.default && !prevShow && show) lastFocusRef.current = _activeElementDefault.default();
    if (!transition && !show && !exited) setExited(true);
    else if (show && exited) setExited(false);
    var handleShow = _useEventCallbackDefault.default(function() {
        modal.add();
        removeKeydownListenerRef.current = _listenDefault.default(document, 'keydown', handleDocumentKeyDown);
        removeFocusListenerRef.current = _listenDefault.default(document, 'focus', // and so steals focus from it
        function() {
            return setTimeout(handleEnforceFocus);
        }, true);
        if (onShow) onShow();
         // autofocus after onShow to not trigger a focus event for previous
        // modals before this one is shown.
        if (autoFocus) {
            var currentActiveElement = _activeElementDefault.default(document);
            if (modal.dialog && currentActiveElement && !_containsDefault.default(modal.dialog, currentActiveElement)) {
                lastFocusRef.current = currentActiveElement;
                modal.dialog.focus();
            }
        }
    });
    var handleHide = _useEventCallbackDefault.default(function() {
        modal.remove();
        removeKeydownListenerRef.current == null || removeKeydownListenerRef.current();
        removeFocusListenerRef.current == null || removeFocusListenerRef.current();
        if (restoreFocus) {
            var _lastFocusRef$current;
            // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
            (_lastFocusRef$current = lastFocusRef.current) == null || _lastFocusRef$current.focus == null || _lastFocusRef$current.focus(restoreFocusOptions);
            lastFocusRef.current = null;
        }
    }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120
    // Show logic when:
    //  - show is `true` _and_ `container` has resolved
    _react.useEffect(function() {
        if (!show || !container) return;
        handleShow();
    }, [
        show,
        container,
        /* should never change: */ handleShow
    ]); // Hide cleanup logic when:
    //  - `exited` switches to true
    //  - component unmounts;
    _react.useEffect(function() {
        if (!exited) return;
        handleHide();
    }, [
        exited,
        handleHide
    ]);
    _useWillUnmountDefault.default(function() {
        handleHide();
    }); // --------------------------------
    var handleEnforceFocus = _useEventCallbackDefault.default(function() {
        if (!enforceFocus || !isMounted() || !modal.isTopModal()) return;
        var currentActiveElement = _activeElementDefault.default();
        if (modal.dialog && currentActiveElement && !_containsDefault.default(modal.dialog, currentActiveElement)) modal.dialog.focus();
    });
    var handleBackdropClick = _useEventCallbackDefault.default(function(e) {
        if (e.target !== e.currentTarget) return;
        onBackdropClick == null || onBackdropClick(e);
        if (backdrop === true) onHide();
    });
    var handleDocumentKeyDown = _useEventCallbackDefault.default(function(e) {
        if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
            onEscapeKeyDown == null || onEscapeKeyDown(e);
            if (!e.defaultPrevented) onHide();
        }
    });
    var removeFocusListenerRef = _react.useRef();
    var removeKeydownListenerRef = _react.useRef();
    var handleHidden = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        setExited(true);
        onExited == null || onExited.apply(void 0, _helpers.toConsumableArray(args));
    };
    var Transition = transition;
    if (!container || !(show || Transition && !exited)) return null;
    var dialogProps = Object.assign({
        role: role,
        ref: modal.setDialogRef,
        // apparently only works on the dialog role element
        'aria-modal': role === 'dialog' ? true : undefined
    }, rest, {
        style: style,
        className: className,
        tabIndex: -1
    });
    var dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/ _jsxRuntime.jsx("div", Object.assign({
    }, dialogProps, {
        children: /*#__PURE__*/ _react.cloneElement(children, {
            role: 'document'
        })
    }));
    if (Transition) dialog = /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
        appear: true,
        unmountOnExit: true,
        in: !!show,
        onExit: onExit,
        onExiting: onExiting,
        onExited: handleHidden,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        children: dialog
    });
    var backdropElement = null;
    if (backdrop) {
        var BackdropTransition = backdropTransition;
        backdropElement = renderBackdrop({
            ref: modal.setBackdropRef,
            onClick: handleBackdropClick
        });
        if (BackdropTransition) backdropElement = /*#__PURE__*/ _jsxRuntime.jsx(BackdropTransition, {
            appear: true,
            in: !!show,
            children: backdropElement
        });
    }
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: /*#__PURE__*/ _reactDomDefault.default.createPortal(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
            children: [
                backdropElement,
                dialog
            ]
        }), container)
    }));
});
Modal.displayName = 'Modal';
exports.default = Object.assign(Modal, {
    Manager: _modalManagerDefault.default
});

},{"@swc/helpers":"cawJ1","dom-helpers/activeElement":"dkkN0","dom-helpers/contains":"ZRkd1","dom-helpers/canUseDOM":"5fed2","dom-helpers/listen":"5XTIX","react":"kEcQC","react-dom":"6cUDX","@restart/hooks/useMounted":"03N3e","@restart/hooks/useWillUnmount":"4VvPC","@restart/hooks/usePrevious":"6KEhY","@restart/hooks/useEventCallback":"iaqs7","./ModalManager":"7kPPM","./useWaitForDOMRef":"gojpw","./useWindow":"70XQw","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"dkkN0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function activeElement(doc) {
    if (doc === void 0) doc = _ownerDocumentDefault.default();
    // Support: IE 9 only
    // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
    try {
        var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing
        // document.activeElement from an <iframe>
        if (!active || !active.nodeName) return null;
        return active;
    } catch (e) {
        /* ie throws if no active element */ return doc.body;
    }
}
exports.default = activeElement;

},{"./ownerDocument":"fd2mh","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"7kPPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OPEN_DATA_ATTRIBUTE", function() {
    return OPEN_DATA_ATTRIBUTE;
});
var _helpers = require("@swc/helpers");
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _dataKey = require("./DataKey");
var _getScrollbarWidth = require("./getScrollbarWidth");
var _getScrollbarWidthDefault = parcelHelpers.interopDefault(_getScrollbarWidth);
var OPEN_DATA_ATTRIBUTE = _dataKey.dataAttr('modal-open');
var ModalManager = /**
 * Manages a stack of Modals as well as ensuring
 * body scrolling is is disabled and padding accounted for
 */ /*#__PURE__*/ function() {
    "use strict";
    function ModalManager() {
        var ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        }, ownerDocument = ref.ownerDocument, _handleContainerOverflow = ref.handleContainerOverflow, handleContainerOverflow = _handleContainerOverflow === void 0 ? true : _handleContainerOverflow, _isRTL = ref.isRTL, isRTL = _isRTL === void 0 ? false : _isRTL;
        _helpers.classCallCheck(this, ModalManager);
        this.handleContainerOverflow = handleContainerOverflow;
        this.isRTL = isRTL;
        this.modals = [];
        this.ownerDocument = ownerDocument;
    }
    _helpers.createClass(ModalManager, [
        {
            key: "getScrollbarWidth",
            value: function getScrollbarWidth() {
                return _getScrollbarWidthDefault.default(this.ownerDocument);
            }
        },
        {
            key: "getElement",
            value: function getElement() {
                return (this.ownerDocument || document).body;
            }
        },
        {
            key: "setModalAttributes",
            value: function setModalAttributes(_modal) {
            }
        },
        {
            key: "removeModalAttributes",
            value: function removeModalAttributes(_modal) {
            }
        },
        {
            key: "setContainerStyle",
            value: function setContainerStyle(containerState) {
                var style = {
                    overflow: 'hidden'
                }; // we are only interested in the actual `style` here
                // because we will override it
                var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
                var container = this.getElement();
                containerState.style = _helpers.defineProperty({
                    overflow: container.style.overflow
                }, paddingProp, container.style[paddingProp]);
                if (containerState.scrollBarWidth) // use computed style, here to get the real padding
                // to add our scrollbar width
                style[paddingProp] = "".concat(parseInt(_cssDefault.default(container, paddingProp) || '0', 10) + containerState.scrollBarWidth, "px");
                container.setAttribute(OPEN_DATA_ATTRIBUTE, '');
                _cssDefault.default(container, style);
            }
        },
        {
            key: "reset",
            value: function reset() {
                var _this = this;
                _helpers.toConsumableArray(this.modals).forEach(function(m) {
                    return _this.remove(m);
                });
            }
        },
        {
            key: "removeContainerStyle",
            value: function removeContainerStyle(containerState) {
                var container = this.getElement();
                container.removeAttribute(OPEN_DATA_ATTRIBUTE);
                Object.assign(container.style, containerState.style);
            }
        },
        {
            key: "add",
            value: function add(modal) {
                var modalIdx = this.modals.indexOf(modal);
                if (modalIdx !== -1) return modalIdx;
                modalIdx = this.modals.length;
                this.modals.push(modal);
                this.setModalAttributes(modal);
                if (modalIdx !== 0) return modalIdx;
                this.state = {
                    scrollBarWidth: this.getScrollbarWidth(),
                    style: {
                    }
                };
                if (this.handleContainerOverflow) this.setContainerStyle(this.state);
                return modalIdx;
            }
        },
        {
            key: "remove",
            value: function remove(modal) {
                var modalIdx = this.modals.indexOf(modal);
                if (modalIdx === -1) return;
                this.modals.splice(modalIdx, 1); // if that was the last modal in a container,
                // clean up the container
                if (!this.modals.length && this.handleContainerOverflow) this.removeContainerStyle(this.state);
                this.removeModalAttributes(modal);
            }
        },
        {
            key: "isTopModal",
            value: function isTopModal(modal) {
                return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
            }
        }
    ]);
    return ModalManager;
}();
exports.default = ModalManager;

},{"@swc/helpers":"cawJ1","dom-helpers/css":"8WNyP","./DataKey":"4rt2J","./getScrollbarWidth":"fWIrM","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fWIrM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getBodyScrollbarWidth() {
    var ownerDocument = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    var window = ownerDocument.defaultView;
    return Math.abs(window.innerWidth - ownerDocument.documentElement.clientWidth);
}
exports.default = getBodyScrollbarWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gojpw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveContainerRef", function() {
    return resolveContainerRef;
});
var _helpers = require("@swc/helpers");
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _react = require("react");
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
var resolveContainerRef = function(ref, document) {
    var _ref;
    if (!_canUseDOMDefault.default) return null;
    if (ref == null) return (document || _ownerDocumentDefault.default()).body;
    if (typeof ref === 'function') ref = ref();
    if (ref && 'current' in ref) ref = ref.current;
    if ((_ref = ref) != null && _ref.nodeType) return ref || null;
    return null;
};
function useWaitForDOMRef(ref, onResolved) {
    var window = _useWindowDefault.default();
    var ref1 = _helpers.slicedToArray(_react.useState(function() {
        return resolveContainerRef(ref, window == null ? void 0 : window.document);
    }), 2), resolvedRef = ref1[0], setRef = ref1[1];
    if (!resolvedRef) {
        var earlyRef = resolveContainerRef(ref);
        if (earlyRef) setRef(earlyRef);
    }
    _react.useEffect(function() {
        if (onResolved && resolvedRef) onResolved(resolvedRef);
    }, [
        onResolved,
        resolvedRef
    ]);
    _react.useEffect(function() {
        var nextRef = resolveContainerRef(ref);
        if (nextRef !== resolvedRef) setRef(nextRef);
    }, [
        ref,
        resolvedRef
    ]);
    return resolvedRef;
}
exports.default = useWaitForDOMRef;

},{"@swc/helpers":"cawJ1","dom-helpers/ownerDocument":"fd2mh","dom-helpers/canUseDOM":"5fed2","react":"kEcQC","./useWindow":"70XQw","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hgBvE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSharedManager", function() {
    return getSharedManager;
});
var _helpers = require("@swc/helpers");
var _addClass = require("dom-helpers/addClass");
var _addClassDefault = parcelHelpers.interopDefault(_addClass);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _removeClass = require("dom-helpers/removeClass");
var _removeClassDefault = parcelHelpers.interopDefault(_removeClass);
var _modalManager = require("@restart/ui/ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var Selector = {
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler'
};
var BootstrapModalManager = /*#__PURE__*/ function(ModalManager) {
    "use strict";
    _helpers.inherits(BootstrapModalManager, ModalManager);
    var _super = _helpers.createSuper(BootstrapModalManager);
    function BootstrapModalManager() {
        _helpers.classCallCheck(this, BootstrapModalManager);
        return _super.apply(this, arguments);
    }
    _helpers.createClass(BootstrapModalManager, [
        {
            key: "adjustAndStore",
            value: function adjustAndStore(prop, element, adjust) {
                var actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible
                // @ts-ignore
                element.dataset[prop] = actual;
                _cssDefault.default(element, _helpers.defineProperty({
                }, prop, "".concat(parseFloat(_cssDefault.default(element, prop)) + adjust, "px")));
            }
        },
        {
            key: "restore",
            value: function restore(prop, element) {
                var value = element.dataset[prop];
                if (value !== undefined) {
                    delete element.dataset[prop];
                    _cssDefault.default(element, _helpers.defineProperty({
                    }, prop, value));
                }
            }
        },
        {
            key: "setContainerStyle",
            value: function setContainerStyle(containerState) {
                var _this = this;
                _helpers.get(_helpers.getPrototypeOf(BootstrapModalManager.prototype), "setContainerStyle", this).call(this, containerState);
                var container = this.getElement();
                _addClassDefault.default(container, 'modal-open');
                if (!containerState.scrollBarWidth) return;
                var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
                var marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
                _querySelectorAllDefault.default(container, Selector.FIXED_CONTENT).forEach(function(el) {
                    return _this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth);
                });
                _querySelectorAllDefault.default(container, Selector.STICKY_CONTENT).forEach(function(el) {
                    return _this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth);
                });
                _querySelectorAllDefault.default(container, Selector.NAVBAR_TOGGLER).forEach(function(el) {
                    return _this.adjustAndStore(marginProp, el, containerState.scrollBarWidth);
                });
            }
        },
        {
            key: "removeContainerStyle",
            value: function removeContainerStyle(containerState) {
                var _this = this;
                _helpers.get(_helpers.getPrototypeOf(BootstrapModalManager.prototype), "removeContainerStyle", this).call(this, containerState);
                var container = this.getElement();
                _removeClassDefault.default(container, 'modal-open');
                var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
                var marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
                _querySelectorAllDefault.default(container, Selector.FIXED_CONTENT).forEach(function(el) {
                    return _this.restore(paddingProp, el);
                });
                _querySelectorAllDefault.default(container, Selector.STICKY_CONTENT).forEach(function(el) {
                    return _this.restore(marginProp, el);
                });
                _querySelectorAllDefault.default(container, Selector.NAVBAR_TOGGLER).forEach(function(el) {
                    return _this.restore(marginProp, el);
                });
            }
        }
    ]);
    return BootstrapModalManager;
}(_modalManagerDefault.default);
var sharedManager;
function getSharedManager(options) {
    if (!sharedManager) sharedManager = new BootstrapModalManager(options);
    return sharedManager;
}
exports.default = BootstrapModalManager;

},{"@swc/helpers":"cawJ1","dom-helpers/addClass":"3uN4N","dom-helpers/css":"8WNyP","dom-helpers/querySelectorAll":"7x6pG","dom-helpers/removeClass":"a26SR","@restart/ui/ModalManager":"7kPPM","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3uN4N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hasClass = require("./hasClass");
var _hasClassDefault = parcelHelpers.interopDefault(_hasClass);
function addClass(element, className) {
    if (element.classList) element.classList.add(className);
    else if (!_hasClassDefault.default(element, className)) {
        if (typeof element.className === 'string') element.className = element.className + " " + className;
        else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }
}
exports.default = addClass;

},{"./hasClass":"1QLl9","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1QLl9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
exports.default = hasClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"a26SR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}
function removeClass(element, className) {
    if (element.classList) element.classList.remove(className);
    else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);
    else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
}
exports.default = removeClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"g7gWo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('modal-body');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"h5L29":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var ModalContext = /*#__PURE__*/ _react.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onHide: function() {
    }
});
exports.default = ModalContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5HkO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var ModalDialog = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, contentClassName = _param.contentClassName, centered = _param.centered, size = _param.size, fullscreen = _param.fullscreen, children = _param.children, scrollable = _param.scrollable, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "contentClassName",
        "centered",
        "size",
        "fullscreen",
        "children",
        "scrollable"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal');
    var dialogClass = "".concat(bsPrefix, "-dialog");
    var fullScreenClass = typeof fullscreen === 'string' ? "".concat(bsPrefix, "-fullscreen-").concat(fullscreen) : "".concat(bsPrefix, "-fullscreen");
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(dialogClass, className, size && "".concat(bsPrefix, "-").concat(size), centered && "".concat(dialogClass, "-centered"), scrollable && "".concat(dialogClass, "-scrollable"), fullscreen && fullScreenClass),
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: _classnamesDefault.default("".concat(bsPrefix, "-content"), contentClassName),
            children: children
        })
    })));
});
ModalDialog.displayName = 'ModalDialog';
exports.default = ModalDialog;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bHAyE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('modal-footer');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hcivh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _abstractModalHeader = require("./AbstractModalHeader");
var _abstractModalHeaderDefault = parcelHelpers.interopDefault(_abstractModalHeader);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
var ModalHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_abstractModalHeaderDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, bsPrefix)
    })));
});
ModalHeader.displayName = 'ModalHeader';
ModalHeader.defaultProps = defaultProps;
exports.default = ModalHeader;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./AbstractModalHeader":"gOOpN","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gOOpN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
var AbstractModalHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var closeLabel = _param.closeLabel, closeVariant = _param.closeVariant, closeButton = _param.closeButton, onHide = _param.onHide, children = _param.children, props = _helpers.objectWithoutProperties(_param, [
        "closeLabel",
        "closeVariant",
        "closeButton",
        "onHide",
        "children"
    ]);
    var context = _react.useContext(_modalContextDefault.default);
    var handleClick = _useEventCallbackDefault.default(function() {
        context == null || context.onHide();
        onHide == null || onHide();
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", _helpers.objectSpread({
        ref: ref
    }, props, {
        children: [
            children,
            closeButton && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                "aria-label": closeLabel,
                variant: closeVariant,
                onClick: handleClick
            })
        ]
    })));
});
AbstractModalHeader.defaultProps = defaultProps;
exports.default = AbstractModalHeader;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","./CloseButton":"l89s9","./ModalContext":"h5L29","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"l4LrN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var DivStyledAsH4 = _divWithClassNameDefault.default('h4');
exports.default = _createWithBsPrefixDefault.default('modal-title', {
    Component: DivStyledAsH4
});

},{"./createWithBsPrefix":"l44ad","./divWithClassName":"8C7xS","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fQqZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _all = require("prop-types-extra/lib/all");
var _allDefault = parcelHelpers.interopDefault(_all);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _nav = require("@restart/ui/Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _cardHeaderContext = require("./CardHeaderContext");
var _cardHeaderContextDefault = parcelHelpers.interopDefault(_cardHeaderContext);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    justify: false,
    fill: false
};
var Nav = /*#__PURE__*/ _react.forwardRef(function(uncontrolledProps, ref) {
    var _ref = _uncontrollable.useUncontrolled(uncontrolledProps, {
        activeKey: 'onSelect'
    }), _as = _ref.as, as = _as === void 0 ? 'div' : _as, initialBsPrefix = _ref.bsPrefix, variant = _ref.variant, fill = _ref.fill, justify = _ref.justify, navbar = _ref.navbar, navbarScroll = _ref.navbarScroll, className = _ref.className, activeKey = _ref.activeKey, props = _helpers.objectWithoutProperties(_ref, [
        "as",
        "bsPrefix",
        "variant",
        "fill",
        "justify",
        "navbar",
        "navbarScroll",
        "className",
        "activeKey"
    ]);
    var bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'nav');
    var navbarBsPrefix;
    var cardHeaderBsPrefix;
    var isNavbar = false;
    var navbarContext = _react.useContext(_navbarContextDefault.default);
    var cardHeaderContext = _react.useContext(_cardHeaderContextDefault.default);
    if (navbarContext) {
        navbarBsPrefix = navbarContext.bsPrefix;
        isNavbar = navbar == null ? true : navbar;
    } else if (cardHeaderContext) cardHeaderBsPrefix = cardHeaderContext.cardHeaderBsPrefix;
    var _obj;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, _helpers.objectSpread({
        as: as,
        ref: ref,
        activeKey: activeKey,
        className: _classnamesDefault.default(className, (_obj = {
        }, _helpers.defineProperty(_obj, bsPrefix, !isNavbar), _helpers.defineProperty(_obj, "".concat(navbarBsPrefix, "-nav"), isNavbar), _helpers.defineProperty(_obj, "".concat(navbarBsPrefix, "-nav-scroll"), isNavbar && navbarScroll), _helpers.defineProperty(_obj, "".concat(cardHeaderBsPrefix, "-").concat(variant), !!cardHeaderBsPrefix), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-").concat(variant), !!variant), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-fill"), fill), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-justified"), justify), _obj))
    }, props)));
});
Nav.displayName = 'Nav';
Nav.defaultProps = defaultProps;
exports.default = Object.assign(Nav, {
    Item: _navItemDefault.default,
    Link: _navLinkDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","prop-types-extra/lib/all":"57iFa","react":"kEcQC","uncontrollable":"3QjJi","@restart/ui/Nav":"4zv5Y","./ThemeProvider":"7HSML","./NavbarContext":"6MnAX","./CardHeaderContext":"jbhK2","./NavItem":"j5i23","./NavLink":"3BFyZ","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"57iFa":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = all;
var _createChainableTypeChecker = require('./utils/createChainableTypeChecker');
var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function all() {
    for(var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++)validators[_key] = arguments[_key];
    function allPropTypes() {
        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        var error = null;
        validators.forEach(function(validator) {
            if (error != null) return;
            var result = validator.apply(undefined, args);
            if (result != null) error = result;
        });
        return error;
    }
    return (0, _createChainableTypeChecker2.default)(allPropTypes);
}
module.exports = exports['default'];

},{"./utils/createChainableTypeChecker":"6TDPa"}],"6TDPa":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createChainableTypeChecker;
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */ // Mostly taken from ReactPropTypes.
function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
        var componentNameSafe = componentName || '<<anonymous>>';
        var propFullNameSafe = propFullName || propName;
        if (props[propName] == null) {
            if (isRequired) return new Error('Required ' + location + ' `' + propFullNameSafe + '` was not specified ' + ('in `' + componentNameSafe + '`.'));
            return null;
        }
        for(var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++)args[_key - 6] = arguments[_key];
        return validate.apply(undefined, [
            props,
            propName,
            componentNameSafe,
            location,
            propFullNameSafe
        ].concat(args));
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
}
module.exports = exports['default'];

},{}],"j5i23":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('nav-item');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"3BFyZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _navItem = require("@restart/ui/NavItem");
var _selectableContext = require("@restart/ui/SelectableContext");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    disabled: false
};
var NavLink = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.as, Component = tmp === void 0 ? _anchorDefault.default : tmp, active = _param.active, eventKey = _param.eventKey, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "as",
        "active",
        "eventKey"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'nav-link');
    var ref1 = _helpers.slicedToArray(_navItem.useNavItem(_helpers.objectSpread({
        key: _selectableContext.makeEventKey(eventKey, props.href),
        active: active
    }, props)), 2), navItemProps = ref1[0], meta = ref1[1];
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, navItemProps, {
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, props.disabled && 'disabled', meta.isActive && 'active')
    })));
});
NavLink.displayName = 'NavLink';
NavLink.defaultProps = defaultProps;
exports.default = NavLink;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/Anchor":"8XIew","@restart/ui/NavItem":"afmOV","@restart/ui/SelectableContext":"497xu","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hsrMY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _selectableContext = require("@restart/ui/SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _uncontrollable = require("uncontrollable");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _navbarBrand = require("./NavbarBrand");
var _navbarBrandDefault = parcelHelpers.interopDefault(_navbarBrand);
var _navbarCollapse = require("./NavbarCollapse");
var _navbarCollapseDefault = parcelHelpers.interopDefault(_navbarCollapse);
var _navbarToggle = require("./NavbarToggle");
var _navbarToggleDefault = parcelHelpers.interopDefault(_navbarToggle);
var _navbarOffcanvas = require("./NavbarOffcanvas");
var _navbarOffcanvasDefault = parcelHelpers.interopDefault(_navbarOffcanvas);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
var NavbarText = _createWithBsPrefixDefault.default('navbar-text', {
    Component: 'span'
});
var defaultProps = {
    expand: true,
    variant: 'light',
    collapseOnSelect: false
};
var Navbar = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _ref = _uncontrollable.useUncontrolled(props, {
        expanded: 'onToggle'
    }), initialBsPrefix = _ref.bsPrefix, expand = _ref.expand, variant = _ref.variant, bg = _ref.bg, fixed = _ref.fixed, sticky = _ref.sticky, className = _ref.className, tmp = _ref.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'nav' : tmp, expanded = _ref.expanded, onToggle = _ref.onToggle, onSelect = _ref.onSelect, collapseOnSelect = _ref.collapseOnSelect, controlledProps = _helpers.objectWithoutProperties(_ref, [
        "bsPrefix",
        "expand",
        "variant",
        "bg",
        "fixed",
        "sticky",
        "className",
        "as",
        "expanded",
        "onToggle",
        "onSelect",
        "collapseOnSelect"
    ]);
    var bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'navbar');
    var handleCollapse = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        onSelect == null || onSelect.apply(void 0, _helpers.toConsumableArray(args));
        if (collapseOnSelect && expanded) onToggle == null || onToggle(false);
    }, [
        onSelect,
        collapseOnSelect,
        expanded,
        onToggle
    ]); // will result in some false positives but that seems better
    // than false negatives. strict `undefined` check allows explicit
    // "nulling" of the role if the user really doesn't want one
    if (controlledProps.role === undefined && Component !== 'nav') controlledProps.role = 'navigation';
    var expandClass = "".concat(bsPrefix, "-expand");
    if (typeof expand === 'string') expandClass = "".concat(expandClass, "-").concat(expand);
    var navbarContext = _react.useMemo(function() {
        return {
            onToggle: function() {
                return onToggle == null ? void 0 : onToggle(!expanded);
            },
            bsPrefix: bsPrefix,
            expanded: !!expanded
        };
    }, [
        bsPrefix,
        expanded,
        onToggle
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navbarContextDefault.default.Provider, {
        value: navbarContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: handleCollapse,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
                ref: ref
            }, controlledProps, {
                className: _classnamesDefault.default(className, bsPrefix, expand && expandClass, variant && "".concat(bsPrefix, "-").concat(variant), bg && "bg-".concat(bg), sticky && "sticky-".concat(sticky), fixed && "fixed-".concat(fixed))
            }))
        })
    }));
});
Navbar.defaultProps = defaultProps;
Navbar.displayName = 'Navbar';
exports.default = Object.assign(Navbar, {
    Brand: _navbarBrandDefault.default,
    Collapse: _navbarCollapseDefault.default,
    Offcanvas: _navbarOffcanvasDefault.default,
    Text: NavbarText,
    Toggle: _navbarToggleDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/SelectableContext":"497xu","uncontrollable":"3QjJi","./createWithBsPrefix":"l44ad","./NavbarBrand":"bYfbI","./NavbarCollapse":"ee6PR","./NavbarToggle":"gIL7k","./NavbarOffcanvas":"9qJXj","./ThemeProvider":"7HSML","./NavbarContext":"6MnAX","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bYfbI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var NavbarBrand = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, as = _param.as, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "as"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-brand');
    var Component = as || (props.href ? 'a' : 'span');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix)
    })));
});
NavbarBrand.displayName = 'NavbarBrand';
exports.default = NavbarBrand;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"ee6PR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
var NavbarCollapse = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var children = _param.children, bsPrefix = _param.bsPrefix, props = _helpers.objectWithoutProperties(_param, [
        "children",
        "bsPrefix"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-collapse');
    var context = _react.useContext(_navbarContextDefault.default);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_collapseDefault.default, _helpers.objectSpread({
        in: !!(context && context.expanded)
    }, props, {
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            ref: ref,
            className: bsPrefix,
            children: children
        })
    })));
});
NavbarCollapse.displayName = 'NavbarCollapse';
exports.default = NavbarCollapse;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./Collapse":"9vqfG","./ThemeProvider":"7HSML","./NavbarContext":"6MnAX","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"gIL7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    label: 'Toggle navigation'
};
var NavbarToggle = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, label = _param.label, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'button' : tmp, onClick = _param.onClick, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "children",
        "label",
        "as",
        "onClick"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-toggler');
    var ref1 = _react.useContext(_navbarContextDefault.default) || {
    }, onToggle = ref1.onToggle, expanded = ref1.expanded;
    var handleClick = _useEventCallbackDefault.default(function(e) {
        if (onClick) onClick(e);
        if (onToggle) onToggle();
    });
    if (Component === 'button') props.type = 'button';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        onClick: handleClick,
        "aria-label": label,
        className: _classnamesDefault.default(className, bsPrefix, !expanded && 'collapsed'),
        children: children || /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: "".concat(bsPrefix, "-icon")
        })
    })));
});
NavbarToggle.displayName = 'NavbarToggle';
NavbarToggle.defaultProps = defaultProps;
exports.default = NavbarToggle;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","./ThemeProvider":"7HSML","./NavbarContext":"6MnAX","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9qJXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _offcanvas = require("./Offcanvas");
var _offcanvasDefault = parcelHelpers.interopDefault(_offcanvas);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
var NavbarOffcanvas = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var context = _react.useContext(_navbarContextDefault.default);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_offcanvasDefault.default, _helpers.objectSpread({
        ref: ref,
        show: !!(context != null && context.expanded)
    }, props)));
});
NavbarOffcanvas.displayName = 'NavbarOffcanvas';
exports.default = NavbarOffcanvas;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./Offcanvas":"5i2nj","./NavbarContext":"6MnAX","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5i2nj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _react = require("react");
var _modal = require("@restart/ui/Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _offcanvasBody = require("./OffcanvasBody");
var _offcanvasBodyDefault = parcelHelpers.interopDefault(_offcanvasBody);
var _offcanvasToggling = require("./OffcanvasToggling");
var _offcanvasTogglingDefault = parcelHelpers.interopDefault(_offcanvasToggling);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _offcanvasHeader = require("./OffcanvasHeader");
var _offcanvasHeaderDefault = parcelHelpers.interopDefault(_offcanvasHeader);
var _offcanvasTitle = require("./OffcanvasTitle");
var _offcanvasTitleDefault = parcelHelpers.interopDefault(_offcanvasTitle);
var _themeProvider = require("./ThemeProvider");
var _bootstrapModalManager = require("./BootstrapModalManager");
var _bootstrapModalManagerDefault = parcelHelpers.interopDefault(_bootstrapModalManager);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    show: false,
    backdrop: true,
    keyboard: true,
    scroll: false,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    placement: 'start'
};
function DialogTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_offcanvasTogglingDefault.default, _helpers.objectSpread({
    }, props)));
}
function BackdropTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, _helpers.objectSpread({
    }, props)));
}
var Offcanvas = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, ariaLabelledby = _param['aria-labelledby'], placement = _param.placement, /* BaseModal props */ show = _param.show, backdrop = _param.backdrop, keyboard = _param.keyboard, scroll = _param.scroll, onEscapeKeyDown = _param.onEscapeKeyDown, onShow = _param.onShow, onHide = _param.onHide, container = _param.container, autoFocus = _param.autoFocus, enforceFocus = _param.enforceFocus, restoreFocus = _param.restoreFocus, restoreFocusOptions = _param.restoreFocusOptions, onEntered = _param.onEntered, onExit = _param.onExit, onExiting = _param.onExiting, onEnter = _param.onEnter, onEntering = _param.onEntering, onExited = _param.onExited, backdropClassName = _param.backdropClassName, propsManager = _param.manager, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "children",
        'aria-labelledby',
        "placement",
        "show",
        "backdrop",
        "keyboard",
        "scroll",
        "onEscapeKeyDown",
        "onShow",
        "onHide",
        "container",
        "autoFocus",
        "enforceFocus",
        "restoreFocus",
        "restoreFocusOptions",
        "onEntered",
        "onExit",
        "onExiting",
        "onEnter",
        "onEntering",
        "onExited",
        "backdropClassName",
        "manager"
    ]);
    var modalManager = _react.useRef();
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas');
    var onToggle = (_react.useContext(_navbarContextDefault.default) || {
    }).onToggle;
    var handleHide = _useEventCallbackDefault.default(function() {
        onToggle == null || onToggle();
        onHide == null || onHide();
    });
    var modalContext = _react.useMemo(function() {
        return {
            onHide: handleHide
        };
    }, [
        handleHide
    ]);
    function getModalManager() {
        if (propsManager) return propsManager;
        if (scroll) {
            // Have to use a different modal manager since the shared
            // one handles overflow.
            if (!modalManager.current) modalManager.current = new _bootstrapModalManagerDefault.default({
                handleContainerOverflow: false
            });
            return modalManager.current;
        }
        return _bootstrapModalManager.getSharedManager();
    }
    var handleEnter = function(node) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        if (node) node.style.visibility = 'visible';
        onEnter == null || onEnter.apply(void 0, [
            node
        ].concat(_helpers.toConsumableArray(args)));
    };
    var handleExited = function(node) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        if (node) node.style.visibility = '';
        onExited == null || onExited.apply(void 0, _helpers.toConsumableArray(args));
    };
    var renderBackdrop = _react.useCallback(function(backdropProps) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", _helpers.objectSpread({
        }, backdropProps, {
            className: _classnamesDefault.default("".concat(bsPrefix, "-backdrop"), backdropClassName)
        }));
    }, [
        backdropClassName,
        bsPrefix
    ]);
    var renderDialog = function(dialogProps) {
        /*#__PURE__*/ return _jsxRuntime.jsx("div", _helpers.objectSpread({
            role: "dialog"
        }, dialogProps, props, {
            className: _classnamesDefault.default(className, bsPrefix, "".concat(bsPrefix, "-").concat(placement)),
            "aria-labelledby": ariaLabelledby,
            children: children
        }));
    };
    return(/*#__PURE__*/ _jsxRuntime.jsx(_modalContextDefault.default.Provider, {
        value: modalContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_modalDefault.default, {
            show: show,
            ref: ref,
            backdrop: backdrop,
            container: container,
            keyboard: keyboard,
            autoFocus: autoFocus,
            enforceFocus: enforceFocus && !scroll,
            restoreFocus: restoreFocus,
            restoreFocusOptions: restoreFocusOptions,
            onEscapeKeyDown: onEscapeKeyDown,
            onShow: onShow,
            onHide: handleHide,
            onEnter: handleEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            onExit: onExit,
            onExiting: onExiting,
            onExited: handleExited,
            manager: getModalManager(),
            transition: DialogTransition,
            backdropTransition: BackdropTransition,
            renderBackdrop: renderBackdrop,
            renderDialog: renderDialog
        })
    }));
});
Offcanvas.displayName = 'Offcanvas';
Offcanvas.defaultProps = defaultProps;
exports.default = Object.assign(Offcanvas, {
    Body: _offcanvasBodyDefault.default,
    Header: _offcanvasHeaderDefault.default,
    Title: _offcanvasTitleDefault.default
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","@restart/hooks/useEventCallback":"iaqs7","react":"kEcQC","@restart/ui/Modal":"fuboZ","./Fade":"4nlBx","./OffcanvasBody":"2TJsr","./OffcanvasToggling":"fzncO","./ModalContext":"h5L29","./NavbarContext":"6MnAX","./OffcanvasHeader":"b9ZHH","./OffcanvasTitle":"Erxvh","./ThemeProvider":"7HSML","./BootstrapModalManager":"hgBvE","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2TJsr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('offcanvas-body');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fzncO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false
};
var _obj;
var transitionStyles = (_obj = {
}, _helpers.defineProperty(_obj, _transition.ENTERING, 'show'), _helpers.defineProperty(_obj, _transition.ENTERED, 'show'), _obj);
var OffcanvasToggling = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "children"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, _helpers.objectSpread({
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default
    }, props, {
        childRef: children.ref,
        children: function(status, innerProps) {
            /*#__PURE__*/ return _react.cloneElement(children, _helpers.objectSpread({
            }, innerProps, {
                className: _classnamesDefault.default(className, children.props.className, (status === _transition.ENTERING || status === _transition.EXITING) && "".concat(bsPrefix, "-toggling"), transitionStyles[status])
            }));
        }
    })));
});
OffcanvasToggling.defaultProps = defaultProps;
OffcanvasToggling.displayName = 'OffcanvasToggling';
exports.default = OffcanvasToggling;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","react-transition-group/Transition":"jRkxX","./transitionEndListener":"j5oP0","./TransitionWrapper":"4syw8","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"b9ZHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _abstractModalHeader = require("./AbstractModalHeader");
var _abstractModalHeaderDefault = parcelHelpers.interopDefault(_abstractModalHeader);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
var OffcanvasHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_abstractModalHeaderDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, bsPrefix)
    })));
});
OffcanvasHeader.displayName = 'OffcanvasHeader';
OffcanvasHeader.defaultProps = defaultProps;
exports.default = OffcanvasHeader;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./AbstractModalHeader":"gOOpN","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"Erxvh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var DivStyledAsH5 = _divWithClassNameDefault.default('h5');
exports.default = _createWithBsPrefixDefault.default('offcanvas-title', {
    Component: DivStyledAsH5
});

},{"./createWithBsPrefix":"l44ad","./divWithClassName":"8C7xS","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cngDg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _jsxRuntime = require("react/jsx-runtime");
var NavDropdown = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var id = _param.id, title = _param.title, children = _param.children, bsPrefix = _param.bsPrefix, className = _param.className, rootCloseEvent = _param.rootCloseEvent, menuRole = _param.menuRole, disabled = _param.disabled, active = _param.active, renderMenuOnMount = _param.renderMenuOnMount, menuVariant = _param.menuVariant, props = _helpers.objectWithoutProperties(_param, [
        "id",
        "title",
        "children",
        "bsPrefix",
        "className",
        "rootCloseEvent",
        "menuRole",
        "disabled",
        "active",
        "renderMenuOnMount",
        "menuVariant"
    ]);
    /* NavItem has no additional logic, it's purely presentational. Can set nav item class here to support "as" */ var navItemPrefix = _themeProvider.useBootstrapPrefix(undefined, 'nav-item');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_dropdownDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, navItemPrefix),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Toggle, {
                id: id,
                eventKey: null,
                active: active,
                disabled: disabled,
                childBsPrefix: bsPrefix,
                as: _navLinkDefault.default,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Menu, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                variant: menuVariant,
                children: children
            })
        ]
    })));
});
NavDropdown.displayName = 'NavDropdown';
exports.default = Object.assign(NavDropdown, {
    Item: _dropdownDefault.default.Item,
    ItemText: _dropdownDefault.default.ItemText,
    Divider: _dropdownDefault.default.Divider,
    Header: _dropdownDefault.default.Header
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./Dropdown":"dHYfj","./NavLink":"3BFyZ","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hmy64":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _overlay = require("@restart/ui/Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _useOverlayOffset = require("./useOverlayOffset");
var _useOverlayOffsetDefault = parcelHelpers.interopDefault(_useOverlayOffset);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    transition: _fadeDefault.default,
    rootClose: false,
    show: false,
    placement: 'top'
};
function wrapRefs(props, arrowProps) {
    var ref = props.ref;
    var aRef = arrowProps.ref;
    props.ref = ref.__wrapped || (ref.__wrapped = function(r) {
        return ref(_safeFindDOMNodeDefault.default(r));
    });
    arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = function(r) {
        return aRef(_safeFindDOMNodeDefault.default(r));
    });
}
var Overlay = /*#__PURE__*/ _react.forwardRef(function(_param, outerRef) {
    var overlay = _param.children, transition = _param.transition, tmp = _param.popperConfig, popperConfig = tmp === void 0 ? {
    } : tmp, outerProps = _helpers.objectWithoutProperties(_param, [
        "children",
        "transition",
        "popperConfig"
    ]);
    var popperRef = _react.useRef({
    });
    var ref = _helpers.slicedToArray(_useOverlayOffsetDefault.default(), 2), ref1 = ref[0], modifiers = ref[1];
    var mergedRef = _useMergedRefsDefault.default(outerRef, ref1);
    var actualTransition = transition === true ? _fadeDefault.default : transition || undefined;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_overlayDefault.default, _helpers.objectSpread({
    }, outerProps, {
        ref: mergedRef,
        popperConfig: _helpers.objectSpread({
        }, popperConfig, {
            modifiers: modifiers.concat(popperConfig.modifiers || [])
        }),
        transition: actualTransition,
        children: function(overlayProps, param) {
            var arrowProps = param.arrowProps, popperObj = param.popper, show = param.show;
            var _popperObj$state, _popperObj$state$modi;
            wrapRefs(overlayProps, arrowProps); // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop
            var updatedPlacement = popperObj == null ? void 0 : popperObj.placement;
            var popper = Object.assign(popperRef.current, {
                state: popperObj == null ? void 0 : popperObj.state,
                scheduleUpdate: popperObj == null ? void 0 : popperObj.update,
                placement: updatedPlacement,
                outOfBoundaries: (popperObj == null ? void 0 : (_popperObj$state = popperObj.state) == null ? void 0 : (_popperObj$state$modi = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state$modi.isReferenceHidden) || false
            });
            if (typeof overlay === 'function') return overlay(_helpers.objectSpread({
            }, overlayProps, {
                placement: updatedPlacement,
                show: show
            }, !transition && show && {
                className: 'show'
            }, {
                popper: popper,
                arrowProps: arrowProps
            }));
            return(/*#__PURE__*/ _react.cloneElement(overlay, _helpers.objectSpread({
            }, overlayProps, {
                placement: updatedPlacement,
                arrowProps: arrowProps,
                popper: popper,
                className: _classnamesDefault.default(overlay.props.className, !transition && show && 'show'),
                style: _helpers.objectSpread({
                }, overlay.props.style, overlayProps.style)
            })));
        }
    })));
});
Overlay.displayName = 'Overlay';
Overlay.defaultProps = defaultProps;
exports.default = Overlay;

},{"@swc/helpers":"cawJ1","react":"kEcQC","classnames":"eflpt","@restart/ui/Overlay":"zEXaG","@restart/hooks/useMergedRefs":"bbv4J","./useOverlayOffset":"jJUJa","./Fade":"4nlBx","./safeFindDOMNode":"8srVe","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"zEXaG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _usePopper = require("./usePopper");
var _usePopperDefault = parcelHelpers.interopDefault(_usePopper);
var _useRootClose = require("./useRootClose");
var _useRootCloseDefault = parcelHelpers.interopDefault(_useRootClose);
var _useWaitForDOMRef = require("./useWaitForDOMRef");
var _useWaitForDOMRefDefault = parcelHelpers.interopDefault(_useWaitForDOMRef);
var _mergeOptionsWithPopperConfig = require("./mergeOptionsWithPopperConfig");
var _mergeOptionsWithPopperConfigDefault = parcelHelpers.interopDefault(_mergeOptionsWithPopperConfig);
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Built on top of `Popper.js`, the overlay component is
 * great for custom tooltip overlays.
 */ var Overlay = /*#__PURE__*/ _react.forwardRef(function(props, outerRef) {
    var flip = props.flip, offset = props.offset, placement = props.placement, containerPadding = props.containerPadding, _popperConfig = props.popperConfig, popperConfig = _popperConfig === void 0 ? {
    } : _popperConfig, Transition = props.transition;
    var ref = _helpers.slicedToArray(_useCallbackRefDefault.default(), 2), rootElement = ref[0], attachRef = ref[1];
    var ref1 = _helpers.slicedToArray(_useCallbackRefDefault.default(), 2), arrowElement = ref1[0], attachArrowRef = ref1[1];
    var mergedRef = _useMergedRefsDefault.default(attachRef, outerRef);
    var container = _useWaitForDOMRefDefault.default(props.container);
    var target = _useWaitForDOMRefDefault.default(props.target);
    var ref2 = _helpers.slicedToArray(_react.useState(!props.show), 2), exited = ref2[0], setExited = ref2[1];
    var popper = _usePopperDefault.default(target, rootElement, _mergeOptionsWithPopperConfigDefault.default({
        placement: placement,
        enableEvents: !!props.show,
        containerPadding: containerPadding || 5,
        flip: flip,
        offset: offset,
        arrowElement: arrowElement,
        popperConfig: popperConfig
    }));
    if (props.show) {
        if (exited) setExited(false);
    } else if (!props.transition && !exited) setExited(true);
    var handleHidden = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var _props;
        setExited(true);
        if (props.onExited) (_props = props).onExited.apply(_props, _helpers.toConsumableArray(args));
    }; // Don't un-render the overlay while it's transitioning out.
    var mountOverlay = props.show || Transition && !exited;
    _useRootCloseDefault.default(rootElement, props.onHide, {
        disabled: !props.rootClose || props.rootCloseDisabled,
        clickTrigger: props.rootCloseEvent
    });
    if (!mountOverlay) // Don't bother showing anything if we don't have to.
    return null;
    var child = props.children(Object.assign({
    }, popper.attributes.popper, {
        style: popper.styles.popper,
        ref: mergedRef
    }), {
        popper: popper,
        placement: placement,
        show: !!props.show,
        arrowProps: Object.assign({
        }, popper.attributes.arrow, {
            style: popper.styles.arrow,
            ref: attachArrowRef
        })
    });
    if (Transition) {
        var onExit = props.onExit, onExiting = props.onExiting, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered;
        child = /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
            in: props.show,
            appear: true,
            onExit: onExit,
            onExiting: onExiting,
            onExited: handleHidden,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            children: child
        });
    }
    return container ? /*#__PURE__*/ _reactDomDefault.default.createPortal(child, container) : null;
});
Overlay.displayName = 'Overlay';
exports.default = Overlay;

},{"@swc/helpers":"cawJ1","react":"kEcQC","react-dom":"6cUDX","@restart/hooks/useCallbackRef":"7m4Rf","@restart/hooks/useMergedRefs":"bbv4J","./usePopper":"ese59","./useRootClose":"enzTs","./useWaitForDOMRef":"gojpw","./mergeOptionsWithPopperConfig":"7iDwF","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jJUJa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _hasClass = require("dom-helpers/hasClass");
var _hasClassDefault = parcelHelpers.interopDefault(_hasClass);
var _themeProvider = require("./ThemeProvider");
var _popover = require("./Popover"); // This is meant for internal use.
var _popoverDefault = parcelHelpers.interopDefault(_popover);
function useOverlayOffset() {
    var overlayRef = _react.useRef(null);
    var popoverClass = _themeProvider.useBootstrapPrefix(undefined, 'popover');
    var offset = _react.useMemo(function() {
        return {
            name: 'offset',
            options: {
                offset: function() {
                    if (overlayRef.current && _hasClassDefault.default(overlayRef.current, popoverClass)) return _popoverDefault.default.POPPER_OFFSET;
                    return [
                        0,
                        0
                    ];
                }
            }
        };
    }, [
        popoverClass
    ]);
    return [
        overlayRef,
        [
            offset
        ]
    ];
}
exports.default = useOverlayOffset;

},{"react":"kEcQC","dom-helpers/hasClass":"1QLl9","./ThemeProvider":"7HSML","./Popover":"2nEpR","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2nEpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _popoverHeader = require("./PopoverHeader");
var _popoverHeaderDefault = parcelHelpers.interopDefault(_popoverHeader);
var _popoverBody = require("./PopoverBody");
var _popoverBodyDefault = parcelHelpers.interopDefault(_popoverBody);
var _helpers1 = require("./helpers");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    placement: 'right'
};
var Popover = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, placement = _param.placement, className = _param.className, style = _param.style, children = _param.children, body = _param.body, arrowProps = _param.arrowProps, _ = _param.popper, _1 = _param.show, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "placement",
        "className",
        "style",
        "children",
        "body",
        "arrowProps",
        "popper",
        "show"
    ]);
    var decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'popover');
    var isRTL = _themeProvider.useIsRTL();
    var ref1 = _helpers.slicedToArray((placement == null ? void 0 : placement.split('-')) || [], 1), primaryPlacement = ref1[0];
    var bsDirection = _helpers1.getOverlayDirection(primaryPlacement, isRTL);
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", _helpers.objectSpread({
        ref: ref,
        role: "tooltip",
        style: style,
        "x-placement": primaryPlacement,
        className: _classnamesDefault.default(className, decoratedBsPrefix, primaryPlacement && "bs-popover-".concat(bsDirection))
    }, props, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
                className: "popover-arrow"
            }, arrowProps)),
            body ? /*#__PURE__*/ _jsxRuntime.jsx(_popoverBodyDefault.default, {
                children: children
            }) : children
        ]
    })));
});
Popover.defaultProps = defaultProps;
exports.default = Object.assign(Popover, {
    Header: _popoverHeaderDefault.default,
    Body: _popoverBodyDefault.default,
    // Default popover offset.
    // https://github.com/twbs/bootstrap/blob/5c32767e0e0dbac2d934bcdee03719a65d3f1187/js/src/popover.js#L28
    POPPER_OFFSET: [
        0,
        8
    ]
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./PopoverHeader":"kArwz","./PopoverBody":"jSUYZ","./helpers":"eRl0j","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kArwz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('popover-header');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jSUYZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('popover-body');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eRl0j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BsPrefixComponent", function() {
    return BsPrefixComponent;
});
parcelHelpers.export(exports, "getOverlayDirection", function() {
    return getOverlayDirection;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var BsPrefixComponent = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(BsPrefixComponent, _Component);
    var _super = _helpers.createSuper(BsPrefixComponent);
    function BsPrefixComponent() {
        _helpers.classCallCheck(this, BsPrefixComponent);
        return _super.apply(this, arguments);
    }
    return BsPrefixComponent;
} // Need to use this instead of typeof Component to get proper type checking.
(_react.Component);
function getOverlayDirection(placement, isRTL) {
    var bsDirection = placement;
    if (placement === 'left') bsDirection = isRTL ? 'end' : 'start';
    else if (placement === 'right') bsDirection = isRTL ? 'start' : 'end';
    return bsDirection;
}

},{"@swc/helpers":"cawJ1","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bPQ3i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _react = require("react");
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _uncontrollable = require("uncontrollable");
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _overlay = require("./Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
function normalizeDelay(delay) {
    return delay && typeof delay === 'object' ? delay : {
        show: delay,
        hide: delay
    };
} // Simple implementation of mouseEnter and mouseLeave.
// React's built version is broken: https://github.com/facebook/react/issues/4251
// for cases when the trigger is disabled and mouseOut/Over can cause flicker
// moving from one child element to another.
function handleMouseOverOut(handler, args, relatedNative) {
    var _args = _helpers.slicedToArray(args, 1), e = _args[0];
    var target = e.currentTarget;
    var related = e.relatedTarget || e.nativeEvent[relatedNative];
    if ((!related || related !== target) && !_containsDefault.default(target, related)) handler.apply(void 0, _helpers.toConsumableArray(args));
}
var defaultProps = {
    defaultShow: false,
    trigger: [
        'hover',
        'focus'
    ]
};
function OverlayTrigger(_param) {
    var trigger = _param.trigger, overlay = _param.overlay, children = _param.children, _popperConfig = _param.popperConfig, popperConfig = _popperConfig === void 0 ? {
    } : _popperConfig, propsShow = _param.show, _defaultShow = _param.defaultShow, defaultShow = _defaultShow === void 0 ? false : _defaultShow, onToggle = _param.onToggle, propsDelay = _param.delay, placement = _param.placement, _flip = _param.flip, flip = _flip === void 0 ? placement && placement.indexOf('auto') !== -1 : _flip, props = _helpers.objectWithoutProperties(_param, [
        "trigger",
        "overlay",
        "children",
        "popperConfig",
        "show",
        "defaultShow",
        "onToggle",
        "delay",
        "placement",
        "flip"
    ]);
    var triggerNodeRef = _react.useRef(null);
    var mergedRef = _useMergedRefsDefault.default(triggerNodeRef, children.ref);
    var timeout = _useTimeoutDefault.default();
    var hoverStateRef = _react.useRef('');
    var ref = _helpers.slicedToArray(_uncontrollable.useUncontrolledProp(propsShow, defaultShow, onToggle), 2), show = ref[0], setShow = ref[1];
    var delay = normalizeDelay(propsDelay);
    var ref1 = typeof children !== 'function' ? _react.Children.only(children).props : {
    }, onFocus = ref1.onFocus, onBlur = ref1.onBlur, onClick = ref1.onClick;
    var attachRef = function(r) {
        mergedRef(_safeFindDOMNodeDefault.default(r));
    };
    var handleShow = _react.useCallback(function() {
        timeout.clear();
        hoverStateRef.current = 'show';
        if (!delay.show) {
            setShow(true);
            return;
        }
        timeout.set(function() {
            if (hoverStateRef.current === 'show') setShow(true);
        }, delay.show);
    }, [
        delay.show,
        setShow,
        timeout
    ]);
    var handleHide = _react.useCallback(function() {
        timeout.clear();
        hoverStateRef.current = 'hide';
        if (!delay.hide) {
            setShow(false);
            return;
        }
        timeout.set(function() {
            if (hoverStateRef.current === 'hide') setShow(false);
        }, delay.hide);
    }, [
        delay.hide,
        setShow,
        timeout
    ]);
    var handleFocus = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        handleShow();
        onFocus == null || onFocus.apply(void 0, _helpers.toConsumableArray(args));
    }, [
        handleShow,
        onFocus
    ]);
    var handleBlur = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        handleHide();
        onBlur == null || onBlur.apply(void 0, _helpers.toConsumableArray(args));
    }, [
        handleHide,
        onBlur
    ]);
    var handleClick = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        setShow(!show);
        onClick == null || onClick.apply(void 0, _helpers.toConsumableArray(args));
    }, [
        onClick,
        setShow,
        show
    ]);
    var handleMouseOver = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        handleMouseOverOut(handleShow, args, 'fromElement');
    }, [
        handleShow
    ]);
    var handleMouseOut = _react.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        handleMouseOverOut(handleHide, args, 'toElement');
    }, [
        handleHide
    ]);
    var triggers = trigger == null ? [] : [].concat(trigger);
    var triggerProps = {
        ref: attachRef
    };
    if (triggers.indexOf('click') !== -1) triggerProps.onClick = handleClick;
    if (triggers.indexOf('focus') !== -1) {
        triggerProps.onFocus = handleFocus;
        triggerProps.onBlur = handleBlur;
    }
    if (triggers.indexOf('hover') !== -1) {
        _warningDefault.default(triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');
        triggerProps.onMouseOver = handleMouseOver;
        triggerProps.onMouseOut = handleMouseOut;
    }
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
        children: [
            typeof children === 'function' ? children(triggerProps) : /*#__PURE__*/ _react.cloneElement(children, triggerProps),
            /*#__PURE__*/ _jsxRuntime.jsx(_overlayDefault.default, _helpers.objectSpread({
            }, props, {
                show: show,
                onHide: handleHide,
                flip: flip,
                placement: placement,
                popperConfig: popperConfig,
                target: triggerNodeRef.current,
                children: overlay
            }))
        ]
    }));
}
OverlayTrigger.defaultProps = defaultProps;
exports.default = OverlayTrigger;

},{"@swc/helpers":"cawJ1","dom-helpers/contains":"ZRkd1","react":"kEcQC","@restart/hooks/useTimeout":"2b87S","warning":"eUQJb","uncontrollable":"3QjJi","@restart/hooks/useMergedRefs":"bbv4J","./Overlay":"hmy64","./safeFindDOMNode":"8srVe","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"4ijK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "First", function() {
    return First;
});
parcelHelpers.export(exports, "Prev", function() {
    return Prev;
});
parcelHelpers.export(exports, "Ellipsis", function() {
    return Ellipsis;
});
parcelHelpers.export(exports, "Next", function() {
    return Next;
});
parcelHelpers.export(exports, "Last", function() {
    return Last;
});
var _helpers = require("@swc/helpers");
/* eslint-disable react/no-multi-comp */ var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    active: false,
    disabled: false,
    activeLabel: '(current)'
};
var PageItem = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var active = _param.active, disabled = _param.disabled, className = _param.className, style = _param.style, activeLabel = _param.activeLabel, children = _param.children, props = _helpers.objectWithoutProperties(_param, [
        "active",
        "disabled",
        "className",
        "style",
        "activeLabel",
        "children"
    ]);
    var Component = active || disabled ? 'span' : _anchorDefault.default;
    return(/*#__PURE__*/ _jsxRuntime.jsx("li", {
        ref: ref,
        style: style,
        className: _classnamesDefault.default(className, 'page-item', {
            active: active,
            disabled: disabled
        }),
        children: /*#__PURE__*/ _jsxRuntime.jsxs(Component, _helpers.objectSpread({
            className: "page-link",
            disabled: disabled
        }, props, {
            children: [
                children,
                active && activeLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: activeLabel
                })
            ]
        }))
    }));
});
PageItem.defaultProps = defaultProps;
PageItem.displayName = 'PageItem';
exports.default = PageItem;
function createButton(name, defaultValue) {
    var label = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : name;
    function Button(_param) {
        var children = _param.children, props = _helpers.objectWithoutProperties(_param, [
            "children"
        ]);
        return(/*#__PURE__*/ _jsxRuntime.jsxs(PageItem, _helpers.objectSpread({
        }, props, {
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    "aria-hidden": "true",
                    children: children || defaultValue
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: label
                })
            ]
        })));
    }
    Button.displayName = name;
    return Button;
}
var First = createButton('First', '«');
var Prev = createButton('Prev', '‹', 'Previous');
var Ellipsis = createButton('Ellipsis', '…', 'More');
var Next = createButton('Next', '›');
var Last = createButton('Last', '»');

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/Anchor":"8XIew","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kgOxM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _pageItem = require("./PageItem");
var _pageItemDefault = parcelHelpers.interopDefault(_pageItem);
var _jsxRuntime = require("react/jsx-runtime");
/**
 * @property {PageItem} Item
 * @property {PageItem} First
 * @property {PageItem} Prev
 * @property {PageItem} Ellipsis
 * @property {PageItem} Next
 * @property {PageItem} Last
 */ var Pagination = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, size = _param.size, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "size"
    ]);
    var decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'pagination');
    return(/*#__PURE__*/ _jsxRuntime.jsx("ul", _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, decoratedBsPrefix, size && "".concat(decoratedBsPrefix, "-").concat(size))
    })));
});
Pagination.displayName = 'Pagination';
exports.default = Object.assign(Pagination, {
    First: _pageItem.First,
    Prev: _pageItem.Prev,
    Ellipsis: _pageItem.Ellipsis,
    Item: _pageItemDefault.default,
    Next: _pageItem.Next,
    Last: _pageItem.Last
});

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./PageItem":"4ijK9","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"eEXtK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _usePlaceholder = require("./usePlaceholder");
var _usePlaceholderDefault = parcelHelpers.interopDefault(_usePlaceholder);
var _placeholderButton = require("./PlaceholderButton");
var _placeholderButtonDefault = parcelHelpers.interopDefault(_placeholderButton);
var _jsxRuntime = require("react/jsx-runtime");
var Placeholder = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.as, Component = tmp === void 0 ? 'span' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "as"
    ]);
    var placeholderProps = _usePlaceholderDefault.default(props);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, placeholderProps, {
        ref: ref
    })));
});
Placeholder.displayName = 'Placeholder';
exports.default = Object.assign(Placeholder, {
    Button: _placeholderButtonDefault.default
});

},{"@swc/helpers":"cawJ1","react":"kEcQC","./usePlaceholder":"bTsoU","./PlaceholderButton":"5SzMV","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bTsoU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _themeProvider = require("./ThemeProvider");
var _col = require("./Col");
function usePlaceholder(_param) {
    var animation = _param.animation, bg = _param.bg, bsPrefix = _param.bsPrefix, size = _param.size, props = _helpers.objectWithoutProperties(_param, [
        "animation",
        "bg",
        "bsPrefix",
        "size"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'placeholder');
    var _ref = _col.useCol(props), __ref = _helpers.slicedToArray(_ref, 1), className = __ref[0].className, colProps = _helpers.objectWithoutProperties(_ref[0], [
        "className"
    ]);
    return _helpers.objectSpread({
    }, colProps, {
        className: _classnamesDefault.default(className, animation ? "".concat(bsPrefix, "-").concat(animation) : bsPrefix, size && "".concat(bsPrefix, "-").concat(size), bg && "bg-".concat(bg))
    });
}
exports.default = usePlaceholder;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","./ThemeProvider":"7HSML","./Col":"1YyUj","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5SzMV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _usePlaceholder = require("./usePlaceholder");
var _usePlaceholderDefault = parcelHelpers.interopDefault(_usePlaceholder);
var _jsxRuntime = require("react/jsx-runtime");
var PlaceholderButton = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var placeholderProps = _usePlaceholderDefault.default(props);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, _helpers.objectSpread({
    }, placeholderProps, {
        ref: ref,
        disabled: true,
        tabIndex: -1
    })));
});
PlaceholderButton.displayName = 'PlaceholderButton';
exports.default = PlaceholderButton;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./Button":"5vnhO","./usePlaceholder":"bTsoU","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"29eqb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _elementChildren = require("./ElementChildren");
var _jsxRuntime = require("react/jsx-runtime");
var ROUND_PRECISION = 1000;
/**
 * Validate that children, if any, are instances of `<ProgressBar>`.
 */ function onlyProgressBar(props, propName, componentName) {
    var children = props[propName];
    if (!children) return null;
    var error = null;
    _react.Children.forEach(children, function(child) {
        if (error) return;
        /**
     * Compare types in a way that works with libraries that patch and proxy
     * components like react-hot-loader.
     *
     * see https://github.com/gaearon/react-hot-loader#checking-element-types
     */ // eslint-disable-next-line @typescript-eslint/no-use-before-define
        var element = /*#__PURE__*/ _jsxRuntime.jsx(ProgressBar, {
        });
        if (child.type === element.type) return;
        var childType = child.type;
        var childIdentifier = /*#__PURE__*/ _react.isValidElement(child) ? childType.displayName || childType.name || childType : child;
        error = new Error("Children of ".concat(componentName, " can contain only ProgressBar ") + "components. Found ".concat(childIdentifier, "."));
    });
    return error;
}
var defaultProps = {
    min: 0,
    max: 100,
    animated: false,
    isChild: false,
    visuallyHidden: false,
    striped: false
};
function getPercentage(now, min, max) {
    var percentage = (now - min) / (max - min) * 100;
    return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar(_param, ref) {
    var min = _param.min, now = _param.now, max = _param.max, label = _param.label, visuallyHidden = _param.visuallyHidden, striped = _param.striped, animated = _param.animated, className = _param.className, style = _param.style, variant = _param.variant, bsPrefix = _param.bsPrefix, props = _helpers.objectWithoutProperties(_param, [
        "min",
        "now",
        "max",
        "label",
        "visuallyHidden",
        "striped",
        "animated",
        "className",
        "style",
        "variant",
        "bsPrefix"
    ]);
    var _obj;
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
        ref: ref
    }, props, {
        role: "progressbar",
        className: _classnamesDefault.default(className, "".concat(bsPrefix, "-bar"), (_obj = {
        }, _helpers.defineProperty(_obj, "bg-".concat(variant), variant), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-bar-animated"), animated), _helpers.defineProperty(_obj, "".concat(bsPrefix, "-bar-striped"), animated || striped), _obj)),
        style: _helpers.objectSpread({
            width: "".concat(getPercentage(now, min, max), "%")
        }, style),
        "aria-valuenow": now,
        "aria-valuemin": min,
        "aria-valuemax": max,
        children: visuallyHidden ? /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: "visually-hidden",
            children: label
        }) : label
    })));
}
var ProgressBar = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var isChild = _param.isChild, props = _helpers.objectWithoutProperties(_param, [
        "isChild"
    ]);
    props.bsPrefix = _themeProvider.useBootstrapPrefix(props.bsPrefix, 'progress');
    if (isChild) return renderProgressBar(props, ref);
    var min = props.min, now = props.now, max = props.max, label = props.label, visuallyHidden = props.visuallyHidden, striped = props.striped, animated = props.animated, bsPrefix = props.bsPrefix, variant = props.variant, className = props.className, children = props.children, wrapperProps = _helpers.objectWithoutProperties(props, [
        "min",
        "now",
        "max",
        "label",
        "visuallyHidden",
        "striped",
        "animated",
        "bsPrefix",
        "variant",
        "className",
        "children"
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
        ref: ref
    }, wrapperProps, {
        className: _classnamesDefault.default(className, bsPrefix),
        children: children ? _elementChildren.map(children, function(child) {
            /*#__PURE__*/ return _react.cloneElement(child, {
                isChild: true
            });
        }) : renderProgressBar({
            min: min,
            now: now,
            max: max,
            label: label,
            visuallyHidden: visuallyHidden,
            striped: striped,
            animated: animated,
            bsPrefix: bsPrefix,
            variant: variant
        }, ref)
    })));
});
ProgressBar.displayName = 'ProgressBar';
ProgressBar.defaultProps = defaultProps;
exports.default = ProgressBar;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./ElementChildren":"3fvsy","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"832eS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    aspectRatio: '1x1'
};
function toPercent(num) {
    if (num <= 0 || num > 100) return '100%';
    if (num < 1) return "".concat(num * 100, "%");
    return "".concat(num, "%");
}
var Ratio = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, children = _param.children, aspectRatio = _param.aspectRatio, style = _param.style, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "children",
        "aspectRatio",
        "style"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'ratio');
    var isCustomRatio = typeof aspectRatio === 'number';
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
        ref: ref
    }, props, {
        style: _helpers.objectSpread({
        }, style, isCustomRatio && {
            '--bs-aspect-ratio': toPercent(aspectRatio)
        }),
        className: _classnamesDefault.default(bsPrefix, className, !isCustomRatio && "".concat(bsPrefix, "-").concat(aspectRatio)),
        children: _react.Children.only(children)
    })));
});
Ratio.defaultProps = defaultProps;
exports.default = Ratio;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"fOw3u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
var Row = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "as"
    ]);
    var decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'row');
    var sizePrefix = "".concat(decoratedBsPrefix, "-cols");
    var classes = [];
    DEVICE_SIZES.forEach(function(brkPoint) {
        var propValue = props[brkPoint];
        delete props[brkPoint];
        var cols;
        if (propValue != null && typeof propValue === 'object') cols = propValue.cols;
        else cols = propValue;
        var infix = brkPoint !== 'xs' ? "-".concat(brkPoint) : '';
        if (cols != null) classes.push("".concat(sizePrefix).concat(infix, "-").concat(cols));
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default.apply(void 0, [
            className,
            decoratedBsPrefix
        ].concat(_helpers.toConsumableArray(classes)))
    })));
});
Row.displayName = 'Row';
exports.default = Row;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"9x782":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var Spinner = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, variant = _param.variant, animation = _param.animation, size = _param.size, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, className = _param.className, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "variant",
        "animation",
        "size",
        "as",
        "className"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'spinner');
    var bsSpinnerPrefix = "".concat(bsPrefix, "-").concat(animation);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(className, bsSpinnerPrefix, size && "".concat(bsSpinnerPrefix, "-").concat(size), variant && "text-".concat(variant))
    })));
});
Spinner.displayName = 'Spinner';
exports.default = Spinner;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lKRiD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
var propTypes = {
    /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string}
   * @required
   */ id: _propTypesDefault.default.string,
    /**
   * Accessible label for the toggle; the value of `title` if not specified.
   */ toggleLabel: _propTypesDefault.default.string,
    /** An `href` passed to the non-toggle Button */ href: _propTypesDefault.default.string,
    /** An anchor `target` passed to the non-toggle Button */ target: _propTypesDefault.default.string,
    /** An `onClick` handler passed to the non-toggle Button */ onClick: _propTypesDefault.default.func,
    /** The content of the non-toggle Button.  */ title: _propTypesDefault.default.node.isRequired,
    /** A `type` passed to the non-toggle Button */ type: _propTypesDefault.default.string,
    /** Disables both Buttons  */ disabled: _propTypesDefault.default.bool,
    /**
   * Aligns the dropdown menu.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
   */ align: _types.alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */ menuRole: _propTypesDefault.default.string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */ renderMenuOnMount: _propTypesDefault.default.bool,
    /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */ rootCloseEvent: _propTypesDefault.default.string,
    /** @ignore */ bsPrefix: _propTypesDefault.default.string,
    /** @ignore */ variant: _propTypesDefault.default.string,
    /** @ignore */ size: _propTypesDefault.default.string
};
var defaultProps = {
    toggleLabel: 'Toggle dropdown',
    type: 'button'
};
/**
 * A convenience component for simple or general use split button dropdowns. Renders a
 * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s
 * props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._
 * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,
 * and menu-related props are passed to the `Dropdown.Menu`
 */ var SplitButton = /*#__PURE__*/ _react.forwardRef(function(_param, ref) /*#__PURE__*/ {
    var id = _param.id, bsPrefix = _param.bsPrefix, size = _param.size, variant = _param.variant, title = _param.title, type = _param.type, toggleLabel = _param.toggleLabel, children = _param.children, onClick = _param.onClick, href = _param.href, target = _param.target, menuRole = _param.menuRole, renderMenuOnMount = _param.renderMenuOnMount, rootCloseEvent = _param.rootCloseEvent, props = _helpers.objectWithoutProperties(_param, [
        "id",
        "bsPrefix",
        "size",
        "variant",
        "title",
        "type",
        "toggleLabel",
        "children",
        "onClick",
        "href",
        "target",
        "menuRole",
        "renderMenuOnMount",
        "rootCloseEvent"
    ]);
    return _jsxRuntime.jsxs(_dropdownDefault.default, _helpers.objectSpread({
        ref: ref
    }, props, {
        as: _buttonGroupDefault.default,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, {
                size: size,
                variant: variant,
                disabled: props.disabled,
                bsPrefix: bsPrefix,
                href: href,
                target: target,
                onClick: onClick,
                type: type,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Toggle, {
                split: true,
                id: id,
                size: size,
                variant: variant,
                disabled: props.disabled,
                childBsPrefix: bsPrefix,
                children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: toggleLabel
                })
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Menu, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                children: children
            })
        ]
    }));
});
SplitButton.propTypes = propTypes;
SplitButton.defaultProps = defaultProps;
SplitButton.displayName = 'SplitButton';
exports.default = SplitButton;

},{"@swc/helpers":"cawJ1","react":"kEcQC","prop-types":"h9rZg","./Button":"5vnhO","./ButtonGroup":"dqjqa","./Dropdown":"dHYfj","./types":"bnk26","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"1nzqf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ssr = require("@restart/ui/ssr");
exports.default = _ssr.SSRProvider;

},{"@restart/ui/ssr":"71Gd6","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lyQJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _createUtilityClasses = require("./createUtilityClasses");
var _createUtilityClassesDefault = parcelHelpers.interopDefault(_createUtilityClasses);
var _jsxRuntime = require("react/jsx-runtime");
var Stack = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var tmp = _param.as, Component = tmp === void 0 ? 'div' : tmp, bsPrefix = _param.bsPrefix, className = _param.className, direction = _param.direction, gap = _param.gap, props = _helpers.objectWithoutProperties(_param, [
        "as",
        "bsPrefix",
        "className",
        "direction",
        "gap"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, direction === 'horizontal' ? 'hstack' : 'vstack');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default.apply(void 0, [
            className,
            bsPrefix
        ].concat(_helpers.toConsumableArray(_createUtilityClassesDefault.default({
            gap: gap
        }))))
    })));
});
Stack.displayName = 'Stack';
exports.default = Stack;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./createUtilityClasses":"kvcyj","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"kvcyj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "responsivePropType", function() {
    return responsivePropType;
});
parcelHelpers.export(exports, "DEVICE_SIZES", function() {
    return DEVICE_SIZES;
});
var _helpers = require("@swc/helpers");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
function responsivePropType(propType) {
    return _propTypesDefault.default.oneOfType([
        propType,
        _propTypesDefault.default.shape({
            xs: propType,
            sm: propType,
            md: propType,
            lg: propType,
            xl: propType,
            xxl: propType
        })
    ]);
}
var DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
function createUtilityClassName(utilityValues) {
    var classes = [];
    Object.entries(utilityValues).forEach(function(param) {
        var _param = _helpers.slicedToArray(param, 2), utilName = _param[0], utilValue = _param[1];
        if (utilValue != null) {
            if (typeof utilValue === 'object') DEVICE_SIZES.forEach(function(brkPoint) {
                var bpValue = utilValue[brkPoint];
                if (bpValue != null) {
                    var infix = brkPoint !== 'xs' ? "-".concat(brkPoint) : '';
                    classes.push("".concat(utilName).concat(infix, "-").concat(bpValue));
                }
            });
            else classes.push("".concat(utilName, "-").concat(utilValue));
        }
    });
    return classes;
}
exports.default = createUtilityClassName;

},{"@swc/helpers":"cawJ1","prop-types":"h9rZg","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hRJFx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _tabContainer = require("./TabContainer");
var _tabContainerDefault = parcelHelpers.interopDefault(_tabContainer);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _jsxRuntime = require("react/jsx-runtime");
/* eslint-disable react/no-unused-prop-types */ var propTypes = {
    eventKey: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.number
    ]),
    /**
   * Content for the tab title.
   */ title: _propTypesDefault.default.node.isRequired,
    /**
   * The disabled state of the tab.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Class to pass to the underlying nav link.
   */ tabClassName: _propTypesDefault.default.string
};
var Tab = function() {
    throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly"); // Needed otherwise docs error out.
};
Tab.propTypes = propTypes;
exports.default = Object.assign(Tab, {
    Container: _tabContainerDefault.default,
    Content: _tabContentDefault.default,
    Pane: _tabPaneDefault.default
});

},{"prop-types":"h9rZg","react":"kEcQC","./TabContainer":"lAq6n","./TabContent":"bBmYU","./TabPane":"YnuWW","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lAq6n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _tabs = require("@restart/ui/Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
var TabContainer = function(_param) /*#__PURE__*/ {
    var transition = _param.transition, props = _helpers.objectWithoutProperties(_param, [
        "transition"
    ]);
    return _jsxRuntime.jsx(_tabsDefault.default, _helpers.objectSpread({
    }, props, {
        transition: _getTabTransitionComponentDefault.default(transition)
    }));
};
TabContainer.displayName = 'TabContainer';
exports.default = TabContainer;

},{"@swc/helpers":"cawJ1","react":"kEcQC","@restart/ui/Tabs":"bNlSp","./getTabTransitionComponent":"hreeC","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bNlSp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _ssr = require("./ssr");
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabPanel = require("./TabPanel");
var _tabPanelDefault = parcelHelpers.interopDefault(_tabPanel);
var _jsxRuntime = require("react/jsx-runtime");
var Tabs = function(props) {
    var userId = props.id, generateCustomChildId = props.generateChildId, propsOnSelect = props.onSelect, propsActiveKey = props.activeKey, defaultActiveKey = props.defaultActiveKey, transition = props.transition, mountOnEnter = props.mountOnEnter, unmountOnExit = props.unmountOnExit, children = props.children;
    var ref = _helpers.slicedToArray(_uncontrollable.useUncontrolledProp(propsActiveKey, defaultActiveKey, propsOnSelect), 2), activeKey = ref[0], onSelect = ref[1];
    var id = _ssr.useSSRSafeId(userId);
    var generateChildId = _react.useMemo(function() {
        return generateCustomChildId || function(key, type) {
            return id ? "".concat(id, "-").concat(type, "-").concat(key) : null;
        };
    }, [
        id,
        generateCustomChildId
    ]);
    var tabContext = _react.useMemo(function() {
        return {
            onSelect: onSelect,
            activeKey: activeKey,
            transition: transition,
            mountOnEnter: mountOnEnter || false,
            unmountOnExit: unmountOnExit || false,
            getControlledId: function(key) {
                return generateChildId(key, 'tabpane');
            },
            getControllerId: function(key) {
                return generateChildId(key, 'tab');
            }
        };
    }, [
        onSelect,
        activeKey,
        transition,
        mountOnEnter,
        unmountOnExit,
        generateChildId
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: tabContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: onSelect || null,
            children: children
        })
    }));
};
Tabs.Panel = _tabPanelDefault.default;
exports.default = Tabs;

},{"@swc/helpers":"cawJ1","react":"kEcQC","uncontrollable":"3QjJi","./ssr":"71Gd6","./TabContext":"7fOQu","./SelectableContext":"497xu","./TabPanel":"15xl2","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"15xl2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTabPanel", function() {
    return useTabPanel;
});
var _helpers = require("@swc/helpers");
var _react = require("react");
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _noopTransition = require("./NoopTransition");
var _noopTransitionDefault = parcelHelpers.interopDefault(_noopTransition);
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = [
    "active",
    "eventKey",
    "mountOnEnter",
    "transition",
    "unmountOnExit"
], _excluded2 = [
    "activeKey",
    "getControlledId",
    "getControllerId"
], _excluded3 = [
    "as"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useTabPanel(_ref) {
    var active = _ref.active, eventKey = _ref.eventKey, mountOnEnter = _ref.mountOnEnter, transition = _ref.transition, unmountOnExit = _ref.unmountOnExit, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var context = _react.useContext(_tabContextDefault.default);
    if (!context) return [
        props,
        {
            eventKey: eventKey,
            isActive: active,
            mountOnEnter: mountOnEnter,
            transition: transition,
            unmountOnExit: unmountOnExit
        }
    ];
    var activeKey = context.activeKey, getControlledId = context.getControlledId, getControllerId = context.getControllerId, rest = _objectWithoutPropertiesLoose(context, _excluded2);
    var key = _selectableContext.makeEventKey(eventKey);
    return [
        Object.assign({
        }, props, {
            id: getControlledId(eventKey),
            'aria-labelledby': getControllerId(eventKey)
        }),
        {
            eventKey: eventKey,
            isActive: active == null && key != null ? _selectableContext.makeEventKey(activeKey) === key : active,
            transition: transition || rest.transition,
            mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,
            unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit
        }
    ];
}
var TabPanel = /*#__PURE__*/ _react.forwardRef(function(_ref2, ref) {
    var tmp = _ref2.as, Component = tmp === void 0 ? 'div' : tmp, props = _objectWithoutPropertiesLoose(_ref2, _excluded3);
    var ref1 = _helpers.slicedToArray(useTabPanel(props), 2), tabPanelProps = ref1[0], ref2 = ref1[1], isActive = ref2.isActive, onEnter = ref2.onEnter, onEntering = ref2.onEntering, onEntered = ref2.onEntered, onExit = ref2.onExit, onExiting = ref2.onExiting, onExited = ref2.onExited, mountOnEnter = ref2.mountOnEnter, unmountOnExit = ref2.unmountOnExit, tmp1 = ref2.transition, Transition = tmp1 === void 0 ? _noopTransitionDefault.default : tmp1; // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't
    // conflict with the top level one.
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: null,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: null,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
                in: isActive,
                onEnter: onEnter,
                onEntering: onEntering,
                onEntered: onEntered,
                onExit: onExit,
                onExiting: onExiting,
                onExited: onExited,
                mountOnEnter: mountOnEnter,
                unmountOnExit: unmountOnExit,
                children: /*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
                }, tabPanelProps, {
                    ref: ref,
                    role: "tabpanel",
                    hidden: !isActive,
                    "aria-hidden": !isActive
                }))
            })
        })
    }));
});
TabPanel.displayName = 'TabPanel';
exports.default = TabPanel;

},{"@swc/helpers":"cawJ1","react":"kEcQC","./TabContext":"7fOQu","./SelectableContext":"497xu","./NoopTransition":"jbSve","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jbSve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function NoopTransition(param) {
    var children = param.children, inProp = param.in, mountOnEnter = param.mountOnEnter, unmountOnExit = param.unmountOnExit;
    var hasEnteredRef = _react.useRef(inProp);
    _react.useEffect(function() {
        if (inProp) hasEnteredRef.current = true;
    }, [
        inProp
    ]);
    if (inProp) return children; // not in
    //
    // if (!mountOnEnter && !unmountOnExit) {
    //   return children;
    // }
    if (unmountOnExit) return null;
    if (!hasEnteredRef.current && mountOnEnter) return null;
    return children;
}
exports.default = NoopTransition;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"hreeC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
function getTabTransitionComponent(transition) {
    if (typeof transition === 'boolean') return transition ? _fadeDefault.default : undefined;
    return transition;
}
exports.default = getTabTransitionComponent;

},{"./Fade":"4nlBx","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"bBmYU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('tab-content');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"YnuWW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _noopTransition = require("@restart/ui/NoopTransition");
var _noopTransitionDefault = parcelHelpers.interopDefault(_noopTransition);
var _selectableContext = require("@restart/ui/SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabContext = require("@restart/ui/TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _tabPanel = require("@restart/ui/TabPanel");
var _themeProvider = require("./ThemeProvider");
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
var TabPane = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, transition = _param.transition, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "transition"
    ]);
    var _ref = _tabPanel.useTabPanel(_helpers.objectSpread({
    }, props, {
        transition: _getTabTransitionComponentDefault.default(transition)
    })), __ref = _helpers.slicedToArray(_ref, 2), ref1 = __ref[0], className = ref1.className, tmp = ref1.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, ref2 = __ref[1], isActive = ref2.isActive, onEnter = ref2.onEnter, onEntering = ref2.onEntering, onEntered = ref2.onEntered, onExit = ref2.onExit, onExiting = ref2.onExiting, onExited = ref2.onExited, mountOnEnter = ref2.mountOnEnter, unmountOnExit = ref2.unmountOnExit, tmp1 = ref2.transition, Transition = tmp1 === void 0 ? _noopTransitionDefault.default : tmp1, rest = _helpers.objectWithoutProperties(_ref[0], [
        "className",
        "as"
    ]);
    var prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't
    // conflict with the top level one.
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: null,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: null,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
                in: isActive,
                onEnter: onEnter,
                onEntering: onEntering,
                onEntered: onEntered,
                onExit: onExit,
                onExiting: onExiting,
                onExited: onExited,
                mountOnEnter: mountOnEnter,
                unmountOnExit: unmountOnExit,
                children: /*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
                }, rest, {
                    ref: ref,
                    className: _classnamesDefault.default(className, prefix, isActive && 'active')
                }))
            })
        })
    }));
});
TabPane.displayName = 'TabPane';
exports.default = TabPane;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/ui/NoopTransition":"jbSve","@restart/ui/SelectableContext":"497xu","@restart/ui/TabContext":"7fOQu","@restart/ui/TabPanel":"15xl2","./ThemeProvider":"7HSML","./getTabTransitionComponent":"hreeC","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5p1ZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var Table = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, striped = _param.striped, bordered = _param.bordered, borderless = _param.borderless, hover = _param.hover, size = _param.size, variant = _param.variant, responsive = _param.responsive, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "striped",
        "bordered",
        "borderless",
        "hover",
        "size",
        "variant",
        "responsive"
    ]);
    var decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'table');
    var classes = _classnamesDefault.default(className, decoratedBsPrefix, variant && "".concat(decoratedBsPrefix, "-").concat(variant), size && "".concat(decoratedBsPrefix, "-").concat(size), striped && "".concat(decoratedBsPrefix, "-striped"), bordered && "".concat(decoratedBsPrefix, "-bordered"), borderless && "".concat(decoratedBsPrefix, "-borderless"), hover && "".concat(decoratedBsPrefix, "-hover"));
    var table = /*#__PURE__*/ _jsxRuntime.jsx("table", _helpers.objectSpread({
    }, props, {
        className: classes,
        ref: ref
    }));
    if (responsive) {
        var responsiveClass = "".concat(decoratedBsPrefix, "-responsive");
        if (typeof responsive === 'string') responsiveClass = "".concat(responsiveClass, "-").concat(responsive);
        return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: responsiveClass,
            children: table
        }));
    }
    return table;
});
exports.default = Table;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"lUV3c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _tabs = require("@restart/ui/Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _nav = require("./Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _elementChildren = require("./ElementChildren");
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    variant: 'tabs',
    mountOnEnter: false,
    unmountOnExit: false
};
function getDefaultActiveKey(children) {
    var defaultActiveKey;
    _elementChildren.forEach(children, function(child) {
        if (defaultActiveKey == null) defaultActiveKey = child.props.eventKey;
    });
    return defaultActiveKey;
}
function renderTab(child) {
    var _props = child.props, title = _props.title, eventKey = _props.eventKey, disabled = _props.disabled, tabClassName = _props.tabClassName, id = _props.id;
    if (title == null) return null;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navItemDefault.default, {
        as: "li",
        role: "presentation",
        children: /*#__PURE__*/ _jsxRuntime.jsx(_navLinkDefault.default, {
            as: "button",
            type: "button",
            eventKey: eventKey,
            disabled: disabled,
            id: id,
            className: tabClassName,
            children: title
        })
    }));
}
var Tabs = function(props) {
    var _ref = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    }), id = _ref.id, onSelect = _ref.onSelect, transition = _ref.transition, mountOnEnter = _ref.mountOnEnter, unmountOnExit = _ref.unmountOnExit, children = _ref.children, _activeKey = _ref.activeKey, activeKey = _activeKey === void 0 ? getDefaultActiveKey(children) : _activeKey, controlledProps = _helpers.objectWithoutProperties(_ref, [
        "id",
        "onSelect",
        "transition",
        "mountOnEnter",
        "unmountOnExit",
        "children",
        "activeKey"
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_tabsDefault.default, {
        id: id,
        activeKey: activeKey,
        onSelect: onSelect,
        transition: _getTabTransitionComponentDefault.default(transition),
        mountOnEnter: mountOnEnter,
        unmountOnExit: unmountOnExit,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, _helpers.objectSpread({
            }, controlledProps, {
                role: "tablist",
                as: "ul",
                children: _elementChildren.map(children, renderTab)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(_tabContentDefault.default, {
                children: _elementChildren.map(children, function(child) {
                    var childProps = _helpers.objectSpread({
                    }, child.props);
                    delete childProps.title;
                    delete childProps.disabled;
                    delete childProps.tabClassName;
                    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabPaneDefault.default, _helpers.objectSpread({
                    }, childProps)));
                })
            })
        ]
    }));
};
Tabs.defaultProps = defaultProps;
Tabs.displayName = 'Tabs';
exports.default = Tabs;

},{"@swc/helpers":"cawJ1","react":"kEcQC","uncontrollable":"3QjJi","@restart/ui/Tabs":"bNlSp","./Nav":"fQqZq","./NavLink":"3BFyZ","./NavItem":"j5i23","./TabContent":"bBmYU","./TabPane":"YnuWW","./ElementChildren":"3fvsy","./getTabTransitionComponent":"hreeC","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"efggD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _toastFade = require("./ToastFade");
var _toastFadeDefault = parcelHelpers.interopDefault(_toastFade);
var _toastHeader = require("./ToastHeader");
var _toastHeaderDefault = parcelHelpers.interopDefault(_toastHeader);
var _toastBody = require("./ToastBody");
var _toastBodyDefault = parcelHelpers.interopDefault(_toastBody);
var _themeProvider = require("./ThemeProvider");
var _toastContext = require("./ToastContext");
var _toastContextDefault = parcelHelpers.interopDefault(_toastContext);
var _jsxRuntime = require("react/jsx-runtime");
var Toast = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, className = _param.className, tmp = _param.transition, Transition = tmp === void 0 ? _toastFadeDefault.default : tmp, tmp1 = _param.show, show = tmp1 === void 0 ? true : tmp1, tmp2 = _param.animation, animation = tmp2 === void 0 ? true : tmp2, tmp3 = _param.delay, delay = tmp3 === void 0 ? 5000 : tmp3, tmp4 = _param.autohide, autohide = tmp4 === void 0 ? false : tmp4, onClose = _param.onClose, bg = _param.bg, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "className",
        "transition",
        "show",
        "animation",
        "delay",
        "autohide",
        "onClose",
        "bg"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide
    // timer in case these values change.
    var delayRef = _react.useRef(delay);
    var onCloseRef = _react.useRef(onClose);
    _react.useEffect(function() {
        delayRef.current = delay;
        onCloseRef.current = onClose;
    }, [
        delay,
        onClose
    ]);
    var autohideTimeout = _useTimeoutDefault.default();
    var autohideToast = !!(autohide && show);
    var autohideFunc = _react.useCallback(function() {
        if (autohideToast) onCloseRef.current == null || onCloseRef.current();
    }, [
        autohideToast
    ]);
    _react.useEffect(function() {
        // Only reset timer if show or autohide changes.
        autohideTimeout.set(autohideFunc, delayRef.current);
    }, [
        autohideTimeout,
        autohideFunc
    ]);
    var toastContext = _react.useMemo(function() {
        return {
            onClose: onClose
        };
    }, [
        onClose
    ]);
    var hasAnimation = !!(Transition && animation);
    var toast = /*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
    }, props, {
        ref: ref,
        className: _classnamesDefault.default(bsPrefix, className, bg && "bg-".concat(bg), !hasAnimation && (show ? 'show' : 'hide')),
        role: "alert",
        "aria-live": "assertive",
        "aria-atomic": "true"
    }));
    return(/*#__PURE__*/ _jsxRuntime.jsx(_toastContextDefault.default.Provider, {
        value: toastContext,
        children: hasAnimation && Transition ? /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
            in: show,
            unmountOnExit: true,
            children: toast
        }) : toast
    }));
});
Toast.displayName = 'Toast';
exports.default = Object.assign(Toast, {
    Body: _toastBodyDefault.default,
    Header: _toastHeaderDefault.default
});

},{"@swc/helpers":"cawJ1","react":"kEcQC","classnames":"eflpt","@restart/hooks/useTimeout":"2b87S","./ToastFade":"8AmvD","./ToastHeader":"2M6ls","./ToastBody":"jkTQU","./ThemeProvider":"7HSML","./ToastContext":"cmpn6","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"8AmvD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _jsxRuntime = require("react/jsx-runtime");
var _obj;
var fadeStyles = (_obj = {
}, _helpers.defineProperty(_obj, _transition.ENTERING, 'showing'), _helpers.defineProperty(_obj, _transition.EXITING, 'showing show'), _obj);
var ToastFade = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    /*#__PURE__*/ return _jsxRuntime.jsx(_fadeDefault.default, _helpers.objectSpread({
    }, props, {
        ref: ref,
        transitionClasses: fadeStyles
    }));
});
ToastFade.displayName = 'ToastFade';
exports.default = ToastFade;

},{"@swc/helpers":"cawJ1","react":"kEcQC","react-transition-group/Transition":"jRkxX","./Fade":"4nlBx","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"2M6ls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _themeProvider = require("./ThemeProvider");
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _toastContext = require("./ToastContext");
var _toastContextDefault = parcelHelpers.interopDefault(_toastContext);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    closeLabel: 'Close',
    closeButton: true
};
var ToastHeader = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, closeLabel = _param.closeLabel, closeVariant = _param.closeVariant, closeButton = _param.closeButton, className = _param.className, children = _param.children, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "closeLabel",
        "closeVariant",
        "closeButton",
        "className",
        "children"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast-header');
    var context = _react.useContext(_toastContextDefault.default);
    var handleClick = _useEventCallbackDefault.default(function(e) {
        context == null || context.onClose == null || context.onClose(e);
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(bsPrefix, className),
        children: [
            children,
            closeButton && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                "aria-label": closeLabel,
                variant: closeVariant,
                onClick: handleClick,
                "data-dismiss": "toast"
            })
        ]
    })));
});
ToastHeader.displayName = 'ToastHeader';
ToastHeader.defaultProps = defaultProps;
exports.default = ToastHeader;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","@restart/hooks/useEventCallback":"iaqs7","./ThemeProvider":"7HSML","./CloseButton":"l89s9","./ToastContext":"cmpn6","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"cmpn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var ToastContext = /*#__PURE__*/ _react.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onClose: function() {
    }
});
exports.default = ToastContext;

},{"react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jkTQU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('toast-body');

},{"./createWithBsPrefix":"l44ad","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"jShAj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
var positionClasses = {
    'top-start': 'top-0 start-0',
    'top-center': 'top-0 start-50 translate-middle-x',
    'top-end': 'top-0 end-0',
    'middle-start': 'top-50 start-0 translate-middle-y',
    'middle-center': 'top-50 start-50 translate-middle',
    'middle-end': 'top-50 end-0 translate-middle-y',
    'bottom-start': 'bottom-0 start-0',
    'bottom-center': 'bottom-0 start-50 translate-middle-x',
    'bottom-end': 'bottom-0 end-0'
};
var ToastContainer = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, position = _param.position, className = _param.className, tmp = _param.// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as, Component = tmp === void 0 ? 'div' : tmp, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "position",
        "className",
        "as"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast-container');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, _helpers.objectSpread({
        ref: ref
    }, props, {
        className: _classnamesDefault.default(bsPrefix, position && "position-absolute ".concat(positionClasses[position]), className)
    })));
});
ToastContainer.displayName = 'ToastContainer';
exports.default = ToastContainer;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"e1ODv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _jsxRuntime = require("react/jsx-runtime");
var noop = function() {
    return undefined;
};
var ToggleButton = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, name = _param.name, className = _param.className, checked = _param.checked, type = _param.type, onChange = _param.onChange, value = _param.value, disabled = _param.disabled, id = _param.id, inputRef = _param.inputRef, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "name",
        "className",
        "checked",
        "type",
        "onChange",
        "value",
        "disabled",
        "id",
        "inputRef"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-check');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("input", {
                className: bsPrefix,
                name: name,
                type: type,
                value: value,
                ref: inputRef,
                autoComplete: "off",
                checked: !!checked,
                disabled: !!disabled,
                onChange: onChange || noop,
                id: id
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, _helpers.objectSpread({
            }, props, {
                ref: ref,
                className: _classnamesDefault.default(className, disabled && 'disabled'),
                type: undefined,
                as: "label",
                htmlFor: id
            }))
        ]
    }));
});
ToggleButton.displayName = 'ToggleButton';
exports.default = ToggleButton;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./Button":"5vnhO","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"izWRo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _react = require("react");
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _uncontrollable = require("uncontrollable");
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _elementChildren = require("./ElementChildren");
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _toggleButton = require("./ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    type: 'radio',
    vertical: false
};
var ToggleButtonGroup = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _ref = _uncontrollable.useUncontrolled(props, {
        value: 'onChange'
    }), children = _ref.children, type = _ref.type, name = _ref.name, value = _ref.value, onChange = _ref.onChange, controlledProps = _helpers.objectWithoutProperties(_ref, [
        "children",
        "type",
        "name",
        "value",
        "onChange"
    ]);
    var getValues = function() {
        return value == null ? [] : [].concat(value);
    };
    var handleToggle = function(inputVal, event) {
        if (!onChange) return;
        var values = getValues();
        var isActive = values.indexOf(inputVal) !== -1;
        if (type === 'radio') {
            if (!isActive && onChange) onChange(inputVal, event);
            return;
        }
        if (isActive) onChange(values.filter(function(n) {
            return n !== inputVal;
        }), event);
        else onChange(_helpers.toConsumableArray(values).concat([
            inputVal
        ]), event);
    };
    !(type !== 'radio' || !!name) && _invariantDefault.default(false, "A `name` is required to group the toggle buttons when the `type` is set to \"radio\"");
    return(/*#__PURE__*/ _jsxRuntime.jsx(_buttonGroupDefault.default, _helpers.objectSpread({
    }, controlledProps, {
        ref: ref,
        children: _elementChildren.map(children, function(child) {
            var values = getValues();
            var _props = child.props, childVal = _props.value, childOnChange = _props.onChange;
            var handler = function(e) {
                return handleToggle(childVal, e);
            };
            return(/*#__PURE__*/ _react.cloneElement(child, {
                type: type,
                name: child.name || name,
                checked: values.indexOf(childVal) !== -1,
                onChange: _createChainedFunctionDefault.default(childOnChange, handler)
            }));
        })
    })));
});
ToggleButtonGroup.defaultProps = defaultProps;
exports.default = Object.assign(ToggleButtonGroup, {
    Button: _toggleButtonDefault.default
});

},{"@swc/helpers":"cawJ1","react":"kEcQC","invariant":"7jb40","uncontrollable":"3QjJi","./createChainedFunction":"4gYKV","./ElementChildren":"3fvsy","./ButtonGroup":"dqjqa","./ToggleButton":"e1ODv","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"izdrX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpers = require("@swc/helpers");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _helpers1 = require("./helpers");
var _jsxRuntime = require("react/jsx-runtime");
var defaultProps = {
    placement: 'right'
};
var Tooltip = /*#__PURE__*/ _react.forwardRef(function(_param, ref) {
    var bsPrefix = _param.bsPrefix, placement = _param.placement, className = _param.className, style = _param.style, children = _param.children, arrowProps = _param.arrowProps, _ = _param.popper, _2 = _param.show, props = _helpers.objectWithoutProperties(_param, [
        "bsPrefix",
        "placement",
        "className",
        "style",
        "children",
        "arrowProps",
        "popper",
        "show"
    ]);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'tooltip');
    var isRTL = _themeProvider.useIsRTL();
    var ref1 = _helpers.slicedToArray((placement == null ? void 0 : placement.split('-')) || [], 1), primaryPlacement = ref1[0];
    var bsDirection = _helpers1.getOverlayDirection(primaryPlacement, isRTL);
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", _helpers.objectSpread({
        ref: ref,
        style: style,
        role: "tooltip",
        "x-placement": primaryPlacement,
        className: _classnamesDefault.default(className, bsPrefix, "bs-tooltip-".concat(bsDirection))
    }, props, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", _helpers.objectSpread({
                className: "tooltip-arrow"
            }, arrowProps)),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: "".concat(bsPrefix, "-inner"),
                children: children
            })
        ]
    })));
});
Tooltip.defaultProps = defaultProps;
Tooltip.displayName = 'Tooltip';
exports.default = Tooltip;

},{"@swc/helpers":"cawJ1","classnames":"eflpt","react":"kEcQC","./ThemeProvider":"7HSML","./helpers":"eRl0j","react/jsx-runtime":"kNAvd","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"50idF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var JSTREE_TYPES = {
    file: {
        icon: "jstree-icon-size fas fa-file"
    },
    file_text: {
        icon: "jstree-icon-size fas fa-file-alt"
    },
    file_image: {
        icon: "jstree-icon-size fas fa-file-image"
    },
    file_csv: {
        icon: "jstree-icon-size fas fa-file-csv"
    },
    file_archive: {
        icon: "jstree-icon-size fa-file-archive"
    },
    file_audio: {
        icon: "jstree-icon-size fas fa-file-audio"
    },
    file_video: {
        icon: "jstree-icon-size fas fa-file-video"
    },
    file_word: {
        icon: "jstree-icon-size fas fa-file-word"
    },
    file_excel: {
        icon: "jstree-icon-size fas fa-file-excel"
    },
    file_powerpoint: {
        icon: "jstree-icon-size fas fa-file-powerpoint"
    },
    file_pdf: {
        icon: "jstree-icon-size fas fa-file-pdf"
    },
    //
    folder: {
        icon: "jstree-icon-size far fa-folder"
    },
    folder_shared: {
        icon: "jstree-icon-size fas fa-folder"
    }
};
var app_consts = {
    JSTREE_TYPES: JSTREE_TYPES
};
exports.default = app_consts;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ"}],"5Dn2Z":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$9cb5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$9cb5.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _this = undefined;
var PanelCard = function(param) {
    var children = param.children, icon_classname = param.icon_classname, title = param.title;
    return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
        className: "card bg-secondary shadow-sm w-100 m-0 mb-2 py-0",
        style: {
            maxWidth: "100%"
        },
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-header",
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
                    className: "card-title",
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV("i", {
                            className: icon_classname,
                            style: {
                                fontSize: "1.2rem"
                            }
                        }, void 0, false, {
                            fileName: "src_react/shared/PanelCard.js",
                            lineNumber: 11,
                            columnNumber: 11
                        }, _this),
                        "\xa0",
                        title
                    ]
                }, void 0, true, {
                    fileName: "src_react/shared/PanelCard.js",
                    lineNumber: 10,
                    columnNumber: 9
                }, _this)
            }, void 0, false, {
                fileName: "src_react/shared/PanelCard.js",
                lineNumber: 9,
                columnNumber: 7
            }, _this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                className: "card-body py-4",
                children: children
            }, void 0, false, {
                fileName: "src_react/shared/PanelCard.js",
                lineNumber: 15,
                columnNumber: 7
            }, _this)
        ]
    }, void 0, true, {
        fileName: "src_react/shared/PanelCard.js",
        lineNumber: 5,
        columnNumber: 5
    }, _this));
};
_c = PanelCard;
exports.default = PanelCard;
var _c;
$RefreshReg$(_c, "PanelCard");

  $parcel$ReactRefreshHelpers$9cb5.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}],"CaNwG":[function(require,module,exports) {
var global = arguments[3];
(function(a, b) {
    if ("function" == typeof define && define.amd) define([], b);
    else if ("undefined" != typeof exports) b();
    else b(), a.FileSaver = {
    };
})(this, function() {
    "use strict";
    function b1(a, b) {
        return "undefined" == typeof b ? b = {
            autoBom: !1
        } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
            autoBom: !b
        }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob([
            "\uFEFF",
            a
        ], {
            type: a.type
        }) : a;
    }
    function c1(a, b, c) {
        var d = new XMLHttpRequest;
        d.open("GET", a), d.responseType = "blob", d.onload = function() {
            g1(d.response, b, c);
        }, d.onerror = function() {
            console.error("could not download file");
        }, d.send();
    }
    function d1(a) {
        var b = new XMLHttpRequest;
        b.open("HEAD", a, !1);
        try {
            b.send();
        } catch (a2) {
        }
        return 200 <= b.status && 299 >= b.status;
    }
    function e1(a) {
        try {
            a.dispatchEvent(new MouseEvent("click"));
        } catch (c) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
        }
    }
    var f1 = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a1 = f1.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g1 = f1.saveAs || ("object" != typeof window || window !== f1 ? function() {
    } : "download" in HTMLAnchorElement.prototype && !a1 ? function(b, g, h) {
        var i = f1.URL || f1.webkitURL, j = document.createElement("a");
        g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e1(j) : d1(j.href) ? c1(b, g, h) : e1(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function() {
            i.revokeObjectURL(j.href);
        }, 40000), setTimeout(function() {
            e1(j);
        }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function(f, g, h) {
        if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b1(f, h), g);
        else if (d1(f)) c1(f, g, h);
        else {
            var i = document.createElement("a");
            i.href = f, i.target = "_blank", setTimeout(function() {
                e1(i);
            });
        }
    } : function(b, d, e, g) {
        if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c1(b, d, e);
        var h = "application/octet-stream" === b.type, i = /constructor/i.test(f1.HTMLElement) || f1.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a1) && "undefined" != typeof FileReader) {
            var k = new FileReader;
            k.onloadend = function() {
                var a = k.result;
                a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
            }, k.readAsDataURL(b);
        } else {
            var l = f1.URL || f1.webkitURL, m = l.createObjectURL(b);
            g ? g.location = m : location.href = m, g = null, setTimeout(function() {
                l.revokeObjectURL(m);
            }, 40000);
        }
    });
    f1.saveAs = g1.saveAs = g1, "undefined" != typeof module && (module.exports = g1);
});

},{}],"dgRgN":[function() {},{}],"hMKYf":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$efbd = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$efbd.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", function() {
    return ExplorerSharePage;
});
var _helpers = require("@swc/helpers");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _fileExplorer = require("../../shared/FileExplorer");
var _fileExplorerDefault = parcelHelpers.interopDefault(_fileExplorer);
var ExplorerSharePage = /*#__PURE__*/ function(_Component) {
    "use strict";
    _helpers.inherits(ExplorerSharePage, _Component);
    var _super = _helpers.createSuper(ExplorerSharePage);
    function ExplorerSharePage(props) {
        _helpers.classCallCheck(this, ExplorerSharePage);
        var _this;
        _this = _super.call(this, props);
        _this.state = {
        };
        return _this;
    }
    _helpers.createClass(ExplorerSharePage, [
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                    className: "container-fluid",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                        className: "row",
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                            className: "card shadow-sm",
                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                                className: "card-body",
                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileExplorerDefault.default, {
                                    mode: "share"
                                }, void 0, false, {
                                    fileName: "src_react/views/ExplorerSharePage/index.js",
                                    lineNumber: 16,
                                    columnNumber: 15
                                }, this)
                            }, void 0, false, {
                                fileName: "src_react/views/ExplorerSharePage/index.js",
                                lineNumber: 15,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "src_react/views/ExplorerSharePage/index.js",
                            lineNumber: 14,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src_react/views/ExplorerSharePage/index.js",
                        lineNumber: 13,
                        columnNumber: 9
                    }, this)
                }, void 0, false, {
                    fileName: "src_react/views/ExplorerSharePage/index.js",
                    lineNumber: 12,
                    columnNumber: 7
                }, this));
            }
        }
    ]);
    return ExplorerSharePage;
}(_reactDefault.default.Component);

  $parcel$ReactRefreshHelpers$efbd.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"@swc/helpers":"cawJ1","react/jsx-dev-runtime":"kt9Pr","react":"kEcQC","../../shared/FileExplorer":"gV3ea","@parcel/transformer-js/src/esmodule-helpers.js":"B6NKQ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"aTG8Q"}]},["gIM38","O0fvF","bHdI8"], "bHdI8", "parcelRequireea8b")

//# sourceMappingURL=mfsp-bundle.js.map
